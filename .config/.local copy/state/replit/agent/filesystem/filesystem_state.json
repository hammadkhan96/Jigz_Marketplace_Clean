{"file_contents":{"EMAIL_SETUP_GUIDE.md":{"content":"# Email Verification Setup Guide\n\nI've set up a complete email verification system for Jigz. Here's how to configure it:\n\n## What's Been Added\n\n✅ **Database Schema**: Added `emailVerificationTokens` table\n✅ **Email Service**: Complete email service with multiple provider support  \n✅ **Verification System**: Token generation, validation, and cleanup\n✅ **Email Templates**: Professional verification and welcome emails\n\n## Setup Instructions\n\n### 1. Choose Your Email Provider\n\n**Recommended Options:**\n\n**Gmail (Easiest for Development)**\n- Enable 2-factor authentication on your Gmail account\n- Generate an App Password: Google Account > Security > App passwords\n- Use your Gmail address and the app password\n\n**SendGrid (Recommended for Production)**\n- Sign up at sendgrid.com (free tier: 100 emails/day)\n- Create an API key in Settings > API Keys\n- Verify a sender identity\n\n**Mailgun (Alternative for Production)**\n- Sign up at mailgun.com (free tier: 10,000 emails/month)\n- Get SMTP credentials from your domain dashboard\n\n### 2. Set Environment Variables\n\nAdd these to your Replit Secrets or .env file:\n\n```bash\n# Required for any provider\nEMAIL_PROVIDER=gmail          # or 'sendgrid', 'mailgun', 'outlook', 'yahoo'\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASSWORD=your-app-password-or-api-key\nFROM_EMAIL=noreply@yourdomain.com  # Optional, defaults to EMAIL_USER\n\n# For custom SMTP (if EMAIL_PROVIDER=custom)\nSMTP_HOST=smtp.yourdomain.com\nSMTP_PORT=587\nSMTP_SECURE=false\n```\n\n### 3. Provider-Specific Setup\n\n#### Gmail Setup\n1. Go to myaccount.google.com\n2. Security > 2-Step Verification (turn on)\n3. Security > App passwords > Generate password\n4. Use this password (not your regular Gmail password)\n\n```bash\nEMAIL_PROVIDER=gmail\nEMAIL_USER=youremail@gmail.com\nEMAIL_PASSWORD=abcd-efgh-ijkl-mnop  # 16-character app password\nFROM_EMAIL=Jigz <youremail@gmail.com>\n```\n\n#### SendGrid Setup\n1. Sign up at sendgrid.com\n2. Verify your sender identity (email or domain)\n3. Create API key with Mail Send permissions\n\n```bash\nEMAIL_PROVIDER=sendgrid\nEMAIL_USER=apikey\nEMAIL_PASSWORD=SG.your-sendgrid-api-key-here\nFROM_EMAIL=noreply@yourdomain.com\n```\n\n### 4. Update Database\n\nRun this to add the email verification table:\n\n```bash\nnpm run db:push\n```\n\n### 5. Test the Setup\n\nThe email service will:\n- Initialize automatically when the server starts\n- Log \"Email service initialized successfully\" if configured correctly\n- Send verification emails when users register\n- Send welcome emails after verification\n\n### 6. How It Works\n\n**User Registration Flow:**\n1. User signs up → Account created with `isEmailVerified: false`\n2. Verification email sent with unique token (24hr expiry)\n3. User clicks link → Email verified, welcome email sent\n4. User can now fully access the platform\n\n**Security Features:**\n- Tokens expire after 24 hours\n- Tokens are cryptographically secure (32 bytes)\n- Used tokens are automatically deleted\n- Email verification is required for full access\n\n## Email Provider Comparison\n\n| Provider | Free Tier | Setup Difficulty | Reliability |\n|----------|-----------|------------------|-------------|\n| Gmail | 100/day* | Easy | High |\n| SendGrid | 100/day | Medium | Very High |\n| Mailgun | 10,000/month | Medium | Very High |\n| Outlook | Limited | Easy | Medium |\n\n*Gmail free tier is unofficial limit\n\n## Troubleshooting\n\n**\"Email service not configured\"**\n- Check that all required environment variables are set\n- Verify EMAIL_PROVIDER matches a supported provider\n\n**\"Authentication failed\"**\n- Gmail: Make sure you're using an App Password, not your regular password\n- SendGrid: Verify your API key has Mail Send permissions\n- Check that EMAIL_USER and EMAIL_PASSWORD are correct\n\n**Emails not arriving**\n- Check spam folder\n- Verify sender email is properly configured\n- For Gmail, try sending to a different email provider first\n\n## Next Steps\n\nOnce configured, users will need to verify their email before accessing full platform features. The system handles everything automatically - just set the environment variables and you're ready to go!","size_bytes":4086},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Jigz - Local Task Marketplace Platform\n\n## Overview\n\nJigz is a full-stack web application designed as a local task marketplace. It connects individuals needing services with those offering them, focusing on local services such as home improvement, cleaning, delivery, moving, and gardening. The platform enables users to post jobs and apply for them, aiming to facilitate local service exchanges in a Craigslist-like style.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 2025)\n\n- **Email Verification Production Fix**: Completely resolved email verification issues for deployed environments by implementing comprehensive URL handling system. All email templates (verification, welcome, password reset, notifications, subscriptions) now correctly use https://jigz.co for production deployments instead of development server URLs. Added robust environment detection logic with DEPLOYED_URL override support and enhanced debugging capabilities.\n\n- **Service Form Feature Parity**: Added specific area field to service edit and post forms, ensuring complete feature parity with job forms. Service forms now include location and specific area functionality identical to job posting forms.\n- **Service Conversation System**: Implemented comprehensive messaging system for service requests, enabling direct communication between service providers and potential clients. Features coin-based pricing (1 coin per conversation), proper access control, conversation creation via service request, and display of service titles in messaging interface instead of generic job references.\n- **Service Marketplace Rating System**: Implemented comprehensive rating-based ranking for the services marketplace. Services now display with highest-rated providers at the top, showing actual service provider names, avatars, and review-based ratings. Backend enhanced to include provider user data and average ratings calculated from user statistics.\n- **Profile Statistics Enhancement**: Expanded profile page with 7 comprehensive statistics cards organized in 2 rows (Jobs Posted, Services Posted, Applications, Jobs Completed in first row; Services Completed, Skill Endorsements, Average Rating in second row). Converted desktop tabs to unified dropdown menu for consistent navigation across all devices.\n- **Service Image Upload System**: Implemented comprehensive image upload functionality for service pages using Replit Object Storage. Service owners can upload, view, and remove images with cloud storage integration, presigned URL uploads, and proper ACL policies. Features drag-and-drop interface, image gallery display, and secure file management.\n- **Service Reviews Integration**: Added comprehensive reviews section to individual service pages displaying provider reviews with star ratings, detailed quality/communication/timeliness breakdowns for client-to-worker reviews, reviewer information, and comment display. Integrated with existing review system to show authentic user feedback.\n- **Enhanced Coin Storage Benefits**: Implemented comprehensive unlimited coin storage for Professional+ subscription plans (Professional, Expert tiers). Users with these plans never lose coins at month-end and accumulate them indefinitely. Elite plan provides 5000 coins monthly with standard coin cap enforcement. System includes backend logic to add monthly coins to existing balance rather than resetting for unlimited plans, visual indicators on buy-coins page, and proper schema definitions for subscription plan benefits.\n- **Comprehensive Coin Cap Enforcement System**: Implemented backend coin cap enforcement across all user interactions. System enforces subscription-based limits: Free (40), Freelancer (100), Professional (400), Expert (1000), Elite (5000), Admins (unlimited). All coin management functions (addCoinsToUser, setUserCoins, checkAndResetCoins) automatically enforce caps. Added applyCoincapToAllUsers function and admin API route for immediate system-wide enforcement. Successfully tested and verified proper coin reduction for excess balances.\n- **Service Details Pages**: Implemented clickable service cards leading to dedicated service detail pages with comprehensive information including provider stats, pricing details, service descriptions, and reviews. Added proper routing and API endpoints for individual service access.\n- **Searchable Service Categories**: Enhanced service posting with searchable category dropdown supporting 991+ professional categories matching the job marketplace, plus searchable location dropdown with 151k+ global cities for consistent user experience.\n- **Service Admin Approval System**: Implemented comprehensive admin approval system for services matching the job approval workflow. Added Services tab to admin dashboard for reviewing/approving service offerings, with API routes for approval/rejection and proper status tracking.\n- **TypeScript Error Resolution**: Fixed all 25+ TypeScript compilation errors in storage.ts, resolving user interface property mismatches, iterator compatibility issues, and missing properties for successful Google Cloud deployment.\n- **Local Development Enhancement**: Created comprehensive local development setup with automated scripts, environment templates, and improved error messaging for seamless local development experience.\n\n## System Architecture\n\nThe application employs a modern full-stack architecture with clear separation of concerns.\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: TanStack React Query\n- **UI Components**: Radix UI primitives, shadcn/ui\n- **Styling**: Tailwind CSS with CSS variables\n- **Build Tool**: Vite\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API Style**: RESTful API with JSON responses\n- **File Uploads**: Multer middleware\n\n### Data Storage\n- **Database**: PostgreSQL with Drizzle ORM (primarily Neon Database for production)\n- **Schema Management**: Drizzle Kit for migrations\n- **Development Storage**: In-memory storage for rapid prototyping\n\n### Core Features\n- **User Management**: Comprehensive user and admin roles, including user management (ban/unban) and role promotion/demotion.\n- **Job Workflow**: Job posting, application, and approval system. All new jobs require admin approval. Job editing resets status to pending for re-approval.\n- **Service Workflow**: Service posting and approval system mirroring job workflow. All new services require admin approval. Service editing resets status to pending for re-approval, ensuring all changes are reviewed for quality and compliance.\n- **Messaging System**: Real-time messaging between job posters and applicants with conversation access control and unread message tracking.\n- **Coin System**: A subscription-aware coin economy for job posting and applications. Users without subscriptions receive 20 free coins every 30 days, while users with active membership plans receive their plan's coin allocation (40-500 coins monthly). Monthly coin resets and insufficient funds warnings included. Service posting costs 15 coins.\n- **Profile System**: Detailed user profiles displaying statistics, completed jobs, and reviews. Secure profile image uploads and editing functionality.\n- **Review System**: Comprehensive rating system allowing job posters to rate freelancers, accessible from multiple points.\n- **Notification System**: Automatic notifications for job applications and reviews, with unread count badges and management interface.\n- **Location Integration**: Comprehensive global location database (150k+ locations) for job searching and posting, offering wide coverage and optimized search.\n- **Application Management**: Prevention of duplicate applications, tracking of application status, and job completion tracking.\n- **Job Features**: Job categories (250+), searchable category filters, budget type selection (fixed/hourly), budget range filters, and comprehensive job reporting system with automatic job deletion when admin accepts/reviews reports.\n- **Authentication**: Case-insensitive email authentication.\n- **Email Verification**: Complete SendGrid integration with professional verification emails, resend functionality, user-friendly verification flow, database-persistent verification tokens with 24-hour expiration, verified badges on user profiles, and one-click verification button for unverified users.\n- **Password Reset**: Secure token-based password reset system with 1-hour expiration, email notifications, and prevention for Google OAuth users.\n- **Subscription Email Notifications**: Automated email notifications for subscription events including new subscriptions, coin purchases, and plan changes with professional templates and real-time delivery.\n- **Brand Integration**: Official Jigz logo integrated across the entire platform including header navigation, authentication pages (login, signup, forgot password), email verification screens, and all email templates with consistent branding.\n- **Job Expiry System**: Comprehensive 30-day job expiry system with automatic closure and paid extension capability. Jobs automatically expire after 30 days, job owners can extend for 2 coins for another 30 days. Expiry information is private to job owners only.\n- **Application Acceptance Email Notifications**: Automated email notifications when job applications are accepted, featuring professional templates with next steps, dashboard links, and Jigz branding.\n- **Google Cloud Deployment Ready**: Complete deployment configuration for Google Cloud Run including Dockerfile, Cloud Build configuration, health checks, environment setup, and automated deployment scripts.\n- **Production Deployment Fixes**: Resolved critical deployment blockers including duplicate method conflicts in IStorage interface (deleteJob and closeExpiredJobs duplicates removed), proper port binding for Cloud Run, deprecated package updates, and optimized Docker build process. Build now compiles successfully without esbuild duplicate member warnings.\n- **Local Development Setup**: Comprehensive local development configuration with automated setup scripts, detailed documentation, environment templates, and improved error messages for database connection issues. Includes setup-local.sh and start-local.sh scripts for streamlined local development.\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Framework**: React\n- **Component Library**: Radix UI, shadcn/ui\n- **Form Handling**: React Hook Form, Zod\n- **Data Fetching**: TanStack React Query\n- **Styling**: Tailwind CSS, class-variance-authority\n- **Icons**: Lucide React\n\n### Backend Dependencies\n- **Web Framework**: Express.js\n- **Database**: Drizzle ORM, Neon Database\n- **File Uploads**: Multer\n- **Validation**: Zod\n- **Execution**: tsx\n\n### Development Tools\n- **Build System**: Vite\n- **Type Checking**: TypeScript\n- **Database Management**: Drizzle Kit\n- **Replit Integration**: Cartographer plugin\n\n### Deployment Configuration\n- **Containerization**: Docker with optimized Node.js Alpine image\n- **Cloud Platform**: Google Cloud Run with auto-scaling configuration\n- **Build Automation**: Cloud Build with automated CI/CD pipeline\n- **Health Monitoring**: Built-in health check endpoints and monitoring\n- **Environment Management**: Comprehensive environment variable templates and deployment scripts","size_bytes":11466},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test_message_scenario.js":{"content":"import fs from 'fs';\n\nasync function testUnreadMessageScenario() {\n  console.log('Testing unread message system with two users...');\n\n  try {\n    // Step 1: Login as john_doe and send a message\n    console.log('\\n1. Logging in as john_doe...');\n    const loginJohn = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email: 'john@example.com', password: 'password123' })\n    });\n\n    if (!loginJohn.ok) {\n      console.log('Failed to login as john_doe:', await loginJohn.text());\n      return;\n    }\n\n    const johnCookies = loginJohn.headers.get('set-cookie');\n    console.log('John logged in successfully');\n\n    // Send message as john_doe\n    console.log('\\n2. John sending message...');\n    const sendMessage = await fetch('http://localhost:5000/api/conversations/34cee40b-98bb-4525-aa26-1bef5c19df69/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': johnCookies\n      },\n      body: JSON.stringify({ content: 'Message from John to test unread system' })\n    });\n\n    if (sendMessage.ok) {\n      const message = await sendMessage.json();\n      console.log('Message sent:', message.id, 'isRead:', message.isRead);\n    } else {\n      console.log('Failed to send message:', await sendMessage.text());\n    }\n\n    // Step 2: Login as admin and check unread messages\n    console.log('\\n3. Logging in as admin...');\n    const loginAdmin = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email: 'admin@jigz.co', password: 'admin123' })\n    });\n\n    if (!loginAdmin.ok) {\n      console.log('Failed to login as admin:', await loginAdmin.text());\n      return;\n    }\n\n    const adminCookies = loginAdmin.headers.get('set-cookie');\n    console.log('Admin logged in successfully');\n\n    // Check unread count for admin\n    console.log('\\n4. Checking admin unread messages...');\n    const unreadResponse = await fetch('http://localhost:5000/api/user/unread-messages', {\n      headers: { 'Cookie': adminCookies }\n    });\n\n    if (unreadResponse.ok) {\n      const unreadData = await unreadResponse.json();\n      console.log('Admin unread count:', unreadData.count);\n    } else {\n      console.log('Failed to get unread count:', await unreadResponse.text());\n    }\n\n    // Check conversation details for admin\n    console.log('\\n5. Checking admin conversations...');\n    const conversationsResponse = await fetch('http://localhost:5000/api/conversations', {\n      headers: { 'Cookie': adminCookies }\n    });\n\n    if (conversationsResponse.ok) {\n      const conversations = await conversationsResponse.json();\n      console.log('Admin conversation unread count:', conversations[0]?.unreadCount);\n      console.log('Conversation participants:', {\n        jobPoster: conversations[0]?.jobPosterId,\n        applicant: conversations[0]?.applicantId\n      });\n    }\n\n  } catch (error) {\n    console.error('Test error:', error.message);\n  }\n}\n\ntestUnreadMessageScenario();","size_bytes":3139},"test_unread_messages.js":{"content":"import fs from 'fs';\n\n// Test unread message system with proper logging\nasync function testUnreadMessages() {\n  console.log('Testing unread message system...');\n\n  try {\n    // Create message from admin user\n    console.log('Creating message...');\n    const createMessageResponse = await fetch('http://localhost:5000/api/conversations/34cee40b-98bb-4525-aa26-1bef5c19df69/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cookie': fs.readFileSync('cookies.txt', 'utf-8')\n      },\n      body: JSON.stringify({\n        content: 'Test message to verify unread system works'\n      })\n    });\n\n    if (createMessageResponse.ok) {\n      const message = await createMessageResponse.json();\n      console.log('Message created:', message.id);\n      console.log('Message isRead:', message.isRead);\n    } else {\n      console.log('Failed to create message:', await createMessageResponse.text());\n    }\n\n    // Check unread count\n    console.log('Checking unread count...');\n    const unreadResponse = await fetch('http://localhost:5000/api/user/unread-messages', {\n      headers: {\n        'Cookie': fs.readFileSync('cookies.txt', 'utf-8')\n      }\n    });\n\n    if (unreadResponse.ok) {\n      const unreadData = await unreadResponse.json();\n      console.log('Unread count:', unreadData.count);\n    } else {\n      console.log('Failed to get unread count:', await unreadResponse.text());\n    }\n\n    // Check conversation details\n    console.log('Checking conversation details...');\n    const conversationResponse = await fetch('http://localhost:5000/api/conversations', {\n      headers: {\n        'Cookie': fs.readFileSync('cookies.txt', 'utf-8')\n      }\n    });\n\n    if (conversationResponse.ok) {\n      const conversations = await conversationResponse.json();\n      console.log('Conversation unread count:', conversations[0]?.unreadCount);\n      console.log('User ID in conversation:', conversations[0]?.jobPosterId, conversations[0]?.applicantId);\n    }\n\n  } catch (error) {\n    console.error('Test error:', error);\n  }\n}\n\ntestUnreadMessages();","size_bytes":2089},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/create-optimized-cities.js":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the original processed cities\nconst citiesPath = path.join(__dirname, '../shared/cities.ts');\nconst citiesContent = fs.readFileSync(citiesPath, 'utf8');\n\n// Extract all cities from the large file\nconst match = citiesContent.match(/export const popularCities = \\[([\\s\\S]*?)\\];/);\nif (!match) {\n  console.error('Could not find cities array');\n  process.exit(1);\n}\n\nconst citiesString = match[1];\nconst allCities = citiesString\n  .split('\\n')\n  .map(line => line.trim())\n  .filter(line => line.startsWith('\"') && line.includes(','))\n  .map(line => line.replace(/^\"|\",$|\",$/g, ''))\n  .filter(city => city !== 'All Cities');\n\n// Define top cities for immediate loading (major cities worldwide)\nconst topCities = [\n  // Major US Cities\n  \"New York, United States\", \"Los Angeles, United States\", \"Chicago, United States\", \n  \"Houston, United States\", \"Phoenix, United States\", \"Philadelphia, United States\",\n  \"San Antonio, United States\", \"San Diego, United States\", \"Dallas, United States\",\n  \"San Jose, United States\", \"Austin, United States\", \"Jacksonville, United States\",\n  \"Fort Worth, United States\", \"Columbus, United States\", \"Charlotte, United States\",\n  \"San Francisco, United States\", \"Indianapolis, United States\", \"Seattle, United States\",\n  \"Denver, United States\", \"Washington, United States\", \"Boston, United States\",\n  \"El Paso, United States\", \"Nashville, United States\", \"Detroit, United States\",\n  \"Oklahoma City, United States\", \"Portland, United States\", \"Las Vegas, United States\",\n  \"Memphis, United States\", \"Louisville, United States\", \"Baltimore, United States\",\n  \"Milwaukee, United States\", \"Albuquerque, United States\", \"Tucson, United States\",\n  \"Fresno, United States\", \"Mesa, United States\", \"Sacramento, United States\",\n  \"Atlanta, United States\", \"Kansas City, United States\", \"Colorado Springs, United States\",\n  \"Miami, United States\", \"Raleigh, United States\", \"Omaha, United States\",\n  \"Long Beach, United States\", \"Virginia Beach, United States\", \"Oakland, United States\",\n  \"Minneapolis, United States\", \"Tulsa, United States\", \"Tampa, United States\",\n  \"Arlington, United States\", \"Honolulu, United States\",\n  \n  // Major Canadian Cities\n  \"Toronto, Canada\", \"Montreal, Canada\", \"Vancouver, Canada\", \"Calgary, Canada\",\n  \"Edmonton, Canada\", \"Ottawa, Canada\", \"Winnipeg, Canada\", \"Quebec City, Canada\",\n  \"Hamilton, Canada\", \"Kitchener, Canada\", \"London, Canada\", \"Victoria, Canada\",\n  \"Halifax, Canada\", \"Oshawa, Canada\", \"Windsor, Canada\", \"Saskatoon, Canada\",\n  \n  // Major European Cities\n  \"London, United Kingdom\", \"Birmingham, United Kingdom\", \"Manchester, United Kingdom\",\n  \"Glasgow, United Kingdom\", \"Liverpool, United Kingdom\", \"Leeds, United Kingdom\",\n  \"Sheffield, United Kingdom\", \"Edinburgh, United Kingdom\", \"Bristol, United Kingdom\",\n  \"Cardiff, United Kingdom\", \"Belfast, United Kingdom\", \"Newcastle, United Kingdom\",\n  \"Paris, France\", \"Marseille, France\", \"Lyon, France\", \"Toulouse, France\",\n  \"Nice, France\", \"Nantes, France\", \"Montpellier, France\", \"Strasbourg, France\",\n  \"Bordeaux, France\", \"Lille, France\", \"Rennes, France\", \"Reims, France\",\n  \"Berlin, Germany\", \"Hamburg, Germany\", \"Munich, Germany\", \"Cologne, Germany\",\n  \"Frankfurt, Germany\", \"Stuttgart, Germany\", \"Düsseldorf, Germany\", \"Dortmund, Germany\",\n  \"Essen, Germany\", \"Leipzig, Germany\", \"Bremen, Germany\", \"Dresden, Germany\",\n  \"Madrid, Spain\", \"Barcelona, Spain\", \"Valencia, Spain\", \"Seville, Spain\",\n  \"Zaragoza, Spain\", \"Málaga, Spain\", \"Murcia, Spain\", \"Palma, Spain\",\n  \"Las Palmas, Spain\", \"Bilbao, Spain\", \"Alicante, Spain\", \"Córdoba, Spain\",\n  \"Rome, Italy\", \"Milan, Italy\", \"Naples, Italy\", \"Turin, Italy\",\n  \"Palermo, Italy\", \"Genoa, Italy\", \"Bologna, Italy\", \"Florence, Italy\",\n  \"Bari, Italy\", \"Catania, Italy\", \"Venice, Italy\", \"Verona, Italy\",\n  \"Amsterdam, Netherlands\", \"Rotterdam, Netherlands\", \"The Hague, Netherlands\",\n  \"Utrecht, Netherlands\", \"Eindhoven, Netherlands\", \"Tilburg, Netherlands\",\n  \"Groningen, Netherlands\", \"Almere, Netherlands\", \"Breda, Netherlands\",\n  \n  // Major Asian Cities\n  \"Tokyo, Japan\", \"Yokohama, Japan\", \"Osaka, Japan\", \"Nagoya, Japan\",\n  \"Sapporo, Japan\", \"Fukuoka, Japan\", \"Kobe, Japan\", \"Kawasaki, Japan\",\n  \"Kyoto, Japan\", \"Saitama, Japan\", \"Hiroshima, Japan\", \"Sendai, Japan\",\n  \"Beijing, China\", \"Shanghai, China\", \"Guangzhou, China\", \"Shenzhen, China\",\n  \"Tianjin, China\", \"Wuhan, China\", \"Dongguan, China\", \"Chengdu, China\",\n  \"Nanjing, China\", \"Chongqing, China\", \"Xi'an, China\", \"Shenyang, China\",\n  \"Hangzhou, China\", \"Jinan, China\", \"Harbin, China\", \"Kunming, China\",\n  \"Seoul, Korea, South\", \"Busan, Korea, South\", \"Incheon, Korea, South\",\n  \"Daegu, Korea, South\", \"Daejeon, Korea, South\", \"Gwangju, Korea, South\",\n  \"Mumbai, India\", \"Delhi, India\", \"Bangalore, India\", \"Hyderabad, India\",\n  \"Ahmedabad, India\", \"Chennai, India\", \"Kolkata, India\", \"Pune, India\",\n  \"Jaipur, India\", \"Surat, India\", \"Lucknow, India\", \"Kanpur, India\",\n  \"Singapore, Singapore\", \"Hong Kong, Hong Kong\", \"Taipei, Taiwan\",\n  \"Bangkok, Thailand\", \"Jakarta, Indonesia\", \"Manila, Philippines\",\n  \"Ho Chi Minh City, Vietnam\", \"Kuala Lumpur, Malaysia\", \"Hanoi, Vietnam\",\n  \n  // Major Middle Eastern Cities\n  \"Dubai, United Arab Emirates\", \"Abu Dhabi, United Arab Emirates\",\n  \"Riyadh, Saudi Arabia\", \"Jeddah, Saudi Arabia\", \"Tehran, Iran\",\n  \"Istanbul, Turkey\", \"Ankara, Turkey\", \"Tel Aviv, Israel\",\n  \"Kuwait City, Kuwait\", \"Doha, Qatar\", \"Baghdad, Iraq\",\n  \"Damascus, Syria\", \"Amman, Jordan\", \"Beirut, Lebanon\",\n  \n  // Major Australian Cities\n  \"Sydney, Australia\", \"Melbourne, Australia\", \"Brisbane, Australia\",\n  \"Perth, Australia\", \"Adelaide, Australia\", \"Gold Coast, Australia\",\n  \"Newcastle, Australia\", \"Canberra, Australia\", \"Sunshine Coast, Australia\",\n  \"Wollongong, Australia\", \"Geelong, Australia\", \"Hobart, Australia\",\n  \"Townsville, Australia\", \"Cairns, Australia\", \"Darwin, Australia\",\n  \"Auckland, New Zealand\", \"Wellington, New Zealand\", \"Christchurch, New Zealand\",\n  \"Hamilton, New Zealand\", \"Tauranga, New Zealand\", \"Dunedin, New Zealand\",\n  \n  // Major South American Cities\n  \"São Paulo, Brazil\", \"Rio de Janeiro, Brazil\", \"Salvador, Brazil\",\n  \"Brasília, Brazil\", \"Fortaleza, Brazil\", \"Belo Horizonte, Brazil\",\n  \"Manaus, Brazil\", \"Curitiba, Brazil\", \"Recife, Brazil\", \"Porto Alegre, Brazil\",\n  \"Buenos Aires, Argentina\", \"Córdoba, Argentina\", \"Rosario, Argentina\",\n  \"Mendoza, Argentina\", \"La Plata, Argentina\", \"San Miguel de Tucumán, Argentina\",\n  \"Lima, Peru\", \"Santiago, Chile\", \"Bogotá, Colombia\", \"Medellín, Colombia\",\n  \"Cali, Colombia\", \"Barranquilla, Colombia\", \"Caracas, Venezuela\",\n  \"Montevideo, Uruguay\", \"Asunción, Paraguay\", \"La Paz, Bolivia\",\n  \"Santa Cruz de la Sierra, Bolivia\", \"Quito, Ecuador\", \"Guayaquil, Ecuador\",\n  \n  // Major African Cities\n  \"Lagos, Nigeria\", \"Cairo, Egypt\", \"Kinshasa, Congo (Kinshasa)\",\n  \"Luanda, Angola\", \"Nairobi, Kenya\", \"Casablanca, Morocco\",\n  \"Alexandria, Egypt\", \"Abidjan, Côte d'Ivoire\", \"Kano, Nigeria\",\n  \"Ibadan, Nigeria\", \"Dakar, Senegal\", \"Addis Ababa, Ethiopia\",\n  \"Cape Town, South Africa\", \"Durban, South Africa\", \"Johannesburg, South Africa\",\n  \"Pretoria, South Africa\", \"Port Elizabeth, South Africa\", \"Bloemfontein, South Africa\"\n];\n\n// Filter and validate top cities exist in our data\nconst validTopCities = topCities.filter(city => \n  allCities.some(c => c.toLowerCase() === city.toLowerCase())\n);\n\n// Create optimized TypeScript content\nconst optimizedContent = `// Optimized world cities for Jigz marketplace\n// Fast loading with top ${validTopCities.length} cities + search functionality\n\nexport const topCities = [\n  \"All Cities\",\n${validTopCities.map(city => `  \"${city}\"`).join(',\\n')}\n];\n\nexport const citiesWithoutAll = topCities.filter(city => city !== \"All Cities\");\n\n// All ${allCities.length} cities for search functionality (lazy loaded)\nconst allWorldCities = [\n${allCities.map(city => `  \"${city}\"`).join(',\\n')}\n];\n\n// Efficient search function that filters through all cities\nexport const searchCities = (searchTerm: string, limit: number = 50): string[] => {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    return topCities.slice(0, limit);\n  }\n  \n  const term = searchTerm.toLowerCase().trim();\n  const results = [\"All Cities\"];\n  \n  // First add matching top cities\n  const topMatches = topCities\n    .filter(city => city !== \"All Cities\" && city.toLowerCase().includes(term))\n    .slice(0, 20);\n  \n  results.push(...topMatches);\n  \n  // Then add other matching cities if we need more results\n  if (results.length < limit) {\n    const otherMatches = allWorldCities\n      .filter(city => \n        city.toLowerCase().includes(term) && \n        !topMatches.some(top => top.toLowerCase() === city.toLowerCase())\n      )\n      .slice(0, limit - results.length);\n    \n    results.push(...otherMatches);\n  }\n  \n  return results.slice(0, limit);\n};\n\n// Legacy export for compatibility\nexport const worldCities = topCities;\nexport const filterCities = searchCities;\n`;\n\n// Write the optimized file\nfs.writeFileSync(citiesPath, optimizedContent);\n\nconsole.log(`✅ Optimized cities system created!`);\nconsole.log(`📊 Top cities for fast loading: ${validTopCities.length}`);\nconsole.log(`🔍 Total searchable cities: ${allCities.length}`);\nconsole.log(`⚡ Performance: Instant loading + efficient search`);","size_bytes":9480},"scripts/fix-cities-simple.js":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the JIGZ CSV file\nconst csvPath = path.join(__dirname, '..', 'attached_assets', 'JIGZ_area_databse_1753883521393.csv');\nconst csvContent = fs.readFileSync(csvPath, 'utf8');\n\n// Parse CSV with better error handling\nconst lines = csvContent.trim().split('\\n');\nconst cities = [];\n\nconsole.log(`Processing ${lines.length - 1} locations...`);\n\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i];\n  if (!line.trim()) continue;\n  \n  const commaIndex = line.lastIndexOf(',');\n  if (commaIndex === -1) continue;\n  \n  let cityName = line.substring(0, commaIndex).trim();\n  let countryName = line.substring(commaIndex + 1).trim();\n  \n  // Skip problematic entries\n  if (!cityName || !countryName || \n      cityName.includes('\"') || countryName.includes('\"') ||\n      cityName.includes('\\\\') || countryName.includes('\\\\') ||\n      cityName.includes('\\n') || countryName.includes('\\n')) {\n    continue;\n  }\n  \n  // Clean special characters\n  cityName = cityName.replace(/'/g, \"'\").replace(/\"/g, \"\");\n  countryName = countryName.replace(/'/g, \"'\").replace(/\"/g, \"\");\n  \n  cities.push({\n    city: cityName,\n    country: countryName,\n    formatted: `${cityName}, ${countryName}`\n  });\n}\n\nconsole.log(`Successfully parsed ${cities.length} valid cities`);\n\n// Group by country\nconst citiesByCountry = {};\ncities.forEach(city => {\n  if (!citiesByCountry[city.country]) {\n    citiesByCountry[city.country] = [];\n  }\n  citiesByCountry[city.country].push(city);\n});\n\n// Create priority list (smaller for stability)\nconst priorityCountries = {\n  'United States': 80,\n  'Canada': 30,\n  'United Kingdom': 25,\n  'Germany': 20,\n  'France': 20,\n  'Spain': 15,\n  'Italy': 15,\n  'Netherlands': 12,\n  'Australia': 20,\n  'New Zealand': 10,\n  'Japan': 15,\n  'China': 25,\n  'India': 20,\n  'Brazil': 15,\n  'Mexico': 12\n};\n\nlet popularCities = ['All Locations'];\n\nObject.entries(priorityCountries).forEach(([country, limit]) => {\n  if (citiesByCountry[country]) {\n    citiesByCountry[country].slice(0, limit).forEach(city => {\n      popularCities.push(city.formatted);\n    });\n  }\n});\n\n// Remove duplicates and sort\nconst allLocations = popularCities.shift();\npopularCities = [...new Set(popularCities)];\npopularCities.sort();\npopularCities.unshift(allLocations);\n\nconsole.log(`Created ${popularCities.length} popular cities`);\n\n// Create search cities (all locations for comprehensive coverage)\nconst searchCities = cities.map(city => city.formatted);\n\n// Generate clean TypeScript file\nconst cleanCitiesContent = `// JIGZ World Cities Database - Optimized Version\n// ${cities.length} locations from ${Object.keys(citiesByCountry).length} countries\n\nexport const topCities = [\n${popularCities.map(city => `  \"${city.replace(/\"/g, '\\\\\"')}\"`).join(',\\n')}\n];\n\nexport const citiesWithoutAll = topCities.filter(city => city !== \"All Locations\");\n\nexport const allWorldCities = [\n${searchCities.map(city => `  \"${city.replace(/\"/g, '\\\\\"')}\"`).join(',\\n')}\n];\n\nexport const searchCities = (searchTerm: string, limit: number = 50): string[] => {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    return topCities.slice(0, limit);\n  }\n  \n  const term = searchTerm.toLowerCase().trim();\n  const results: string[] = [];\n  \n  const exactMatches = topCities.filter(city => \n    city.toLowerCase().includes(term)\n  );\n  results.push(...exactMatches);\n  \n  if (results.length < limit) {\n    const additionalMatches = allWorldCities.filter(city => \n      city.toLowerCase().includes(term) && \n      !results.some(result => result.toLowerCase() === city.toLowerCase())\n    );\n    results.push(...additionalMatches.slice(0, limit - results.length));\n  }\n  \n  return results.slice(0, limit);\n};\n\nexport const countryStats = {\n  totalCountries: ${Object.keys(citiesByCountry).length},\n  totalCities: ${cities.length},\n  popularCities: ${popularCities.length - 1},\n  searchableCities: ${searchCities.length}\n};\n\nexport const worldCities = topCities;\nexport const filterCities = searchCities;\n`;\n\n// Write the file\nconst outputPath = path.join(__dirname, '..', 'shared', 'cities.ts');\nfs.writeFileSync(outputPath, cleanCitiesContent);\n\nconsole.log('✅ Successfully created clean cities file');\nconsole.log(`📊 Final stats: ${popularCities.length} popular, ${searchCities.length} comprehensive searchable locations`);","size_bytes":4473},"scripts/process-cities.js":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the CSV file\nconst csvPath = path.join(__dirname, '../attached_assets/worldcities_1753519868277.csv');\nconst csvContent = fs.readFileSync(csvPath, 'utf8');\n\n// Parse CSV and convert to city array\nconst lines = csvContent.split('\\n');\nconst cities = [];\n\n// Skip header and process each line\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i].trim();\n  if (!line) continue;\n  \n  // Handle CSV parsing with potential commas in quotes\n  const match = line.match(/^\"?([^\"]*?)\"?,\\s*\"?([^\"]*?)\"?$/);\n  if (match) {\n    const city = match[1].trim();\n    const country = match[2].trim();\n    \n    if (city && country) {\n      cities.push(`${city}, ${country}`);\n    }\n  }\n}\n\n// Sort cities alphabetically\ncities.sort();\n\n// Add \"All Cities\" option at the beginning\ncities.unshift(\"All Cities\");\n\n// Generate the TypeScript file content\nconst tsContent = `// Comprehensive world cities list for Jigz marketplace\n// Auto-generated from world cities database with ${cities.length - 1} cities\nexport const worldCities = ${JSON.stringify(cities, null, 2)};\n\nexport const citiesWithoutAll = worldCities.filter(city => city !== \"All Cities\");\n\n// Helper function to filter cities based on search term\nexport const filterCities = (searchTerm: string): string[] => {\n  if (!searchTerm) return worldCities;\n  \n  const term = searchTerm.toLowerCase();\n  return worldCities.filter(city => \n    city.toLowerCase().includes(term)\n  );\n};\n`;\n\n// Write the new cities file\nconst outputPath = path.join(__dirname, '../shared/cities.ts');\nfs.writeFileSync(outputPath, tsContent);\n\nconsole.log(`✅ Successfully processed ${cities.length - 1} cities from the world cities database`);\nconsole.log(`📁 Updated: shared/cities.ts`);\nconsole.log(`📊 Total cities available: ${cities.length - 1}`);\nconsole.log(`🌍 Coverage: Global cities from all continents`);","size_bytes":2036},"scripts/update-cities-from-csv.js":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the CSV file\nconst csvPath = path.join(__dirname, '..', 'attached_assets', 'worldcities_1753519868277.csv');\nconst csvContent = fs.readFileSync(csvPath, 'utf8');\n\n// Parse CSV data\nconst lines = csvContent.trim().split('\\n');\nconst headers = lines[0].split(',');\nconst cities = [];\n\nfor (let i = 1; i < lines.length; i++) {\n  const values = lines[i].split(',');\n  let city = values[0];\n  let country = values[1];\n  \n  // Clean up quoted values\n  city = city.replace(/\"/g, '');\n  country = country.replace(/\"/g, '');\n  \n  if (city && country) {\n    cities.push({\n      city: city.trim(),\n      country: country.trim(),\n      formatted: `${city.trim()}, ${country.trim()}`\n    });\n  }\n}\n\nconsole.log(`Parsed ${cities.length} cities from CSV`);\n\n// Group cities by country\nconst citiesByCountry = {};\ncities.forEach(city => {\n  if (!citiesByCountry[city.country]) {\n    citiesByCountry[city.country] = [];\n  }\n  citiesByCountry[city.country].push(city);\n});\n\n// Define priority countries and how many cities to take from each\nconst priorityCountries = {\n  'United States': 50,\n  'Canada': 15,\n  'United Kingdom': 15,\n  'Germany': 12,\n  'France': 12,\n  'Spain': 10,\n  'Italy': 10,\n  'Netherlands': 8,\n  'Australia': 12,\n  'New Zealand': 6,\n  'Japan': 12,\n  'China': 20,\n  'India': 15,\n  'Brazil': 10,\n  'Mexico': 8,\n  'Argentina': 6,\n  'South Korea': 6,\n  'Korea, South': 6,\n  'Thailand': 5,\n  'Indonesia': 5,\n  'Malaysia': 4,\n  'Singapore': 1,\n  'Philippines': 5,\n  'Vietnam': 4,\n  'South Africa': 6,\n  'Nigeria': 4,\n  'Egypt': 3,\n  'Turkey': 4,\n  'Russia': 8,\n  'Poland': 6,\n  'Sweden': 4,\n  'Norway': 3,\n  'Denmark': 3,\n  'Finland': 3,\n  'Belgium': 4,\n  'Switzerland': 4,\n  'Austria': 3,\n  'Portugal': 4,\n  'Greece': 3,\n  'Ireland': 3,\n  'Israel': 3,\n  'UAE': 2,\n  'United Arab Emirates': 2,\n  'Saudi Arabia': 3,\n  'Chile': 4,\n  'Colombia': 4,\n  'Peru': 3,\n  'Venezuela': 2,\n  'Ecuador': 2,\n  'Uruguay': 1,\n  'Paraguay': 1,\n  'Bolivia': 2\n};\n\n// Create the final cities list\nlet finalCities = ['All Locations'];\n\n// Add cities from priority countries\nObject.entries(priorityCountries).forEach(([country, limit]) => {\n  if (citiesByCountry[country]) {\n    const countryCities = citiesByCountry[country]\n      .slice(0, limit)\n      .map(city => city.formatted);\n    finalCities.push(...countryCities);\n  }\n});\n\n// Add some additional major cities from other countries\nconst otherMajorCities = cities\n  .filter(city => !priorityCountries[city.country])\n  .slice(0, 50)\n  .map(city => city.formatted);\n\nfinalCities.push(...otherMajorCities);\n\n// Remove duplicates and sort\nfinalCities = [...new Set(finalCities)];\n\n// Keep \"All Locations\" at the top, sort the rest\nconst allLocations = finalCities.shift();\nfinalCities.sort();\nfinalCities.unshift(allLocations);\n\nconsole.log(`Created final list with ${finalCities.length} cities`);\n\n// Generate the new cities.ts file\nconst citiesFileContent = `// World cities for Jigz marketplace\n// Updated from worldcities CSV data with ${cities.length} cities\n// Optimized selection of popular cities from major countries\n\nexport const topCities = [\n${finalCities.map(city => `  \"${city}\"`).join(',\\n')}\n];\n\nexport const citiesWithoutAll = topCities.filter(city => city !== \"All Locations\");\n\n// All cities from CSV for comprehensive search\nexport const allWorldCities = [\n${cities.slice(0, 1000).map(city => `  \"${city.formatted}\"`).join(',\\n')}\n];\n\n// Search function for cities with comprehensive coverage\nexport const searchCities = (searchTerm: string, limit: number = 50): string[] => {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    return topCities.slice(0, limit);\n  }\n  \n  const term = searchTerm.toLowerCase().trim();\n  \n  // Search through all cities for better results\n  const results = [];\n  \n  // First, add exact matches from popular cities\n  const exactMatches = topCities.filter(city => \n    city.toLowerCase().includes(term)\n  );\n  results.push(...exactMatches);\n  \n  // Then add matches from all world cities\n  if (results.length < limit) {\n    const additionalMatches = allWorldCities.filter(city => \n      city.toLowerCase().includes(term) && !results.includes(city)\n    );\n    results.push(...additionalMatches.slice(0, limit - results.length));\n  }\n  \n  return results.slice(0, limit);\n};\n\n// Legacy compatibility\nexport const worldCities = topCities;\nexport const filterCities = searchCities;\n`;\n\n// Write the updated cities file\nconst outputPath = path.join(__dirname, '..', 'shared', 'cities.ts');\nfs.writeFileSync(outputPath, citiesFileContent);\n\nconsole.log('Successfully updated shared/cities.ts');\nconsole.log(`Top cities: ${finalCities.length}`);\nconsole.log(`Total cities available for search: ${Math.min(1000, cities.length)}`);","size_bytes":4894},"scripts/update-cities-jigz.js":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Read the JIGZ CSV file\nconst csvPath = path.join(__dirname, '..', 'attached_assets', 'JIGZ_area_databse_1753883521393.csv');\nconst csvContent = fs.readFileSync(csvPath, 'utf8');\n\n// Parse CSV data\nconst lines = csvContent.trim().split('\\n');\nconst headers = lines[0].split(',');\nconst cities = [];\n\nconsole.log(`Processing ${lines.length - 1} locations from JIGZ database...`);\n\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i];\n  if (!line.trim()) continue;\n  \n  // More robust CSV parsing to handle commas in city names\n  const commaIndex = line.lastIndexOf(',');\n  if (commaIndex === -1) continue;\n  \n  let cityName = line.substring(0, commaIndex).trim();\n  let countryName = line.substring(commaIndex + 1).trim();\n  \n  // Clean up any special characters that might cause issues\n  cityName = cityName.replace(/[\"\"]/g, '\"').replace(/'/g, \"'\");\n  countryName = countryName.replace(/[\"\"]/g, '\"').replace(/'/g, \"'\");\n  \n  // Skip entries with problematic characters that could break TypeScript\n  if (cityName.includes('\"') || countryName.includes('\"') || \n      cityName.includes('\\\\') || countryName.includes('\\\\')) {\n    continue;\n  }\n  \n  if (cityName && countryName) {\n    cities.push({\n      city: cityName,\n      country: countryName,\n      formatted: `${cityName}, ${countryName}`\n    });\n  }\n}\n\nconsole.log(`Successfully parsed ${cities.length} cities from JIGZ database`);\n\n// Group cities by country\nconst citiesByCountry = {};\ncities.forEach(city => {\n  if (!citiesByCountry[city.country]) {\n    citiesByCountry[city.country] = [];\n  }\n  citiesByCountry[city.country].push(city);\n});\n\nconsole.log(`Found cities from ${Object.keys(citiesByCountry).length} countries`);\n\n// Define priority countries and limits for popular cities list\nconst priorityCountries = {\n  'United States': 100,\n  'Canada': 50,\n  'United Kingdom': 40,\n  'Germany': 30,\n  'France': 30,\n  'Spain': 25,\n  'Italy': 25,\n  'Netherlands': 20,\n  'Australia': 30,\n  'New Zealand': 15,\n  'Japan': 30,\n  'China': 50,\n  'India': 40,\n  'Brazil': 25,\n  'Mexico': 20,\n  'Argentina': 15,\n  'South Korea': 15,\n  'Korea': 15,\n  'Thailand': 15,\n  'Indonesia': 15,\n  'Malaysia': 10,\n  'Singapore': 5,\n  'Philippines': 15,\n  'Vietnam': 12,\n  'South Africa': 15,\n  'Nigeria': 10,\n  'Egypt': 8,\n  'Turkey': 12,\n  'Russia': 20,\n  'Poland': 15,\n  'Sweden': 10,\n  'Norway': 8,\n  'Denmark': 8,\n  'Finland': 8,\n  'Belgium': 12,\n  'Switzerland': 10,\n  'Austria': 8,\n  'Portugal': 10,\n  'Greece': 8,\n  'Ireland': 8,\n  'Israel': 8,\n  'UAE': 5,\n  'United Arab Emirates': 5,\n  'Saudi Arabia': 8,\n  'Chile': 10,\n  'Colombia': 12,\n  'Peru': 8,\n  'Venezuela': 6,\n  'Ecuador': 6,\n  'Uruguay': 3,\n  'Paraguay': 3,\n  'Bolivia': 5,\n  'Iran': 10,\n  'Iraq': 8,\n  'Afghanistan': 15,\n  'Pakistan': 15,\n  'Bangladesh': 10,\n  'Myanmar': 8,\n  'Cambodia': 5,\n  'Laos': 5,\n  'Sri Lanka': 8,\n  'Nepal': 8,\n  'Morocco': 8,\n  'Algeria': 10,\n  'Tunisia': 6,\n  'Libya': 5,\n  'Ghana': 8,\n  'Kenya': 8,\n  'Ethiopia': 8,\n  'Tanzania': 8,\n  'Uganda': 6,\n  'Zimbabwe': 6,\n  'Zambia': 5,\n  'Angola': 5,\n  'Mozambique': 5,\n  'Madagascar': 5\n};\n\n// Create the final popular cities list\nlet popularCities = ['All Locations'];\n\n// Add cities from priority countries\nObject.entries(priorityCountries).forEach(([country, limit]) => {\n  if (citiesByCountry[country]) {\n    const countryCities = citiesByCountry[country]\n      .slice(0, limit)\n      .map(city => city.formatted);\n    popularCities.push(...countryCities);\n  }\n});\n\n// Add some major cities from other countries not in priority list\nconst otherCountries = Object.keys(citiesByCountry)\n  .filter(country => !priorityCountries[country])\n  .sort();\n\notherCountries.forEach(country => {\n  const countryCities = citiesByCountry[country].slice(0, 3);\n  popularCities.push(...countryCities.map(city => city.formatted));\n});\n\n// Remove duplicates and sort (keep \"All Locations\" at top)\nconst allLocations = popularCities.shift();\npopularCities = [...new Set(popularCities)];\npopularCities.sort();\npopularCities.unshift(allLocations);\n\nconsole.log(`Created popular cities list with ${popularCities.length} cities`);\n\n// Create comprehensive search list (first 5000 cities for performance)\nconst allCitiesForSearch = cities.slice(0, 5000).map(city => city.formatted);\n\n// Generate the new cities.ts file\nconst citiesFileContent = `// JIGZ World Cities Database\n// Updated from JIGZ area database with ${cities.length} locations worldwide\n// Comprehensive coverage of cities, towns, and administrative areas\n\nexport const topCities = [\n${popularCities.map(city => `  \"${city.replace(/\"/g, '\\\\\"')}\"`).join(',\\n')}\n];\n\nexport const citiesWithoutAll = topCities.filter(city => city !== \"All Locations\");\n\n// Comprehensive cities list for advanced search (${allCitiesForSearch.length} cities)\nexport const allWorldCities = [\n${allCitiesForSearch.map(city => `  \"${city.replace(/\"/g, '\\\\\"')}\"`).join(',\\n')}\n];\n\n// Enhanced search function with comprehensive global coverage\nexport const searchCities = (searchTerm: string, limit: number = 50): string[] => {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    return topCities.slice(0, limit);\n  }\n  \n  const term = searchTerm.toLowerCase().trim();\n  const results: string[] = [];\n  \n  // First priority: Exact matches from popular cities\n  const exactMatches = topCities.filter(city => \n    city.toLowerCase().includes(term)\n  );\n  results.push(...exactMatches);\n  \n  // Second priority: Matches from comprehensive world cities\n  if (results.length < limit) {\n    const additionalMatches = allWorldCities.filter(city => \n      city.toLowerCase().includes(term) && \n      !results.some(result => result.toLowerCase() === city.toLowerCase())\n    );\n    results.push(...additionalMatches.slice(0, limit - results.length));\n  }\n  \n  return results.slice(0, limit);\n};\n\n// Country statistics\nexport const countryStats = {\n  totalCountries: ${Object.keys(citiesByCountry).length},\n  totalCities: ${cities.length},\n  popularCities: ${popularCities.length - 1}, // Excluding \"All Locations\"\n  searchableCities: ${allCitiesForSearch.length}\n};\n\n// Legacy compatibility\nexport const worldCities = topCities;\nexport const filterCities = searchCities;\n`;\n\n// Write the updated cities file\nconst outputPath = path.join(__dirname, '..', 'shared', 'cities.ts');\nfs.writeFileSync(outputPath, citiesFileContent);\n\nconsole.log('✅ Successfully updated shared/cities.ts with JIGZ database');\nconsole.log(`📊 Statistics:`);\nconsole.log(`   - Total locations processed: ${cities.length}`);\nconsole.log(`   - Countries covered: ${Object.keys(citiesByCountry).length}`);\nconsole.log(`   - Popular cities: ${popularCities.length}`);\nconsole.log(`   - Searchable cities: ${allCitiesForSearch.length}`);\n\n// Show top countries by city count\nconst topCountriesByCount = Object.entries(citiesByCountry)\n  .map(([country, cities]) => ({ country, count: cities.length }))\n  .sort((a, b) => b.count - a.count)\n  .slice(0, 10);\n\nconsole.log(`🌍 Top 10 countries by location count:`);\ntopCountriesByCount.forEach(({ country, count }, index) => {\n  console.log(`   ${index + 1}. ${country}: ${count} locations`);\n});","size_bytes":7307},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport type { Express, Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport { sendVerificationEmailAfterRegistration } from \"./email-storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-key\";\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\n\n// Session configuration\nexport function configureSession() {\n  const PgSession = connectPg(session);\n  return session({\n    store: new PgSession({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || \"your-session-secret\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    },\n  });\n}\n\n// Passport configuration\nexport function configurePassport() {\n  // Local strategy for email/password login\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    async (email, password, done) => {\n      try {\n        // Convert email to lowercase for case-insensitive lookup\n        const user = await storage.getUserByEmail(email.toLowerCase());\n        if (!user) {\n          return done(null, false, { message: 'User not found' });\n        }\n\n        if (!user.passwordHash) {\n          return done(null, false, { message: 'Please sign in with Google' });\n        }\n\n        const isValid = await bcrypt.compare(password, user.passwordHash);\n        if (!isValid) {\n          return done(null, false, { message: 'Invalid password' });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  // Google OAuth strategy\n  if (GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET) {\n    const callbackURL = process.env.REPLIT_DEV_DOMAIN \n      ? `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/google/callback`\n      : \"/api/auth/google/callback\";\n    \n\n      \n    passport.use(new GoogleStrategy({\n      clientID: GOOGLE_CLIENT_ID,\n      clientSecret: GOOGLE_CLIENT_SECRET,\n      callbackURL: callbackURL\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n\n\n\n        \n        // Check if user already exists\n        let user = await storage.getUserByGoogleId(profile.id);\n        \n        if (user) {\n\n          return done(null, user);\n        }\n\n        // Check if user exists with same email (case-insensitive)\n        if (profile.emails && profile.emails[0]) {\n          user = await storage.getUserByEmail(profile.emails[0].value.toLowerCase());\n          if (user) {\n            // Link Google account to existing user\n            user = await storage.updateUser(user.id, {\n              googleId: profile.id,\n              provider: \"google\",\n              profileImageUrl: profile.photos?.[0]?.value || user.profileImageUrl,\n            });\n\n            return done(null, user);\n          }\n        }\n\n        // Create new user\n        const email = profile.emails?.[0]?.value;\n        if (!email) {\n          return done(new Error('No email provided by Google'));\n        }\n\n        const username = email.split('@')[0] + Math.random().toString(36).substr(2, 4);\n        \n        user = await storage.createUser({\n          username,\n          email: email.toLowerCase(), // Store email in lowercase\n          name: profile.displayName || 'Google User',\n          googleId: profile.id,\n          provider: \"google\",\n          isEmailVerified: true,\n          profileImageUrl: profile.photos?.[0]?.value,\n        });\n\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }));\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        // If user not found, return null instead of undefined to avoid serialization issues\n        return done(null, null);\n      }\n      done(null, user);\n    } catch (error) {\n      console.error(\"Error deserializing user:\", error);\n      done(null, null); // Return null instead of error to prevent session issues\n    }\n  });\n}\n\n// Middleware to check if user is authenticated\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: 'Authentication required' });\n}\n\n// Middleware to check if user is an admin\nexport async function requireAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  \n  try {\n    const user = await storage.getUser((req.user as any).id);\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: 'Failed to verify admin status' });\n  }\n}\n\n// JWT token generation\nexport function generateToken(user: User): string {\n  return jwt.sign(\n    { \n      id: user.id, \n      email: user.email, \n      username: user.username \n    },\n    JWT_SECRET,\n    { expiresIn: '30d' }\n  );\n}\n\n// Password hashing utilities\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Setup authentication routes\nexport function setupAuthRoutes(app: Express) {\n  // Local login\n  app.post('/api/auth/login', (req, res, next) => {\n    passport.authenticate('local', (err: any, user: User, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: 'Authentication error' });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || 'Authentication failed' });\n      }\n      \n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Login error' });\n        }\n        \n        const token = generateToken(user);\n        res.json({ \n          message: 'Login successful', \n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            name: user.name,\n            profileImageUrl: user.profileImageUrl,\n          },\n          token \n        });\n      });\n    })(req, res, next);\n  });\n\n  // Register\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { username, email, name, password } = req.body;\n\n      // Validation\n      if (!username || !email || !name || !password) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: 'Password must be at least 6 characters' });\n      }\n\n      // Check if user already exists (case-insensitive email check)\n      const existingUser = await storage.getUserByEmail(email.toLowerCase());\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ message: 'Username already taken' });\n      }\n\n      // Hash password and create user\n      const passwordHash = await hashPassword(password);\n      const user = await storage.createUser({\n        username,\n        email: email.toLowerCase(), // Store email in lowercase\n        name,\n        passwordHash,\n        provider: \"email\",\n        isEmailVerified: false,\n      });\n\n      // Send verification email\n      const emailSent = await sendVerificationEmailAfterRegistration(user.email, user.name);\n      \n      // Auto-login after registration\n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Registration successful but login failed' });\n        }\n        \n        const token = generateToken(user);\n        res.status(201).json({ \n          message: emailSent \n            ? 'Registration successful! Please check your email to verify your account.' \n            : 'Registration successful!', \n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            name: user.name,\n            profileImageUrl: user.profileImageUrl,\n            isEmailVerified: user.isEmailVerified,\n          },\n          token,\n          emailSent\n        });\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: 'Registration failed' });\n    }\n  });\n\n  // Google OAuth routes\n  if (GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET) {\n    app.get('/api/auth/google', (req, res, next) => {\n      console.log('Google OAuth initiated');\n      passport.authenticate('google', { scope: ['profile', 'email'] })(req, res, next);\n    });\n\n    app.get('/api/auth/google/callback',\n      (req, res, next) => {\n        console.log('Google OAuth callback received');\n        console.log('Query params:', req.query);\n        if (req.query.error) {\n          console.log('Google OAuth error:', req.query.error);\n          console.log('Error description:', req.query.error_description);\n          return res.redirect('/login?error=google_oauth_denied');\n        }\n        next();\n      },\n      passport.authenticate('google', { \n        failureRedirect: '/login?error=google_auth_failed',\n        failureMessage: true \n      }),\n      (req, res) => {\n        console.log('Google OAuth successful, user:', req.user ? (req.user as any).id : 'No user');\n        // Successful authentication\n        res.redirect('/?login=success');\n      }\n    );\n  } else {\n    console.log('Google OAuth not configured - missing client ID or secret');\n  }\n\n  // Logout\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Session destruction failed' });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: 'Logout successful' });\n      });\n    });\n  });\n\n  // Get current user\n  app.get('/api/auth/me', (req, res) => {\n    if (req.isAuthenticated()) {\n      const user = req.user as User;\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        profileImageUrl: user.profileImageUrl,\n      });\n    } else {\n      res.status(401).json({ message: 'Not authenticated' });\n    }\n  });\n}","size_bytes":11225},"server/city-search.ts":{"content":"import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Cache for all cities data\nlet allCitiesCache: string[] | null = null;\n\n// Load all cities from the original CSV file\nfunction loadAllCities(): string[] {\n  if (allCitiesCache) {\n    return allCitiesCache;\n  }\n\n  try {\n    const csvPath = path.join(__dirname, '../attached_assets/worldcities_1753519868277.csv');\n    const csvContent = fs.readFileSync(csvPath, 'utf8');\n    const lines = csvContent.split('\\n');\n    const cities: string[] = [];\n\n    // Skip header and process each line\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n      \n      // Handle CSV parsing with potential commas in quotes\n      const match = line.match(/^\"?([^\"]*?)\"?,\\s*\"?([^\"]*?)\"?$/);\n      if (match) {\n        const city = match[1].trim();\n        const country = match[2].trim();\n        \n        if (city && country) {\n          cities.push(`${city}, ${country}`);\n        }\n      }\n    }\n\n    allCitiesCache = cities.sort();\n    return allCitiesCache;\n  } catch (error) {\n    // Log error silently in development, handle gracefully in production\n    return [];\n  }\n}\n\n// Fast city search function\nexport function searchWorldCities(searchTerm: string, limit: number = 100): string[] {\n  if (!searchTerm || searchTerm.trim().length < 2) {\n    // Return popular cities for empty/short searches\n    return [\n      \"All Locations\",\n      \"New York, United States\", \"Los Angeles, United States\", \"Chicago, United States\",\n      \"London, United Kingdom\", \"Paris, France\", \"Tokyo, Japan\", \"Sydney, Australia\",\n      \"Toronto, Canada\", \"Berlin, Germany\", \"Madrid, Spain\", \"Rome, Italy\",\n      \"Amsterdam, Netherlands\", \"Beijing, China\", \"Mumbai, India\", \"Seoul, Korea, South\",\n      \"Singapore, Singapore\", \"Dubai, United Arab Emirates\", \"São Paulo, Brazil\",\n      \"Buenos Aires, Argentina\", \"Mexico City, Mexico\", \"Lagos, Nigeria\", \"Cairo, Egypt\"\n    ].slice(0, limit);\n  }\n\n  const allCities = loadAllCities();\n  const term = searchTerm.toLowerCase().trim();\n  const results = [\"All Locations\"];\n\n  // Search through all cities\n  const matches = allCities\n    .filter(city => city.toLowerCase().includes(term))\n    .slice(0, limit - 1);\n\n  results.push(...matches);\n  return results.slice(0, limit);\n}","size_bytes":2425},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  console.error(\"❌ DATABASE_URL environment variable is not set!\");\n  console.error(\"\");\n  console.error(\"For local development:\");\n  console.error(\"1. Copy .env.local.example to .env\");\n  console.error(\"2. Set DATABASE_URL to your PostgreSQL connection string\");\n  console.error(\"3. Run 'npm run db:push' to set up the database schema\");\n  console.error(\"\");\n  console.error(\"Example DATABASE_URL:\");\n  console.error(\"postgresql://username:password@localhost:5432/jigz_local\");\n  console.error(\"\");\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":984},"server/email-storage.ts":{"content":"// Email verification utilities\nimport { storage } from \"./storage\";\nimport { emailService, generateVerificationToken, getTokenExpiration } from \"./email\";\n\n// Update registration to send verification email\nexport async function sendVerificationEmailAfterRegistration(email: string, userName: string) {\n\n  \n  if (!emailService.isConfigured()) {\n\n    return true;\n  }\n\n  const token = generateVerificationToken();\n  const expiresAt = getTokenExpiration();\n  \n  try {\n    // Store the token\n    await storage.createEmailVerificationToken({\n      email,\n      token,\n      expiresAt\n    });\n\n    // Send the email\n    const success = await emailService.sendVerificationEmail(email, token, userName);\n    return success;\n  } catch (error) {\n    return false;\n  }\n}","size_bytes":760},"server/email.ts":{"content":"import nodemailer from 'nodemailer';\nimport * as crypto from 'node:crypto';\nimport sgMail from '@sendgrid/mail';\n\n// Email service configuration\nexport interface EmailConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n}\n\n// Email providers configurations\nexport const emailProviders = {\n  gmail: {\n    host: 'smtp.gmail.com',\n    port: 587,\n    secure: false, // TLS\n  },\n  outlook: {\n    host: 'smtp-mail.outlook.com',\n    port: 587,\n    secure: false, // TLS\n  },\n  yahoo: {\n    host: 'smtp.mail.yahoo.com',\n    port: 587,\n    secure: false, // TLS\n  },\n  sendgrid: {\n    host: 'smtp.sendgrid.net',\n    port: 587,\n    secure: false, // TLS\n  },\n  mailgun: {\n    host: 'smtp.mailgun.org',\n    port: 587,\n    secure: false, // TLS\n  },\n  // For development/testing\n  ethereal: {\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n  }\n};\n\nclass EmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  private fromEmail: string = '';\n  private useSendGridAPI: boolean = false;\n\n  private getBaseUrl(): string {\n    // Always use production domain for deployed environments\n    // Check for deployed environment indicators\n    if (process.env.DEPLOYED_URL) {\n      console.log('Email service using DEPLOYED_URL:', process.env.DEPLOYED_URL);\n      return process.env.DEPLOYED_URL;\n    }\n    \n    // Force production domain if we detect this is jigz.co deployment\n    if (process.env.REPLIT_DEV_DOMAIN && process.env.REPLIT_DEV_DOMAIN.includes('jigz.co')) {\n      console.log('Email service detected jigz.co domain, using production URL');\n      return 'https://jigz.co';\n    }\n    \n    if (process.env.NODE_ENV === 'production') {\n      console.log('Email service using production environment');\n      return 'https://jigz.co';\n    } else {\n      // For development\n      const devUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : `http://localhost:5000`;\n      console.log('Email service detected BASE URL:', devUrl);\n      return devUrl;\n    }\n  }\n\n  async initialize() {\n    // Check if SendGrid API key is available\n    const sendGridApiKey = process.env.SENDGRID_API_KEY;\n    if (sendGridApiKey) {\n      sgMail.setApiKey(sendGridApiKey);\n      this.useSendGridAPI = true;\n      this.fromEmail = process.env.FROM_EMAIL || 'noreply@jigz.app';\n      console.log('Email service initialized with SendGrid API');\n      return true;\n    }\n\n    // Fallback to SMTP configuration\n    const emailProvider = process.env.EMAIL_PROVIDER;\n    const emailUser = process.env.EMAIL_USER;\n    const emailPassword = process.env.EMAIL_PASSWORD;\n    const fromEmail = process.env.FROM_EMAIL;\n\n    if (!emailProvider || !emailUser || !emailPassword) {\n      console.warn('Email service not configured. Email verification will be disabled.');\n      return false;\n    }\n\n    let config: EmailConfig;\n\n    if (emailProvider in emailProviders) {\n      config = {\n        ...emailProviders[emailProvider as keyof typeof emailProviders],\n        auth: {\n          user: emailUser,\n          pass: emailPassword,\n        },\n      };\n    } else if (emailProvider === 'custom') {\n      // Custom SMTP configuration\n      config = {\n        host: process.env.SMTP_HOST || '',\n        port: parseInt(process.env.SMTP_PORT || '587'),\n        secure: process.env.SMTP_SECURE === 'true',\n        auth: {\n          user: emailUser,\n          pass: emailPassword,\n        },\n      };\n    } else {\n      console.error(`Unsupported email provider: ${emailProvider}`);\n      return false;\n    }\n\n    try {\n      this.transporter = nodemailer.createTransport(config);\n      this.fromEmail = fromEmail || emailUser;\n      \n      // Verify connection\n      await this.transporter!.verify();\n      console.log('Email service initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize email service:', error);\n      return false;\n    }\n  }\n\n  async sendVerificationEmail(email: string, token: string, userName: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const verificationUrl = `${baseUrl}/verify-email?token=${token}`;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #2563eb; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>Welcome to Jigz!</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Thank you for signing up for Jigz! To complete your registration and start using our platform, please verify your email address.</p>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${verificationUrl}\" class=\"button\">Verify Email Address</a>\n            </p>\n            \n            <p>If the button doesn't work, you can copy and paste this link into your browser:</p>\n            <p style=\"word-break: break-all; background: #e2e8f0; padding: 10px; border-radius: 4px;\">\n              ${verificationUrl}\n            </p>\n            \n            <p><strong>Important:</strong> This verification link will expire in 24 hours for security reasons.</p>\n            \n            <p>If you didn't create an account with Jigz, please ignore this email.</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. If you have any questions, please contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${userName},\n\nThank you for signing up for Jigz! To complete your registration and start using our platform, please verify your email address.\n\nPlease click the following link to verify your email:\n${verificationUrl}\n\nImportant: This verification link will expire in 24 hours for security reasons.\n\nIf you didn't create an account with Jigz, please ignore this email.\n\nBest regards,\nThe Jigz Team\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: 'Verify Your Email Address - Jigz',\n          text: textContent,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: 'Verify Your Email Address - Jigz',\n          text: textContent,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Verification email sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send verification email:', error);\n      return false;\n    }\n  }\n\n  async sendPasswordResetEmail(email: string, userName: string, resetLink: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Reset Your Password - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #dc2626; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .warning { background: #fef2f2; border-left: 4px solid #dc2626; padding: 15px; margin: 15px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>🔒 Reset Your Password</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>We received a request to reset your password for your Jigz account.</p>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${resetLink}\" class=\"button\">Reset Password</a>\n            </p>\n            \n            <p>If the button doesn't work, you can copy and paste this link into your browser:</p>\n            <p style=\"word-break: break-all; background: #e2e8f0; padding: 10px; border-radius: 4px;\">\n              ${resetLink}\n            </p>\n            \n            <div class=\"warning\">\n              <strong>⚠️ Important:</strong>\n              <ul>\n                <li>This password reset link will expire in 1 hour for security reasons</li>\n                <li>If you didn't request a password reset, please ignore this email</li>\n                <li>Your password will remain unchanged until you click the link above</li>\n              </ul>\n            </div>\n            \n            <p>For your security, never share this reset link with anyone.</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. If you have any questions, please contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${userName},\n\nWe received a request to reset your password for your Jigz account.\n\nPlease click the following link to reset your password:\n${resetLink}\n\nImportant:\n- This password reset link will expire in 1 hour for security reasons\n- If you didn't request a password reset, please ignore this email\n- Your password will remain unchanged until you click the link above\n\nFor your security, never share this reset link with anyone.\n\nBest regards,\nThe Jigz Team\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: 'Reset Your Password - Jigz',\n          text: textContent,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: 'Reset Your Password - Jigz',\n          text: textContent,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Password reset email sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send password reset email:', error);\n      return false;\n    }\n  }\n\n  async sendWelcomeEmail(email: string, userName: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const loginUrl = `${baseUrl}/login`;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to Jigz!</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #16a34a; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #16a34a; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>🎉 Welcome to Jigz!</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Congratulations! Your email has been verified and your Jigz account is now active.</p>\n            \n            <p>You can now:</p>\n            <ul>\n              <li>✅ Post jobs and find talented freelancers</li>\n              <li>✅ Apply for jobs that match your skills</li>\n              <li>✅ Communicate with clients and freelancers</li>\n              <li>✅ Build your reputation through reviews</li>\n            </ul>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${loginUrl}\" class=\"button\">Start Using Jigz</a>\n            </p>\n            \n            <p>You start with <strong>20 coins</strong> to get you going. Use them to post jobs or apply for opportunities!</p>\n            \n            <p>If you have any questions, feel free to reach out to our support team.</p>\n            \n            <p>Welcome aboard!<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. If you have any questions, please contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: '🎉 Welcome to Jigz - Your Account is Active!',\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: '🎉 Welcome to Jigz - Your Account is Active!',\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Welcome email sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send welcome email:', error);\n      return false;\n    }\n  }\n\n  async sendJobApplicationNotification(email: string, userName: string, jobTitle: string, applicantName: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const dashboardUrl = `${baseUrl}/dashboard`;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New Application - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #3b82f6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .highlight { background: #e0f2fe; padding: 15px; border-radius: 6px; margin: 15px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>📝 New Application Received</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Great news! You've received a new application for your job posting.</p>\n            \n            <div class=\"highlight\">\n              <strong>Job:</strong> ${jobTitle}<br>\n              <strong>Applicant:</strong> ${applicantName}\n            </div>\n            \n            <p>The applicant is interested in working on your project. Review their profile, portfolio, and application details to see if they're a good fit.</p>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${dashboardUrl}\" class=\"button\">Review Application</a>\n            </p>\n            \n            <p>Don't keep talented freelancers waiting - review and respond to applications promptly to attract the best candidates.</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Manage your notification preferences in your account settings.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: `📝 New Application for \"${jobTitle}\" - Jigz`,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: `📝 New Application for \"${jobTitle}\" - Jigz`,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Job application notification sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send job application notification:', error);\n      return false;\n    }\n  }\n\n  async sendReviewNotification(email: string, userName: string, reviewerName: string, rating: number, jobTitle: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const profileUrl = `${baseUrl}/profile`;\n\n    const ratingStars = '⭐'.repeat(rating) + '☆'.repeat(5 - rating);\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New Review - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #f59e0b; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #f59e0b; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .highlight { background: #fef3c7; padding: 15px; border-radius: 6px; margin: 15px 0; text-align: center; }\n          .rating { font-size: 24px; margin: 10px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>⭐ New Review Received</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>You've received a new review on Jigz!</p>\n            \n            <div class=\"highlight\">\n              <strong>From:</strong> ${reviewerName}<br>\n              <strong>Job:</strong> ${jobTitle}<br>\n              <div class=\"rating\">${ratingStars}</div>\n              <strong>${rating} out of 5 stars</strong>\n            </div>\n            \n            <p>Reviews help build your reputation on Jigz and attract more clients. Keep up the great work!</p>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${profileUrl}\" class=\"button\">View Your Profile</a>\n            </p>\n            \n            <p>Continue delivering excellent work to maintain your high rating and grow your freelance business.</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Manage your notification preferences in your account settings.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: `⭐ New ${rating}-Star Review Received - Jigz`,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: `⭐ New ${rating}-Star Review Received - Jigz`,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Review notification sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send review notification:', error);\n      return false;\n    }\n  }\n\n  async sendApplicationAcceptedEmail(email: string, applicantName: string, jobTitle: string, jobPosterName: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const dashboardUrl = `${baseUrl}/dashboard`;\n    const messagesUrl = `${baseUrl}/messages`;\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Application Accepted - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #16a34a; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n          .success-button { background: #16a34a; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .highlight { background: #dcfce7; padding: 15px; border-radius: 6px; margin: 15px 0; border-left: 4px solid #16a34a; }\n          .next-steps { background: #f0f9ff; padding: 15px; border-radius: 6px; margin: 15px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>🎉 Great News! Your Application Was Accepted</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${applicantName},</h2>\n            <p>Congratulations! We're excited to let you know that your application has been accepted.</p>\n            \n            <div class=\"highlight\">\n              <strong>Job:</strong> ${jobTitle}<br>\n              <strong>Job Poster:</strong> ${jobPosterName}<br>\n              <strong>Status:</strong> <span style=\"color: #16a34a; font-weight: bold;\">✅ Accepted</span>\n            </div>\n            \n            <div class=\"next-steps\">\n              <h3>What happens next?</h3>\n              <ul>\n                <li>The job poster may contact you soon to discuss project details</li>\n                <li>Check your messages regularly for updates</li>\n                <li>You can view all your accepted applications in your dashboard</li>\n                <li>Make sure to deliver quality work to build your reputation on Jigz</li>\n              </ul>\n            </div>\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${dashboardUrl}\" class=\"button success-button\">View Dashboard</a>\n              <a href=\"${messagesUrl}\" class=\"button\">Check Messages</a>\n            </p>\n            \n            <p>This is a great opportunity to showcase your skills and build your reputation on our platform. We wish you the best of luck with your project!</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. If you have any questions, please contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${applicantName},\n\nGreat news! Your application for \"${jobTitle}\" has been accepted by ${jobPosterName}.\n\nWhat happens next?\n- The job poster may contact you soon to discuss project details\n- Check your messages regularly for updates  \n- You can view all your accepted applications in your dashboard\n- Make sure to deliver quality work to build your reputation on Jigz\n\nVisit your dashboard: ${dashboardUrl}\nCheck your messages: ${messagesUrl}\n\nBest regards,\nThe Jigz Team\n    `;\n\n    const mailOptions = {\n      from: this.fromEmail,\n      to: email,\n      subject: '🎉 Your Application Was Accepted - Jigz',\n      html: htmlContent,\n      text: textContent,\n    };\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          ...mailOptions,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail(mailOptions);\n      }\n      console.log(`Application acceptance email sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send application acceptance email:', error);\n      return false;\n    }\n  }\n\n  async sendJobStatusNotification(email: string, userName: string, jobTitle: string, status: string, adminNotes?: string): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const dashboardUrl = `${baseUrl}/dashboard`;\n\n    const statusColors = {\n      approved: '#16a34a',\n      rejected: '#dc2626',\n      pending: '#f59e0b'\n    };\n\n    const statusEmojis = {\n      approved: '✅',\n      rejected: '❌', \n      pending: '⏳'\n    };\n\n    const color = statusColors[status as keyof typeof statusColors] || '#6b7280';\n    const emoji = statusEmojis[status as keyof typeof statusEmojis] || '📋';\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Job Status Update - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: ${color}; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: ${color}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .highlight { background: #e0f2fe; padding: 15px; border-radius: 6px; margin: 15px 0; }\n          .status { text-transform: capitalize; font-weight: bold; color: ${color}; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>${emoji} Job Status Update</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Your job posting status has been updated by our admin team.</p>\n            \n            <div class=\"highlight\">\n              <strong>Job:</strong> ${jobTitle}<br>\n              <strong>Status:</strong> <span class=\"status\">${status}</span>\n            </div>\n            \n            ${adminNotes ? `\n            <div style=\"background: #f3f4f6; padding: 15px; border-radius: 6px; margin: 15px 0;\">\n              <strong>Admin Notes:</strong><br>\n              ${adminNotes}\n            </div>\n            ` : ''}\n            \n            <p style=\"text-align: center;\">\n              <a href=\"${dashboardUrl}\" class=\"button\">View Job Details</a>\n            </p>\n            \n            ${status === 'approved' ? '<p>Congratulations! Your job is now live and visible to freelancers.</p>' : ''}\n            ${status === 'rejected' ? '<p>If you have questions about this decision, please contact our support team.</p>' : ''}\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Manage your notification preferences in your account settings.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: `${emoji} Job \"${jobTitle}\" ${status.charAt(0).toUpperCase() + status.slice(1)} - Jigz`,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: `${emoji} Job \"${jobTitle}\" ${status.charAt(0).toUpperCase() + status.slice(1)} - Jigz`,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Job status notification sent to ${email}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send job status notification:', error);\n      return false;\n    }\n  }\n\n  async sendSubscriptionWelcomeEmail(\n    email: string, \n    userName: string, \n    planType: string, \n    monthlyCoins: number, \n    monthlyPrice: number,\n    nextBillingDate: string\n  ): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const planName = planType.charAt(0).toUpperCase() + planType.slice(1);\n    const priceFormatted = (monthlyPrice / 100).toFixed(2);\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to ${planName} Plan - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #3b82f6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .highlight { background: #e0f2fe; padding: 20px; border-radius: 8px; margin: 20px 0; }\n          .coins-box { background: #f0f9ff; border: 2px solid #3b82f6; padding: 15px; border-radius: 8px; text-align: center; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .benefit { padding: 5px 0; }\n          .benefit::before { content: \"✓ \"; color: #10b981; font-weight: bold; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>🎉 Welcome to ${planName}!</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Congratulations! You've successfully subscribed to the <strong>${planName} Plan</strong> on Jigz.</p>\n            \n            <div class=\"coins-box\">\n              <h3 style=\"margin: 0; color: #3b82f6;\">${monthlyCoins} Coins Added to Your Account!</h3>\n              <p style=\"margin: 5px 0 0 0; color: #6b7280;\">Ready to use for job applications and posting</p>\n            </div>\n\n            <div class=\"highlight\">\n              <h3>Your Subscription Details:</h3>\n              <p><strong>Plan:</strong> ${planName}</p>\n              <p><strong>Monthly Coins:</strong> ${monthlyCoins}</p>\n              <p><strong>Monthly Price:</strong> $${priceFormatted}</p>\n              <p><strong>Next Billing:</strong> ${nextBillingDate}</p>\n            </div>\n\n            <h3>What You Can Do With Your Coins:</h3>\n            <div class=\"benefit\">Apply to jobs (1 coin per application)</div>\n            <div class=\"benefit\">Post job listings (3 coins per post)</div>\n            <div class=\"benefit\">Connect with quality freelancers and clients</div>\n            <div class=\"benefit\">Access to our full marketplace features</div>\n\n            <p>Your coins will automatically renew each month. You can cancel anytime from your account settings.</p>\n            \n            <p>Thank you for choosing Jigz to power your freelance career!</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Questions? Contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${userName},\n\nCongratulations! You've successfully subscribed to the ${planName} Plan on Jigz.\n\n${monthlyCoins} coins have been added to your account and are ready to use!\n\nYour Subscription Details:\n- Plan: ${planName}\n- Monthly Coins: ${monthlyCoins}\n- Monthly Price: $${priceFormatted}\n- Next Billing: ${nextBillingDate}\n\nWhat You Can Do With Your Coins:\n✓ Apply to jobs (1 coin per application)\n✓ Post job listings (3 coins per post)\n✓ Connect with quality freelancers and clients\n✓ Access to our full marketplace features\n\nYour coins will automatically renew each month. You can cancel anytime from your account settings.\n\nThank you for choosing Jigz to power your freelance career!\n\nBest regards,\nThe Jigz Team\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: `Welcome to ${planName} Plan - Jigz`,\n          text: textContent,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: `Welcome to ${planName} Plan - Jigz`,\n          text: textContent,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Subscription welcome email sent to ${email} for ${planName} plan`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send subscription welcome email:', error);\n      return false;\n    }\n  }\n\n  async sendCoinPurchaseEmail(\n    email: string, \n    userName: string, \n    coinsAdded: number, \n    totalPaid: number\n  ): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const priceFormatted = totalPaid.toFixed(2);\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Coin Purchase Confirmation - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #10b981; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .coins-box { background: #ecfdf5; border: 2px solid #10b981; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }\n          .purchase-details { background: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n          .usage-tip { background: #fef3c7; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #f59e0b; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>💰 Coins Added Successfully!</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Your coin purchase has been processed successfully!</p>\n            \n            <div class=\"coins-box\">\n              <h3 style=\"margin: 0; color: #10b981;\">${coinsAdded} Coins Added!</h3>\n              <p style=\"margin: 5px 0 0 0; color: #6b7280;\">Now available in your account</p>\n            </div>\n\n            <div class=\"purchase-details\">\n              <h3>Purchase Summary:</h3>\n              <p><strong>Coins Purchased:</strong> ${coinsAdded}</p>\n              <p><strong>Total Paid:</strong> $${priceFormatted}</p>\n              <p><strong>Cost Per Coin:</strong> $${(totalPaid / coinsAdded).toFixed(3)}</p>\n            </div>\n\n            <div class=\"usage-tip\">\n              <h4>💡 Quick Tip:</h4>\n              <p>With ${coinsAdded} coins, you can:</p>\n              <ul>\n                <li>Apply to ${coinsAdded} different jobs (1 coin each)</li>\n                <li>Post ${Math.floor(coinsAdded / 3)} job listings (3 coins each)</li>\n                <li>Or mix applications and job posts as needed</li>\n              </ul>\n            </div>\n\n            <p>Your coins are now ready to use! Start applying to jobs or posting your own to connect with talented freelancers.</p>\n            \n            <p>Thanks for choosing Jigz!</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Questions? Contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${userName},\n\nYour coin purchase has been processed successfully!\n\n${coinsAdded} coins have been added to your account and are ready to use!\n\nPurchase Summary:\n- Coins Purchased: ${coinsAdded}\n- Total Paid: $${priceFormatted}\n- Cost Per Coin: $${(totalPaid / coinsAdded).toFixed(3)}\n\nQuick Tip:\nWith ${coinsAdded} coins, you can:\n• Apply to ${coinsAdded} different jobs (1 coin each)\n• Post ${Math.floor(coinsAdded / 3)} job listings (3 coins each)\n• Or mix applications and job posts as needed\n\nYour coins are now ready to use! Start applying to jobs or posting your own to connect with talented freelancers.\n\nThanks for choosing Jigz!\n\nBest regards,\nThe Jigz Team\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: 'Coin Purchase Confirmation - Jigz',\n          text: textContent,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: 'Coin Purchase Confirmation - Jigz',\n          text: textContent,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Coin purchase email sent to ${email} for ${coinsAdded} coins`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send coin purchase email:', error);\n      return false;\n    }\n  }\n\n  async sendResubscriptionEmail(\n    email: string, \n    userName: string, \n    oldPlanType: string, \n    newPlanType: string, \n    monthlyCoins: number, \n    monthlyPrice: number,\n    nextBillingDate: string\n  ): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    const baseUrl = this.getBaseUrl();\n    const oldPlanName = oldPlanType.charAt(0).toUpperCase() + oldPlanType.slice(1);\n    const newPlanName = newPlanType.charAt(0).toUpperCase() + newPlanType.slice(1);\n    const priceFormatted = (monthlyPrice / 100).toFixed(2);\n\n    const htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Subscription Updated - Jigz</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #8b5cf6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .logo { max-width: 150px; height: auto; margin-bottom: 10px; }\n          .content { background: #f8fafc; padding: 30px; border-radius: 0 0 8px 8px; }\n          .highlight { background: #f3e8ff; padding: 20px; border-radius: 8px; margin: 20px 0; }\n          .coins-box { background: #f0f9ff; border: 2px solid #8b5cf6; padding: 15px; border-radius: 8px; text-align: center; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <img src=\"${baseUrl}/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" alt=\"Jigz Logo\" class=\"logo\" />\n            <h1>🚀 Subscription Updated!</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hi ${userName},</h2>\n            <p>Your subscription has been successfully updated to the <strong>${newPlanName} Plan</strong>!</p>\n            \n            <div class=\"coins-box\">\n              <h3 style=\"margin: 0; color: #8b5cf6;\">${monthlyCoins} Coins Added!</h3>\n              <p style=\"margin: 5px 0 0 0; color: #6b7280;\">Your new monthly coin allocation</p>\n            </div>\n\n            <div class=\"highlight\">\n              <h3>Your New Subscription Details:</h3>\n              <p><strong>Plan:</strong> ${newPlanName}</p>\n              <p><strong>Monthly Coins:</strong> ${monthlyCoins}</p>\n              <p><strong>Monthly Price:</strong> $${priceFormatted}</p>\n              <p><strong>Next Billing:</strong> ${nextBillingDate}</p>\n            </div>\n\n            <h3>Plan Change Summary:</h3>\n            <p>Previous Plan: <strong>${oldPlanName}</strong> → New Plan: <strong>${newPlanName}</strong></p>\n\n            <p>Your plan has been successfully updated to better fit your needs.</p>\n\n            <p>Your new coin allocation is now active and ready to use for job applications and posting.</p>\n            \n            <p>Thank you for continuing to choose Jigz!</p>\n            \n            <p>Best regards,<br>The Jigz Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>This email was sent from Jigz. Questions? Contact our support team.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const textContent = `\nHi ${userName},\n\nYour subscription has been successfully updated to the ${newPlanName} Plan!\n\n${monthlyCoins} coins have been added to your account!\n\nYour New Subscription Details:\n- Plan: ${newPlanName}\n- Monthly Coins: ${monthlyCoins}\n- Monthly Price: $${priceFormatted}\n- Next Billing: ${nextBillingDate}\n\nPlan Change Summary:\nPrevious Plan: ${oldPlanName} → New Plan: ${newPlanName}\n\nYour plan has been successfully updated to better fit your needs.\n\nYour new coin allocation is now active and ready to use for job applications and posting.\n\nThank you for continuing to choose Jigz!\n\nBest regards,\nThe Jigz Team\n    `;\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: email,\n          from: this.fromEmail,\n          subject: 'Subscription Updated - Jigz',\n          text: textContent,\n          html: htmlContent,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: email,\n          subject: 'Subscription Updated - Jigz',\n          text: textContent,\n          html: htmlContent,\n        });\n      }\n      \n      console.log(`Resubscription email sent to ${email} for ${oldPlanName} → ${newPlanName}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send resubscription email:', error);\n      return false;\n    }\n  }\n\n  async sendEmail(options: { to: string; subject: string; text?: string; html?: string }): Promise<boolean> {\n    if (!this.useSendGridAPI && !this.transporter) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    try {\n      if (this.useSendGridAPI) {\n        await sgMail.send({\n          to: options.to,\n          from: this.fromEmail,\n          subject: options.subject,\n          text: options.text || '',\n          html: options.html,\n          trackingSettings: {\n            clickTracking: { enable: false },\n            openTracking: { enable: false },\n            subscriptionTracking: { enable: false },\n            ganalytics: { enable: false }\n          }\n        });\n      } else {\n        await this.transporter!.sendMail({\n          from: `\"Jigz\" <${this.fromEmail}>`,\n          to: options.to,\n          subject: options.subject,\n          text: options.text,\n          html: options.html,\n        });\n      }\n      \n      console.log(`Email sent to ${options.to}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      return false;\n    }\n  }\n\n  isConfigured(): boolean {\n    return this.useSendGridAPI || this.transporter !== null;\n  }\n}\n\n// Utility functions\nexport function generateVerificationToken(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\nexport function getTokenExpiration(): Date {\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 24); // 24 hours from now\n  return expiration;\n}\n\n// Export singleton instance\nexport const emailService = new EmailService();","size_bytes":49753},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { emailService } from \"./email\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static files from attached_assets directory\napp.use('/attached_assets', express.static('attached_assets'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize email service\n  await emailService.initialize();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 8080 for Google Cloud, 5000 for development.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || (process.env.NODE_ENV === 'production' ? '8080' : '5000'), 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2365},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\n// Removed old city search import - now using comprehensive JIGZ database\nimport { configureSession, configurePassport, setupAuthRoutes } from \"./auth\";\nimport passport from \"passport\";\nimport { insertJobSchema, insertApplicationSchema, insertReviewSchema, insertConversationSchema, insertMessageSchema, insertJobReportSchema, insertEmailVerificationTokenSchema, passwordResetRequestSchema, passwordResetSchema, insertCoinPurchaseSchema, insertSkillEndorsementSchema, insertServiceSchema, insertServiceRequestSchema } from \"@shared/schema\";\nimport Stripe from \"stripe\";\nimport { emailService, generateVerificationToken, getTokenExpiration } from \"./email\";\nimport \"./email-storage\"; // Load email storage methods\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req: any, file: any, cb: any) => {\n    const allowedTypes = /jpeg|jpg|png|gif/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\"));\n    }\n  }\n});\n\n// Initialize Stripe\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2025-07-30.basil\",\n});\n\n// Authentication middleware\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Admin middleware\nasync function requireAdmin(req: any, res: any, next: any) {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  try {\n    const user = await storage.getUser(req.user.id);\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Failed to verify admin status\" });\n  }\n}\n\n// Moderator middleware (can access job management but not user management or coins)\nasync function requireModerator(req: any, res: any, next: any) {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  try {\n    const user = await storage.getUser(req.user.id);\n    if (!user || (user.role !== \"moderator\" && user.role !== \"admin\")) {\n      return res.status(403).json({ message: \"Moderator access required\" });\n    }\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Failed to verify moderator status\" });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint for Google Cloud\n  app.get('/api/health', (req, res) => {\n    res.status(200).json({ \n      status: 'healthy', \n      timestamp: new Date().toISOString(),\n      uptime: process.uptime()\n    });\n  });\n\n  // Configure authentication\n  app.use(configureSession());\n  configurePassport();\n  app.use(passport.initialize());\n  app.use(passport.session());\n  \n  // Setup authentication routes\n  setupAuthRoutes(app);\n\n  // Authentication endpoints\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    const user = await storage.getUser((req.user as any).id);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    res.json(user);\n  });\n\n  // Resend verification email route\n  app.post(\"/api/auth/resend-verification\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Import the function here to avoid circular dependency\n      const { sendVerificationEmailAfterRegistration } = await import(\"./email-storage\");\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if already verified\n      if (user.isEmailVerified) {\n        return res.status(400).json({ message: \"Email is already verified\" });\n      }\n\n      // Delete any existing tokens for this email - this method doesn't exist, so we skip this step\n      // const existingTokens = await storage.getEmailVerificationTokensByEmail?.(email) || [];\n      // for (const token of existingTokens) {\n      //   await storage.deleteEmailVerificationToken(token.token);\n      // }\n\n      // Send new verification email\n      const emailSent = await sendVerificationEmailAfterRegistration(email, user.name);\n      \n      if (emailSent) {\n        res.json({ \n          message: \"Verification email resent successfully\",\n          emailSent: true\n        });\n      } else {\n        res.status(500).json({ message: \"Failed to send verification email\" });\n      }\n    } catch (error) {\n      console.error(\"Resend verification error:\", error);\n      res.status(500).json({ message: \"Failed to resend verification email\" });\n    }\n  });\n\n  // Email verification route (GET) - handle verification links from emails\n  app.get(\"/verify-email\", async (req, res) => {\n    try {\n      const token = req.query.token as string;\n\n      if (!token) {\n        return res.status(400).send(`\n          <html>\n            <head><title>Verification Error - Jigz</title></head>\n            <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n              <h2>❌ Verification Failed</h2>\n              <p>No verification token provided.</p>\n              <a href=\"/\" style=\"color: #2563eb;\">Return to Jigz</a>\n            </body>\n          </html>\n        `);\n      }\n\n      // Get token from storage\n      const verificationToken = await storage.getEmailVerificationToken(token);\n      \n      if (!verificationToken) {\n        return res.status(400).send(`\n          <html>\n            <head><title>Verification Error - Jigz</title></head>\n            <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n              <h2>❌ Verification Failed</h2>\n              <p>Invalid or expired verification token.</p>\n              <a href=\"/\" style=\"color: #2563eb;\">Return to Jigz</a>\n            </body>\n          </html>\n        `);\n      }\n\n      // Check if token has expired\n      if (new Date() > verificationToken.expiresAt) {\n        await storage.deleteEmailVerificationToken(token);\n        return res.status(400).send(`\n          <html>\n            <head><title>Verification Error - Jigz</title></head>\n            <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n              <h2>❌ Verification Failed</h2>\n              <p>This verification token has expired. Please request a new verification email.</p>\n              <a href=\"/login\" style=\"color: #2563eb;\">Go to Login</a>\n            </body>\n          </html>\n        `);\n      }\n\n      // Verify the user's email\n      const user = await storage.verifyUserEmail(verificationToken.email);\n      \n      if (!user) {\n        return res.status(400).send(`\n          <html>\n            <head><title>Verification Error - Jigz</title></head>\n            <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n              <h2>❌ Verification Failed</h2>\n              <p>User not found.</p>\n              <a href=\"/\" style=\"color: #2563eb;\">Return to Jigz</a>\n            </body>\n          </html>\n        `);\n      }\n\n      // Delete the used token\n      await storage.deleteEmailVerificationToken(token);\n\n      // Send welcome email\n      if (emailService.isConfigured()) {\n        await emailService.sendWelcomeEmail(user.email, user.name);\n      }\n\n      // Show success page\n      res.send(`\n        <html>\n          <head>\n            <title>Email Verified - Jigz</title>\n            <style>\n              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f8fafc; }\n              .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n              .success { color: #059669; }\n              .button { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin-top: 20px; }\n            </style>\n          </head>\n          <body>\n            <div class=\"container\">\n              <h2 class=\"success\">✅ Email Verified Successfully!</h2>\n              <p>Welcome to Jigz, <strong>${user.name}</strong>!</p>\n              <p>Your account is now active and ready to use. You can start posting jobs or applying for opportunities right away.</p>\n              <p>You've received 20 coins to get started!</p>\n              <a href=\"/login\" class=\"button\">Login to Your Account</a>\n            </div>\n          </body>\n        </html>\n      `);\n      \n      console.log(`Email verified successfully for ${user.email}`);\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).send(`\n        <html>\n          <head><title>Verification Error - Jigz</title></head>\n          <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 50px;\">\n            <h2>❌ Verification Failed</h2>\n            <p>An error occurred during verification. Please try again or contact support.</p>\n            <a href=\"/\" style=\"color: #2563eb;\">Return to Jigz</a>\n          </body>\n        </html>\n      `);\n    }\n  });\n\n  // Serve uploaded files\n  app.use(\"/uploads\", (req, res, next) => {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    next();\n  });\n  app.use(\"/uploads\", express.static(uploadDir));\n\n  // Get current user (mock for now)\n  app.get(\"/api/user\", async (req, res) => {\n    const user = await storage.getUser(\"default-user\");\n    res.json(user);\n  });\n\n  // Update user profile\n  app.put(\"/api/user/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { name, username, email } = req.body;\n      \n      if (!name || !username || !email) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if username or email already exists for other users\n      const existingUserByUsername = await storage.getUserByUsername(username);\n      if (existingUserByUsername && existingUserByUsername.id !== userId) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const existingUserByEmail = await storage.getUserByEmail(email);\n      if (existingUserByEmail && existingUserByEmail.id !== userId) {\n        return res.status(400).json({ message: \"Email already in use\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, { name, username, email });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Change user password\n  app.put(\"/api/user/password\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password are required\" });\n      }\n\n      if (newPassword.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n\n      // Get current user to verify password\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.passwordHash || \"\");\n      if (!isCurrentPasswordValid) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const newPasswordHash = await bcrypt.hash(newPassword, 12);\n      \n      // Update password\n      const updatedUser = await storage.updateUser(userId, { passwordHash: newPasswordHash });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Job routes\n  // Advanced search endpoint with pagination and full-text search\n  app.get(\"/api/search/jobs\", async (req, res) => {\n    try {\n      // First, close any expired jobs before searching\n      await storage.closeExpiredJobs();\n      \n      const {\n        query,\n        category,\n        location,\n        experienceLevel,\n        minBudget,\n        maxBudget,\n        currency,\n        page,\n        limit,\n        sortBy,\n        sortOrder\n      } = req.query;\n\n      const searchParams = {\n        query: query as string,\n        category: category as string,\n        location: location as string,\n        experienceLevel: experienceLevel as string,\n        minBudget: minBudget ? parseInt(minBudget as string) : undefined,\n        maxBudget: maxBudget ? parseInt(maxBudget as string) : undefined,\n        currency: currency as string,\n        page: page ? parseInt(page as string) : 1,\n        limit: limit ? parseInt(limit as string) : 20,\n        sortBy: (sortBy as 'relevance' | 'date' | 'budget_low' | 'budget_high') || 'relevance',\n        sortOrder: (sortOrder as 'asc' | 'desc') || 'desc'\n      };\n\n      const result = await storage.searchJobs(searchParams);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const { category, location, minBudget, maxBudget } = req.query;\n      const filters = {\n        category: category as string,\n        location: location as string,\n        minBudget: minBudget ? parseInt(minBudget as string) : undefined,\n        maxBudget: maxBudget ? parseInt(maxBudget as string) : undefined,\n      };\n      \n      const jobs = await storage.getJobs(filters);\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Get application count for this job\n      const applications = await storage.getApplicationsByJobId(job.id);\n      const applicationCount = applications.length;\n      \n      // Return job with application count\n      res.json({ ...job, applicationCount });\n    } catch (error) {\n      console.error(\"Error fetching job:\", error);\n      res.status(500).json({ message: \"Failed to fetch job\" });\n    }\n  });\n\n  app.patch(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const job = await storage.updateJob(req.params.id, updates);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update job\" });\n    }\n  });\n\n  app.post(\"/api/jobs\", requireAuth, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      \n      // Check if user has enough coins (3 coins required)\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < 3) {\n        return res.status(400).json({ \n          message: \"Insufficient coins. You need 3 coins to post a job. Coins reset monthly.\",\n          coinsNeeded: 3,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Convert string budget values to numbers for validation\n      const formData = { ...req.body };\n      if (formData.minBudget) {\n        formData.minBudget = parseInt(formData.minBudget);\n      }\n      if (formData.maxBudget) {\n        formData.maxBudget = parseInt(formData.maxBudget);\n      }\n      if (formData.freelancersNeeded) {\n        formData.freelancersNeeded = parseInt(formData.freelancersNeeded);\n      }\n      \n      const jobData = insertJobSchema.parse(formData);\n      \n      // Handle uploaded images\n      const images: string[] = [];\n      if ((req as any).files && Array.isArray((req as any).files)) {\n        for (const file of (req as any).files) {\n          const filename = `${Date.now()}-${file.originalname}`;\n          const filepath = path.join(uploadDir, filename);\n          fs.renameSync(file.path, filepath);\n          images.push(`/uploads/${filename}`);\n        }\n      }\n\n      // Deduct coins and create job\n      await storage.deductCoins(userId, 3);\n      const job = await storage.createJob({ ...jobData, images }, userId);\n      res.status(201).json(job);\n    } catch (error: any) {\n      console.error(\"Error creating job:\", error);\n      res.status(400).json({ message: error.message || \"Invalid job data\" });\n    }\n  });\n\n  // Update job\n  app.put(\"/api/jobs/:id\", requireAuth, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const jobId = req.params.id;\n      \n      // Check if user has enough coins (1 coin required for editing)\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < 1) {\n        return res.status(400).json({ \n          message: \"Insufficient coins. You need 1 coin to edit a job posting. Coins reset monthly.\",\n          coinsNeeded: 1,\n          coinsAvailable: user.coins\n        });\n      }\n      \n      // Verify that the user owns this job\n      const existingJob = await storage.getJob(jobId);\n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      if (existingJob.userId !== userId) {\n        return res.status(403).json({ message: \"You can only edit your own job postings\" });\n      }\n      \n      // Deduct coins for editing\n      await storage.deductCoins(userId, 1);\n      \n      // Convert string budget values to numbers for validation\n      const formData = { ...req.body };\n      if (formData.minBudget) {\n        formData.minBudget = parseInt(formData.minBudget);\n      }\n      if (formData.maxBudget) {\n        formData.maxBudget = parseInt(formData.maxBudget);\n      }\n      if (formData.freelancersNeeded) {\n        formData.freelancersNeeded = parseInt(formData.freelancersNeeded);\n      }\n      \n      // Validate the form data without approvalStatus (which is excluded from insertSchema)\n      const validatedData = insertJobSchema.parse(formData);\n      \n      // Handle uploaded images\n      const images: string[] = [];\n      if ((req as any).files && Array.isArray((req as any).files)) {\n        for (const file of (req as any).files) {\n          const filename = `${Date.now()}-${file.originalname}`;\n          const filepath = path.join(uploadDir, filename);\n          fs.renameSync(file.path, filepath);\n          images.push(`/uploads/${filename}`);\n        }\n      }\n      \n      // Update job with validated data and reset approval status to pending\n      const updatedJob = await storage.updateJob(jobId, { \n        ...validatedData, \n        images: images.length > 0 ? images : undefined,\n        approvalStatus: \"pending\",\n        status: \"open\" // Ensure status is set to open when pending approval\n      });\n\n      if (!updatedJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      res.json(updatedJob);\n    } catch (error) {\n      console.error(\"Error updating job:\", error);\n      res.status(400).json({ message: \"Invalid job data\" });\n    }\n  });\n\n  // Get jobs by user\n  app.get(\"/api/user/jobs\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      \n      // First, close any expired jobs before fetching\n      await storage.closeExpiredJobs();\n      \n      const jobs = await storage.getJobsByUserId(userId);\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user jobs\" });\n    }\n  });\n\n  // Extend job expiry (costs 2 coins)\n  app.post(\"/api/jobs/:jobId/extend\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const jobId = req.params.jobId;\n      \n      // Check if user has enough coins (2 coins required)\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < 2) {\n        return res.status(400).json({ \n          message: \"Insufficient coins. You need 2 coins to extend a job posting. Coins reset monthly.\",\n          coinsNeeded: 2,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Verify job ownership\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      if (job.userId !== userId) {\n        return res.status(403).json({ message: \"You can only extend your own job postings\" });\n      }\n\n      // Deduct coins and extend expiry\n      await storage.deductCoins(userId, 2);\n      const extendedJob = await storage.extendJob(jobId);\n      \n      res.json(extendedJob);\n    } catch (error: any) {\n      console.error(\"Error extending job:\", error);\n      res.status(400).json({ message: error.message || \"Failed to extend job\" });\n    }\n  });\n\n  // Application routes\n  app.get(\"/api/jobs/:jobId/applications\", async (req, res) => {\n    try {\n      const applications = await storage.getApplicationsByJobId(req.params.jobId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  app.post(\"/api/applications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      \n      const applicationData = insertApplicationSchema.parse(req.body);\n      const coinsBid = applicationData.coinsBid || 0;\n      \n      // Calculate total coins needed: 1 for application + coins for bidding\n      const totalCoinsNeeded = 1 + coinsBid;\n      \n      // Check if user has enough coins\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < totalCoinsNeeded) {\n        return res.status(400).json({ \n          message: `Insufficient coins. You need ${totalCoinsNeeded} coins (1 for application${coinsBid > 0 ? ` + ${coinsBid} for bidding` : ''}). Coins reset monthly.`,\n          coinsNeeded: totalCoinsNeeded,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Check if user has already applied to this job\n      const hasApplied = await storage.hasUserAppliedToJob(userId, applicationData.jobId);\n      if (hasApplied) {\n        return res.status(400).json({ \n          message: \"You have already applied to this job\" \n        });\n      }\n      \n      // Deduct coins and create application\n      await storage.deductCoins(userId, totalCoinsNeeded);\n      const application = await storage.createApplication(applicationData, userId);\n      \n      // Create notification for the job poster\n      const job = await storage.getJob(applicationData.jobId);\n      const applicant = await storage.getUser(userId);\n      \n      if (job && applicant) {\n        const bidMessage = coinsBid > 0 ? ` (bid: ${coinsBid} coins for priority ranking)` : '';\n        await storage.createNotification({\n          userId: job.userId, // job poster's ID\n          jobId: job.id,\n          applicationId: application.id,\n          type: \"new_application\",\n          title: \"New Application Received!\",\n          message: `${applicant.name} has applied to your job \"${job.title}\"${bidMessage}. Check your dashboard to review their application.`\n        });\n      }\n      \n      res.status(201).json(application);\n    } catch (error: any) {\n      console.error(\"Error creating application:\", error);\n      res.status(400).json({ message: error.message || \"Invalid application data\" });\n    }\n  });\n\n  app.get(\"/api/user/applications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const applications = await storage.getApplicationsByUserId(userId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user applications\" });\n    }\n  });\n\n  // Check if user has applied to a specific job\n  app.get(\"/api/jobs/:jobId/application-status\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const jobId = req.params.jobId;\n      const hasApplied = await storage.hasUserAppliedToJob(userId, jobId);\n      res.json({ hasApplied });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check application status\" });\n    }\n  });\n\n  // Get top bidders for a job\n  app.get(\"/api/jobs/:jobId/top-bidders\", async (req, res) => {\n    try {\n      const jobId = req.params.jobId;\n      const topBidders = await storage.getTopBidders(jobId);\n      res.json(topBidders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get top bidders\" });\n    }\n  });\n\n  // Add bid to existing application\n  app.post(\"/api/applications/:applicationId/bid\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const applicationId = req.params.applicationId;\n      const { additionalCoins } = req.body;\n      \n      // Validate additional coins amount\n      if (!additionalCoins || additionalCoins < 1) {\n        return res.status(400).json({ \n          message: \"Additional coins must be at least 1\" \n        });\n      }\n\n      // Get the application and verify ownership\n      const application = await storage.getApplication(applicationId);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      if (application.userId !== userId) {\n        return res.status(403).json({ message: \"You can only bid on your own applications\" });\n      }\n\n      // Check if user has enough coins\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < additionalCoins) {\n        return res.status(400).json({ \n          message: `Insufficient coins. You need ${additionalCoins} additional coins for bidding.`,\n          coinsNeeded: additionalCoins,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Deduct coins and update application bid\n      await storage.deductCoins(userId, additionalCoins);\n      const newCoinsBid = (application.coinsBid || 0) + additionalCoins;\n      const updatedApplication = await storage.updateApplication(applicationId, { \n        coinsBid: newCoinsBid \n      });\n\n      // Create notification for job poster about increased bid\n      const job = await storage.getJob(application.jobId);\n      const applicant = await storage.getUser(userId);\n      \n      if (job && applicant) {\n        await storage.createNotification({\n          userId: job.userId,\n          jobId: job.id,\n          applicationId: applicationId,\n          type: \"bid_update\",\n          title: \"Application Bid Updated!\",\n          message: `${applicant.name} has increased their bid to ${newCoinsBid} coins for your job \"${job.title}\".`\n        });\n      }\n\n      res.json(updatedApplication);\n    } catch (error: any) {\n      console.error(\"Error adding bid:\", error);\n      res.status(400).json({ message: error.message || \"Failed to add bid\" });\n    }\n  });\n\n  // Get application ranking for a job (shows bid rankings)\n  app.get(\"/api/jobs/:jobId/application-rankings\", async (req, res) => {\n    try {\n      const jobId = req.params.jobId;\n      const applications = await storage.getApplicationsByJobId(jobId);\n      \n      // Add ranking information\n      const rankedApplications = applications.map((app, index) => ({\n        ...app,\n        rank: index + 1,\n        isBidding: (app.coinsBid || 0) > 0\n      }));\n\n      res.json(rankedApplications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch application rankings\" });\n    }\n  });\n\n  app.patch(\"/api/applications/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const application = await storage.updateApplication(req.params.id, updates);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n\n      // Create notification and send email when application is accepted\n      if (updates.status === \"accepted\") {\n        const job = await storage.getJob(application.jobId);\n        const applicant = await storage.getUser(application.userId);\n        const jobPoster = job ? await storage.getUser(job.userId) : null;\n        \n        if (job && applicant) {\n          // Create in-app notification\n          await storage.createNotification({\n            userId: application.userId,\n            jobId: application.jobId,\n            applicationId: application.id,\n            type: \"application_accepted\",\n            title: \"Application Accepted!\",\n            message: `Your application for \"${job.title}\" has been accepted. The job poster will contact you soon.`\n          });\n\n          // Send email notification\n          if (applicant.email && jobPoster) {\n            console.log(`Sending application acceptance email to ${applicant.email} for job \"${job.title}\"`);\n            try {\n              const emailSent = await emailService.sendApplicationAcceptedEmail(\n                applicant.email,\n                applicant.name || applicant.username,\n                job.title,\n                jobPoster.name || jobPoster.username\n              );\n              console.log(`Application acceptance email sent successfully: ${emailSent}`);\n            } catch (error) {\n              console.error('Failed to send application acceptance email:', error);\n            }\n          } else {\n            console.log(\"Missing applicant email or job poster for application acceptance notification\");\n          }\n        }\n      }\n\n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update application\" });\n    }\n  });\n\n  // Mark application as completed\n  app.patch(\"/api/applications/:id/complete\", requireAuth, async (req, res) => {\n    try {\n      const applicationId = req.params.id;\n      const userId = (req.user as any).id;\n      \n      // First verify that the current user is the job poster for this application\n      const application = await storage.getApplication(applicationId);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      const job = await storage.getJob(application.jobId);\n      if (!job || job.userId !== userId) {\n        return res.status(403).json({ message: \"Only the job poster can mark applications as completed\" });\n      }\n      \n      // Check if application is accepted\n      if (application.status !== \"accepted\") {\n        return res.status(400).json({ message: \"Only accepted applications can be marked as completed\" });\n      }\n      \n      const updatedApplication = await storage.markApplicationCompleted(applicationId);\n      \n      // Create notification for the freelancer\n      const freelancer = await storage.getUser(application.userId);\n      if (freelancer) {\n        await storage.createNotification({\n          userId: freelancer.id,\n          jobId: job.id,\n          applicationId: applicationId,\n          type: \"job_completed\",\n          title: \"Work Marked as Completed!\",\n          message: `The client has marked your work for \"${job.title}\" as completed. Great job!`\n        });\n      }\n      \n      res.json(updatedApplication);\n    } catch (error) {\n      console.error(\"Error marking application as completed:\", error);\n      res.status(500).json({ message: \"Failed to mark application as completed\" });\n    }\n  });\n\n  // Extend job endpoint\n  app.post(\"/api/jobs/:jobId/extend\", requireAuth, async (req, res) => {\n    try {\n      const jobId = req.params.jobId;\n      const userId = (req.user as any).id;\n      \n      // Verify the user owns this job\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      if (job.userId !== userId) {\n        return res.status(403).json({ message: \"Only the job owner can extend this job\" });\n      }\n      \n      // Check if user has enough coins (extension costs 2 coins)\n      const userCoins = await storage.getUserCoins(userId);\n      if (userCoins < 2) {\n        return res.status(400).json({ message: \"Insufficient coins. You need 2 coins to extend a job for 30 days.\" });\n      }\n      \n      // Deduct coins and extend job\n      await storage.deductCoins(userId, 2);\n      await storage.extendJob(jobId);\n      \n      const updatedJob = await storage.getJob(jobId);\n      res.json({\n        message: \"Job extended successfully for 30 days\",\n        job: updatedJob,\n        coinsDeducted: 2\n      });\n    } catch (error: any) {\n      console.error(\"Error extending job:\", error);\n      res.status(500).json({ message: \"Failed to extend job: \" + error.message });\n    }\n  });\n\n  // Extend service endpoint\n  app.post(\"/api/services/:serviceId/extend\", requireAuth, async (req, res) => {\n    try {\n      const serviceId = req.params.serviceId;\n      const userId = (req.user as any).id;\n      \n      // Verify the user owns this service\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      if (service.userId !== userId) {\n        return res.status(403).json({ message: \"Only the service owner can extend this service\" });\n      }\n      \n      // Check if user has enough coins (extension costs 7 coins)\n      const userCoins = await storage.getUserCoins(userId);\n      if (userCoins < 7) {\n        return res.status(400).json({ message: \"Insufficient coins. You need 7 coins to extend a service for 30 days.\" });\n      }\n      \n      // Deduct coins and extend service\n      await storage.deductCoins(userId, 7);\n      const extendedService = await storage.extendService(serviceId, userId);\n      \n      res.json({\n        message: \"Service extended successfully for 30 days\",\n        service: extendedService,\n        coinsDeducted: 7\n      });\n    } catch (error: any) {\n      console.error(\"Error extending service:\", error);\n      res.status(500).json({ message: \"Failed to extend service: \" + error.message });\n    }\n  });\n\n  // City search endpoint - using comprehensive JIGZ database\n  app.get(\"/api/cities/search\", async (req, res) => {\n    try {\n      const { q, limit } = req.query;\n      const searchTerm = typeof q === 'string' ? q : '';\n      const searchLimit = typeof limit === 'string' ? parseInt(limit) : 50;\n      \n      // Use the comprehensive JIGZ database searchCities function\n      const { searchCities } = await import('../shared/cities.js');  \n      const cities = searchCities(searchTerm, searchLimit);\n      res.json(cities);\n    } catch (error) {\n      console.error('City search error:', error);\n      res.status(500).json({ error: 'Failed to search cities' });\n    }\n  });\n\n  // Review routes\n  app.get(\"/api/user/stats/:userId\", async (req, res) => {\n    try {\n      const userStats = await storage.getUserStats(req.params.userId);\n      if (!userStats) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(userStats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  app.get(\"/api/reviews/user/:userId\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByUserId(req.params.userId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Alternative route that frontend expects\n  app.get(\"/api/user/reviews/:userId\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByUserId(req.params.userId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        reviewerId: userId // Ensure the reviewer ID comes from the authenticated user\n      });\n      \n      const review = await storage.createReview(reviewData);\n      \n      // Create notification for the user being reviewed\n      const reviewer = await storage.getUser(userId);\n      const reviewee = await storage.getUser(reviewData.revieweeId);\n      \n      if (reviewer && reviewee) {\n        await storage.createNotification({\n          userId: reviewData.revieweeId, // user being reviewed\n          jobId: reviewData.jobId,\n          applicationId: reviewData.jobId, // Use jobId as placeholder since applicationId is required\n          type: \"new_review\",\n          title: \"New Review Received!\",\n          message: `${reviewer.name} has left you a ${reviewData.rating}-star review. Check your profile to see the full review.`\n        });\n      }\n      \n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      \n      // Check if it's a duplicate review error\n      if (error instanceof Error && error.message.includes('already reviewed')) {\n        return res.status(400).json({ \n          message: \"You have already reviewed this freelancer for this job. Each job can only be reviewed once.\" \n        });\n      }\n      \n      res.status(400).json({ message: \"Invalid review data\" });\n    }\n  });\n\n  app.get(\"/api/reviews/job/:jobId\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsForJob(req.params.jobId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch job reviews\" });\n    }\n  });\n\n  // Check if freelancer can rate client\n  app.get(\"/api/reviews/can-rate-client/:jobId/:clientId\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const { jobId, clientId } = req.params;\n      const canRate = await storage.canFreelancerRateClient(userId, clientId, jobId);\n      const hasRated = await storage.hasFreelancerRatedClient(userId, clientId, jobId);\n      \n      res.json({ canRate, hasRated });\n    } catch (error) {\n      console.error(\"Error checking rating eligibility:\", error);\n      res.status(500).json({ message: \"Failed to check rating eligibility\" });\n    }\n  });\n\n  // Check if service provider can rate client for service\n  app.get(\"/api/reviews/can-rate-client-service/:serviceId/:clientId\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const { serviceId, clientId } = req.params;\n      const canRate = await storage.canServiceProviderRateClient(userId, clientId, serviceId);\n      const hasRated = await storage.hasFreelancerRatedClient(userId, clientId, serviceId);\n      \n      res.json({ canRate, hasRated });\n    } catch (error) {\n      console.error(\"Error checking service rating eligibility:\", error);\n      res.status(500).json({ message: \"Failed to check service rating eligibility\" });\n    }\n  });\n\n  // Check if client has already rated service provider for specific service\n  app.get(\"/api/reviews/has-client-rated-service/:serviceId/:serviceProviderId\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const { serviceId, serviceProviderId } = req.params;\n      const hasRated = await storage.hasClientRatedServiceProvider(userId, serviceProviderId, serviceId);\n      \n      res.json({ hasRated });\n    } catch (error) {\n      console.error(\"Error checking if client has rated service provider:\", error);\n      res.status(500).json({ message: \"Failed to check rating status\" });\n    }\n  });\n\n  // Create freelancer review for client\n  app.post(\"/api/reviews/rate-client\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      console.log(`[DEBUG] rate-client request body:`, req.body);\n      \n      // Map clientId to revieweeId for consistency\n      const requestBody = { ...req.body };\n      if (requestBody.clientId) {\n        requestBody.revieweeId = requestBody.clientId;\n        delete requestBody.clientId;\n      }\n      \n      console.log(`[DEBUG] mapped request body:`, requestBody);\n      \n      // Ensure all required fields are present\n      const reviewData = insertReviewSchema.parse({\n        jobId: requestBody.jobId,\n        reviewerId: userId,\n        revieweeId: requestBody.revieweeId,\n        rating: requestBody.rating,\n        comment: requestBody.comment || null,\n        reviewType: \"worker_to_client\"\n      });\n\n      // Verify freelancer can rate this client (check both jobs and services)\n      const canRateJob = await storage.canFreelancerRateClient(userId, reviewData.revieweeId, reviewData.jobId);\n      const canRateService = await storage.canServiceProviderRateClient(userId, reviewData.revieweeId, reviewData.jobId);\n      \n      if (!canRateJob && !canRateService) {\n        return res.status(403).json({ message: \"You can only rate clients for jobs where your application was accepted or services where you accepted their request\" });\n      }\n\n      // Check if already rated\n      const hasRated = await storage.hasFreelancerRatedClient(userId, reviewData.revieweeId, reviewData.jobId);\n      if (hasRated) {\n        return res.status(409).json({ message: \"You have already rated this client for this job\" });\n      }\n\n      const review = await storage.createReview(reviewData);\n      \n      // Create notification for the client being reviewed\n      const reviewer = await storage.getUser(userId);\n      const reviewee = await storage.getUser(reviewData.revieweeId);\n      \n      if (reviewer && reviewee) {\n        await storage.createNotification({\n          userId: reviewData.revieweeId,\n          jobId: reviewData.jobId,\n          applicationId: reviewData.jobId,\n          type: \"new_review\",\n          title: \"New Review Received!\",\n          message: `${reviewer.name} has left you a ${reviewData.rating}-star review as a client. Check your profile to see the full review.`\n        });\n      }\n      \n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating client review:\", error);\n      res.status(400).json({ message: \"Invalid review data\" });\n    }\n  });\n\n  // Messaging routes\n  app.get(\"/api/conversations\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const conversations = await storage.getConversationsByUser(userId);\n      \n      // Debug: Log conversation data to see what's being returned\n      if (conversations.length > 0) {\n        console.log('[DEBUG] Conversations returned:', conversations.map(c => ({\n          id: c.id,\n          otherUser: c.otherUser?.name,\n          service: c.service?.title,\n          job: c.job?.title,\n          isServiceConversation: !!c.serviceProviderId\n        })));\n      }\n      \n      res.json(conversations);\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const conversationData = insertConversationSchema.parse(req.body);\n      const conversation = await storage.createConversation(conversationData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(400).json({ message: \"Invalid conversation data\" });\n    }\n  });\n\n  // Create service conversation endpoint\n  app.post(\"/api/service-conversations\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const { serviceRequestId } = req.body;\n      \n      if (!serviceRequestId) {\n        return res.status(400).json({ message: \"Service request ID is required\" });\n      }\n      \n      // Get the service request to find the service and participants\n      const serviceRequest = await storage.getServiceRequest(serviceRequestId);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Service request not found\" });\n      }\n      \n      // Get the service to find the provider\n      const service = await storage.getService(serviceRequest.serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      // Check if conversation already exists for this service request\n      const existingConversation = await storage.getConversationByServiceRequest(serviceRequestId);\n      if (existingConversation) {\n        return res.json(existingConversation);\n      }\n      \n      // Create new service conversation\n      const conversationData = {\n        serviceId: service.id,\n        serviceRequestId: serviceRequestId,\n        serviceProviderId: service.userId,\n        serviceRequesterId: serviceRequest.userId,\n      };\n      \n      const conversation = await storage.createConversation(conversationData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      console.error(\"Error creating service conversation:\", error);\n      res.status(500).json({ message: \"Failed to create service conversation\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      const conversation = await storage.getConversation(req.params.id);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      \n      // Verify user is part of this conversation (job or service conversation)\n      const isJobConversation = conversation.jobPosterId && conversation.applicantId;\n      const isServiceConversation = conversation.serviceProviderId && conversation.serviceRequesterId;\n      \n      const hasJobAccess = isJobConversation && (conversation.jobPosterId === userId || conversation.applicantId === userId);\n      const hasServiceAccess = isServiceConversation && (conversation.serviceProviderId === userId || conversation.serviceRequesterId === userId);\n      \n      if (!hasJobAccess && !hasServiceAccess) {\n        return res.status(403).json({ message: \"Access denied to this conversation\" });\n      }\n      \n      // Fix the otherUser based on the current user's perspective\n      if (isServiceConversation) {\n        let otherUser;\n        if (conversation.serviceProviderId === userId) {\n          // Current user is provider, so other user is requester\n          otherUser = conversation.serviceRequesterId ? await storage.getUser(conversation.serviceRequesterId) : null;\n        } else {\n          // Current user is requester, so other user is provider\n          otherUser = conversation.serviceProviderId ? await storage.getUser(conversation.serviceProviderId) : null;\n        }\n        \n        const updatedConversation = {\n          ...conversation,\n          otherUser: otherUser || conversation.otherUser\n        };\n        \n        res.json(updatedConversation);\n      } else {\n        res.json(conversation);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id/messages\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      // Verify user is part of this conversation\n      const conversation = await storage.getConversation(req.params.id);\n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied to this conversation\" });\n      }\n      \n      const isJobConversation = conversation.jobPosterId && conversation.applicantId;\n      const isServiceConversation = conversation.serviceProviderId && conversation.serviceRequesterId;\n      \n      const hasJobAccess = isJobConversation && (conversation.jobPosterId === userId || conversation.applicantId === userId);\n      const hasServiceAccess = isServiceConversation && (conversation.serviceProviderId === userId || conversation.serviceRequesterId === userId);\n      \n      if (!hasJobAccess && !hasServiceAccess) {\n        return res.status(403).json({ message: \"Access denied to this conversation\" });\n      }\n\n      const messages = await storage.getMessagesByConversation(req.params.id);\n      \n      // Automatically mark messages as read when user opens the conversation\n      await storage.markMessagesAsRead(req.params.id, userId);\n      \n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Verify user is part of this conversation\n      const conversation = await storage.getConversation(req.params.id);\n      if (!conversation) {\n        return res.status(403).json({ message: \"Access denied to this conversation\" });\n      }\n      \n      const isJobConversation = conversation.jobPosterId && conversation.applicantId;\n      const isServiceConversation = conversation.serviceProviderId && conversation.serviceRequesterId;\n      \n      const hasJobAccess = isJobConversation && (conversation.jobPosterId === userId || conversation.applicantId === userId);\n      const hasServiceAccess = isServiceConversation && (conversation.serviceProviderId === userId || conversation.serviceRequesterId === userId);\n      \n      if (!hasJobAccess && !hasServiceAccess) {\n        return res.status(403).json({ message: \"Access denied to this conversation\" });\n      }\n\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        conversationId: req.params.id,\n        senderId: userId\n      });\n      const message = await storage.createMessage(messageData);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n\n  app.patch(\"/api/conversations/:id/mark-read\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      await storage.markMessagesAsRead(req.params.id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark messages as read\" });\n    }\n  });\n\n  app.get(\"/api/conversations/application/:applicationId\", async (req, res) => {\n    try {\n      const conversation = await storage.getConversationByApplicationId(req.params.applicationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      res.json(conversation);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.get(\"/api/user/unread-messages\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const count = await storage.getUnreadMessageCount(userId);\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch unread message count\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const notifications = await storage.getNotificationsByUserId(userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/read-all\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n\n\n  app.get(\"/api/notifications/unread-count\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get unread notification count\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/ban\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.banUser(req.params.id);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to ban user\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/unban\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.unbanUser(req.params.id);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to unban user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const adminId = (req.user as any)?.id;\n      \n      // Prevent admin from deleting themselves\n      if (userId === adminId) {\n        return res.status(400).json({ message: \"You cannot delete your own account\" });\n      }\n      \n      // Check if user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Delete the user and all associated data\n      await storage.deleteUser(userId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.get(\"/api/admin/jobs/pending\", requireModerator, async (req, res) => {\n    try {\n      const jobs = await storage.getPendingJobs();\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending jobs\" });\n    }\n  });\n\n  app.get(\"/api/admin/services/pending\", requireModerator, async (req, res) => {\n    try {\n      const services = await storage.getPendingServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending services\" });\n    }\n  });\n\n  // Get all approved services for admin\n  app.get(\"/api/admin/services/approved\", requireModerator, async (req, res) => {\n    try {\n      const services = await storage.getApprovedServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch approved services\" });\n    }\n  });\n\n  app.patch(\"/api/admin/jobs/:id/approve\", requireModerator, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id || \"admin\";\n      const jobId = req.params.id;\n      \n      // Get job details before approval to get user info\n      const jobBeforeApproval = await storage.getJob(jobId);\n      if (!jobBeforeApproval) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Get job poster details for email\n      const jobPoster = await storage.getUser(jobBeforeApproval.userId);\n      \n      // Approve the job\n      const job = await storage.approveJob(jobId, userId);\n      \n      // Send approval email notification\n      if (jobPoster && jobPoster.email) {\n        console.log(`Sending job approval email to ${jobPoster.email} for job \"${job.title}\"`);\n        try {\n          const emailSent = await emailService.sendJobStatusNotification(\n            jobPoster.email,\n            jobPoster.name || jobPoster.username,\n            job.title,\n            \"approved\"\n          );\n          console.log(`Job approval email sent successfully: ${emailSent}`);\n        } catch (emailError) {\n          console.error(\"Error sending job approval email:\", emailError);\n        }\n      } else {\n        console.log(\"No job poster or email found for notification\");\n      }\n      \n      res.json(job);\n    } catch (error) {\n      console.error(\"Error approving job:\", error);\n      res.status(500).json({ message: \"Failed to approve job\" });\n    }\n  });\n\n  app.patch(\"/api/admin/jobs/:id/reject\", requireModerator, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id || \"admin\";\n      const jobId = req.params.id;\n      const { adminNotes } = req.body;\n      \n      // Get job details before rejection to get user info\n      const jobBeforeRejection = await storage.getJob(jobId);\n      if (!jobBeforeRejection) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Get job poster details for email\n      const jobPoster = await storage.getUser(jobBeforeRejection.userId);\n      \n      // Reject the job\n      const job = await storage.rejectJob(jobId, userId);\n      \n      // Send rejection email notification\n      if (jobPoster && jobPoster.email) {\n        await emailService.sendJobStatusNotification(\n          jobPoster.email,\n          jobPoster.name || jobPoster.username,\n          job.title,\n          \"rejected\",\n          adminNotes\n        );\n      }\n      \n      res.json(job);\n    } catch (error) {\n      console.error(\"Error rejecting job:\", error);\n      res.status(500).json({ message: \"Failed to reject job\" });\n    }\n  });\n\n  app.patch(\"/api/admin/services/:id/approve\", requireModerator, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id || \"admin\";\n      const serviceId = req.params.id;\n      \n      const service = await storage.approveService(serviceId, userId);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error approving service:\", error);\n      res.status(500).json({ message: \"Failed to approve service\" });\n    }\n  });\n\n  app.patch(\"/api/admin/services/:id/reject\", requireModerator, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id || \"admin\";\n      const serviceId = req.params.id;\n      \n      const service = await storage.rejectService(serviceId, userId);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error rejecting service:\", error);\n      res.status(500).json({ message: \"Failed to reject service\" });\n    }\n  });\n\n  // Admin service deletion endpoint\n  app.delete(\"/api/admin/services/:id\", requireAdmin, async (req, res) => {\n    try {\n      const serviceId = req.params.id;\n      \n      // First check if service exists\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      // Delete the service and all related data\n      await storage.deleteService(serviceId);\n      \n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/promote\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.promoteToAdmin(req.params.id);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to promote user to admin\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/demote\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.demoteFromAdmin(req.params.id);\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to demote user from admin\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/promote-moderator\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.promoteToModerator(req.params.id);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error promoting user to moderator:\", error);\n      res.status(500).json({ message: \"Failed to promote user to moderator\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/demote-moderator\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.demoteFromModerator(req.params.id);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error demoting moderator:\", error);\n      res.status(500).json({ message: \"Failed to demote moderator\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/change-password\", requireAdmin, async (req, res) => {\n    try {\n      const { newPassword } = req.body;\n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n      \n      // bcrypt is imported at the top of the file\n      const passwordHash = await bcrypt.hash(newPassword, 10);\n      const user = await storage.changeUserPassword(req.params.id, passwordHash);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error changing user password:\", error);\n      res.status(500).json({ message: \"Failed to change user password\" });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get admin statistics\" });\n    }\n  });\n\n  app.delete(\"/api/admin/jobs/:id\", requireAdmin, async (req, res) => {\n    try {\n      const jobId = req.params.id;\n      const adminId = (req.user as any)?.id || \"admin\";\n      \n      // First check if job exists\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Delete the job and all related data\n      await storage.deleteJob(jobId);\n      \n      res.json({ message: \"Job deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Get all approved jobs for admin\n  app.get(\"/api/admin/jobs/approved\", requireModerator, async (req, res) => {\n    try {\n      const jobs = await storage.getApprovedJobs();\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch approved jobs\" });\n    }\n  });\n\n  // Moderator job deletion endpoint\n  app.delete(\"/api/admin/jobs/:id\", requireModerator, async (req, res) => {\n    try {\n      await storage.deleteJob(req.params.id);\n      res.json({ message: \"Job deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Coin management endpoints\n  app.get(\"/api/user/coins\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const coins = await storage.getUserCoins(userId);\n      const user = await storage.getUser(userId);\n      res.json({ \n        coins, \n        lastReset: user?.lastCoinReset,\n        daysUntilReset: user?.lastCoinReset ? Math.max(0, 30 - Math.floor((Date.now() - new Date(user.lastCoinReset).getTime()) / (1000 * 60 * 60 * 24))) : 30\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch coin balance\" });\n    }\n  });\n\n  app.post(\"/api/user/coins/check-reset\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const user = await storage.checkAndResetCoins(userId);\n      res.json({ \n        coins: user.coins, \n        lastReset: user.lastCoinReset,\n        daysUntilReset: user.lastCoinReset ? Math.max(0, 30 - Math.floor((Date.now() - new Date(user.lastCoinReset).getTime()) / (1000 * 60 * 60 * 24))) : 30\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check coin reset\" });\n    }\n  });\n\n  // Spend coins endpoint\n  app.post(\"/api/user/spend-coins\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { amount, reason } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ error: \"Invalid amount\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      if (user.coins < amount) {\n        return res.status(400).json({ error: \"Insufficient coins\" });\n      }\n\n      // Deduct coins\n      const updatedUser = await storage.removeCoinsFromUser(userId, amount);\n      \n      res.json({ \n        success: true,\n        coinsRemaining: updatedUser.coins,\n        reason: reason || \"Coin spent\"\n      });\n    } catch (error) {\n      console.error(\"Error spending coins:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin coin management endpoints\n  app.get(\"/api/admin/users/coins\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsersWithCoins();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users with coins\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/coins/add\", requireAdmin, async (req, res) => {\n    try {\n      const { amount } = req.body;\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Amount must be a positive number\" });\n      }\n      const user = await storage.addCoinsToUser(req.params.id, amount);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to add coins to user\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/coins/remove\", requireAdmin, async (req, res) => {\n    try {\n      const { amount } = req.body;\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Amount must be a positive number\" });\n      }\n      const user = await storage.removeCoinsFromUser(req.params.id, amount);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to remove coins from user\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/coins/set\", requireAdmin, async (req, res) => {\n    try {\n      const { amount } = req.body;\n      if (amount < 0) {\n        return res.status(400).json({ message: \"Amount cannot be negative\" });\n      }\n      const user = await storage.setUserCoins(req.params.id, amount);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to set user coins\" });\n    }\n  });\n\n  // Apply coin caps to all users\n  app.post(\"/api/admin/apply-coin-caps\", requireAdmin, async (req, res) => {\n    try {\n      console.log(\"Admin triggered coin cap enforcement for all users\");\n      await storage.applyCoincapToAllUsers();\n      res.json({ message: \"Coin caps applied to all users successfully\" });\n    } catch (error: any) {\n      console.error(\"Error applying coin caps:\", error);\n      res.status(500).json({ message: error.message || \"Failed to apply coin caps\" });\n    }\n  });\n\n  // Admin subscription management\n  app.post(\"/api/admin/users/:userId/subscription\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { planType } = req.body;\n      \n      // Import SUBSCRIPTION_PLANS \n      const { SUBSCRIPTION_PLANS } = await import(\"@shared/schema\");\n      \n      // Validate planType\n      if (!planType || (planType !== \"none\" && !SUBSCRIPTION_PLANS[planType as keyof typeof SUBSCRIPTION_PLANS])) {\n        return res.status(400).json({ message: \"Invalid plan type\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // If planType is \"none\", remove subscription\n      if (planType === \"none\") {\n        await storage.removeUserSubscription(userId);\n        return res.json({ message: \"Subscription removed successfully\" });\n      }\n      \n      // Update subscription plan\n      await storage.updateUserSubscription(userId, planType);\n      res.json({ message: \"Subscription updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user subscription:\", error);\n      res.status(500).json({ message: \"Failed to update subscription\" });\n    }\n  });\n\n  // Profile management endpoints\n  app.get(\"/api/user/profile/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUserProfile(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't send password hash and other sensitive data\n      const { passwordHash, googleId, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  // Get user subscription information\n  app.get(\"/api/user/:userId/subscription\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const subscription = await storage.getUserActiveSubscription(userId);\n      \n      if (!subscription) {\n        return res.json({ subscription: null });\n      }\n      \n      res.json({ subscription });\n    } catch (error) {\n      console.error(\"Error fetching user subscription:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription\" });\n    }\n  });\n\n  app.patch(\"/api/user/profile\", requireAuth, upload.single(\"profileImage\"), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { name, email } = req.body;\n      \n      const updates: { name?: string; email?: string; profileImageUrl?: string } = {};\n      \n      if (name) updates.name = name;\n      if (email) updates.email = email;\n      \n      // Handle profile image upload\n      if (req.file) {\n        const imageUrl = `/uploads/${req.file.filename}`;\n        updates.profileImageUrl = imageUrl;\n      }\n      \n      const updatedUser = await storage.updateUserProfile(userId, updates);\n      const { passwordHash, googleId, ...safeUser } = updatedUser;\n      \n      res.json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n\n\n  app.get(\"/api/user/completed-jobs/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const completedJobs = await storage.getUserCompletedJobs(userId);\n      res.json(completedJobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch completed jobs\" });\n    }\n  });\n\n  app.get(\"/api/user/posted-jobs/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const postedJobs = await storage.getUserPostedJobs(userId);\n      res.json(postedJobs);\n    } catch (error) {\n      console.error(\"Error fetching posted jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch posted jobs\" });\n    }\n  });\n\n  app.get(\"/api/user/reviews/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const reviews = await storage.getUserReviews(userId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user reviews\" });\n    }\n  });\n\n  // Delete job endpoint for users\n  app.delete(\"/api/jobs/:id\", requireAuth, async (req, res) => {\n    try {\n      const jobId = req.params.id;\n      const userId = (req.user as any).id;\n      \n      // Check if job exists and belongs to the user\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      if (job.userId !== userId) {\n        return res.status(403).json({ message: \"You can only delete your own jobs\" });\n      }\n      \n      // Delete the job and all related data\n      await storage.deleteJob(jobId);\n      \n      res.json({ message: \"Job deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Job Report endpoints\n  app.post(\"/api/jobs/:jobId/reports\", requireAuth, async (req, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = (req.user as any).id;\n      \n      // Check if job exists\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check if user already reported this job\n      const hasReported = await storage.hasUserReportedJob(userId, jobId);\n      if (hasReported) {\n        return res.status(400).json({ message: \"You have already reported this job\" });\n      }\n      \n      // Validate report data\n      const validatedData = insertJobReportSchema.parse({\n        ...req.body,\n        jobId\n      });\n      \n      const report = await storage.createJobReport(validatedData, userId);\n      res.status(201).json(report);\n    } catch (error: any) {\n      console.error(\"Job report creation error:\", error);\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ \n          message: \"Invalid report data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create job report\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:jobId/reports\", requireAuth, async (req, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = (req.user as any).id;\n      \n      // Only job owner or admin can view reports for a job\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (job.userId !== userId && user?.role !== \"admin\") {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const reports = await storage.getJobReportsByJobId(jobId);\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch job reports\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:jobId/reports/check\", requireAuth, async (req, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = (req.user as any).id;\n      \n      const hasReported = await storage.hasUserReportedJob(userId, jobId);\n      res.json({ hasReported });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check report status\" });\n    }\n  });\n\n  // Admin job report management endpoints\n  app.get(\"/api/admin/reports\", requireModerator, async (req, res) => {\n    try {\n      const { status } = req.query;\n      \n      let reports;\n      if (status === \"pending\") {\n        reports = await storage.getPendingJobReports();\n      } else {\n        reports = await storage.getAllJobReports();\n      }\n      \n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  // Additional endpoint for pending reports\n  app.get(\"/api/admin/reports/pending\", requireModerator, async (req, res) => {\n    try {\n      const reports = await storage.getPendingJobReports();\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending reports\" });\n    }\n  });\n\n  app.patch(\"/api/admin/reports/:reportId\", requireModerator, async (req, res) => {\n    try {\n      const { reportId } = req.params;\n      const adminId = (req.user as any).id;\n      const { status, adminNotes } = req.body;\n      \n      if (![\"reviewed\", \"resolved\", \"dismissed\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      // Get the report first to check if we need to delete the job\n      const existingReport = await storage.getJobReport(reportId);\n      if (!existingReport) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n      \n      const updates = {\n        status,\n        adminNotes,\n        reviewedBy: adminId,\n        reviewedAt: new Date()\n      };\n      \n      const updatedReport = await storage.updateJobReport(reportId, updates);\n      \n      if (!updatedReport) {\n        return res.status(404).json({ message: \"Report not found\" });\n      }\n      \n      // If report is reviewed (approved) or resolved, delete the reported job\n      if (status === \"reviewed\" || status === \"resolved\") {\n        try {\n          await storage.deleteJob(existingReport.jobId);\n          console.log(`Job ${existingReport.jobId} deleted due to accepted report ${reportId} (status: ${status})`);\n        } catch (deleteError) {\n          console.error(`Failed to delete job ${existingReport.jobId} after accepting report:`, deleteError);\n          // Continue even if job deletion fails - the report update was successful\n        }\n      }\n      \n      res.json(updatedReport);\n    } catch (error) {\n      console.error(\"Failed to update report:\", error);\n      res.status(500).json({ message: \"Failed to update report\" });\n    }\n  });\n\n\n\n\n\n  // Email verification route\n  app.post(\"/api/auth/verify-email\", async (req, res) => {\n    try {\n      const { token } = req.body;\n\n      if (!token) {\n        return res.status(400).json({ message: \"Verification token is required\" });\n      }\n\n      // Get token from storage\n      const verificationToken = await storage.getEmailVerificationToken(token);\n      \n      if (!verificationToken) {\n        return res.status(400).json({ message: \"Invalid or expired verification token\" });\n      }\n\n      // Check if token has expired\n      if (new Date() > verificationToken.expiresAt) {\n        await storage.deleteEmailVerificationToken(token);\n        return res.status(400).json({ message: \"Verification token has expired\" });\n      }\n\n      // Verify the user's email\n      const user = await storage.verifyUserEmail(verificationToken.email);\n      \n      if (!user) {\n        return res.status(400).json({ message: \"User not found\" });\n      }\n\n      // Delete the used token\n      await storage.deleteEmailVerificationToken(token);\n\n      // Send welcome email\n      if (emailService.isConfigured()) {\n        await emailService.sendWelcomeEmail(user.email, user.name);\n      }\n\n      res.json({ \n        message: \"Email verified successfully\",\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          isEmailVerified: user.isEmailVerified\n        }\n      });\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).json({ message: \"Failed to verify email\" });\n    }\n  });\n\n  // Password reset routes\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = passwordResetRequestSchema.parse(req.body);\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists or not for security\n        return res.json({ message: \"If the email exists, a password reset link has been sent.\" });\n      }\n\n      // Don't allow password reset for Google OAuth users\n      if (user.provider === \"google\") {\n        return res.status(400).json({ message: \"Password reset is not available for Google accounts. Please sign in with Google.\" });\n      }\n\n      // Generate reset token\n      const resetToken = generateVerificationToken();\n      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour from now\n\n      // Update user with reset token\n      await storage.updatePasswordResetToken(user.id, resetToken, resetExpires);\n\n      // Send password reset email\n      if (emailService.isConfigured()) {\n        const resetLink = process.env.REPLIT_DEV_DOMAIN \n          ? `https://${process.env.REPLIT_DEV_DOMAIN}/reset-password?token=${resetToken}`\n          : `http://localhost:5000/reset-password?token=${resetToken}`;\n        await emailService.sendPasswordResetEmail(user.email, user.name, resetLink);\n      }\n\n      res.json({ message: \"If the email exists, a password reset link has been sent.\" });\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, password } = passwordResetSchema.parse(req.body);\n\n      // Find user by reset token\n      const user = await storage.getUserByResetToken(token);\n      if (!user || !user.passwordResetExpires) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n\n      // Check if token has expired\n      if (new Date() > user.passwordResetExpires) {\n        // Clear expired token\n        await storage.clearPasswordResetToken(user.id);\n        return res.status(400).json({ message: \"Reset token has expired\" });\n      }\n\n      // Hash the new password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Update password and clear reset token\n      await storage.updatePassword(user.id, passwordHash);\n      await storage.clearPasswordResetToken(user.id);\n\n      res.json({ message: \"Password has been reset successfully\" });\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Stripe coin purchase routes\n  app.post(\"/api/coins/create-payment-intent\", requireAuth, async (req, res) => {\n    try {\n      const { amount, coins } = req.body;\n      \n      // Validate that we have either amount (for custom purchase) or both amount and coins\n      if (!amount || typeof amount !== 'number' || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid coin amount\" });\n      }\n\n      // Calculate coins from amount if not provided (reverse calculation for tiered pricing)\n      let calculatedCoins = coins;\n      if (!calculatedCoins) {\n        // This is a simplified reverse calculation - in practice, you might want to store the original coin count\n        calculatedCoins = Math.round(amount / 0.15); // Use average rate for estimation\n      }\n\n      // Validate coin range (10-1000)\n      if (calculatedCoins < 10 || calculatedCoins > 1000) {\n        return res.status(400).json({ message: \"Coin amount must be between 10 and 1000\" });\n      }\n\n      // Convert dollar amount to cents for Stripe\n      const amountInCents = Math.round(amount * 100);\n\n      // Create payment intent\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: amountInCents,\n        currency: \"usd\",\n        metadata: {\n          userId: (req.user as any).id,\n          coins: calculatedCoins.toString(),\n          purchaseType: \"custom\",\n        },\n      });\n\n      // Create coin purchase record\n      await storage.createCoinPurchase({\n        userId: (req.user as any).id,\n        stripePaymentIntentId: paymentIntent.id,\n        amount: amountInCents,\n        coins: calculatedCoins,\n        type: \"one_time\",\n        status: \"pending\",\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        coins: calculatedCoins,\n        price: amountInCents\n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Create subscription\n  app.post(\"/api/coins/create-subscription\", requireAuth, async (req, res) => {\n    try {\n      const { planType } = req.body;\n      const user = req.user!;\n      \n      const plans = {\n        freelancer: { coins: 40, price: 499 },\n        professional: { coins: 100, price: 999 },\n        expert: { coins: 250, price: 1999 },\n        elite: { coins: 500, price: 3699 },\n      };\n      \n      const plan = plans[planType as keyof typeof plans];\n      if (!plan) {\n        return res.status(400).json({ message: \"Invalid plan type\" });\n      }\n\n      // Create or get Stripe customer\n      let customerId = (user as any).stripeCustomerId;\n      \n      // Always create a new customer if we don't have a valid one\n      if (!customerId) {\n        try {\n          const customer = await stripe.customers.create({\n            email: (user as any).email,\n            name: (user as any).username || (user as any).email,\n          });\n          customerId = customer.id;\n          await storage.updateUserStripeCustomerId((user as any).id, customerId);\n          console.log(`Created new Stripe customer ${customerId} for user ${(user as any).id}`);\n        } catch (customerError) {\n          console.error(\"Error creating Stripe customer:\", customerError);\n          throw new Error(\"Failed to create customer account\");\n        }\n      }\n\n      // Check if user already has an active subscription\n      const existingSubscription = await storage.getUserActiveSubscription((user as any).id);\n      if (existingSubscription) {\n        return res.status(400).json({ \n          message: \"You already have an active subscription\",\n          currentPlan: existingSubscription.planType\n        });\n      }\n\n      // For development, create a payment intent instead of subscription\n      // In production, you would create a proper subscription\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: plan.price,\n        currency: \"usd\",\n        customer: customerId,\n        setup_future_usage: \"off_session\",\n        metadata: {\n          userId: (user as any).id,\n          planType,\n          coins: plan.coins.toString(),\n          type: \"subscription\",\n        },\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        coins: plan.coins,\n        price: plan.price \n      });\n    } catch (error: any) {\n      console.error(\"Create subscription error:\", error);\n      res.status(500).json({ message: \"Error creating subscription: \" + error.message });\n    }\n  });\n\n  // Complete subscription (for development - manually trigger coin addition)\n  app.post(\"/api/coins/complete-purchase\", requireAuth, async (req, res) => {\n    try {\n      const { paymentIntentId } = req.body;\n      \n      // Get payment intent from Stripe to check metadata\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.metadata.userId !== (req.user! as any).id) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const coins = parseInt(paymentIntent.metadata.coins || \"0\");\n      const planType = paymentIntent.metadata.planType;\n      const isSubscription = paymentIntent.metadata.type === \"subscription\";\n      \n      const user = await storage.getUser((req.user! as any).id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (coins > 0) {\n        await storage.addCoinsToUser((req.user! as any).id, coins);\n        console.log(`Added ${coins} coins to user ${(req.user! as any).id} from ${isSubscription ? 'subscription' : 'purchase'}`);\n        \n        // Send appropriate email notification\n        if (isSubscription && planType) {\n          // This is a new subscription - send welcome email\n          const plans = {\n            freelancer: { coins: 40, price: 499 },\n            professional: { coins: 100, price: 999 },\n            expert: { coins: 250, price: 1999 },\n            elite: { coins: 500, price: 3699 },\n          };\n          \n          const plan = plans[planType as keyof typeof plans];\n          if (plan && user.email) {\n            const nextBillingDate = new Date();\n            nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);\n            \n            emailService.sendSubscriptionWelcomeEmail(\n              user.email,\n              user.name || user.username,\n              planType,\n              plan.coins,\n              plan.price,\n              nextBillingDate.toLocaleDateString()\n            ).catch(error => console.error('Failed to send subscription welcome email:', error));\n          }\n        } else {\n          // This is a one-time coin purchase - send purchase confirmation email\n          if (user.email) {\n            const totalPaid = paymentIntent.amount / 100; // Convert from cents to dollars\n            emailService.sendCoinPurchaseEmail(\n              user.email,\n              user.name || user.username,\n              coins,\n              totalPaid\n            ).catch(error => console.error('Failed to send coin purchase email:', error));\n          }\n        }\n      }\n\n      // If this is a subscription payment, create subscription record if none exists\n      if (isSubscription && planType) {\n        const plans = {\n          freelancer: { coins: 40, price: 499 },\n          professional: { coins: 100, price: 999 },\n          expert: { coins: 250, price: 1999 },\n          elite: { coins: 500, price: 3699 },\n        };\n        \n        const plan = plans[planType as keyof typeof plans];\n        if (plan) {\n          // Check if user already has an active subscription\n          const existingSubscription = await storage.getUserActiveSubscription((req.user! as any).id);\n          \n          if (!existingSubscription) {\n            // Create subscription record for new subscriber\n            const currentDate = new Date();\n            const nextMonth = new Date(currentDate);\n            nextMonth.setMonth(nextMonth.getMonth() + 1);\n            \n            await storage.createCoinSubscription({\n              userId: (req.user! as any).id,\n              stripeSubscriptionId: paymentIntentId, // Using payment intent ID as substitute\n              stripeCustomerId: paymentIntent.customer as string,\n              planType,\n              coinAllocation: plan.coins,\n              monthlyPrice: plan.price,\n              status: \"active\",\n              currentPeriodStart: currentDate,\n              currentPeriodEnd: nextMonth,\n            });\n            \n            console.log(`Created subscription record for user ${(req.user! as any).id} with plan ${planType}`);\n          } else {\n            console.log(`User ${(req.user! as any).id} already has subscription, coins added from subscription payment`);\n          }\n        }\n      }\n      \n      // Handle subscription upgrades\n      if (paymentIntent.metadata?.type === \"subscription_upgrade\") {\n        const subscriptionId = paymentIntent.metadata.subscriptionId;\n        const newPlan = paymentIntent.metadata.newPlan;\n        \n        // Get subscription plans to get the new plan details\n        const subscriptionPlans = {\n          freelancer: { coins: 40, price: 499, label: \"Freelancer\" },\n          professional: { coins: 100, price: 999, label: \"Professional\" },\n          expert: { coins: 250, price: 1999, label: \"Expert\" },\n          elite: { coins: 500, price: 3699, label: \"Elite\" },\n        };\n        \n        const planDetails = subscriptionPlans[newPlan as keyof typeof subscriptionPlans];\n        if (planDetails && subscriptionId) {\n          // Get the old plan type for the email\n          const oldPlanType = paymentIntent.metadata.oldPlan || \"unknown\";\n          \n          // Upgrade the subscription immediately\n          await storage.updateCoinSubscription(subscriptionId, {\n            planType: newPlan,\n            coinAllocation: planDetails.coins,\n            monthlyPrice: planDetails.price\n          });\n          \n          // For upgrades, add the difference in coins immediately as a bonus\n          const currentCoins = parseInt(paymentIntent.metadata.coins || \"0\");\n          if (currentCoins > 0) {\n            await storage.addCoinsToUser((req.user! as any).id, currentCoins);\n            console.log(`Added ${currentCoins} bonus coins to user ${(req.user! as any).id} from upgrade to ${newPlan}`);\n          }\n          \n          // Send resubscription email\n          if (user.email) {\n            const nextBillingDate = new Date();\n            nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);\n            \n            emailService.sendResubscriptionEmail(\n              user.email,\n              user.name || user.username,\n              oldPlanType,\n              newPlan,\n              planDetails.coins,\n              planDetails.price,\n              nextBillingDate.toLocaleDateString()\n            ).catch(error => console.error('Failed to send resubscription email:', error));\n          }\n          \n          console.log(`Upgraded subscription ${subscriptionId} to ${newPlan} plan`);\n        }\n      }\n      \n      res.json({ message: \"Coins added successfully\", coins });\n    } catch (error: any) {\n      console.error(\"Complete subscription error:\", error);\n      res.status(500).json({ message: \"Failed to complete subscription: \" + error.message });\n    }\n  });\n\n  // Get user's active subscription\n  app.get(\"/api/coins/subscription\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user! as any).id;\n      const subscription = await storage.getUserActiveSubscription(userId);\n      \n      if (!subscription) {\n        return res.json({ subscription: null });\n      }\n      \n      res.json({ subscription });\n    } catch (error: any) {\n      console.error(\"Get subscription error:\", error);\n      res.status(500).json({ message: \"Failed to get subscription: \" + error.message });\n    }\n  });\n\n  // Change subscription plan (upgrade/downgrade)\n  app.post(\"/api/coins/change-subscription\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user! as any).id;\n      const { newPlanType } = req.body;\n      \n      // Get subscription plans\n      const subscriptionPlans = {\n        freelancer: { coins: 40, price: 499, label: \"Freelancer\", description: \"40 coins monthly - For occasional job hunting\" },\n        professional: { coins: 100, price: 999, label: \"Professional\", description: \"100 coins monthly - For regular job applications\", popular: true },\n        expert: { coins: 250, price: 1999, label: \"Expert\", description: \"250 coins monthly - For active job seekers\" },\n        elite: { coins: 500, price: 3699, label: \"Elite\", description: \"500 coins monthly - For maximum opportunities\" },\n      };\n      \n      const newPlan = subscriptionPlans[newPlanType as keyof typeof subscriptionPlans];\n      if (!newPlan) {\n        return res.status(400).json({ message: \"Invalid plan type\" });\n      }\n      \n      // Get current subscription\n      const currentSubscription = await storage.getUserActiveSubscription(userId);\n      if (!currentSubscription) {\n        return res.status(400).json({ message: \"No active subscription found\" });\n      }\n      \n      const currentPlan = subscriptionPlans[currentSubscription.planType as keyof typeof subscriptionPlans];\n      if (!currentPlan) {\n        return res.status(400).json({ message: \"Current plan not found\" });\n      }\n      \n      // Check if it's the same plan\n      if (currentSubscription.planType === newPlanType) {\n        return res.status(400).json({ message: \"You are already on this plan\" });\n      }\n      \n      const isUpgrade = newPlan.price > currentPlan.price;\n      const priceDifference = newPlan.price - currentPlan.price;\n      \n      if (isUpgrade) {\n        // For upgrades, calculate prorated amount and create payment intent\n        const now = new Date();\n        const periodStart = new Date(currentSubscription.currentPeriodStart || now);\n        const periodEnd = new Date(currentSubscription.currentPeriodEnd || now);\n        \n        // Calculate days remaining in current period\n        const totalDays = Math.ceil((periodEnd.getTime() - periodStart.getTime()) / (1000 * 60 * 60 * 24));\n        const daysRemaining = Math.ceil((periodEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        const prorationFactor = daysRemaining / totalDays;\n        \n        // Calculate prorated upgrade cost\n        const proratedAmount = Math.round(priceDifference * prorationFactor);\n        \n        if (proratedAmount > 0) {\n          // Create payment intent for upgrade difference\n          const paymentIntent = await stripe.paymentIntents.create({\n            amount: proratedAmount,\n            currency: \"usd\",\n            customer: currentSubscription.stripeCustomerId || undefined,\n            metadata: {\n              type: \"subscription_upgrade\",\n              userId: userId,\n              oldPlan: currentSubscription.planType,\n              newPlan: newPlanType,\n              subscriptionId: currentSubscription.id,\n              coins: newPlan.coins.toString(),\n              planType: newPlanType\n            }\n          });\n          \n          return res.json({\n            type: \"upgrade\",\n            clientSecret: paymentIntent.client_secret,\n            proratedAmount: proratedAmount,\n            currentPlan: currentPlan.label,\n            newPlan: newPlan.label,\n            effectiveImmediately: true\n          });\n        } else {\n          // If no prorated amount (edge case), upgrade immediately\n          await storage.updateCoinSubscription(currentSubscription.id, {\n            planType: newPlanType,\n            coinAllocation: newPlan.coins,\n            monthlyPrice: newPlan.price\n          });\n          \n          return res.json({\n            type: \"upgrade\",\n            message: \"Plan upgraded successfully\",\n            effectiveImmediately: true\n          });\n        }\n      } else {\n        // For downgrades, we'll schedule change for next billing cycle\n        // For now, just return success message - actual implementation would need pending fields in schema\n        return res.json({\n          type: \"downgrade\",\n          message: \"Plan downgrade will take effect at the end of your current billing cycle\",\n          currentPlan: currentPlan.label,\n          newPlan: newPlan.label,\n          effectiveDate: currentSubscription.currentPeriodEnd,\n          effectiveImmediately: false\n        });\n      }\n    } catch (error: any) {\n      console.error(\"Change subscription error:\", error);\n      res.status(500).json({ message: \"Failed to change subscription: \" + error.message });\n    }\n  });\n\n  // Get monthly subscription plans\n  app.get(\"/api/coins/subscription-plans\", (req, res) => {\n    const subscriptionPlans = {\n      freelancer: { \n        coins: 40, \n        price: 499, \n        label: \"Freelancer\", \n        description: \"40 coins monthly - For occasional job hunting\",\n        billing: \"monthly\"\n      },\n      professional: { \n        coins: 100, \n        price: 999, \n        label: \"Professional\", \n        description: \"100 coins monthly - For regular job applications\", \n        popular: true,\n        billing: \"monthly\"\n      },\n      expert: { \n        coins: 250, \n        price: 1999, \n        label: \"Expert\", \n        description: \"250 coins monthly - For active job seekers\",\n        billing: \"monthly\"\n      },\n      elite: { \n        coins: 500, \n        price: 3699, \n        label: \"Elite\", \n        description: \"500 coins monthly - For maximum opportunities\",\n        billing: \"monthly\"\n      },\n    };\n    \n    res.json(subscriptionPlans);\n  });\n\n  // Cancel subscription\n  app.post(\"/api/coins/cancel-subscription\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user! as any).id;\n      \n      // Get current subscription\n      const subscription = await storage.getUserActiveSubscription(userId);\n      if (!subscription) {\n        return res.status(400).json({ message: \"No active subscription found\" });\n      }\n      \n      // Update subscription status to canceled\n      const canceledAt = new Date();\n      await storage.updateCoinSubscriptionStatus(subscription.id, \"canceled\", canceledAt);\n      \n      res.json({ \n        message: \"Subscription canceled successfully. You will retain access until the end of your current billing period.\",\n        canceledAt: canceledAt,\n        accessUntil: subscription.currentPeriodEnd\n      });\n    } catch (error: any) {\n      console.error(\"Cancel subscription error:\", error);\n      res.status(500).json({ message: \"Failed to cancel subscription: \" + error.message });\n    }\n  });\n\n  // Legacy endpoint for backward compatibility\n  app.get(\"/api/coins/packages\", (req, res) => {\n    res.redirect(\"/api/coins/subscription-plans\");\n  });\n\n  // Skill endorsement routes\n  app.post(\"/api/skill-endorsements\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validatedData = insertSkillEndorsementSchema.parse(req.body);\n      \n      // Check if user has already endorsed this person for this job\n      const hasAlreadyEndorsed = await storage.hasUserEndorsedSkillForJob(\n        userId,\n        validatedData.endorseeId,\n        validatedData.jobId\n      );\n      \n      if (hasAlreadyEndorsed) {\n        return res.status(400).json({ \n          message: \"You have already endorsed this freelancer for this job\" \n        });\n      }\n\n      // Check if user can endorse this skill for this job\n      const canEndorse = await storage.canUserEndorseSkillForJob(\n        userId,\n        validatedData.endorseeId,\n        validatedData.jobId\n      );\n      \n      if (!canEndorse) {\n        return res.status(400).json({ \n          message: \"You can only endorse freelancers who have completed jobs for you\" \n        });\n      }\n\n      // Check if user has enough coins (5 coins required)\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < 5) {\n        return res.status(400).json({ \n          message: \"You need 5 coins to endorse a freelancer\",\n          coinsNeeded: 5,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Deduct 5 coins\n      await storage.deductCoins(userId, 5);\n\n      // Create endorsement\n      const endorsement = await storage.createSkillEndorsement(validatedData, userId);\n\n      res.json(endorsement);\n    } catch (error: any) {\n      console.error(\"Error creating skill endorsement:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create skill endorsement\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/skill-endorsements\", async (req, res) => {\n    try {\n      const userId = req.params.userId;\n      const endorsements = await storage.getSkillEndorsementsByUserId(userId);\n      res.json(endorsements);\n    } catch (error) {\n      console.error(\"Error fetching skill endorsements:\", error);\n      res.status(500).json({ message: \"Failed to fetch skill endorsements\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:jobId/can-endorse/:endorseeId\", requireAuth, async (req, res) => {\n    try {\n      const endorserId = (req.user as any).id;\n      const { jobId, endorseeId } = req.params;\n      \n      const canEndorse = await storage.canUserEndorseSkillForJob(endorserId, endorseeId, jobId);\n      res.json({ canEndorse });\n    } catch (error) {\n      console.error(\"Error checking endorsement eligibility:\", error);\n      res.status(500).json({ message: \"Failed to check endorsement eligibility\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:jobId/has-endorsed/:endorseeId\", requireAuth, async (req, res) => {\n    try {\n      const endorserId = (req.user as any).id;\n      const { jobId, endorseeId } = req.params;\n      \n      const hasEndorsed = await storage.hasUserEndorsedSkillForJob(endorserId, endorseeId, jobId);\n      res.json({ hasEndorsed });\n    } catch (error) {\n      console.error(\"Error checking endorsement status:\", error);\n      res.status(500).json({ message: \"Failed to check endorsement status\" });\n    }\n  });\n\n  app.use(\"/uploads\", express.static(path.join(process.cwd(), \"uploads\")));\n\n  // Manual trigger for job expiry (admin only) - for debugging/testing\n  app.post(\"/api/admin/close-expired-jobs\", requireAuth, requireAdmin, async (req, res) => {\n    try {\n      await storage.closeExpiredJobs();\n      res.json({ message: \"Job expiry check completed successfully\" });\n    } catch (error) {\n      console.error(\"Error manually closing expired jobs:\", error);\n      res.status(500).json({ message: \"Failed to close expired jobs\" });\n    }\n  });\n\n  // Set up periodic job expiry checker (runs every hour)\n  setInterval(async () => {\n    try {\n      await storage.closeExpiredJobs();\n      console.log(\"Checked and closed expired jobs\");\n    } catch (error) {\n      console.error(\"Error checking expired jobs:\", error);\n    }\n  }, 60 * 60 * 1000); // Run every hour\n\n  // ======================\n  // OBJECT STORAGE ROUTES\n  // ======================\n\n  // Serve public objects\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Serve private objects (with ACL check)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for service images\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // Update service images after upload\n  app.put(\"/api/services/:serviceId/images\", requireAuth, async (req, res) => {\n    try {\n      const { serviceId } = req.params;\n      const { imageURL } = req.body;\n      const userId = (req.user as any).id;\n\n      if (!imageURL) {\n        return res.status(400).json({ error: \"imageURL is required\" });\n      }\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n\n      if (service.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(imageURL);\n\n      // Update service images\n      const currentImages = service.images || [];\n      const updatedImages = [...currentImages, objectPath];\n      \n      await storage.updateServiceImages(serviceId, updatedImages);\n\n      res.json({ objectPath, success: true });\n    } catch (error) {\n      console.error(\"Error updating service images:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update service (includes images)\n  app.put(\"/api/services/:serviceId\", requireAuth, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const { serviceId } = req.params;\n      const updates = req.body;\n      const userId = (req.user as any).id;\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n\n      if (service.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized\" });\n      }\n\n      // Check if user has enough coins (5 coins required for editing)\n      const user = await storage.getUser(userId);\n      if (!user || user.coins < 5) {\n        return res.status(400).json({ \n          message: \"insufficient coins\",\n          coinsNeeded: 5,\n          coinsAvailable: user?.coins || 0\n        });\n      }\n\n      // Deduct 5 coins for editing\n      await storage.deductCoins(userId, 5);\n\n      // Convert string values to appropriate types (same as service creation)\n      const formData = { ...updates };\n      if (formData.priceFrom) {\n        formData.priceFrom = parseInt(formData.priceFrom);\n      }\n      if (formData.priceTo) {\n        formData.priceTo = parseInt(formData.priceTo);\n      }\n      if (formData.availableSlots) {\n        formData.availableSlots = parseInt(formData.availableSlots);\n      }\n\n      // Handle uploaded images (same as service creation)\n      const newImages: string[] = [];\n      if ((req as any).files && Array.isArray((req as any).files)) {\n        for (const file of (req as any).files) {\n          const filename = `${Date.now()}-${file.originalname}`;\n          const filepath = path.join(uploadDir, filename);\n          fs.renameSync(file.path, filepath);\n          newImages.push(`/uploads/${filename}`);\n        }\n      }\n\n      // Combine existing images with new images\n      const existingImages = service.images || [];\n      const allImages = [...existingImages, ...newImages];\n\n      // Map serviceDuration to duration field if present\n      if (formData.serviceDuration !== undefined) {\n        formData.duration = formData.serviceDuration;\n        delete formData.serviceDuration;\n      }\n\n      // Process tags properly (same logic as service creation)\n      let tags: string[] = [];\n      if (formData.tags) {\n        if (typeof formData.tags === 'string') {\n          tags = formData.tags.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag.length > 0);\n        } else if (Array.isArray(formData.tags)) {\n          tags = formData.tags;\n        }\n      }\n\n      // Prepare updates with processed data\n      const processedUpdates = {\n        ...formData,\n        images: allImages,\n        tags\n      };\n\n      // Reset approval status to pending when editing\n      const updatesWithPendingStatus = {\n        ...processedUpdates,\n        approvalStatus: \"pending\"\n      };\n\n      // Update the service\n      const updatedService = await storage.updateService(serviceId, updatesWithPendingStatus);\n      res.json(updatedService);\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ======================\n  // SERVICES API ROUTES  \n  // ======================\n\n  // Get all approved services (with filtering)\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const { query, category, location, experienceLevel, minBudget, maxBudget } = req.query;\n      \n      let services = await storage.getApprovedServices();\n      \n      // Add rating data and provider info to each service\n      const servicesWithRatings = await Promise.all(services.map(async service => {\n        const serviceProvider = await storage.getUser(service.userId);\n        let averageRating = 0;\n        let reviewCount = 0;\n        \n        if (serviceProvider) {\n          const userStats = await storage.getUserStats(serviceProvider.id);\n          averageRating = userStats?.averageRating || 0;\n          reviewCount = userStats?.totalReviews || 0;\n        }\n        \n        return {\n          ...service,\n          averageRating,\n          reviewCount,\n          user: serviceProvider\n        };\n      }));\n      \n      // Sort by rating (highest first), then by creation date (newest first) as fallback\n      servicesWithRatings.sort((a, b) => {\n        if (b.averageRating !== a.averageRating) {\n          return b.averageRating - a.averageRating;\n        }\n        return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n      });\n      \n      let filteredServices = servicesWithRatings;\n      \n      // Apply filters\n      if (query && typeof query === 'string') {\n        const searchQuery = query.toLowerCase();\n        filteredServices = filteredServices.filter(service => \n          service.title.toLowerCase().includes(searchQuery) ||\n          service.description.toLowerCase().includes(searchQuery) ||\n          (service.tags && service.tags.some(tag => tag.toLowerCase().includes(searchQuery)))\n        );\n      }\n      \n      if (category && typeof category === 'string') {\n        filteredServices = filteredServices.filter(service => service.category === category);\n      }\n      \n      if (location && typeof location === 'string') {\n        filteredServices = filteredServices.filter(service => \n          service.location.toLowerCase().includes(location.toLowerCase())\n        );\n      }\n      \n      if (experienceLevel && typeof experienceLevel === 'string') {\n        filteredServices = filteredServices.filter(service => service.experienceLevel === experienceLevel);\n      }\n      \n      if (minBudget && typeof minBudget === 'string') {\n        const min = parseFloat(minBudget);\n        filteredServices = filteredServices.filter(service => service.priceFrom >= min);\n      }\n      \n      if (maxBudget && typeof maxBudget === 'string') {\n        const max = parseFloat(maxBudget);\n        filteredServices = filteredServices.filter(service => service.priceFrom <= max);\n      }\n      \n      res.json({ services: filteredServices });\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Get individual service by ID\n  app.get(\"/api/services/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const service = await storage.getService(id);\n      \n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      // Only return approved services or allow owner to see their own\n      const userId = (req.user as any)?.id;\n      if (service.approvalStatus !== \"approved\" && service.userId !== userId) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ message: \"Failed to fetch service\" });\n    }\n  });\n\n  // Get user's own services (including pending ones)\n  app.get(\"/api/user/services\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      const services = await storage.getServicesByUserId(userId);\n      res.json({ services });\n    } catch (error) {\n      console.error(\"Error fetching user services:\", error);\n      res.status(500).json({ message: \"Failed to fetch user services\" });\n    }\n  });\n\n  // Get services for a specific user (public endpoint for profile pages)\n  app.get(\"/api/user/services/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const services = await storage.getServicesByUserId(userId);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching user services:\", error);\n      res.status(500).json({ message: \"Failed to fetch user services\" });\n    }\n  });\n\n  // Get user's service requests/enquiries\n  app.get(\"/api/user/service-requests\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const serviceRequests = await storage.getServiceRequestsByUserId(userId);\n      \n      // Enrich service requests with service and user details\n      const enrichedRequests = await Promise.all(\n        serviceRequests.map(async (request) => {\n          const service = await storage.getService(request.serviceId);\n          let serviceWithUser = null;\n          \n          if (service) {\n            const serviceUser = await storage.getUser(service.userId);\n            serviceWithUser = {\n              ...service,\n              user: serviceUser ? {\n                id: serviceUser.id,\n                email: serviceUser.email,\n                name: serviceUser.name\n              } : null\n            };\n          }\n          \n          return {\n            ...request,\n            service: serviceWithUser\n          };\n        })\n      );\n      \n      res.json(enrichedRequests);\n    } catch (error) {\n      console.error(\"Error fetching user service requests:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get user's completed services (for service providers - public endpoint for profile pages)\n  app.get(\"/api/user/completed-services/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Get all services by this user\n      const userServices = await storage.getServicesByUserId(userId);\n      \n      // Get all service requests for these services that have been completed\n      const completedServices: any[] = [];\n      \n      for (const service of userServices) {\n        const serviceRequests = await storage.getServiceRequestsByServiceId(service.id);\n        const completedRequests = serviceRequests.filter(request => request.completedAt);\n        \n        for (const request of completedRequests) {\n          const client = await storage.getUser(request.userId);\n          completedServices.push({\n            id: request.id,\n            completedAt: request.completedAt,\n            status: request.status,\n            service: {\n              id: service.id,\n              title: service.title,\n              category: service.category,\n              location: service.location,\n              priceFrom: service.priceFrom,\n              priceTo: service.priceTo,\n              priceType: service.priceType,\n              currency: service.currency\n            },\n            client: client ? {\n              id: client.id,\n              name: client.name,\n              username: client.username,\n              profileImageUrl: client.profileImageUrl\n            } : null\n          });\n        }\n      }\n      \n      // Sort by completion date (most recent first)\n      completedServices.sort((a, b) => new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime());\n      \n      res.json(completedServices);\n    } catch (error) {\n      console.error(\"Error fetching completed services:\", error);\n      res.status(500).json({ message: \"Failed to fetch completed services\" });\n    }\n  });\n\n  // Create a new service (requires approval) - costs 15 coins\n  app.post(\"/api/services\", requireAuth, upload.array(\"images\", 5), async (req, res) => {\n    try {\n      const userId = (req.user as any)?.id;\n      \n      console.log(\"Service creation request:\", { body: req.body, userId });\n      \n      // Check if user has enough coins (15 coins required)\n      const user = await storage.checkAndResetCoins(userId);\n      if (user.coins < 15) {\n        return res.status(400).json({ \n          message: \"Insufficient coins. You need 15 coins to post a service. Coins reset monthly.\",\n          coinsNeeded: 15,\n          coinsAvailable: user.coins\n        });\n      }\n\n      // Convert string values to appropriate types\n      const formData = { ...req.body };\n      if (formData.priceFrom) {\n        formData.priceFrom = parseInt(formData.priceFrom);\n      }\n      if (formData.priceTo) {\n        formData.priceTo = parseInt(formData.priceTo);\n      }\n      if (formData.availableSlots) {\n        formData.availableSlots = parseInt(formData.availableSlots);\n      }\n\n      // Handle uploaded images\n      const images: string[] = [];\n      if ((req as any).files && Array.isArray((req as any).files)) {\n        for (const file of (req as any).files) {\n          const filename = `${Date.now()}-${file.originalname}`;\n          const filepath = path.join(uploadDir, filename);\n          fs.renameSync(file.path, filepath);\n          images.push(`/uploads/${filename}`);\n        }\n      }\n      \n      // Handle tags array conversion (tags removed from form, but keep backend support)\n      let tags: string[] = [];\n      if (formData.tags) {\n        if (typeof formData.tags === 'string') {\n          tags = formData.tags.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag.length > 0);\n        } else if (Array.isArray(formData.tags)) {\n          tags = formData.tags;\n        }\n      }\n\n      // Basic validation and service data preparation\n      const serviceData = { \n        ...formData, \n        duration: formData.serviceDuration, // Map serviceDuration to duration field\n        userId,\n        images,\n        tags,\n        approvalStatus: \"pending\" // All new services start as pending\n      };\n      \n      // Remove the old field name to avoid conflicts\n      delete serviceData.serviceDuration;\n      \n      // Validate required fields manually for debugging\n      if (!serviceData.title || !serviceData.description || !serviceData.category) {\n        return res.status(400).json({ \n          message: \"Missing required fields: title, description, category\" \n        });\n      }\n      \n      // Deduct coins and create service\n      await storage.deductCoins(userId, 15);\n      const service = await storage.createService(serviceData);\n      \n      res.status(201).json(service);\n    } catch (error: any) {\n      console.error(\"Error creating service:\", error);\n      res.status(500).json({ message: \"Failed to create service\", error: error.message });\n    }\n  });\n\n  // Delete a service (user can delete their own service)\n  app.delete(\"/api/services/:serviceId\", requireAuth, async (req, res) => {\n    try {\n      const { serviceId } = req.params;\n      const userId = (req.user as any).id;\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceId);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n\n      if (service.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to delete this service\" });\n      }\n\n      // Delete the service\n      await storage.deleteService(serviceId);\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Service request endpoint\n  app.post(\"/api/services/:serviceId/requests\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { serviceId } = req.params;\n      const requestData = req.body;\n\n      // Check if user has enough coins (1 coin required) - do this first\n      const user = await storage.getUser(userId);\n      if (!user || user.coins < 1) {\n        return res.status(400).json({ message: \"insufficient coins\" });\n      }\n\n      // Parse and validate the request data\n      const validatedData = insertServiceRequestSchema.parse({\n        ...requestData,\n        serviceId,\n        userId\n      });\n\n      // Deduct 1 coin for the inquiry\n      await storage.deductCoins(userId, 1);\n\n      // Create the service request\n      const serviceRequest = await storage.createServiceRequest(validatedData, userId);\n\n      // Get service details for notification\n      const service = await storage.getService(serviceId);\n      if (service) {\n        // Create notification for the service owner\n        await storage.createNotification({\n          userId: service.userId,\n          type: 'service_request',\n          title: 'New Service Request',\n          message: `Someone is interested in your service: ${service.title}`,\n          serviceId: service.id,\n          serviceRequestId: serviceRequest.id\n        });\n\n        // Send email notification to service provider\n        const serviceProvider = await storage.getUser(service.userId);\n        const requester = await storage.getUser(userId);\n        \n        if (serviceProvider && serviceProvider.email && requester) {\n          try {\n            await emailService.sendEmail({\n              to: serviceProvider.email,\n              subject: `New Service Inquiry - ${service.title}`,\n              html: `\n                <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                  <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;\">\n                    <h1 style=\"margin: 0; font-size: 24px;\">New Service Inquiry!</h1>\n                  </div>\n                  \n                  <div style=\"padding: 30px; background-color: #f9f9f9;\">\n                    <h2 style=\"color: #333; margin-bottom: 20px;\">Hello ${serviceProvider.name},</h2>\n                    \n                    <p style=\"color: #555; font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\n                      Great news! Someone is interested in your service on Jigz.\n                    </p>\n                    \n                    <div style=\"background: white; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #667eea;\">\n                      <h3 style=\"color: #333; margin-top: 0;\">Service: ${service.title}</h3>\n                      <p style=\"color: #666; margin: 5px 0;\"><strong>Inquirer:</strong> ${requester.name}</p>\n                      <p style=\"color: #666; margin: 5px 0;\"><strong>Message:</strong> ${validatedData.message || 'No message provided'}</p>\n                    </div>\n                    \n                    <p style=\"color: #555; font-size: 16px; line-height: 1.6; margin-bottom: 25px;\">\n                      You can view the full details and respond to this inquiry by logging into your Jigz dashboard.\n                    </p>\n                    \n                    <div style=\"text-align: center; margin: 30px 0;\">\n                      <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard\" \n                         style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n                                color: white; \n                                padding: 12px 30px; \n                                text-decoration: none; \n                                border-radius: 25px; \n                                font-weight: bold;\n                                display: inline-block;\">\n                        View Dashboard\n                      </a>\n                    </div>\n                    \n                    <div style=\"border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; text-align: center;\">\n                      <p style=\"color: #888; font-size: 14px; margin: 0;\">\n                        This email was sent because you have a service listed on Jigz.<br>\n                        <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}\" style=\"color: #667eea;\">Visit Jigz</a>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              `\n            });\n          } catch (emailError) {\n            console.error(\"Failed to send service inquiry email:\", emailError);\n            // Don't fail the request if email fails\n          }\n        }\n      }\n\n      res.status(201).json(serviceRequest);\n    } catch (error: any) {\n      console.error(\"Error creating service request:\", error);\n      \n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ message: \"Failed to create service request\" });\n    }\n  });\n\n  // Accept/Start a service request\n  app.patch(\"/api/service-requests/:requestId/accept\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { requestId } = req.params;\n\n      // Get the service request to verify it exists\n      const serviceRequest = await storage.getServiceRequest(requestId);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Service request not found\" });\n      }\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceRequest.serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      // Verify that the current user is the service owner\n      if (service.userId !== userId) {\n        return res.status(403).json({ message: \"Only the service owner can accept requests\" });\n      }\n\n      // Check if request is still pending\n      if (serviceRequest.status !== \"pending\") {\n        return res.status(400).json({ message: \"Only pending requests can be accepted\" });\n      }\n\n      // Check if service provider has enough coins (2 coins required)\n      const serviceProvider = await storage.getUser(userId);\n      if (!serviceProvider || serviceProvider.coins < 2) {\n        return res.status(400).json({ message: \"Insufficient coins. You need 2 coins to start a job.\" });\n      }\n\n      // Deduct 2 coins from service provider\n      await storage.deductCoins(userId, 2);\n\n      // Accept the service request\n      const updatedRequest = await storage.updateServiceRequestStatus(requestId, \"accepted\");\n\n      // Create notification for the client\n      const client = await storage.getUser(serviceRequest.userId);\n      if (client) {\n        await storage.createNotification({\n          userId: client.id,\n          type: 'service_accepted',\n          title: 'Service Request Accepted!',\n          message: `Your service request for \"${service.title}\" has been accepted.`,\n          serviceId: service.id,\n          serviceRequestId: requestId\n        });\n\n        // Send email notification to client\n        try {\n          await emailService.sendEmail({\n            to: client.email,\n            subject: `Service Request Accepted - ${service.title}`,\n            html: `\n              <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <div style=\"background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; padding: 20px; text-align: center;\">\n                  <h1 style=\"margin: 0; font-size: 24px;\">Service Request Accepted!</h1>\n                </div>\n                \n                <div style=\"padding: 30px; background-color: #f9f9f9;\">\n                  <h2 style=\"color: #333; margin-bottom: 20px;\">Great news, ${client.name}!</h2>\n                  \n                  <p style=\"color: #555; font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\n                    Your service request has been accepted by the service provider.\n                  </p>\n                  \n                  <div style=\"background: white; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #22c55e;\">\n                    <h3 style=\"color: #333; margin-top: 0;\">Service: ${service.title}</h3>\n                    <p style=\"color: #666; margin: 5px 0;\"><strong>Provider:</strong> Service Provider</p>\n                    <p style=\"color: #666; margin: 5px 0;\"><strong>Status:</strong> Accepted</p>\n                  </div>\n                  \n                  <p style=\"color: #555; font-size: 16px; line-height: 1.6; margin-bottom: 25px;\">\n                    You can now communicate with the service provider and coordinate the work details.\n                  </p>\n                  \n                  <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/messages\" \n                       style=\"background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); \n                              color: white; \n                              padding: 12px 30px; \n                              text-decoration: none; \n                              border-radius: 25px; \n                              font-weight: bold;\n                              display: inline-block;\">\n                      Go to Messages\n                    </a>\n                  </div>\n                  \n                  <div style=\"border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; text-align: center;\">\n                    <p style=\"color: #888; font-size: 14px; margin: 0;\">\n                      This email was sent because you made a service request on Jigz.<br>\n                      <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}\" style=\"color: #22c55e;\">Visit Jigz</a>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            `\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send service acceptance email:\", emailError);\n          // Don't fail the request if email fails\n        }\n      }\n\n      res.json(updatedRequest);\n    } catch (error: any) {\n      console.error(\"Error accepting service request:\", error);\n      res.status(500).json({ message: \"Failed to accept service request\" });\n    }\n  });\n\n  // Dismiss/decline service request endpoint\n  app.patch(\"/api/service-requests/:requestId/dismiss\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { requestId } = req.params;\n\n      // Get the service request to verify it exists\n      const serviceRequest = await storage.getServiceRequest(requestId);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Service request not found\" });\n      }\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceRequest.serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      // Verify that the current user is the service owner\n      if (service.userId !== userId) {\n        return res.status(403).json({ message: \"Only the service owner can dismiss requests\" });\n      }\n\n      // Check if request is still pending\n      if (serviceRequest.status !== \"pending\") {\n        return res.status(400).json({ message: \"Only pending requests can be dismissed\" });\n      }\n\n      // Dismiss the service request\n      const updatedRequest = await storage.updateServiceRequestStatus(requestId, \"declined\");\n\n      // Create notification for the client\n      const client = await storage.getUser(serviceRequest.userId);\n      if (client) {\n        await storage.createNotification({\n          userId: client.id,\n          type: 'service_declined',\n          title: 'Service Request Declined',\n          message: `Your service request for \"${service.title}\" has been declined.`,\n          serviceId: service.id,\n          serviceRequestId: requestId\n        });\n      }\n\n      res.json(updatedRequest);\n    } catch (error: any) {\n      console.error(\"Error dismissing service request:\", error);\n      res.status(500).json({ message: \"Failed to dismiss service request\" });\n    }\n  });\n\n  // Complete service request endpoint\n  app.patch(\"/api/service-requests/:requestId/complete\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { requestId } = req.params;\n\n      // Get the service request to verify it exists\n      const serviceRequest = await storage.getServiceRequest(requestId);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Service request not found\" });\n      }\n\n      // Get the service to verify ownership\n      const service = await storage.getService(serviceRequest.serviceId);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n\n      // Verify that the current user is the service owner\n      if (service.userId !== userId) {\n        return res.status(403).json({ message: \"Only the service owner can complete requests\" });\n      }\n\n      // Check if request is accepted\n      if (serviceRequest.status !== \"accepted\") {\n        return res.status(400).json({ message: \"Only accepted requests can be marked as completed\" });\n      }\n\n      // Check if already completed\n      if (serviceRequest.completedAt) {\n        return res.status(400).json({ message: \"Service request is already completed\" });\n      }\n\n      // Mark the service request as completed\n      const updatedRequest = await storage.completeServiceRequest(requestId);\n\n      // Create notification for the client\n      const client = await storage.getUser(serviceRequest.userId);\n      if (client) {\n        await storage.createNotification({\n          userId: client.id,\n          type: 'service_completed',\n          title: 'Service Completed!',\n          message: `Your service \"${service.title}\" has been completed. You can now review the service provider.`,\n          serviceId: service.id,\n          serviceRequestId: requestId\n        });\n\n        // Send email notification to client\n        try {\n          await emailService.sendEmail({\n            to: client.email,\n            subject: `Service Completed - ${service.title}`,\n            html: `\n              <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <div style=\"background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; padding: 20px; text-align: center;\">\n                  <h1 style=\"margin: 0; font-size: 24px;\">Service Completed!</h1>\n                </div>\n                \n                <div style=\"padding: 30px; background-color: #f9f9f9;\">\n                  <h2 style=\"color: #333; margin-bottom: 20px;\">Great news, ${client.name}!</h2>\n                  \n                  <p style=\"color: #555; font-size: 16px; line-height: 1.6; margin-bottom: 20px;\">\n                    Your service has been completed by the service provider.\n                  </p>\n                  \n                  <div style=\"background: white; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n                    <h3 style=\"color: #333; margin-top: 0;\">Service: ${service.title}</h3>\n                    <p style=\"color: #666; margin: 10px 0;\">The service provider has marked your service as completed. You can now review their work and rate their service.</p>\n                  </div>\n                  \n                  <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard\" \n                       style=\"background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); \n                              color: white; \n                              padding: 12px 30px; \n                              text-decoration: none; \n                              border-radius: 25px; \n                              font-weight: bold;\n                              display: inline-block;\">\n                      Review Service\n                    </a>\n                  </div>\n                  \n                  <div style=\"border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; text-align: center;\">\n                    <p style=\"color: #888; font-size: 14px; margin: 0;\">\n                      This email was sent because your service was completed on Jigz.<br>\n                      <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}\" style=\"color: #3b82f6;\">Visit Jigz</a>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            `\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send service completion email:\", emailError);\n          // Don't fail the request if email fails\n        }\n      }\n\n      res.json(updatedRequest);\n    } catch (error: any) {\n      console.error(\"Error completing service request:\", error);\n      res.status(500).json({ message: \"Failed to complete service request\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":142502},"server/storage.ts":{"content":"import { type User, type InsertUser, type Job, type InsertJob, type Application, type InsertApplication, type Review, type InsertReview, type Conversation, type InsertConversation, type Message, type InsertMessage, type Notification, type InsertNotification, type JobReport, type InsertJobReport, type EmailVerificationToken, type InsertEmailVerificationToken, type CoinPurchase, type InsertCoinPurchase, type CoinSubscription, type InsertCoinSubscription, type SkillEndorsement, type InsertSkillEndorsement, type SkillEndorsementWithUser, type JobReportWithDetails, type JobWithApplications, type ApplicationWithUser, type ApplicationWithJob, type ReviewWithUser, type UserWithStats, type ConversationWithDetails, type MessageWithSender, type SearchParams, type SearchResult, type Service, type InsertService, type ServiceRequest, type InsertServiceRequest, type ServiceWithRequests, type ServiceRequestWithUser, users, jobs, applications, reviews, conversations, messages, notifications, jobReports, emailVerificationTokens, coinPurchases, coinSubscriptions, skillEndorsements, services, serviceRequests, SUBSCRIPTION_PLANS } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, or, ne, desc, ilike, gte, lte, count, sql, avg, asc, isNotNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<void>;\n  updatePasswordResetToken(userId: string, token: string, expires: Date): Promise<void>;\n  updatePassword(userId: string, passwordHash: string): Promise<void>;\n  clearPasswordResetToken(userId: string): Promise<void>;\n  updateUserStripeCustomerId(userId: string, customerId: string): Promise<void>;\n\n  // Job operations\n  getJob(id: string): Promise<Job | undefined>;\n  getJobs(filters?: { category?: string; location?: string; minBudget?: number; maxBudget?: number }): Promise<JobWithApplications[]>;\n  getJobsByUserId(userId: string): Promise<JobWithApplications[]>;\n  createJob(job: InsertJob, userId: string): Promise<Job>;\n  updateJob(id: string, updates: Partial<Job>): Promise<Job | undefined>;\n  deleteJob(id: string): Promise<void>;\n  extendJob(jobId: string): Promise<Job | undefined>;\n  closeExpiredJobs(): Promise<void>;\n  \n  // Advanced search operations\n  searchJobs(params: SearchParams): Promise<SearchResult>;\n\n  // Application operations\n  getApplication(id: string): Promise<Application | undefined>;\n  getApplicationsByJobId(jobId: string): Promise<ApplicationWithUser[]>;\n  getApplicationsByUserId(userId: string): Promise<ApplicationWithJob[]>;\n  createApplication(application: InsertApplication, userId: string): Promise<Application>;\n  updateApplication(id: string, updates: Partial<Application>): Promise<Application | undefined>;\n  hasUserAppliedToJob(userId: string, jobId: string): Promise<boolean>;\n  markApplicationCompleted(applicationId: string): Promise<Application | undefined>;\n  getTopBidders(jobId: string): Promise<Array<{ name: string; coinsBid: number }>>;\n\n  // Review operations\n  getUserStats(userId: string): Promise<UserWithStats | undefined>;\n  getReviewsByUserId(userId: string): Promise<ReviewWithUser[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  getReviewsForJob(jobId: string): Promise<ReviewWithUser[]>;\n  canFreelancerRateClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean>;\n  canServiceProviderRateClient(serviceProviderId: string, clientId: string, serviceId: string): Promise<boolean>;\n  hasFreelancerRatedClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean>;\n  getReviewByJobAndUsers(reviewerId: string, revieweeId: string, jobId: string, reviewType: string): Promise<Review | undefined>;\n  hasUserReviewedJobFreelancer(reviewerId: string, jobId: string, revieweeId: string): Promise<boolean>;\n  hasClientRatedServiceProvider(clientId: string, serviceProviderId: string, serviceId: string): Promise<boolean>;\n\n  // Conversation operations\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getConversationsByUser(userId: string): Promise<ConversationWithDetails[]>;\n  getConversation(conversationId: string): Promise<ConversationWithDetails | null>;\n  getConversationByApplicationId(applicationId: string): Promise<Conversation | null>;\n\n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessagesByConversation(conversationId: string): Promise<MessageWithSender[]>;\n  markMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n  getUnreadMessageCount(userId: string): Promise<number>;\n\n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotificationsByUserId(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(notificationId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n\n  // Job report operations\n  createJobReport(report: InsertJobReport, reporterId: string): Promise<JobReport>;\n  getJobReport(reportId: string): Promise<JobReport | undefined>;\n  getJobReportsByJobId(jobId: string): Promise<JobReportWithDetails[]>;\n  getAllJobReports(): Promise<JobReportWithDetails[]>;\n  getPendingJobReports(): Promise<JobReportWithDetails[]>;\n  updateJobReport(reportId: string, updates: Partial<JobReport>): Promise<JobReport | undefined>;\n  hasUserReportedJob(userId: string, jobId: string): Promise<boolean>;\n\n  // Email verification operations\n  createEmailVerificationToken(token: InsertEmailVerificationToken): Promise<EmailVerificationToken>;\n  getEmailVerificationToken(token: string): Promise<EmailVerificationToken | undefined>;\n  deleteEmailVerificationToken(token: string): Promise<void>;\n  verifyUserEmail(email: string): Promise<User | undefined>;\n\n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  banUser(userId: string): Promise<User>;\n  unbanUser(userId: string): Promise<User>;\n  promoteToAdmin(userId: string): Promise<User>;\n  demoteFromAdmin(userId: string): Promise<User>;\n  promoteToModerator(userId: string): Promise<User>;\n  demoteFromModerator(userId: string): Promise<User>;\n  changeUserPassword(userId: string, newPasswordHash: string): Promise<User>;\n  getPendingJobs(): Promise<JobWithApplications[]>;\n  getApprovedJobs(): Promise<JobWithApplications[]>;\n  approveJob(jobId: string, adminId: string): Promise<Job>;\n  rejectJob(jobId: string, adminId: string): Promise<Job>;\n  getAdminStats(): Promise<{\n    totalUsers: string;\n    totalApprovedJobs: string;\n    openJobs: string;\n    closedJobs: string;\n    totalApplications: string;\n    totalServices: string;\n    totalSkillEndorsements: string;\n    totalInquiries: string;\n    totalCompletedServices: string;\n    activeSubscriptions: string;\n    subscriptionPercentage: string;\n    monthlyRevenue: string;\n    avgJobsPerUser: string;\n    avgApplicationsPerUser: string;\n    avgServicesPerUser: string;\n    freelancerSubs: string;\n    freelancerPercentage: string;\n    professionalSubs: string;\n    professionalPercentage: string;\n    expertSubs: string;\n    expertPercentage: string;\n    eliteSubs: string;\n    elitePercentage: string;\n  }>;\n  // Coin management\n  checkAndResetCoins(userId: string): Promise<User>;\n  deductCoins(userId: string, amount: number): Promise<User>;\n  getUserCoins(userId: string): Promise<number>;\n  getUserCoinCap(userId: string): Promise<number>;\n  getAllUsersWithCoins(): Promise<User[]>;\n  addCoinsToUser(userId: string, amount: number): Promise<User>;\n  removeCoinsFromUser(userId: string, amount: number): Promise<User>;\n  setUserCoins(userId: string, amount: number): Promise<User>;\n  applyCoincapToAllUsers(): Promise<void>;\n\n  // Skill endorsement operations\n  createSkillEndorsement(endorsement: InsertSkillEndorsement, endorserId: string): Promise<SkillEndorsement>;\n  getSkillEndorsementsByUserId(userId: string): Promise<SkillEndorsementWithUser[]>;\n  hasUserEndorsedSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean>;\n  canUserEndorseSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean>;\n\n  // Profile operations\n  getUserProfile(userId: string): Promise<User | undefined>;\n  updateUserProfile(userId: string, updates: { name?: string; email?: string; profileImageUrl?: string }): Promise<User>;\n  getUserCompletedJobs(userId: string): Promise<ApplicationWithJob[]>;\n\n  // Coin purchase operations\n  createCoinPurchase(purchase: InsertCoinPurchase): Promise<CoinPurchase>;\n  getCoinPurchase(id: string): Promise<CoinPurchase | undefined>;\n  getCoinPurchaseByPaymentIntent(paymentIntentId: string): Promise<CoinPurchase | undefined>;\n  updateCoinPurchaseStatus(id: string, status: string, completedAt?: Date): Promise<CoinPurchase | undefined>;\n  getUserPostedJobs(userId: string): Promise<JobWithApplications[]>;\n  getUserReviews(userId: string): Promise<any[]>;\n\n  // Job expiry operations\n  extendJobExpiry(jobId: string, userId: string): Promise<Job>;\n\n  // Subscription operations\n  createCoinSubscription(subscription: InsertCoinSubscription): Promise<CoinSubscription>;\n  getCoinSubscription(id: string): Promise<CoinSubscription | undefined>;\n  getCoinSubscriptionByStripeId(stripeSubscriptionId: string): Promise<CoinSubscription | undefined>;\n  getUserActiveSubscription(userId: string): Promise<CoinSubscription | undefined>;\n  updateCoinSubscriptionStatus(id: string, status: string, canceledAt?: Date): Promise<CoinSubscription | undefined>;\n  updateCoinSubscription(id: string, updates: Partial<CoinSubscription>): Promise<CoinSubscription | undefined>;\n  updateUserSubscription(userId: string, planType: string): Promise<void>;\n  removeUserSubscription(userId: string): Promise<void>;\n\n  // Service operations\n  getService(id: string): Promise<Service | undefined>;\n  getServices(filters?: { category?: string; location?: string; experienceLevel?: string; query?: string }): Promise<ServiceWithRequests[]>;\n  getApprovedServices(): Promise<ServiceWithRequests[]>;\n  getPendingServices(): Promise<ServiceWithRequests[]>;\n  getServicesByUserId(userId: string): Promise<ServiceWithRequests[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, updates: Partial<Service>): Promise<Service | undefined>;\n  updateServiceImages(serviceId: string, images: string[]): Promise<Service | undefined>;\n  deleteService(id: string): Promise<void>;\n  approveService(serviceId: string, adminId: string): Promise<Service>;\n  rejectService(serviceId: string, adminId: string): Promise<Service>;\n\n  // Service request operations\n  getServiceRequest(id: string): Promise<ServiceRequest | undefined>;\n  getServiceRequestsByServiceId(serviceId: string): Promise<ServiceRequestWithUser[]>;\n  getServiceRequestsByUserId(userId: string): Promise<ServiceRequest[]>;\n  createServiceRequest(request: InsertServiceRequest, userId: string): Promise<ServiceRequest>;\n  updateServiceRequestStatus(requestId: string, status: string): Promise<ServiceRequest>;\n  updateServiceRequest(id: string, updates: Partial<ServiceRequest>): Promise<ServiceRequest | undefined>;\n  completeServiceRequest(requestId: string): Promise<ServiceRequest>;\n  hasUserRequestedService(userId: string, serviceId: string): Promise<boolean>;\n  \n  // Service conversation operations\n  getConversationByServiceRequest(serviceRequestId: string): Promise<Conversation | undefined>;\n  \n  // Service expiry operations\n  extendService(serviceId: string, userId: string): Promise<Service>;\n  closeExpiredServices(): Promise<number>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private jobs: Map<string, Job>;\n  private applications: Map<string, Application>;\n  private reviews: Map<string, Review>;\n  private conversations: Map<string, Conversation>;\n  private messages: Map<string, Message>;\n  private notifications: Map<string, Notification>;\n  private jobReports: Map<string, JobReport>;\n  private emailVerificationTokens: Map<string, EmailVerificationToken>;\n  private coinPurchases: Map<string, CoinPurchase>;\n  private coinSubscriptions: Map<string, CoinSubscription>;\n  private skillEndorsements: Map<string, SkillEndorsement>;\n  private services: Map<string, Service>;\n  private serviceRequests: Map<string, ServiceRequest>;\n\n  constructor() {\n    this.users = new Map();\n    this.jobs = new Map();\n    this.applications = new Map();\n    this.reviews = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.notifications = new Map();\n    this.jobReports = new Map();\n    this.emailVerificationTokens = new Map();\n    this.coinPurchases = new Map();\n    this.coinSubscriptions = new Map();\n    this.skillEndorsements = new Map();\n    this.services = new Map();\n    this.serviceRequests = new Map();\n\n    // Create a default user for demo purposes\n    const defaultUser: User = {\n      id: \"default-user\",\n      username: \"johndoe\", \n      email: \"john@example.com\",\n      name: \"John Doe\",\n      profileImageUrl: null,\n      passwordHash: null,\n      googleId: null,\n      isEmailVerified: false,\n      provider: \"email\",\n      role: \"user\",\n      isActive: true,\n      coins: 20,\n      lastCoinReset: new Date(),\n      stripeCustomerId: null,\n      activeSubscriptionId: null,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(defaultUser.id, defaultUser);\n\n    // Create admin user with fresh hash for admin123\n    const adminUser: User = {\n      id: \"admin-user\",\n      username: \"admin\", \n      email: \"admin@jigz.co\",\n      name: \"Admin User\",\n      profileImageUrl: null,\n      passwordHash: \"$2b$10$SVB5MW1SFjnjR.0GzkAQN.RJuMlmSmVwtzIq33FRJ/sKl5OjK8pAm\", // password: admin123\n      googleId: null,\n      isEmailVerified: true,\n      provider: \"email\",\n      role: \"admin\",\n      isActive: true,\n      coins: 100, // Admins get more coins\n      lastCoinReset: new Date(),\n      stripeCustomerId: null,\n      activeSubscriptionId: null,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample jobs with all required fields for demo\n    const sampleJob: Job = {\n      id: \"52b1f74b-352f-491b-a332-3165323ede81\",\n      title: \"Help with garden cleanup\",\n      description: \"Need help cleaning up my backyard garden for spring planting. Will involve removing weeds, pruning bushes, and general tidying.\",\n      category: \"Gardening\",\n      location: \"New York, NY\",\n      specificArea: \"Upper East Side\",\n      minBudget: null,\n      maxBudget: 150,\n      budgetType: \"fixed\",\n      currency: \"USD\",\n      experienceLevel: \"any\",\n      duration: \"a day\",\n      customDuration: null,\n      freelancersNeeded: 1,\n      status: \"open\",\n      approvalStatus: \"approved\",\n      approvedBy: null,\n      approvedAt: null,\n      userId: \"default-user\",\n      images: [],\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      createdAt: new Date()\n    };\n    this.jobs.set(sampleJob.id, sampleJob);\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email.toLowerCase() === email.toLowerCase());\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.googleId === googleId);\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.passwordResetToken === token);\n  }\n\n  async updatePasswordResetToken(userId: string, token: string, expires: Date): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const updatedUser = { ...user, passwordResetToken: token, passwordResetExpires: expires };\n      this.users.set(userId, updatedUser);\n    }\n  }\n\n  async updatePassword(userId: string, passwordHash: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const updatedUser = { ...user, passwordHash };\n      this.users.set(userId, updatedUser);\n    }\n  }\n\n  async clearPasswordResetToken(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const updatedUser = { ...user, passwordResetToken: null, passwordResetExpires: null };\n      this.users.set(userId, updatedUser);\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      profileImageUrl: insertUser.profileImageUrl ?? null,\n      passwordHash: insertUser.passwordHash ?? null,\n      googleId: insertUser.googleId ?? null,\n      isEmailVerified: insertUser.isEmailVerified ?? false,\n      provider: insertUser.provider ?? \"email\",\n      role: insertUser.role ?? \"user\",\n      isActive: insertUser.isActive ?? true,\n      coins: insertUser.coins ?? 20,\n      lastCoinReset: insertUser.lastCoinReset ?? new Date(),\n      stripeCustomerId: insertUser.stripeCustomerId ?? null,\n      activeSubscriptionId: insertUser.activeSubscriptionId ?? null,\n      passwordResetToken: insertUser.passwordResetToken ?? null,\n      passwordResetExpires: insertUser.passwordResetExpires ?? null,\n      createdAt: insertUser.createdAt ?? new Date(),\n      updatedAt: insertUser.updatedAt ?? new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n    \n    // Clean up related data\n    const userJobs = Array.from(this.jobs.values()).filter(job => job.userId === id);\n    userJobs.forEach(job => this.jobs.delete(job.id));\n    \n    const userApplications = Array.from(this.applications.values()).filter(app => app.userId === id);\n    userApplications.forEach(app => this.applications.delete(app.id));\n    \n    const userReviews = Array.from(this.reviews.values()).filter(review => \n      review.reviewerId === id || review.revieweeId === id\n    );\n    userReviews.forEach(review => this.reviews.delete(review.id));\n    \n    const userMessages = Array.from(this.messages.values()).filter(msg => msg.senderId === id);\n    userMessages.forEach(msg => this.messages.delete(msg.id));\n    \n    const userConversations = Array.from(this.conversations.values()).filter(conv => \n      conv.jobPosterId === id || conv.applicantId === id\n    );\n    userConversations.forEach(conv => this.conversations.delete(conv.id));\n    \n    const userNotifications = Array.from(this.notifications.values()).filter(notif => notif.userId === id);\n    userNotifications.forEach(notif => this.notifications.delete(notif.id));\n    \n    const userReports = Array.from(this.jobReports.values()).filter(report => report.reporterId === id);\n    userReports.forEach(report => this.jobReports.delete(report.id));\n  }\n\n  // Job operations\n  async getJob(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async getJobs(filters?: { category?: string; location?: string; minBudget?: number; maxBudget?: number }): Promise<JobWithApplications[]> {\n    let jobs = Array.from(this.jobs.values());\n\n    if (filters) {\n      if (filters.category && filters.category !== \"All Categories\") {\n        jobs = jobs.filter(job => job.category === filters.category);\n      }\n      if (filters.location) {\n        jobs = jobs.filter(job => job.location.toLowerCase().includes(filters.location!.toLowerCase()));\n      }\n      if (filters.minBudget !== undefined) {\n        jobs = jobs.filter(job => job.maxBudget && job.maxBudget >= filters.minBudget!);\n      }\n      if (filters.maxBudget !== undefined) {\n        jobs = jobs.filter(job => job.minBudget && job.minBudget <= filters.maxBudget!);\n      }\n    }\n\n    // Add application counts and poster ratings\n    const jobsWithApplications = jobs.map(job => {\n      const applicationCount = Array.from(this.applications.values())\n        .filter(app => app.jobId === job.id).length;\n      \n      // Get poster rating information\n      const posterReviews = Array.from(this.reviews.values()).filter(r => r.revieweeId === job.userId);\n      const posterReviewCount = posterReviews.length;\n      const posterRating = posterReviewCount > 0 \n        ? posterReviews.reduce((sum, r) => sum + r.rating, 0) / posterReviewCount \n        : 0;\n      \n      return { ...job, applicationCount, posterRating, posterReviewCount };\n    });\n\n    // Sort by newest first\n    return jobsWithApplications.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getJobsByUserId(userId: string): Promise<JobWithApplications[]> {\n    const userJobs = Array.from(this.jobs.values()).filter(job => job.userId === userId);\n    \n    const jobsWithApplications = await Promise.all(\n      userJobs.map(async job => {\n        const applications = await this.getApplicationsByJobId(job.id);\n        return {\n          ...job,\n          applicationCount: applications.length,\n          applications\n        };\n      })\n    );\n\n    return jobsWithApplications.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async searchJobs(params: SearchParams): Promise<SearchResult> {\n    const startTime = Date.now();\n    let jobs = Array.from(this.jobs.values());\n    \n    // Filter by approval status - only show approved jobs\n    jobs = jobs.filter(job => job.approvalStatus === 'approved');\n    \n    // Apply search filters\n    if (params.query) {\n      const searchTerm = params.query.toLowerCase();\n      jobs = jobs.filter(job => \n        job.title.toLowerCase().includes(searchTerm) ||\n        job.description.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    if (params.category && params.category !== 'all') {\n      jobs = jobs.filter(job => job.category === params.category);\n    }\n    \n    if (params.location && params.location !== 'all') {\n      jobs = jobs.filter(job => job.location === params.location);\n    }\n    \n    if (params.experienceLevel && params.experienceLevel !== 'any') {\n      jobs = jobs.filter(job => job.experienceLevel === params.experienceLevel);\n    }\n    \n    if (params.minBudget !== undefined) {\n      jobs = jobs.filter(job => job.maxBudget && job.maxBudget >= params.minBudget!);\n    }\n    \n    if (params.maxBudget !== undefined) {\n      jobs = jobs.filter(job => job.minBudget && job.minBudget <= params.maxBudget!);\n    }\n    \n    if (params.currency) {\n      jobs = jobs.filter(job => job.currency === params.currency);\n    }\n    \n    // Add application counts and convert to JobWithApplications\n    const jobsWithApplications: JobWithApplications[] = jobs.map(job => {\n      const applicationCount = Array.from(this.applications.values())\n        .filter(app => app.jobId === job.id).length;\n      \n      const posterReviews = Array.from(this.reviews.values())\n        .filter(r => r.revieweeId === job.userId);\n      const posterReviewCount = posterReviews.length;\n      const posterRating = posterReviewCount > 0 \n        ? posterReviews.reduce((sum, r) => sum + r.rating, 0) / posterReviewCount \n        : 0;\n      \n      return { ...job, applicationCount, posterRating, posterReviewCount };\n    });\n    \n    // Pagination\n    const page = params.page || 1;\n    const limit = params.limit || 10;\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedJobs = jobsWithApplications.slice(startIndex, endIndex);\n    \n    const total = jobsWithApplications.length;\n    const pages = Math.ceil(total / limit);\n    const executionTime = Date.now() - startTime;\n    \n    return {\n      jobs: paginatedJobs,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages,\n        hasNext: page < pages,\n        hasPrev: page > 1\n      },\n      searchMeta: {\n        query: params.query,\n        filters: { ...params },\n        executionTime,\n        fromCache: false\n      }\n    };\n  }\n\n  async createJob(job: InsertJob, userId: string): Promise<Job> {\n    const id = randomUUID();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 30); // Expires 30 days from now\n    \n    const newJob: Job = { \n      ...job, \n      id, \n      userId,\n      status: job.status || \"open\",\n      minBudget: job.minBudget ?? null,\n      maxBudget: job.maxBudget ?? null,\n      budgetType: job.budgetType ?? \"fixed\",\n      currency: job.currency ?? \"USD\",\n      experienceLevel: job.experienceLevel ?? \"any\",\n      duration: job.duration ?? null,\n      customDuration: job.customDuration ?? null,\n      freelancersNeeded: job.freelancersNeeded ?? 1,\n      images: job.images ?? [],\n      specificArea: job.specificArea ?? null,\n      approvalStatus: \"pending\",\n      approvedBy: null,\n      approvedAt: null,\n      expiresAt: expiresAt,  // Ensure expiry date is set\n      createdAt: new Date()\n    };\n    this.jobs.set(id, newJob);\n    return newJob;\n  }\n\n  async updateJob(id: string, updates: Partial<Job>): Promise<Job | undefined> {\n    const job = this.jobs.get(id);\n    if (!job) return undefined;\n    \n    const updatedJob = { ...job, ...updates };\n    this.jobs.set(id, updatedJob);\n    return updatedJob;\n  }\n\n\n\n  async extendJob(jobId: string): Promise<Job | undefined> {\n    const job = this.jobs.get(jobId);\n    if (!job) return undefined;\n    \n    // Extend expiry by 30 days from current expiry date\n    const currentExpiry = job.expiresAt ? new Date(job.expiresAt) : new Date();\n    const newExpiryDate = new Date(currentExpiry);\n    newExpiryDate.setDate(newExpiryDate.getDate() + 30);\n    \n    const updatedJob = { ...job, expiresAt: newExpiryDate };\n    this.jobs.set(jobId, updatedJob);\n    return updatedJob;\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    this.jobs.delete(id);\n  }\n\n  async closeExpiredJobs(): Promise<void> {\n    const now = new Date();\n    const jobEntries = Array.from(this.jobs.entries());\n    for (const [id, job] of jobEntries) {\n      if (job.expiresAt && job.expiresAt <= now && job.status === \"open\") {\n        const updatedJob = { ...job, status: \"closed\" };\n        this.jobs.set(id, updatedJob);\n      }\n    }\n  }\n\n  // Application operations\n  async getApplication(id: string): Promise<Application | undefined> {\n    return this.applications.get(id);\n  }\n\n  async getApplicationsByJobId(jobId: string): Promise<ApplicationWithUser[]> {\n    const jobApplications = Array.from(this.applications.values())\n      .filter(app => app.jobId === jobId);\n\n    const applicationsWithUsers = await Promise.all(\n      jobApplications.map(async app => {\n        const user = await this.getUser(app.userId);\n        return { ...app, user: user! };\n      })\n    );\n\n    // Sort by coins bid (highest first), then by creation date (newest first)\n    return applicationsWithUsers.sort((a, b) => {\n      const coinDiff = (b.coinsBid || 0) - (a.coinsBid || 0);\n      if (coinDiff !== 0) return coinDiff;\n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    });\n  }\n\n  async getApplicationsByUserId(userId: string): Promise<ApplicationWithJob[]> {\n    const userApplications = Array.from(this.applications.values())\n      .filter(app => app.userId === userId);\n\n    const applicationsWithJobs = await Promise.all(\n      userApplications.map(async app => {\n        const job = await this.getJob(app.jobId);\n        return { ...app, job: job! };\n      })\n    );\n\n    return applicationsWithJobs.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async createApplication(application: InsertApplication, userId: string): Promise<Application> {\n    const id = randomUUID();\n    const newApplication: Application = { \n      ...application, \n      id, \n      userId,\n      status: application.status || \"pending\",\n      experience: application.experience ?? null,\n      coinsBid: application.coinsBid || 0,\n      createdAt: new Date(),\n      isCompleted: null,\n      completedAt: null\n    };\n    this.applications.set(id, newApplication);\n    return newApplication;\n  }\n\n  async updateApplication(id: string, updates: Partial<Application>): Promise<Application | undefined> {\n    const application = this.applications.get(id);\n    if (!application) return undefined;\n    \n    const updatedApplication = { ...application, ...updates };\n    this.applications.set(id, updatedApplication);\n    return updatedApplication;\n  }\n\n  async hasUserAppliedToJob(userId: string, jobId: string): Promise<boolean> {\n    return Array.from(this.applications.values()).some(app => \n      app.userId === userId && app.jobId === jobId\n    );\n  }\n\n  async markApplicationCompleted(applicationId: string): Promise<Application | undefined> {\n    const application = this.applications.get(applicationId);\n    if (!application) return undefined;\n    \n    const updatedApplication = { \n      ...application, \n      isCompleted: true, \n      completedAt: new Date() \n    };\n    this.applications.set(applicationId, updatedApplication);\n    return updatedApplication;\n  }\n\n  async getTopBidders(jobId: string): Promise<Array<{ name: string; coinsBid: number }>> {\n    const jobApplications = Array.from(this.applications.values())\n      .filter(app => app.jobId === jobId && (app.coinsBid || 0) > 0);\n\n    const biddersWithUsers = await Promise.all(\n      jobApplications.map(async app => {\n        const user = await this.getUser(app.userId);\n        return { \n          name: user?.name || \"Anonymous\", \n          coinsBid: app.coinsBid || 0 \n        };\n      })\n    );\n\n    // Sort by coins bid (highest first) and return top 4\n    return biddersWithUsers\n      .sort((a, b) => b.coinsBid - a.coinsBid)\n      .slice(0, 4);\n  }\n\n  // Review operations\n  async getUserStats(userId: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const userReviews = Array.from(this.reviews.values()).filter(r => r.revieweeId === userId);\n    const totalReviews = userReviews.length;\n    const averageRating = totalReviews > 0 \n      ? userReviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews \n      : 0;\n\n    // Count completed jobs where user had accepted applications that were marked as completed\n    const completedJobs = Array.from(this.applications.values()).filter(a => \n      a.userId === userId && a.status === \"accepted\" && a.isCompleted === true\n    ).length;\n\n    // Count completed services - services posted by user where service requests were accepted and completed\n    const completedServices = Array.from(this.serviceRequests.values()).filter(sr => {\n      const service = this.services.get(sr.serviceId);\n      return service?.userId === userId && sr.status === \"accepted\" && sr.completedAt !== null;\n    }).length;\n\n    // Count total jobs posted by user\n    const totalJobsPosted = Array.from(this.jobs.values())\n      .filter(job => job.userId === userId).length;\n\n    // Count total services posted by user\n    const totalServicesPosted = Array.from(this.services.values())\n      .filter(service => service.userId === userId).length;\n\n    // Count total applications submitted by user\n    const totalApplicationsSubmitted = Array.from(this.applications.values())\n      .filter(application => application.userId === userId).length;\n\n    // Count total inquiries received by user (service requests for their services)\n    const totalInquiriesReceived = Array.from(this.serviceRequests.values()).filter(sr => {\n      const service = this.services.get(sr.serviceId);\n      return service?.userId === userId;\n    }).length;\n\n    return { \n      ...user,\n      averageRating, \n      totalReviews, \n      completedJobs,\n      completedServices,\n      totalJobsPosted,\n      totalServicesPosted,\n      totalApplicationsSubmitted,\n      totalInquiriesReceived,\n      joinedDate: user.createdAt?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0]\n    };\n  }\n\n  async getReviewsByUserId(userId: string): Promise<ReviewWithUser[]> {\n    const userReviews = Array.from(this.reviews.values()).filter(r => r.revieweeId === userId);\n    \n    const reviewsWithUsers = await Promise.all(\n      userReviews.map(async review => {\n        const reviewer = await this.getUser(review.reviewerId);\n        const reviewee = await this.getUser(review.revieweeId);\n        \n        // Check if the jobId refers to a job or service\n        const job = this.jobs.get(review.jobId);\n        const service = this.services.get(review.jobId);\n        \n        return { \n          ...review, \n          reviewer: reviewer!, \n          reviewee: reviewee!,\n          job: job ? {\n            title: job.title,\n            category: job.category\n          } : service ? {\n            title: service.title,\n            category: service.category\n          } : null\n        };\n      })\n    );\n\n    return reviewsWithUsers.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async hasUserReviewedJobFreelancer(reviewerId: string, jobId: string, revieweeId: string): Promise<boolean> {\n    return Array.from(this.reviews.values()).some(review => \n      review.reviewerId === reviewerId && \n      review.jobId === jobId && \n      review.revieweeId === revieweeId\n    );\n  }\n\n  async hasClientRatedServiceProvider(clientId: string, serviceProviderId: string, serviceId: string): Promise<boolean> {\n    return Array.from(this.reviews.values()).some(review => \n      review.reviewerId === clientId && \n      review.revieweeId === serviceProviderId && \n      review.jobId === serviceId &&\n      review.reviewType === \"client_to_worker\"\n    );\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    // Check if the reviewer has already reviewed this reviewee for this job\n    const hasExistingReview = await this.hasUserReviewedJobFreelancer(\n      review.reviewerId, \n      review.jobId, \n      review.revieweeId\n    );\n    \n    if (hasExistingReview) {\n      throw new Error('You have already reviewed this freelancer for this job');\n    }\n    \n    const id = randomUUID();\n    const newReview: Review = { \n      ...review, \n      id,\n      comment: review.comment ?? null,\n      createdAt: new Date(),\n      qualityOfWorkRating: review.qualityOfWorkRating ?? null,\n      communicationRating: review.communicationRating ?? null,\n      timelinessRating: review.timelinessRating ?? null\n    };\n    this.reviews.set(id, newReview);\n    return newReview;\n  }\n\n  async getReviewsForJob(jobId: string): Promise<ReviewWithUser[]> {\n    const jobReviews = Array.from(this.reviews.values()).filter(r => r.jobId === jobId);\n    \n    const reviewsWithUsers = await Promise.all(\n      jobReviews.map(async review => {\n        const reviewer = await this.getUser(review.reviewerId);\n        const reviewee = await this.getUser(review.revieweeId);\n        return { \n          ...review, \n          reviewer: reviewer!, \n          reviewee: reviewee! \n        };\n      })\n    );\n\n    return reviewsWithUsers;\n  }\n\n  async canFreelancerRateClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean> {\n    console.log(`[DEBUG] MemStorage canFreelancerRateClient called with:`, { freelancerId, clientId, jobId });\n    \n    // Check if the freelancer worked on this job (has an accepted application)\n    const application = Array.from(this.applications.values()).find(a => \n      a.jobId === jobId && \n      a.userId === freelancerId && \n      a.status === \"accepted\"\n    );\n\n    console.log(`[DEBUG] MemStorage Found application:`, !!application);\n\n    // Check if the job exists and belongs to the client\n    const job = Array.from(this.jobs.values()).find(j => \n      j.id === jobId && \n      j.userId === clientId\n    );\n\n    console.log(`[DEBUG] MemStorage Found job:`, !!job, `for client:`, clientId);\n\n    const result = !!application && !!job;\n    console.log(`[DEBUG] MemStorage canFreelancerRateClient result:`, result);\n    \n    // Allow rating if freelancer has accepted application and job exists\n    return result;\n  }\n\n  async canServiceProviderRateClient(serviceProviderId: string, clientId: string, serviceId: string): Promise<boolean> {\n    console.log(`[DEBUG] MemStorage canServiceProviderRateClient called with:`, { serviceProviderId, clientId, serviceId });\n    \n    // Check if the service provider owns the service\n    const service = Array.from(this.services.values()).find(s => \n      s.id === serviceId && \n      s.userId === serviceProviderId\n    );\n\n    console.log(`[DEBUG] MemStorage Found service:`, !!service, `for provider:`, serviceProviderId);\n\n    // Check if there's an accepted service request from the client\n    const serviceRequest = Array.from(this.serviceRequests.values()).find(sr => \n      sr.serviceId === serviceId && \n      sr.userId === clientId && \n      sr.status === \"accepted\"\n    );\n\n    console.log(`[DEBUG] MemStorage Found accepted service request:`, !!serviceRequest, `for client:`, clientId);\n\n    const result = !!service && !!serviceRequest;\n    console.log(`[DEBUG] MemStorage canServiceProviderRateClient result:`, result);\n    \n    return result;\n  }\n\n  async hasFreelancerRatedClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean> {\n    const freelancerReview = Array.from(this.reviews.values()).find(r => \n      r.jobId === jobId && \n      r.reviewerId === freelancerId && \n      r.revieweeId === clientId &&\n      r.reviewType === \"worker_to_client\"\n    );\n\n    return !!freelancerReview;\n  }\n\n  async getReviewByJobAndUsers(reviewerId: string, revieweeId: string, jobId: string, reviewType: string): Promise<Review | undefined> {\n    return Array.from(this.reviews.values()).find(r => \n      r.jobId === jobId && \n      r.reviewerId === reviewerId && \n      r.revieweeId === revieweeId &&\n      r.reviewType === reviewType\n    );\n  }\n\n  // Conversation operations\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = randomUUID();\n    const conversation: Conversation = {\n      ...insertConversation,\n      id,\n      lastMessageAt: new Date(),\n      createdAt: new Date(),\n      jobId: insertConversation.jobId || null,\n      serviceId: insertConversation.serviceId || null,\n      serviceProviderId: insertConversation.serviceProviderId || null,\n      applicantId: insertConversation.applicantId || null,\n      applicationId: insertConversation.applicationId || null,\n      serviceRequestId: insertConversation.serviceRequestId || null,\n      jobPosterId: insertConversation.jobPosterId || null,\n      serviceRequesterId: insertConversation.serviceRequesterId || null\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async getConversationsByUser(userId: string): Promise<ConversationWithDetails[]> {\n    const userConversations = Array.from(this.conversations.values())\n      .filter(conv => conv.jobPosterId === userId || conv.applicantId === userId);\n\n    return Promise.all(\n      userConversations.map(async conv => {\n        const otherUserId = conv.jobPosterId === userId ? conv.applicantId : conv.jobPosterId;\n        const otherUser = otherUserId ? await this.getUser(otherUserId) : null;\n        const job = conv.jobId ? await this.getJob(conv.jobId) : null;\n        \n        // Get last message\n        const conversationMessages = Array.from(this.messages.values())\n          .filter(msg => msg.conversationId === conv.id)\n          .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n        \n        const lastMessage = conversationMessages[0];\n        \n        // Count unread messages\n        const unreadCount = conversationMessages.filter(msg => \n          msg.senderId !== userId && !msg.isRead\n        ).length;\n\n        return {\n          ...conv,\n          otherUser: otherUser || { \n            id: '', username: 'Unknown', email: '', name: 'Unknown User',\n            profileImageUrl: null, passwordHash: null, googleId: null, \n            isEmailVerified: false, provider: 'email', role: 'user',\n            isActive: true, coins: 0, lastCoinReset: new Date(),\n            createdAt: new Date(), updatedAt: new Date(),\n            stripeCustomerId: null, activeSubscriptionId: null,\n            passwordResetToken: null, passwordResetExpires: null\n          },\n          job: job || { \n            id: '', title: 'Unknown Job', description: '', category: '', location: '', \n            specificArea: null, minBudget: null, maxBudget: 0, currency: 'USD', \n            experienceLevel: 'any', duration: null, customDuration: null,\n            status: 'open', approvalStatus: 'pending', approvedBy: null, \n            approvedAt: null, userId: '', images: [], createdAt: new Date(),\n            budgetType: 'fixed', freelancersNeeded: 1, expiresAt: new Date()\n          },\n          lastMessage,\n          unreadCount\n        };\n      })\n    );\n  }\n\n  async getConversation(conversationId: string, userId?: string): Promise<ConversationWithDetails | null> {\n    const conversation = this.conversations.get(conversationId);\n    if (!conversation) return null;\n\n    // Determine if this is a job or service conversation\n    const isJobConversation = conversation.jobPosterId && conversation.applicantId;\n    const isServiceConversation = conversation.serviceProviderId && conversation.serviceRequesterId;\n    \n    let otherUser;\n    let jobOrService;\n    \n    // Calculate unread count if userId is provided\n    let unreadCount = 0;\n    if (userId) {\n      const conversationMessages = Array.from(this.messages.values())\n        .filter(msg => msg.conversationId === conversationId);\n      unreadCount = conversationMessages.filter(msg => \n        msg.senderId !== userId && !msg.isRead\n      ).length;\n    }\n    \n    if (isServiceConversation) {\n      // For service conversations\n      const serviceProvider = conversation.serviceProviderId ? await this.getUser(conversation.serviceProviderId) : null;\n      const serviceRequester = conversation.serviceRequesterId ? await this.getUser(conversation.serviceRequesterId) : null;\n      const service = conversation.serviceId ? await this.getService(conversation.serviceId) : null;\n      \n      // The \"otherUser\" depends on who's asking - default to provider for now\n      otherUser = serviceProvider;\n      \n      jobOrService = service || { \n        id: '', title: 'Unknown Service', description: '', category: '', location: '', \n        priceFrom: 0, priceTo: null, priceType: 'fixed', currency: 'USD',\n        experienceLevel: 'any', deliveryTime: '', serviceDuration: '',\n        approvalStatus: 'pending', approvedBy: null, \n        approvedAt: null, userId: '', images: [], createdAt: new Date(),\n        updatedAt: new Date(), website: '', email: '', phone: '', tags: [],\n        availableSlots: 1\n      };\n    } else {\n      // For job conversations\n      const jobPoster = conversation.jobPosterId ? await this.getUser(conversation.jobPosterId) : null;\n      const applicant = conversation.applicantId ? await this.getUser(conversation.applicantId) : null;\n      const job = conversation.jobId ? await this.getJob(conversation.jobId) : null;\n      \n      otherUser = jobPoster;\n      \n      jobOrService = job || { \n        id: '', title: 'Unknown Job', description: '', category: '', location: '', \n        specificArea: null, minBudget: null, maxBudget: 0, currency: 'USD', \n        experienceLevel: 'any', duration: null, customDuration: null,\n        status: 'open', approvalStatus: 'pending', approvedBy: null, \n        approvedAt: null, userId: '', images: [], createdAt: new Date(),\n        budgetType: 'fixed', freelancersNeeded: 1, expiresAt: new Date()\n      };\n    }\n\n    return {\n      ...conversation,\n      otherUser: otherUser || { \n        id: '', username: 'Unknown', email: '', name: 'Unknown User',\n        profileImageUrl: null, passwordHash: null, googleId: null, \n        isEmailVerified: false, provider: 'email', role: 'user',\n        isActive: true, coins: 0, lastCoinReset: new Date(),\n        createdAt: new Date(), updatedAt: new Date(),\n        stripeCustomerId: null, activeSubscriptionId: null,\n        passwordResetToken: null, passwordResetExpires: null\n      },\n      job: !isServiceConversation ? jobOrService as Job | undefined : undefined,\n      service: isServiceConversation ? jobOrService as Service | undefined : undefined,\n      lastMessage: undefined,\n      unreadCount\n    };\n  }\n\n  async getConversationByApplicationId(applicationId: string): Promise<Conversation | null> {\n    return Array.from(this.conversations.values())\n      .find(conv => conv.applicationId === applicationId) || null;\n  }\n\n  // Message operations\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      isRead: false, // Messages start as unread for recipients\n      createdAt: new Date()\n    };\n    this.messages.set(id, message);\n\n    // Update conversation's lastMessageAt\n    const conversation = this.conversations.get(insertMessage.conversationId);\n    if (conversation) {\n      conversation.lastMessageAt = new Date();\n      this.conversations.set(conversation.id, conversation);\n    }\n\n\n\n    return message;\n  }\n\n  async getMessagesByConversation(conversationId: string): Promise<MessageWithSender[]> {\n    const conversationMessages = Array.from(this.messages.values())\n      .filter(msg => msg.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime());\n\n    return Promise.all(\n      conversationMessages.map(async message => {\n        const sender = await this.getUser(message.senderId);\n        return {\n          ...message,\n          sender: sender || { \n            id: '', username: 'Unknown', email: '', name: 'Unknown User',\n            profileImageUrl: null, passwordHash: null, googleId: null,\n            isEmailVerified: false, provider: 'email', role: 'user',\n            isActive: true, coins: 0, lastCoinReset: new Date(),\n            createdAt: new Date(), updatedAt: new Date(),\n            stripeCustomerId: null, activeSubscriptionId: null,\n            passwordResetToken: null, passwordResetExpires: null\n          }\n        };\n      })\n    );\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    const conversationMessages = Array.from(this.messages.values())\n      .filter(msg => msg.conversationId === conversationId && msg.senderId !== userId);\n\n    conversationMessages.forEach(message => {\n      message.isRead = true;\n      this.messages.set(message.id, message);\n    });\n  }\n\n  async getUnreadMessageCount(userId: string): Promise<number> {\n    const userConversations = Array.from(this.conversations.values())\n      .filter(conv => \n        conv.jobPosterId === userId || \n        conv.applicantId === userId ||\n        conv.serviceProviderId === userId ||\n        conv.serviceRequesterId === userId\n      );\n\n    let unreadCount = 0;\n    for (const conv of userConversations) {\n      const messages = Array.from(this.messages.values())\n        .filter(msg => msg.conversationId === conv.id && msg.senderId !== userId && !msg.isRead);\n      unreadCount += messages.length;\n    }\n\n    return unreadCount;\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const newNotification: Notification = {\n      id,\n      title: notification.title,\n      message: notification.message,\n      type: notification.type,\n      userId: notification.userId,\n      jobId: notification.jobId || null,\n      applicationId: notification.applicationId || null,\n      serviceId: notification.serviceId || null,\n      serviceRequestId: notification.serviceRequestId || null,\n      isRead: false,\n      createdAt: new Date()\n    };\n    this.notifications.set(id, newNotification);\n    return newNotification;\n  }\n\n  async getNotificationsByUserId(userId: string): Promise<Notification[]> {\n    const userNotifications = Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId);\n    \n    return userNotifications.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    const notification = this.notifications.get(notificationId);\n    if (notification) {\n      notification.isRead = true;\n      this.notifications.set(notificationId, notification);\n    }\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    Array.from(this.notifications.entries()).forEach(([id, notification]) => {\n      if (notification.userId === userId && !notification.isRead) {\n        notification.isRead = true;\n        this.notifications.set(id, notification);\n      }\n    });\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const unreadNotifications = Array.from(this.notifications.values()).filter(\n      notification => notification.userId === userId && !notification.isRead\n    );\n    return unreadNotifications.length;\n  }\n\n  // Admin operations - these would not be implemented in memory storage for production\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async banUser(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, isActive: false };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async unbanUser(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, isActive: true };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async promoteToAdmin(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, role: \"admin\" };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async demoteFromAdmin(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, role: \"user\" };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async promoteToModerator(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, role: \"moderator\" };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async demoteFromModerator(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, role: \"user\" };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async changeUserPassword(userId: string, newPasswordHash: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, passwordHash: newPasswordHash };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n\n\n  async getPendingJobs(): Promise<JobWithApplications[]> {\n    const pendingJobs = Array.from(this.jobs.values())\n      .filter(job => job.approvalStatus === \"pending\");\n    \n    return pendingJobs.map(job => {\n      const applicationCount = Array.from(this.applications.values())\n        .filter(app => app.jobId === job.id).length;\n      \n      return { ...job, applicationCount };\n    });\n  }\n\n  async getApprovedJobs(): Promise<JobWithApplications[]> {\n    const approvedJobs = Array.from(this.jobs.values())\n      .filter(job => job.approvalStatus === \"approved\");\n    \n    return approvedJobs.map(job => {\n      const applicationCount = Array.from(this.applications.values())\n        .filter(app => app.jobId === job.id).length;\n      \n      return { ...job, applicationCount };\n    });\n  }\n\n  async approveJob(jobId: string, adminId: string): Promise<Job> {\n    const job = this.jobs.get(jobId);\n    if (!job) throw new Error(\"Job not found\");\n    \n    const updatedJob = { \n      ...job, \n      approvalStatus: \"approved\",\n      approvedBy: adminId,\n      approvedAt: new Date()\n    };\n    this.jobs.set(jobId, updatedJob);\n    return updatedJob;\n  }\n\n  async rejectJob(jobId: string, adminId: string): Promise<Job> {\n    const job = this.jobs.get(jobId);\n    if (!job) throw new Error(\"Job not found\");\n    \n    const updatedJob = { \n      ...job, \n      approvalStatus: \"rejected\",\n      approvedBy: adminId,\n      approvedAt: new Date()\n    };\n    this.jobs.set(jobId, updatedJob);\n    return updatedJob;\n  }\n\n\n\n  async getAdminStats(): Promise<{\n    totalUsers: string;\n    totalApprovedJobs: string;\n    openJobs: string;\n    closedJobs: string;\n    totalApplications: string;\n    totalServices: string;\n    totalSkillEndorsements: string;\n    activeSubscriptions: string;\n    subscriptionPercentage: string;\n    monthlyRevenue: string;\n    avgJobsPerUser: string;\n    avgApplicationsPerUser: string;\n    freelancerSubs: string;\n    freelancerPercentage: string;\n    professionalSubs: string;\n    professionalPercentage: string;\n    expertSubs: string;\n    expertPercentage: string;\n    eliteSubs: string;\n    elitePercentage: string;\n    totalInquiries: string;\n    totalCompletedServices: string;\n    avgServicesPerUser: string;\n  }> {\n    const totalUsers = this.users.size;\n    const totalApprovedJobs = Array.from(this.jobs.values())\n      .filter(job => job.approvalStatus === \"approved\").length;\n    const openJobs = Array.from(this.jobs.values())\n      .filter(job => job.approvalStatus === \"approved\" && job.status === \"open\").length;\n    const closedJobs = Array.from(this.jobs.values())\n      .filter(job => job.approvalStatus === \"approved\" && (job.status === \"completed\" || job.status === \"in_progress\")).length;\n    const totalApplications = this.applications.size;\n    const totalServices = Array.from(this.services.values())\n      .filter(service => service.approvalStatus === \"approved\").length;\n    const totalSkillEndorsements = this.skillEndorsements.size;\n    const totalInquiries = this.serviceRequests.size;\n    const totalCompletedServices = Array.from(this.serviceRequests.values())\n      .filter(request => request.status === \"accepted\" && request.completedAt !== null).length;\n    \n    // Calculate subscription stats\n    const activeSubscriptions = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\").length;\n    const monthlyRevenue = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\")\n      .reduce((total, sub) => total + sub.monthlyPrice, 0);\n\n    // Calculate subscription percentage\n    const subscriptionPercentage = totalUsers > 0 ? ((activeSubscriptions / totalUsers) * 100).toFixed(1) : \"0.0\";\n\n    // Calculate subscription stats by plan type\n    const freelancerSubs = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\" && sub.planType === \"freelancer\").length;\n    const professionalSubs = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\" && sub.planType === \"professional\").length;\n    const expertSubs = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\" && sub.planType === \"expert\").length;\n    const eliteSubs = Array.from(this.coinSubscriptions.values())\n      .filter(sub => sub.status === \"active\" && sub.planType === \"elite\").length;\n\n    const freelancerPercentage = totalUsers > 0 ? ((freelancerSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const professionalPercentage = totalUsers > 0 ? ((professionalSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const expertPercentage = totalUsers > 0 ? ((expertSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const elitePercentage = totalUsers > 0 ? ((eliteSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n\n    // Calculate averages\n    const avgJobsPerUser = totalUsers > 0 ? (totalApprovedJobs / totalUsers).toFixed(1) : \"0.0\";\n    const avgApplicationsPerUser = totalUsers > 0 ? (totalApplications / totalUsers).toFixed(1) : \"0.0\";\n    const avgServicesPerUser = totalUsers > 0 ? (totalServices / totalUsers).toFixed(1) : \"0.0\";\n\n    return {\n      totalUsers: totalUsers.toString(),\n      totalApprovedJobs: totalApprovedJobs.toString(),\n      openJobs: openJobs.toString(),\n      closedJobs: closedJobs.toString(),\n      totalApplications: totalApplications.toString(),\n      totalServices: totalServices.toString(),\n      totalSkillEndorsements: totalSkillEndorsements.toString(),\n      totalInquiries: totalInquiries.toString(),\n      totalCompletedServices: totalCompletedServices.toString(),\n      activeSubscriptions: activeSubscriptions.toString(),\n      subscriptionPercentage,\n      monthlyRevenue: (monthlyRevenue / 100).toFixed(2), // Convert cents to dollars\n      avgJobsPerUser,\n      avgApplicationsPerUser,\n      avgServicesPerUser,\n      freelancerSubs: freelancerSubs.toString(),\n      freelancerPercentage,\n      professionalSubs: professionalSubs.toString(),\n      professionalPercentage,\n      expertSubs: expertSubs.toString(),\n      expertPercentage,\n      eliteSubs: eliteSubs.toString(),\n      elitePercentage,\n    };\n  }\n\n  // Coin management methods\n  \n  // Get coin cap for a user based on their subscription\n  async getUserCoinCap(userId: string): Promise<number> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    if (user.role === \"admin\") {\n      return Infinity; // Admins have no cap\n    }\n    \n    const activeSubscription = await this.getUserActiveSubscription(userId);\n    if (activeSubscription) {\n      const planType = activeSubscription.planType as keyof typeof SUBSCRIPTION_PLANS;\n      const plan = SUBSCRIPTION_PLANS[planType];\n      \n      if (plan?.hasUnlimitedCoinCap) {\n        return Infinity; // Elite plan has unlimited cap\n      }\n      \n      // Return coin cap based on plan\n      switch (planType) {\n        case 'freelancer': return 100;\n        case 'professional': return 400;\n        case 'expert': return 1000;\n        default: return 40; // Free tier default\n      }\n    }\n    \n    return 40; // Free tier cap\n  }\n  \n  async checkAndResetCoins(userId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const now = new Date();\n    const lastReset = new Date(user.lastCoinReset || 0);\n    const daysSinceReset = Math.floor((now.getTime() - lastReset.getTime()) / (1000 * 60 * 60 * 24));\n\n    // Get user's coin cap\n    const coinCap = await this.getUserCoinCap(userId);\n\n    // Reset coins if 30 days have passed\n    if (daysSinceReset >= 30) {\n      let coinsToGrant = 20; // Default for users without subscription\n      \n      if (user.role === \"admin\") {\n        coinsToGrant = 100; // Admins get 100 coins\n      } else {\n        // Check if user has active subscription\n        const activeSubscription = await this.getUserActiveSubscription(userId);\n        if (activeSubscription) {\n          // Check if user has unlimited coin cap benefit\n          const planType = activeSubscription.planType as keyof typeof SUBSCRIPTION_PLANS;\n          const hasUnlimitedCoinCap = SUBSCRIPTION_PLANS[planType]?.hasUnlimitedCoinCap;\n          \n          if (hasUnlimitedCoinCap) {\n            // For unlimited coin cap plans, add new coins to existing balance\n            coinsToGrant = user.coins + activeSubscription.coinAllocation;\n          } else {\n            // For regular plans, reset to subscription allocation, but respect coin cap\n            coinsToGrant = Math.min(activeSubscription.coinAllocation, coinCap);\n          }\n        }\n      }\n\n      // Enforce coin cap\n      if (coinCap !== Infinity) {\n        coinsToGrant = Math.min(coinsToGrant, coinCap);\n      }\n\n      const updatedUser = {\n        ...user,\n        coins: coinsToGrant,\n        lastCoinReset: now\n      };\n      this.users.set(userId, updatedUser);\n      return updatedUser;\n    }\n\n    // Even if no reset, enforce coin cap on current balance\n    let updatedUser = user;\n    if (coinCap !== Infinity && user.coins > coinCap) {\n      updatedUser = {\n        ...user,\n        coins: coinCap\n      };\n      this.users.set(userId, updatedUser);\n    }\n\n    return updatedUser;\n  }\n\n  async deductCoins(userId: string, amount: number): Promise<User> {\n    const user = await this.checkAndResetCoins(userId);\n    \n    if (user.coins < amount) {\n      throw new Error(\"Insufficient coins\");\n    }\n\n    const updatedUser = {\n      ...user,\n      coins: user.coins - amount\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserCoins(userId: string): Promise<number> {\n    const user = await this.checkAndResetCoins(userId);\n    return user.coins;\n  }\n\n  async getAllUsersWithCoins(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async addCoinsToUser(userId: string, amount: number): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const coinCap = await this.getUserCoinCap(userId);\n    let newCoins = user.coins + amount;\n    \n    // Enforce coin cap\n    if (coinCap !== Infinity) {\n      newCoins = Math.min(newCoins, coinCap);\n    }\n\n    const updatedUser = {\n      ...user,\n      coins: newCoins\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async removeCoinsFromUser(userId: string, amount: number): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const updatedUser = {\n      ...user,\n      coins: Math.max(0, user.coins - amount) // Prevent negative coins\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async setUserCoins(userId: string, amount: number): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const coinCap = await this.getUserCoinCap(userId);\n    let newCoins = Math.max(0, amount); // Prevent negative coins\n    \n    // Enforce coin cap\n    if (coinCap !== Infinity) {\n      newCoins = Math.min(newCoins, coinCap);\n    }\n\n    const updatedUser = {\n      ...user,\n      coins: newCoins\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  // Profile operations\n  async getUserProfile(userId: string): Promise<User | undefined> {\n    return this.getUser(userId);\n  }\n\n  async updateUserProfile(userId: string, updates: { name?: string; email?: string; profileImageUrl?: string }): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const updatedUser = {\n      ...user,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserCompletedJobs(userId: string): Promise<ApplicationWithJob[]> {\n    const userApplications = Array.from(this.applications.values())\n      .filter(app => app.userId === userId && app.status === \"accepted\" && app.isCompleted === true);\n\n    const applicationsWithJobs = await Promise.all(\n      userApplications.map(async app => {\n        const job = await this.getJob(app.jobId);\n        return { ...app, job: job! };\n      })\n    );\n\n    return applicationsWithJobs.sort((a, b) => \n      new Date(b.completedAt || 0).getTime() - new Date(a.completedAt || 0).getTime()\n    );\n  }\n\n  async getUserPostedJobs(userId: string): Promise<JobWithApplications[]> {\n    const userJobs = Array.from(this.jobs.values())\n      .filter(job => job.userId === userId);\n\n    const jobsWithApplications = await Promise.all(\n      userJobs.map(async job => {\n        const jobApplications = Array.from(this.applications.values())\n          .filter(app => app.jobId === job.id);\n        \n        const applicationsWithUsers = await Promise.all(\n          jobApplications.map(async app => {\n            const user = await this.getUser(app.userId);\n            return {\n              ...app,\n              user: user || {\n                id: '', name: 'Unknown', username: 'unknown', email: '',\n                profileImageUrl: null, passwordHash: null, googleId: null,\n                isEmailVerified: false, provider: 'email', role: 'user',\n                isActive: true, coins: 0, lastCoinReset: new Date(),\n                createdAt: new Date(), updatedAt: new Date(),\n                stripeCustomerId: null, activeSubscriptionId: null,\n                passwordResetToken: null, passwordResetExpires: null\n              }\n            };\n          })\n        );\n        \n        return { \n          ...job, \n          applications: applicationsWithUsers,\n          applicationCount: jobApplications.length \n        };\n      })\n    );\n\n    return jobsWithApplications.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getUserReviews(userId: string): Promise<any[]> {\n    const userReviews = Array.from(this.reviews.values())\n      .filter(review => review.revieweeId === userId);\n    \n    const reviewsWithDetails = await Promise.all(\n      userReviews.map(async review => {\n        const reviewer = await this.getUser(review.reviewerId);\n        const job = await this.getJob(review.jobId);\n        return {\n          ...review,\n          reviewer: {\n            name: reviewer?.name || \"Unknown\",\n            username: reviewer?.username || \"unknown\",\n            profileImageUrl: reviewer?.profileImageUrl\n          },\n          job: {\n            title: job?.title || \"Unknown Job\",\n            category: job?.category || \"Unknown\"\n          }\n        };\n      })\n    );\n\n    return reviewsWithDetails.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  // Job report operations\n  async createJobReport(insertReport: InsertJobReport, reporterId: string): Promise<JobReport> {\n    const id = randomUUID();\n    const newReport: JobReport = {\n      ...insertReport,\n      id,\n      reporterId,\n      status: \"pending\",\n      adminNotes: null,\n      reviewedBy: null,\n      reviewedAt: null,\n      createdAt: new Date()\n    };\n    this.jobReports.set(id, newReport);\n    return newReport;\n  }\n\n  async getJobReport(reportId: string): Promise<JobReport | undefined> {\n    return this.jobReports.get(reportId);\n  }\n\n  async getJobReportsByJobId(jobId: string): Promise<JobReportWithDetails[]> {\n    const jobReports = Array.from(this.jobReports.values()).filter(r => r.jobId === jobId);\n    \n    const reportsWithDetails = await Promise.all(\n      jobReports.map(async report => {\n        const job = await this.getJob(report.jobId);\n        const reporter = await this.getUser(report.reporterId);\n        const reviewer = report.reviewedBy ? await this.getUser(report.reviewedBy) : undefined;\n        \n        return {\n          ...report,\n          job: job!,\n          reporter: reporter!,\n          reviewer\n        };\n      })\n    );\n\n    return reportsWithDetails.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getAllJobReports(): Promise<JobReportWithDetails[]> {\n    const allReports = Array.from(this.jobReports.values());\n    \n    const reportsWithDetails = await Promise.all(\n      allReports.map(async report => {\n        const job = await this.getJob(report.jobId);\n        const reporter = await this.getUser(report.reporterId);\n        const reviewer = report.reviewedBy ? await this.getUser(report.reviewedBy) : undefined;\n        \n        return {\n          ...report,\n          job: job!,\n          reporter: reporter!,\n          reviewer\n        };\n      })\n    );\n\n    return reportsWithDetails.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getPendingJobReports(): Promise<JobReportWithDetails[]> {\n    const pendingReports = Array.from(this.jobReports.values()).filter(r => r.status === \"pending\");\n    \n    const reportsWithDetails = await Promise.all(\n      pendingReports.map(async report => {\n        const job = await this.getJob(report.jobId);\n        const reporter = await this.getUser(report.reporterId);\n        \n        return {\n          ...report,\n          job: job!,\n          reporter: reporter!,\n          reviewer: undefined\n        };\n      })\n    );\n\n    return reportsWithDetails.sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async updateJobReport(reportId: string, updates: Partial<JobReport>): Promise<JobReport | undefined> {\n    const report = this.jobReports.get(reportId);\n    if (!report) return undefined;\n    \n    const updatedReport = { ...report, ...updates };\n    this.jobReports.set(reportId, updatedReport);\n    return updatedReport;\n  }\n\n  async hasUserReportedJob(userId: string, jobId: string): Promise<boolean> {\n    const userReports = Array.from(this.jobReports.values()).filter(\n      r => r.reporterId === userId && r.jobId === jobId\n    );\n    return userReports.length > 0;\n  }\n\n  // Job expiry operations\n  async extendJobExpiry(jobId: string, userId: string): Promise<Job> {\n    const job = this.jobs.get(jobId);\n    if (!job) throw new Error(\"Job not found\");\n    if (job.userId !== userId) throw new Error(\"Unauthorized\");\n    \n    // Extend expiry by 30 days\n    const newExpiryDate = new Date(job.expiresAt);\n    newExpiryDate.setDate(newExpiryDate.getDate() + 30);\n    \n    const updatedJob = { ...job, expiresAt: newExpiryDate };\n    this.jobs.set(jobId, updatedJob);\n    return updatedJob;\n  }\n\n  // Service expiry operations\n  async extendService(serviceId: string, userId: string): Promise<Service> {\n    const service = this.services.get(serviceId);\n    if (!service) throw new Error(\"Service not found\");\n    if (service.userId !== userId) throw new Error(\"Unauthorized\");\n    \n    // Extend expiry by 30 days\n    const newExpiryDate = new Date(service.expiresAt);\n    newExpiryDate.setDate(newExpiryDate.getDate() + 30);\n    \n    const updatedService = { ...service, expiresAt: newExpiryDate };\n    this.services.set(serviceId, updatedService);\n    return updatedService;\n  }\n\n  async closeExpiredServices(): Promise<number> {\n    const now = new Date();\n    let closedCount = 0;\n    \n    for (const [id, service] of Array.from(this.services.entries())) {\n      if (service.expiresAt <= now && service.status === \"active\") {\n        const updatedService = { ...service, status: \"expired\" as const };\n        this.services.set(id, updatedService);\n        closedCount++;\n      }\n    }\n    \n    return closedCount;\n  }\n\n\n\n  // Missing interface methods\n  async updateUserStripeCustomerId(userId: string, customerId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    const updatedUser = { ...user, stripeCustomerId: customerId };\n    this.users.set(userId, updatedUser);\n  }\n\n  async createEmailVerificationToken(token: InsertEmailVerificationToken): Promise<EmailVerificationToken> {\n    const newToken: EmailVerificationToken = {\n      ...token,\n      id: randomUUID(),\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n    };\n    this.emailVerificationTokens.set(newToken.token, newToken);\n    return newToken;\n  }\n\n  async getEmailVerificationToken(token: string): Promise<EmailVerificationToken | undefined> {\n    return this.emailVerificationTokens.get(token);\n  }\n\n  async deleteEmailVerificationToken(token: string): Promise<void> {\n    this.emailVerificationTokens.delete(token);\n  }\n\n  async verifyUserEmail(email: string): Promise<User | undefined> {\n    const user = Array.from(this.users.values()).find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (user) {\n      const updatedUser = { ...user, isEmailVerified: true };\n      this.users.set(user.id, updatedUser);\n      return updatedUser;\n    }\n    return undefined;\n  }\n\n  async createCoinPurchase(purchase: InsertCoinPurchase): Promise<CoinPurchase> {\n    const newPurchase: CoinPurchase = {\n      id: randomUUID(),\n      coins: purchase.coins,\n      createdAt: new Date(),\n      status: purchase.status || \"pending\",\n      userId: purchase.userId,\n      completedAt: null,\n      type: purchase.type || \"purchase\",\n      stripePaymentIntentId: purchase.stripePaymentIntentId || null,\n      subscriptionId: purchase.subscriptionId || null,\n      amount: purchase.amount\n    };\n    this.coinPurchases.set(newPurchase.id, newPurchase);\n    return newPurchase;\n  }\n\n  async getCoinPurchase(id: string): Promise<CoinPurchase | undefined> {\n    return this.coinPurchases.get(id);\n  }\n\n  async getCoinPurchaseByPaymentIntent(paymentIntentId: string): Promise<CoinPurchase | undefined> {\n    return Array.from(this.coinPurchases.values()).find(p => p.stripePaymentIntentId === paymentIntentId);\n  }\n\n  async updateCoinPurchaseStatus(id: string, status: string, completedAt?: Date): Promise<CoinPurchase | undefined> {\n    const purchase = this.coinPurchases.get(id);\n    if (!purchase) return undefined;\n    const updatedPurchase = { ...purchase, status, completedAt: completedAt || null };\n    this.coinPurchases.set(id, updatedPurchase);\n    return updatedPurchase;\n  }\n\n  async createCoinSubscription(subscription: InsertCoinSubscription): Promise<CoinSubscription> {\n    const newSub: CoinSubscription = {\n      id: randomUUID(),\n      stripeCustomerId: subscription.stripeCustomerId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      status: subscription.status || \"active\",\n      userId: subscription.userId,\n      stripeSubscriptionId: subscription.stripeSubscriptionId || null,\n      planType: subscription.planType,\n      monthlyPrice: subscription.monthlyPrice,\n      coinAllocation: subscription.coinAllocation,\n      currentPeriodStart: subscription.currentPeriodStart || new Date(),\n      currentPeriodEnd: subscription.currentPeriodEnd || new Date(),\n      canceledAt: null\n    };\n    this.coinSubscriptions.set(newSub.id, newSub);\n    return newSub;\n  }\n\n  async getCoinSubscription(id: string): Promise<CoinSubscription | undefined> {\n    return this.coinSubscriptions.get(id);\n  }\n\n  async getCoinSubscriptionByStripeId(stripeSubscriptionId: string): Promise<CoinSubscription | undefined> {\n    return Array.from(this.coinSubscriptions.values()).find(s => s.stripeSubscriptionId === stripeSubscriptionId);\n  }\n\n  async getUserActiveSubscription(userId: string): Promise<CoinSubscription | undefined> {\n    return Array.from(this.coinSubscriptions.values()).find(s => s.userId === userId && s.status === \"active\");\n  }\n\n  async updateCoinSubscriptionStatus(id: string, status: string, canceledAt?: Date): Promise<CoinSubscription | undefined> {\n    const subscription = this.coinSubscriptions.get(id);\n    if (!subscription) return undefined;\n    const updatedSub = { ...subscription, status, canceledAt: canceledAt || null, updatedAt: new Date() };\n    this.coinSubscriptions.set(id, updatedSub);\n    return updatedSub;\n  }\n\n  async updateCoinSubscription(id: string, updates: Partial<CoinSubscription>): Promise<CoinSubscription | undefined> {\n    const subscription = this.coinSubscriptions.get(id);\n    if (!subscription) return undefined;\n    const updatedSub = { ...subscription, ...updates, updatedAt: new Date() };\n    this.coinSubscriptions.set(id, updatedSub);\n    return updatedSub;\n  }\n\n  async updateUserSubscription(userId: string, planType: string): Promise<void> {\n    // First end any existing active subscription\n    const subscriptionEntries = Array.from(this.coinSubscriptions.entries());\n    for (const [id, subscription] of subscriptionEntries) {\n      if (subscription.userId === userId && subscription.status === \"active\") {\n        this.coinSubscriptions.set(id, {\n          ...subscription,\n          status: \"canceled\",\n          canceledAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n    }\n\n    // Create new subscription with the specified plan type\n    const { SUBSCRIPTION_PLANS } = await import(\"@shared/schema\");\n    const plan = SUBSCRIPTION_PLANS[planType as keyof typeof SUBSCRIPTION_PLANS];\n    \n    if (!plan) {\n      throw new Error(\"Invalid plan type\");\n    }\n\n    // Set billing cycle dates (30 days from now)\n    const now = new Date();\n    const nextBilling = new Date(now);\n    nextBilling.setDate(nextBilling.getDate() + 30);\n\n    const newSubscription: CoinSubscription = {\n      id: randomUUID(),\n      userId,\n      planType,\n      status: \"active\",\n      monthlyPrice: plan.price, // Already in cents\n      coinAllocation: plan.coins,\n      currentPeriodStart: now,\n      currentPeriodEnd: nextBilling,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      canceledAt: null\n    };\n\n    this.coinSubscriptions.set(newSubscription.id, newSubscription);\n\n    // Immediately allocate monthly coins to the user\n    const user = this.users.get(userId);\n    if (user) {\n      this.users.set(userId, {\n        ...user,\n        coins: user.coins + plan.coins,\n        lastCoinReset: now\n      });\n    }\n  }\n\n  async removeUserSubscription(userId: string): Promise<void> {\n    // Cancel all active subscriptions for the user\n    const subscriptionEntries = Array.from(this.coinSubscriptions.entries());\n    for (const [id, subscription] of subscriptionEntries) {\n      if (subscription.userId === userId && subscription.status === \"active\") {\n        this.coinSubscriptions.set(id, {\n          ...subscription,\n          status: \"canceled\",\n          canceledAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n    }\n  }\n\n  // Skill endorsement operations\n  async createSkillEndorsement(endorsement: InsertSkillEndorsement, endorserId: string): Promise<SkillEndorsement> {\n    const id = randomUUID();\n    const newEndorsement: SkillEndorsement = {\n      ...endorsement,\n      id,\n      endorserId,\n      createdAt: new Date(),\n      message: endorsement.message || null\n    };\n    this.skillEndorsements.set(id, newEndorsement);\n    return newEndorsement;\n  }\n\n  async getSkillEndorsementsByUserId(userId: string): Promise<SkillEndorsementWithUser[]> {\n    const endorsements = Array.from(this.skillEndorsements.values())\n      .filter(endorsement => endorsement.endorseeId === userId);\n    \n    return Promise.all(\n      endorsements.map(async endorsement => {\n        const endorser = await this.getUser(endorsement.endorserId);\n        const job = await this.getJob(endorsement.jobId);\n        return {\n          ...endorsement,\n          endorser: endorser!,\n          job: job!\n        };\n      })\n    );\n  }\n\n  async hasUserEndorsedSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean> {\n    const existingEndorsement = Array.from(this.skillEndorsements.values()).find(\n      endorsement => \n        endorsement.endorserId === endorserId && \n        endorsement.endorseeId === endorseeId && \n        endorsement.jobId === jobId\n    );\n    return !!existingEndorsement;\n  }\n\n  async canUserEndorseSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean> {\n    // Check if user has already endorsed this freelancer for this job\n    const hasEndorsed = await this.hasUserEndorsedSkillForJob(endorserId, endorseeId, jobId);\n    if (hasEndorsed) return false;\n\n    // Check if the job exists and endorser is the job poster\n    const job = await this.getJob(jobId);\n    if (!job || job.userId !== endorserId) return false;\n\n    // Check if the endorsee has an accepted application for this job\n    const application = Array.from(this.applications.values()).find(\n      app => app.jobId === jobId && app.userId === endorseeId && app.status === \"accepted\"\n    );\n    \n    return !!application;\n  }\n\n  // Service operations\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async getServices(filters?: { category?: string; location?: string; experienceLevel?: string; query?: string }): Promise<ServiceWithRequests[]> {\n    let serviceArray = Array.from(this.services.values());\n    \n    // Apply filters\n    if (filters?.category) {\n      serviceArray = serviceArray.filter(service => service.category === filters.category);\n    }\n    if (filters?.location) {\n      serviceArray = serviceArray.filter(service => service.location?.toLowerCase().includes(filters.location!.toLowerCase()));\n    }\n    if (filters?.experienceLevel) {\n      serviceArray = serviceArray.filter(service => service.experienceLevel === filters.experienceLevel);\n    }\n    if (filters?.query) {\n      const queryLower = filters.query.toLowerCase();\n      serviceArray = serviceArray.filter(service => \n        service.title.toLowerCase().includes(queryLower) ||\n        service.description.toLowerCase().includes(queryLower)\n      );\n    }\n    \n    // Add requests to each service\n    return Promise.all(serviceArray.map(async service => {\n      const requests = Array.from(this.serviceRequests.values())\n        .filter(request => request.serviceId === service.id)\n        .map(request => ({\n          ...request,\n          user: this.users.get(request.userId)\n        }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getApprovedServices(): Promise<ServiceWithRequests[]> {\n    const approvedServices = Array.from(this.services.values())\n      .filter(service => service.approvalStatus === \"approved\");\n    \n    return Promise.all(approvedServices.map(async service => {\n      const requests = Array.from(this.serviceRequests.values())\n        .filter(request => request.serviceId === service.id)\n        .map(request => ({\n          ...request,\n          user: this.users.get(request.userId)\n        }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getPendingServices(): Promise<ServiceWithRequests[]> {\n    const pendingServices = Array.from(this.services.values())\n      .filter(service => service.approvalStatus === \"pending\");\n    \n    return Promise.all(pendingServices.map(async service => {\n      const user = this.users.get(service.userId);\n      const requests = Array.from(this.serviceRequests.values())\n        .filter(request => request.serviceId === service.id)\n        .map(request => ({\n          ...request,\n          user: this.users.get(request.userId)\n        }));\n      \n      return {\n        ...service,\n        user: user!,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getServicesByUserId(userId: string): Promise<ServiceWithRequests[]> {\n    const userServices = Array.from(this.services.values())\n      .filter(service => service.userId === userId);\n    \n    return Promise.all(userServices.map(async service => {\n      const requests = Array.from(this.serviceRequests.values())\n        .filter(request => request.serviceId === service.id)\n        .map(request => ({\n          ...request,\n          user: this.users.get(request.userId)\n        }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 30); // Default 30-day expiry\n    \n    const newService: Service = {\n      ...service,\n      id,\n      userId: (service as any).userId!,\n      approvalStatus: \"pending\",\n      approvedBy: null,\n      approvedAt: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      expiresAt,\n      email: service.email || null,\n      status: service.status || \"active\",\n      specificArea: service.specificArea || null,\n      currency: service.currency || null,\n      experienceLevel: service.experienceLevel || null,\n      duration: service.duration || null,\n      images: service.images || [],\n      priceTo: service.priceTo ?? null\n    };\n    this.services.set(id, newService);\n    return newService;\n  }\n\n  async updateService(id: string, updates: Partial<Service>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n    \n    const updatedService = {\n      ...service,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  async updateServiceImages(serviceId: string, images: string[]): Promise<Service | undefined> {\n    const service = this.services.get(serviceId);\n    if (!service) return undefined;\n    \n    const updatedService = {\n      ...service,\n      images,\n      updatedAt: new Date()\n    };\n    this.services.set(serviceId, updatedService);\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    this.services.delete(id);\n    // Also delete associated service requests\n    Array.from(this.serviceRequests.entries()).forEach(([requestId, request]) => {\n      if (request.serviceId === id) {\n        this.serviceRequests.delete(requestId);\n      }\n    });\n  }\n\n  async approveService(serviceId: string, adminId: string): Promise<Service> {\n    const service = this.services.get(serviceId);\n    if (!service) throw new Error(\"Service not found\");\n    \n    const updatedService = {\n      ...service,\n      approvalStatus: \"approved\" as const,\n      approvedBy: adminId,\n      approvedAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.services.set(serviceId, updatedService);\n    return updatedService;\n  }\n\n  async rejectService(serviceId: string, adminId: string): Promise<Service> {\n    const service = this.services.get(serviceId);\n    if (!service) throw new Error(\"Service not found\");\n    \n    const updatedService = {\n      ...service,\n      approvalStatus: \"rejected\" as const,\n      approvedBy: adminId,\n      approvedAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.services.set(serviceId, updatedService);\n    return updatedService;\n  }\n\n  // Service request operations\n  async getServiceRequest(id: string): Promise<ServiceRequest | undefined> {\n    return this.serviceRequests.get(id);\n  }\n\n  async getServiceRequestsByServiceId(serviceId: string): Promise<ServiceRequestWithUser[]> {\n    const requests = Array.from(this.serviceRequests.values())\n      .filter(request => request.serviceId === serviceId);\n    \n    return requests.map(request => ({\n      ...request,\n      user: this.users.get(request.userId)!\n    }));\n  }\n\n  async getServiceRequestsByUserId(userId: string): Promise<ServiceRequest[]> {\n    return Array.from(this.serviceRequests.values())\n      .filter(request => request.userId === userId);\n  }\n\n  async createServiceRequest(request: InsertServiceRequest, userId: string): Promise<ServiceRequest> {\n    const id = randomUUID();\n    const newRequest: ServiceRequest = {\n      ...request,\n      id,\n      userId,\n      status: \"pending\",\n      coinsBid: request.coinsBid || 0,\n      timeline: request.timeline || null,\n      requirements: request.requirements || null,\n      acceptedAt: null,\n      completedAt: null,\n      createdAt: new Date()\n    };\n    this.serviceRequests.set(id, newRequest);\n    return newRequest;\n  }\n\n  async updateServiceRequest(id: string, updates: Partial<ServiceRequest>): Promise<ServiceRequest | undefined> {\n    const request = this.serviceRequests.get(id);\n    if (!request) return undefined;\n    \n    const updatedRequest = {\n      ...request,\n      ...updates\n    };\n    this.serviceRequests.set(id, updatedRequest);\n    return updatedRequest;\n  }\n\n  async updateServiceRequestStatus(requestId: string, status: string): Promise<ServiceRequest> {\n    const request = this.serviceRequests.get(requestId);\n    if (!request) throw new Error(\"Service request not found\");\n    \n    const updatedRequest = {\n      ...request,\n      status,\n      acceptedAt: status === \"accepted\" ? new Date() : request.acceptedAt,\n      completedAt: status === \"completed\" ? new Date() : request.completedAt\n    };\n    this.serviceRequests.set(requestId, updatedRequest);\n    return updatedRequest;\n  }\n\n  async completeServiceRequest(requestId: string): Promise<ServiceRequest> {\n    const request = this.serviceRequests.get(requestId);\n    if (!request) throw new Error(\"Service request not found\");\n    \n    const updatedRequest = {\n      ...request,\n      completedAt: new Date()\n    };\n    this.serviceRequests.set(requestId, updatedRequest);\n    return updatedRequest;\n  }\n\n  async hasUserRequestedService(userId: string, serviceId: string): Promise<boolean> {\n    const existingRequest = Array.from(this.serviceRequests.values()).find(\n      request => request.userId === userId && request.serviceId === serviceId\n    );\n    return !!existingRequest;\n  }\n\n  async getConversationByServiceRequest(serviceRequestId: string): Promise<Conversation | undefined> {\n    return Array.from(this.conversations.values())\n      .find(conv => conv.serviceRequestId === serviceRequestId) || undefined;\n  }\n\n  // Apply coin caps to all existing users\n  async applyCoincapToAllUsers(): Promise<void> {\n    console.log(\"Applying coin caps to all users...\");\n    for (const [userId, user] of Array.from(this.users.entries())) {\n      try {\n        const coinCap = await this.getUserCoinCap(userId);\n        \n        if (coinCap !== Infinity && user.coins > coinCap) {\n          const updatedUser = {\n            ...user,\n            coins: coinCap\n          };\n          this.users.set(userId, updatedUser);\n          console.log(`Applied coin cap to user ${user.username}: ${user.coins} -> ${coinCap}`);\n        }\n      } catch (error) {\n        console.error(`Error applying coin cap to user ${userId}:`, error);\n      }\n    }\n    \n    console.log(\"Finished applying coin caps to all users\");\n  }\n}\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email.toLowerCase()));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user || undefined;\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.passwordResetToken, token));\n    return user || undefined;\n  }\n\n  async updatePasswordResetToken(userId: string, token: string, expires: Date): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        passwordResetToken: token, \n        passwordResetExpires: expires \n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updatePassword(userId: string, passwordHash: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ passwordHash })\n      .where(eq(users.id, userId));\n  }\n\n  async clearPasswordResetToken(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        passwordResetToken: null, \n        passwordResetExpires: null \n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserStripeCustomerId(userId: string, customerId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ stripeCustomerId: customerId })\n      .where(eq(users.id, userId));\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    // Get user email for email verification token deletion\n    const userResult = await db.select({ email: users.email }).from(users).where(eq(users.id, id));\n    const userEmail = userResult[0]?.email;\n    \n    // Delete in proper order to respect foreign key constraints\n    // First delete dependent records\n    await db.delete(messages).where(eq(messages.senderId, id));\n    await db.delete(notifications).where(eq(notifications.userId, id));\n    await db.delete(jobReports).where(eq(jobReports.reporterId, id));\n    \n    // Delete email verification tokens for this user's email (skip if table doesn't exist)\n    // if (userEmail) {\n    //   await db.delete(emailVerificationTokens).where(eq(emailVerificationTokens.email, userEmail));\n    // }\n    \n    await db.delete(coinPurchases).where(eq(coinPurchases.userId, id));\n    await db.delete(coinSubscriptions).where(eq(coinSubscriptions.userId, id));\n    \n    // Delete skill endorsements where user is involved\n    await db.delete(skillEndorsements).where(\n      or(\n        eq(skillEndorsements.endorserId, id),\n        eq(skillEndorsements.endorseeId, id)\n      )\n    );\n    \n    // Delete conversations where user is involved\n    await db.delete(conversations).where(\n      or(\n        eq(conversations.jobPosterId, id),\n        eq(conversations.applicantId, id)\n      )\n    );\n    \n    // Delete reviews where user is involved\n    await db.delete(reviews).where(\n      or(\n        eq(reviews.reviewerId, id),\n        eq(reviews.revieweeId, id)\n      )\n    );\n    \n    // Delete applications by the user\n    await db.delete(applications).where(eq(applications.userId, id));\n    \n    // Delete jobs posted by the user\n    await db.delete(jobs).where(eq(jobs.userId, id));\n    \n    // Finally delete the user\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async getJobs(filters?: { category?: string; location?: string; minBudget?: number; maxBudget?: number }): Promise<JobWithApplications[]> {\n    // Start with base query - only show approved jobs to regular users\n    let jobsData = await db.select().from(jobs)\n      .where(eq(jobs.approvalStatus, \"approved\"))\n      .orderBy(desc(jobs.createdAt));\n    \n    // Apply filters in memory for now (can be optimized later)\n    if (filters) {\n      jobsData = jobsData.filter((job) => {\n        if (filters.category && filters.category !== \"All Categories\" && job.category !== filters.category) {\n          return false;\n        }\n        if (filters.location && job.location !== filters.location) {\n          return false;\n        }\n        if (filters.minBudget !== undefined && job.maxBudget !== null && job.maxBudget < filters.minBudget) {\n          return false;\n        }\n        if (filters.maxBudget !== undefined && job.minBudget !== null && job.minBudget > filters.maxBudget) {\n          return false;\n        }\n        return true;\n      });\n    }\n\n    // Add application counts and poster ratings\n    const jobsWithApplications = await Promise.all(\n      jobsData.map(async (job) => {\n        const applicationCount = await db.select({ count: count() })\n          .from(applications)\n          .where(eq(applications.jobId, job.id));\n        \n        // Get poster rating information\n        const ratingResult = await db.select({\n          averageRating: avg(reviews.rating),\n          totalReviews: count(reviews.id)\n        })\n        .from(reviews)\n        .where(eq(reviews.revieweeId, job.userId));\n\n        const posterRating = Number(ratingResult[0]?.averageRating || 0);\n        const posterReviewCount = Number(ratingResult[0]?.totalReviews || 0);\n        \n        return {\n          ...job,\n          applicationCount: Number(applicationCount[0]?.count || 0),\n          posterRating,\n          posterReviewCount\n        };\n      })\n    );\n\n    return jobsWithApplications;\n  }\n\n  async getJobsByUserId(userId: string): Promise<JobWithApplications[]> {\n    const userJobs = await db.select().from(jobs)\n      .where(eq(jobs.userId, userId))\n      .orderBy(desc(jobs.createdAt));\n    \n    const jobsWithApplications = await Promise.all(\n      userJobs.map(async (job) => {\n        const jobApplications = await this.getApplicationsByJobId(job.id);\n        return {\n          ...job,\n          applicationCount: jobApplications.length,\n          applications: jobApplications\n        };\n      })\n    );\n\n    return jobsWithApplications;\n  }\n\n  async createJob(job: InsertJob, userId: string): Promise<Job> {\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 30); // Expires 30 days from now\n    \n    const [newJob] = await db\n      .insert(jobs)\n      .values({\n        ...job,\n        userId,\n        status: job.status || \"open\",\n        approvalStatus: \"pending\", // All new jobs need admin approval\n        minBudget: job.minBudget ?? null,\n        maxBudget: job.maxBudget ?? null,\n        currency: job.currency ?? \"USD\",\n        experienceLevel: job.experienceLevel ?? \"any\",\n        images: job.images ?? [],\n        expiresAt, // Set job expiry to 30 days from creation\n      })\n      .returning();\n    return newJob;\n  }\n\n  async updateJob(id: string, updates: Partial<Job>): Promise<Job | undefined> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set(updates)\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob || undefined;\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    // Delete conversations and messages first (due to foreign key constraints)\n    const jobApplications = await db.select().from(applications).where(eq(applications.jobId, id));\n    \n    for (const app of jobApplications) {\n      // Delete messages in conversations related to this application\n      await db.delete(messages)\n        .where(eq(messages.conversationId, \n          sql`(SELECT id FROM ${conversations} WHERE application_id = ${app.id})`\n        ));\n      \n      // Delete conversations related to this application\n      await db.delete(conversations).where(eq(conversations.applicationId, app.id));\n    }\n    \n    // Delete notifications related to this job\n    await db.delete(notifications).where(eq(notifications.jobId, id));\n    \n    // Delete job reports related to this job\n    await db.delete(jobReports).where(eq(jobReports.jobId, id));\n    \n    // Delete applications related to this job\n    await db.delete(applications).where(eq(applications.jobId, id));\n    \n    // Finally, delete the job\n    await db.delete(jobs).where(eq(jobs.id, id));\n  }\n\n  async extendJob(jobId: string): Promise<Job | undefined> {\n    // Get current job to extend from its current expiry\n    const [currentJob] = await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.id, jobId))\n      .limit(1);\n    \n    if (!currentJob) return undefined;\n    \n    // Extend expiry by 30 days from current expiry date\n    const currentExpiry = currentJob.expiresAt ? new Date(currentJob.expiresAt) : new Date();\n    const newExpiryDate = new Date(currentExpiry);\n    newExpiryDate.setDate(newExpiryDate.getDate() + 30);\n    \n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ expiresAt: newExpiryDate })\n      .where(eq(jobs.id, jobId))\n      .returning();\n    \n    return updatedJob || undefined;\n  }\n\n  async closeExpiredJobs(): Promise<void> {\n    const now = new Date();\n    \n    // First, get jobs that should expire\n    const expiredJobs = await db\n      .select()\n      .from(jobs)\n      .where(and(\n        eq(jobs.status, \"open\"),\n        lte(jobs.expiresAt, now)\n      ));\n\n    console.log(`Found ${expiredJobs.length} expired jobs to close at ${now}`);\n    \n    if (expiredJobs.length > 0) {\n      const result = await db\n        .update(jobs)\n        .set({ status: \"closed\" })\n        .where(and(\n          eq(jobs.status, \"open\"),\n          lte(jobs.expiresAt, now)\n        ));\n        \n      console.log(`Successfully closed ${expiredJobs.length} expired jobs`);\n    }\n  }\n\n  // In-memory cache for search results - in production, use Redis\n  private searchCache = new Map<string, { result: SearchResult; timestamp: number }>();\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n  async searchJobs(params: SearchParams): Promise<SearchResult> {\n    const startTime = Date.now();\n    \n    // Create cache key\n    const cacheKey = JSON.stringify(params);\n    \n    // Check cache first\n    const cached = this.searchCache.get(cacheKey);\n    if (cached && (Date.now() - cached.timestamp) < this.CACHE_TTL) {\n      return {\n        ...cached.result,\n        searchMeta: {\n          ...cached.result.searchMeta,\n          executionTime: Date.now() - startTime,\n          fromCache: true\n        }\n      };\n    }\n\n    // Set defaults\n    const {\n      query,\n      category,\n      location,\n      experienceLevel,\n      minBudget,\n      maxBudget,\n      currency,\n      page = 1,\n      limit = 20,\n      sortBy = 'relevance',\n      sortOrder = 'desc'\n    } = params;\n\n    // Build WHERE conditions - only show open jobs on home page\n    const conditions = [\n      eq(jobs.approvalStatus, \"approved\"),\n      eq(jobs.status, \"open\")\n    ];\n\n    // Category filter\n    if (category && category !== \"All Categories\") {\n      conditions.push(eq(jobs.category, category));\n    }\n\n    // Location filter\n    if (location && location !== \"All Locations\") {\n      conditions.push(ilike(jobs.location, `%${location}%`));\n    }\n\n    // Experience level filter\n    if (experienceLevel && experienceLevel !== \"any\") {\n      conditions.push(eq(jobs.experienceLevel, experienceLevel));\n    }\n\n    // Budget filters\n    if (minBudget !== undefined) {\n      conditions.push(gte(jobs.minBudget, minBudget));\n    }\n    if (maxBudget !== undefined) {\n      conditions.push(lte(jobs.maxBudget, maxBudget));\n    }\n\n    // Currency filter\n    if (currency) {\n      conditions.push(eq(jobs.currency, currency));\n    }\n\n    // Full-text search condition using ILIKE for compatibility\n    if (query && query.trim()) {\n      const searchTerms = query.split(' ').filter(term => term.length > 0);\n      const searchConditions = searchTerms.map(term => \n        or(\n          ilike(jobs.title, `%${term}%`),\n          ilike(jobs.description, `%${term}%`),\n          ilike(jobs.category, `%${term}%`),\n          ilike(jobs.specificArea, `%${term}%`)\n        )\n      );\n      if (searchConditions.length > 0) {\n        const combinedCondition = and(...searchConditions);\n        if (combinedCondition) {\n          conditions.push(combinedCondition);\n        }\n      }\n    }\n\n    // Build ORDER BY clause\n    let orderBy;\n    if (query && sortBy === 'relevance') {\n      // Sort by relevance using custom scoring\n      orderBy = sql`\n        CASE \n          WHEN lower(${jobs.title}) LIKE lower(${'%' + query + '%'}) THEN 4\n          WHEN lower(${jobs.category}) LIKE lower(${'%' + query + '%'}) THEN 3  \n          WHEN lower(${jobs.description}) LIKE lower(${'%' + query + '%'}) THEN 2\n          WHEN lower(${jobs.specificArea}) LIKE lower(${'%' + query + '%'}) THEN 1\n          ELSE 0\n        END DESC, ${jobs.createdAt} DESC\n      `;\n    } else {\n      switch (sortBy) {\n        case 'date':\n          orderBy = sortOrder === 'asc' ? asc(jobs.createdAt) : desc(jobs.createdAt);\n          break;\n        case 'budget_low':\n          orderBy = sortOrder === 'asc' ? asc(jobs.minBudget) : desc(jobs.minBudget);\n          break;\n        case 'budget_high':\n          orderBy = sortOrder === 'asc' ? asc(jobs.maxBudget) : desc(jobs.maxBudget);\n          break;\n        default:\n          orderBy = desc(jobs.createdAt);\n      }\n    }\n\n    // Calculate offset for pagination\n    const offset = (page - 1) * limit;\n\n    // Get total count for pagination\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(and(...conditions));\n\n    const total = Number(totalResult?.count || 0);\n    const pages = Math.ceil(total / limit);\n\n    // Execute main search query with pagination\n    const jobsData = await db\n      .select()\n      .from(jobs)\n      .where(and(...conditions))\n      .orderBy(orderBy)\n      .limit(limit)\n      .offset(offset);\n\n    // Add application counts and poster ratings\n    const jobsWithApplications = await Promise.all(\n      jobsData.map(async (job) => {\n        const applicationCount = await db.select({ count: count() })\n          .from(applications)\n          .where(eq(applications.jobId, job.id));\n        \n        // Get poster rating information\n        const ratingResult = await db.select({\n          averageRating: avg(reviews.rating),\n          totalReviews: count(reviews.id)\n        })\n        .from(reviews)\n        .where(eq(reviews.revieweeId, job.userId));\n\n        const posterRating = Number(ratingResult[0]?.averageRating || 0);\n        const posterReviewCount = Number(ratingResult[0]?.totalReviews || 0);\n        \n        return {\n          ...job,\n          applicationCount: Number(applicationCount[0]?.count || 0),\n          posterRating,\n          posterReviewCount\n        };\n      })\n    );\n\n    const searchResults = jobsWithApplications;\n\n    const result: SearchResult = {\n      jobs: searchResults,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages,\n        hasNext: page < pages,\n        hasPrev: page > 1\n      },\n      searchMeta: {\n        query,\n        filters: {\n          category,\n          location,\n          experienceLevel,\n          minBudget,\n          maxBudget,\n          currency,\n          sortBy,\n          sortOrder\n        },\n        executionTime: Date.now() - startTime,\n        fromCache: false\n      }\n    };\n\n    // Cache the result\n    this.searchCache.set(cacheKey, { result, timestamp: Date.now() });\n\n    // Clean old cache entries (basic cleanup)\n    if (this.searchCache.size > 1000) {\n      const oldEntries = Array.from(this.searchCache.entries())\n        .filter(([, value]) => (Date.now() - value.timestamp) > this.CACHE_TTL);\n      oldEntries.forEach(([key]) => this.searchCache.delete(key));\n    }\n\n    return result;\n  }\n\n  async getApplication(id: string): Promise<Application | undefined> {\n    const [application] = await db.select().from(applications).where(eq(applications.id, id));\n    return application || undefined;\n  }\n\n  async getApplicationsByJobId(jobId: string): Promise<ApplicationWithUser[]> {\n    const jobApplications = await db.select({\n      application: applications,\n      user: users\n    })\n    .from(applications)\n    .innerJoin(users, eq(applications.userId, users.id))\n    .where(eq(applications.jobId, jobId))\n    .orderBy(desc(applications.coinsBid), desc(applications.createdAt));\n\n    return jobApplications.map(({ application, user }) => ({\n      ...application,\n      user\n    }));\n  }\n\n  async getApplicationsByUserId(userId: string): Promise<ApplicationWithJob[]> {\n    const userApplications = await db.select({\n      application: applications,\n      job: jobs\n    })\n    .from(applications)\n    .innerJoin(jobs, eq(applications.jobId, jobs.id))\n    .where(eq(applications.userId, userId))\n    .orderBy(desc(applications.createdAt));\n\n    return userApplications.map(({ application, job }) => ({\n      ...application,\n      job\n    }));\n  }\n\n  async createApplication(application: InsertApplication, userId: string): Promise<Application> {\n    const [newApplication] = await db\n      .insert(applications)\n      .values({\n        ...application,\n        userId,\n        status: application.status || \"pending\",\n        experience: application.experience ?? null,\n      })\n      .returning();\n    return newApplication;\n  }\n\n  async updateApplication(id: string, updates: Partial<Application>): Promise<Application | undefined> {\n    const [updatedApplication] = await db\n      .update(applications)\n      .set(updates)\n      .where(eq(applications.id, id))\n      .returning();\n    return updatedApplication || undefined;\n  }\n\n  async hasUserAppliedToJob(userId: string, jobId: string): Promise<boolean> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(applications)\n      .where(and(eq(applications.userId, userId), eq(applications.jobId, jobId)));\n    \n    return Number(result?.count || 0) > 0;\n  }\n\n  async markApplicationCompleted(applicationId: string): Promise<Application | undefined> {\n    const [updatedApplication] = await db\n      .update(applications)\n      .set({ \n        isCompleted: true, \n        completedAt: new Date() \n      })\n      .where(eq(applications.id, applicationId))\n      .returning();\n    return updatedApplication || undefined;\n  }\n\n  // Review operations\n  async getUserStats(userId: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    // Get average rating and review count\n    const ratingResult = await db.select({\n      averageRating: avg(reviews.rating),\n      totalReviews: count(reviews.id)\n    })\n    .from(reviews)\n    .where(eq(reviews.revieweeId, userId));\n\n    const averageRating = Number(ratingResult[0]?.averageRating || 0);\n    const totalReviews = Number(ratingResult[0]?.totalReviews || 0);\n\n    // Count completed jobs where user had accepted applications that were marked as completed\n    const completedJobsCount = await db.select({ count: count() })\n      .from(applications)\n      .where(and(\n        eq(applications.userId, userId),\n        eq(applications.status, \"accepted\"),\n        eq(applications.isCompleted, true)\n      ));\n\n    const completedJobs = Number(completedJobsCount[0]?.count || 0);\n\n    // Count completed services - services posted by user where service requests were accepted and completed\n    const completedServicesCount = await db.select({ count: count() })\n      .from(serviceRequests)\n      .innerJoin(services, eq(serviceRequests.serviceId, services.id))\n      .where(and(\n        eq(services.userId, userId),\n        eq(serviceRequests.status, \"accepted\"),\n        isNotNull(serviceRequests.completedAt)\n      ));\n\n    const completedServices = Number(completedServicesCount[0]?.count || 0);\n\n    // Count total jobs posted by user\n    const totalJobsPosted = await db.select({ count: count() })\n      .from(jobs)\n      .where(eq(jobs.userId, userId));\n    \n    const jobsPosted = Number(totalJobsPosted[0]?.count || 0);\n\n    // Count total services posted by user\n    const totalServicesPosted = await db.select({ count: count() })\n      .from(services)\n      .where(eq(services.userId, userId));\n    \n    const servicesPosted = Number(totalServicesPosted[0]?.count || 0);\n\n    // Count total applications submitted by user\n    const totalApplicationsSubmitted = await db.select({ count: count() })\n      .from(applications)\n      .where(eq(applications.userId, userId));\n    \n    const applicationsSubmitted = Number(totalApplicationsSubmitted[0]?.count || 0);\n\n    // Count total inquiries received by user (service requests for their services)\n    const totalInquiriesReceived = await db.select({ count: count() })\n      .from(serviceRequests)\n      .innerJoin(services, eq(serviceRequests.serviceId, services.id))\n      .where(eq(services.userId, userId));\n    \n    const inquiriesReceived = Number(totalInquiriesReceived[0]?.count || 0);\n\n    return { \n      ...user, \n      averageRating, \n      totalReviews, \n      completedJobs,\n      completedServices,\n      totalJobsPosted: jobsPosted,\n      totalServicesPosted: servicesPosted,\n      totalApplicationsSubmitted: applicationsSubmitted,\n      totalInquiriesReceived: inquiriesReceived,\n      joinedDate: user.createdAt?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0]\n    };\n  }\n\n  async getReviewsByUserId(userId: string): Promise<ReviewWithUser[]> {\n    const userReviews = await db.select()\n      .from(reviews)\n      .leftJoin(users, eq(users.id, reviews.reviewerId))\n      .leftJoin(jobs, eq(jobs.id, reviews.jobId))\n      .leftJoin(services, eq(services.id, reviews.jobId)) // jobId can also refer to serviceId for service reviews\n      .where(eq(reviews.revieweeId, userId))\n      .orderBy(desc(reviews.createdAt));\n\n    const reviewee = await this.getUser(userId);\n    return userReviews.map(row => ({\n      ...row.reviews,\n      reviewer: row.users!,\n      reviewee: reviewee!,\n      job: row.jobs ? {\n        title: row.jobs.title,\n        category: row.jobs.category\n      } : row.services ? {\n        title: row.services.title,\n        category: row.services.category\n      } : null\n    }));\n  }\n\n  async hasUserReviewedJobFreelancer(reviewerId: string, jobId: string, revieweeId: string): Promise<boolean> {\n    const existingReview = await db.select()\n      .from(reviews)\n      .where(and(\n        eq(reviews.reviewerId, reviewerId),\n        eq(reviews.jobId, jobId),\n        eq(reviews.revieweeId, revieweeId)\n      ))\n      .limit(1);\n    \n    return existingReview.length > 0;\n  }\n\n  async hasClientRatedServiceProvider(clientId: string, serviceProviderId: string, serviceId: string): Promise<boolean> {\n    const existingReview = await db.select()\n      .from(reviews)\n      .where(and(\n        eq(reviews.reviewerId, clientId),\n        eq(reviews.revieweeId, serviceProviderId),\n        eq(reviews.jobId, serviceId),\n        eq(reviews.reviewType, \"client_to_worker\")\n      ))\n      .limit(1);\n    \n    return existingReview.length > 0;\n  }\n\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    // Check if the reviewer has already reviewed this reviewee for this job\n    const hasExistingReview = await this.hasUserReviewedJobFreelancer(\n      insertReview.reviewerId, \n      insertReview.jobId, \n      insertReview.revieweeId\n    );\n    \n    if (hasExistingReview) {\n      throw new Error('You have already reviewed this freelancer for this job');\n    }\n    \n    const [review] = await db\n      .insert(reviews)\n      .values(insertReview)\n      .returning();\n    return review;\n  }\n\n  async getReviewsForJob(jobId: string): Promise<ReviewWithUser[]> {\n    const jobReviews = await db.select()\n      .from(reviews)\n      .leftJoin(users, eq(users.id, reviews.reviewerId))\n      .where(eq(reviews.jobId, jobId));\n\n    const reviewsWithUsers = await Promise.all(\n      jobReviews.map(async row => {\n        const reviewee = await this.getUser(row.reviews.revieweeId);\n        return {\n          ...row.reviews,\n          reviewer: row.users!,\n          reviewee: reviewee!\n        };\n      })\n    );\n\n    return reviewsWithUsers;\n  }\n\n  async canFreelancerRateClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean> {\n    console.log(`[DEBUG] canFreelancerRateClient called with:`, { freelancerId, clientId, jobId });\n    \n    // Check if the freelancer worked on this job (has an accepted application)\n    const application = await db.select()\n      .from(applications)\n      .where(and(\n        eq(applications.jobId, jobId),\n        eq(applications.userId, freelancerId),\n        eq(applications.status, \"accepted\")\n      ))\n      .limit(1);\n\n    console.log(`[DEBUG] Found applications:`, application.length);\n\n    // Check if the job is completed or closed\n    const job = await db.select()\n      .from(jobs)\n      .where(and(\n        eq(jobs.id, jobId),\n        eq(jobs.userId, clientId)\n      ))\n      .limit(1);\n\n    console.log(`[DEBUG] Found jobs:`, job.length, `for client:`, clientId);\n\n    const result = application.length > 0 && job.length > 0;\n    console.log(`[DEBUG] canFreelancerRateClient result:`, result);\n    \n    // Allow rating if freelancer has accepted application and job exists\n    return result;\n  }\n\n  async canServiceProviderRateClient(serviceProviderId: string, clientId: string, serviceId: string): Promise<boolean> {\n    console.log(`[DEBUG] DatabaseStorage canServiceProviderRateClient called with:`, { serviceProviderId, clientId, serviceId });\n    \n    // Check if the service provider owns the service\n    const service = await db.select()\n      .from(services)\n      .where(and(\n        eq(services.id, serviceId),\n        eq(services.userId, serviceProviderId)\n      ))\n      .limit(1);\n\n    console.log(`[DEBUG] DatabaseStorage Found service:`, service.length, `for provider:`, serviceProviderId);\n\n    // Check if there's an accepted service request from the client\n    const serviceRequest = await db.select()\n      .from(serviceRequests)\n      .where(and(\n        eq(serviceRequests.serviceId, serviceId),\n        eq(serviceRequests.userId, clientId),\n        eq(serviceRequests.status, \"accepted\")\n      ))\n      .limit(1);\n\n    console.log(`[DEBUG] DatabaseStorage Found accepted service request:`, serviceRequest.length, `for client:`, clientId);\n\n    const result = service.length > 0 && serviceRequest.length > 0;\n    console.log(`[DEBUG] DatabaseStorage canServiceProviderRateClient result:`, result);\n    \n    return result;\n  }\n\n  async hasFreelancerRatedClient(freelancerId: string, clientId: string, jobId: string): Promise<boolean> {\n    const freelancerReview = await db.select()\n      .from(reviews)\n      .where(and(\n        eq(reviews.jobId, jobId),\n        eq(reviews.reviewerId, freelancerId),\n        eq(reviews.revieweeId, clientId),\n        eq(reviews.reviewType, \"worker_to_client\")\n      ))\n      .limit(1);\n\n    return freelancerReview.length > 0;\n  }\n\n  async getReviewByJobAndUsers(reviewerId: string, revieweeId: string, jobId: string, reviewType: string): Promise<Review | undefined> {\n    const [review] = await db.select()\n      .from(reviews)\n      .where(and(\n        eq(reviews.jobId, jobId),\n        eq(reviews.reviewerId, reviewerId),\n        eq(reviews.revieweeId, revieweeId),\n        eq(reviews.reviewType, reviewType)\n      ))\n      .limit(1);\n\n    return review;\n  }\n\n  // Conversation operations\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async getConversationsByUser(userId: string): Promise<ConversationWithDetails[]> {\n    const userConversations = await db.select()\n      .from(conversations)\n      .leftJoin(users, sql`${users.id} = CASE \n        WHEN ${conversations.jobPosterId} = ${userId} THEN ${conversations.applicantId} \n        WHEN ${conversations.serviceProviderId} = ${userId} THEN ${conversations.serviceRequesterId}\n        ELSE COALESCE(${conversations.jobPosterId}, ${conversations.serviceProviderId}) END`)\n      .leftJoin(jobs, eq(jobs.id, conversations.jobId))\n      .leftJoin(services, eq(services.id, conversations.serviceId))\n      .where(sql`${conversations.jobPosterId} = ${userId} OR ${conversations.applicantId} = ${userId} OR ${conversations.serviceProviderId} = ${userId} OR ${conversations.serviceRequesterId} = ${userId}`)\n      .orderBy(desc(conversations.lastMessageAt));\n\n    return Promise.all(\n      userConversations.map(async (row) => {\n        const conv = row.conversations;\n        \n        // Determine if this is a job or service conversation and get the other user\n        const isJobConversation = conv.jobPosterId && conv.applicantId;\n        const isServiceConversation = conv.serviceProviderId && conv.serviceRequesterId;\n        \n        let otherUserId;\n        let jobOrService;\n        \n        if (isServiceConversation) {\n          // For service conversations, determine other user based on current user\n          if (conv.serviceProviderId === userId) {\n            otherUserId = conv.serviceRequesterId;\n          } else {\n            otherUserId = conv.serviceProviderId;\n          }\n          jobOrService = row.services;\n        } else {\n          // For job conversations\n          otherUserId = conv.jobPosterId === userId ? conv.applicantId : conv.jobPosterId;\n          jobOrService = row.jobs;\n        }\n        \n        const otherUser = await this.getUser(otherUserId!);\n        \n        // Get last message\n        const [lastMessage] = await db.select()\n          .from(messages)\n          .where(eq(messages.conversationId, conv.id))\n          .orderBy(desc(messages.createdAt))\n          .limit(1);\n\n        // Count unread messages\n        const [unreadResult] = await db.select({ count: count() })\n          .from(messages)\n          .where(and(\n            eq(messages.conversationId, conv.id),\n            sql`${messages.senderId} != ${userId}`,\n            eq(messages.isRead, false)\n          ));\n\n        return {\n          ...conv,\n          otherUser: otherUser || { \n            id: '', username: 'Unknown', email: '', name: 'Unknown User',\n            profileImageUrl: null, passwordHash: null, googleId: null,\n            isEmailVerified: false, provider: 'email', role: 'user',\n            isActive: true, coins: 0, lastCoinReset: new Date(),\n            createdAt: new Date(), updatedAt: new Date(),\n            stripeCustomerId: null, activeSubscriptionId: null,\n            passwordResetToken: null, passwordResetExpires: null\n          },\n          job: isServiceConversation ? undefined : (jobOrService || { \n            id: '', title: 'Unknown Job', description: '', category: '', location: '', \n            specificArea: null, minBudget: null, maxBudget: 0, currency: 'USD', \n            experienceLevel: 'any', duration: null, customDuration: null,\n            status: 'open', approvalStatus: 'pending', approvedBy: null, \n            approvedAt: null, userId: '', images: [], createdAt: new Date(),\n            budgetType: 'fixed', freelancersNeeded: 1, expiresAt: new Date()\n          }),\n          service: isServiceConversation ? (jobOrService || {\n            id: '', title: 'Unknown Service', description: '', category: '', location: '', \n            priceFrom: 0, priceTo: null, priceType: 'fixed', currency: 'USD',\n            experienceLevel: 'any', deliveryTime: '', serviceDuration: '',\n            approvalStatus: 'pending', approvedBy: null, \n            approvedAt: null, userId: '', images: [], createdAt: new Date(),\n            updatedAt: new Date(), website: '', email: '', phone: '', tags: [],\n            availableSlots: 1, specificArea: null, status: 'active'\n          }) : undefined,\n          lastMessage,\n          unreadCount: Number(unreadResult?.count || 0)\n        };\n      })\n    );\n  }\n\n  async getConversation(conversationId: string): Promise<ConversationWithDetails | null> {\n    const [conversation] = await db.select()\n      .from(conversations)\n      .leftJoin(jobs, eq(jobs.id, conversations.jobId))\n      .leftJoin(services, eq(services.id, conversations.serviceId))\n      .where(eq(conversations.id, conversationId));\n\n    if (!conversation) return null;\n\n    const conv = conversation.conversations;\n    \n    // Determine if this is a job or service conversation\n    const isJobConversation = conv.jobPosterId && conv.applicantId;\n    const isServiceConversation = conv.serviceProviderId && conv.serviceRequesterId;\n    \n    let otherUser;\n    let jobOrService;\n    \n    if (isServiceConversation) {\n      // For service conversations, we need to determine the other user\n      const serviceProvider = await this.getUser(conv.serviceProviderId!);\n      const serviceRequester = await this.getUser(conv.serviceRequesterId!);\n      \n      // Service conversation detected\n      \n      // The \"otherUser\" should be the other person in the conversation\n      // Since we don't know which user is asking, we'll need to determine this in the API endpoint\n      // For now, default to service requester (the person making the request)\n      otherUser = serviceRequester;\n      \n      jobOrService = conversation.services || { \n        id: '', title: 'Unknown Service', description: '', category: '', location: '', \n        priceFrom: 0, priceTo: null, priceType: 'fixed', currency: 'USD',\n        experienceLevel: 'any', deliveryTime: '', serviceDuration: '',\n        approvalStatus: 'pending', approvedBy: null, \n        approvedAt: null, userId: '', images: [], createdAt: new Date(),\n        updatedAt: new Date(), website: '', email: '', phone: '', tags: [],\n        availableSlots: 1, specificArea: null, status: 'active'\n      };\n    } else {\n      // Job conversation logic\n      const jobPoster = await this.getUser(conv.jobPosterId!);\n      const applicant = await this.getUser(conv.applicantId!);\n      otherUser = jobPoster;\n      \n      jobOrService = conversation.jobs || { \n        id: '', title: 'Unknown Job', description: '', category: '', location: '', \n        specificArea: null, minBudget: null, maxBudget: 0, currency: 'USD', \n        experienceLevel: 'any', duration: null, customDuration: null,\n        status: 'open', approvalStatus: 'pending', approvedBy: null, \n        approvedAt: null, userId: '', images: [], createdAt: new Date(),\n        budgetType: 'fixed', freelancersNeeded: 1, expiresAt: new Date()\n      };\n    }\n\n    return {\n      ...conv,\n      otherUser: otherUser || { \n        id: '', username: 'Unknown', email: '', name: 'Unknown User',\n        profileImageUrl: null, passwordHash: null, googleId: null,\n        isEmailVerified: false, provider: 'email', role: 'user',\n        isActive: true, coins: 0, lastCoinReset: new Date(),\n        createdAt: new Date(), updatedAt: new Date(),\n        stripeCustomerId: null, activeSubscriptionId: null,\n        passwordResetToken: null, passwordResetExpires: null\n      },\n      job: isServiceConversation ? undefined : jobOrService,\n      service: isServiceConversation ? jobOrService : undefined,\n      lastMessage: undefined,\n      unreadCount: 0\n    };\n  }\n\n  async getConversationByApplicationId(applicationId: string): Promise<Conversation | null> {\n    const [conversation] = await db.select()\n      .from(conversations)\n      .where(eq(conversations.applicationId, applicationId));\n    return conversation || null;\n  }\n\n  async getConversationByServiceRequest(serviceRequestId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select()\n      .from(conversations)\n      .where(eq(conversations.serviceRequestId, serviceRequestId));\n    return conversation || undefined;\n  }\n\n  // Message operations\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values({\n        ...insertMessage,\n        isRead: false // Messages start as unread for recipients\n      })\n      .returning();\n\n    // Update conversation's lastMessageAt\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(conversations.id, insertMessage.conversationId));\n\n    return message;\n  }\n\n  async getMessagesByConversation(conversationId: string): Promise<MessageWithSender[]> {\n    const conversationMessages = await db.select()\n      .from(messages)\n      .leftJoin(users, eq(users.id, messages.senderId))\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n\n    return conversationMessages.map(row => ({\n      ...row.messages,\n      sender: row.users || { \n        id: '', username: 'Unknown', email: '', name: 'Unknown User',\n        profileImageUrl: null, passwordHash: null, googleId: null,\n        isEmailVerified: false, provider: 'email', role: 'user',\n        isActive: true, coins: 0, lastCoinReset: new Date(),\n        createdAt: new Date(), updatedAt: new Date(),\n        stripeCustomerId: null, activeSubscriptionId: null,\n        passwordResetToken: null, passwordResetExpires: null\n      }\n    }));\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(and(\n        eq(messages.conversationId, conversationId),\n        sql`${messages.senderId} != ${userId}`\n      ));\n  }\n\n  async getUnreadMessageCount(userId: string): Promise<number> {\n    const [result] = await db.select({ count: count() })\n      .from(messages)\n      .leftJoin(conversations, eq(conversations.id, messages.conversationId))\n      .where(and(\n        or(\n          eq(conversations.jobPosterId, userId),\n          eq(conversations.applicantId, userId),\n          eq(conversations.serviceProviderId, userId),\n          eq(conversations.serviceRequesterId, userId)\n        ),\n        ne(messages.senderId, userId),\n        eq(messages.isRead, false)\n      ));\n\n    return Number(result?.count || 0);\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async getNotificationsByUserId(userId: string): Promise<Notification[]> {\n    const userNotifications = await db.select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n    \n    return userNotifications;\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.isRead, false)\n      ));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const [result] = await db.select({ count: count() })\n      .from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        eq(notifications.isRead, false)\n      ));\n\n    return Number(result?.count || 0);\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db.select().from(users).orderBy(desc(users.createdAt));\n    return allUsers;\n  }\n\n  async banUser(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isActive: false })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async unbanUser(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isActive: true })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async getPendingJobs(): Promise<JobWithApplications[]> {\n    const pendingJobs = await db.select()\n      .from(jobs)\n      .where(eq(jobs.approvalStatus, \"pending\"))\n      .orderBy(desc(jobs.createdAt));\n\n    return Promise.all(pendingJobs.map(async job => {\n      const applications = await this.getApplicationsByJobId(job.id);\n      return { ...job, applications, applicationCount: applications.length };\n    }));\n  }\n\n  async approveJob(jobId: string, adminId: string): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ \n        approvalStatus: \"approved\",\n        approvedBy: adminId,\n        approvedAt: new Date()\n      })\n      .where(eq(jobs.id, jobId))\n      .returning();\n    \n    if (!updatedJob) {\n      throw new Error(\"Job not found\");\n    }\n    return updatedJob;\n  }\n\n  async rejectJob(jobId: string, adminId: string): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ \n        approvalStatus: \"rejected\",\n        approvedBy: adminId,\n        approvedAt: new Date()\n      })\n      .where(eq(jobs.id, jobId))\n      .returning();\n    \n    if (!updatedJob) {\n      throw new Error(\"Job not found\");\n    }\n    return updatedJob;\n  }\n\n  async promoteToAdmin(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ role: \"admin\" })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async demoteFromAdmin(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ role: \"user\" })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async promoteToModerator(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ role: \"moderator\" })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async demoteFromModerator(userId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ role: \"user\" })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async changeUserPassword(userId: string, newPasswordHash: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ passwordHash: newPasswordHash })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    return updatedUser;\n  }\n\n  async getAdminStats(): Promise<{\n    totalUsers: string;\n    totalApprovedJobs: string;\n    openJobs: string;\n    closedJobs: string;\n    totalApplications: string;\n    totalServices: string;\n    totalSkillEndorsements: string;\n    activeSubscriptions: string;\n    subscriptionPercentage: string;\n    monthlyRevenue: string;\n    avgJobsPerUser: string;\n    avgApplicationsPerUser: string;\n    freelancerSubs: string;\n    freelancerPercentage: string;\n    professionalSubs: string;\n    professionalPercentage: string;\n    expertSubs: string;\n    expertPercentage: string;\n    eliteSubs: string;\n    elitePercentage: string;\n    totalInquiries: string;\n    totalCompletedServices: string;\n    avgServicesPerUser: string;\n  }> {\n    // Get total users count\n    const totalUsersResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users);\n    const totalUsers = totalUsersResult[0]?.count || 0;\n\n    // Get total approved jobs count\n    const totalApprovedJobsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(jobs)\n      .where(eq(jobs.approvalStatus, \"approved\"));\n    const totalApprovedJobs = totalApprovedJobsResult[0]?.count || 0;\n\n    // Get open jobs count (approved and status is open)\n    const openJobsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(jobs)\n      .where(and(\n        eq(jobs.approvalStatus, \"approved\"),\n        eq(jobs.status, \"open\")\n      ));\n    const openJobs = openJobsResult[0]?.count || 0;\n\n    // Get closed jobs count (approved and status is completed or in_progress)\n    const closedJobsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(jobs)\n      .where(and(\n        eq(jobs.approvalStatus, \"approved\"),\n        or(\n          eq(jobs.status, \"completed\"),\n          eq(jobs.status, \"in_progress\")\n        )\n      ));\n    const closedJobs = closedJobsResult[0]?.count || 0;\n\n    // Get total applications count\n    const totalApplicationsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(applications);\n    const totalApplications = totalApplicationsResult[0]?.count || 0;\n\n    // Get total services count\n    const totalServicesResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(services)\n      .where(eq(services.approvalStatus, \"approved\"));\n    const totalServices = totalServicesResult[0]?.count || 0;\n\n    // Get total skill endorsements count\n    const totalSkillEndorsementsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(skillEndorsements);\n    const totalSkillEndorsements = totalSkillEndorsementsResult[0]?.count || 0;\n\n    // Get total inquiries count\n    const totalInquiriesResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(serviceRequests);\n    const totalInquiries = totalInquiriesResult[0]?.count || 0;\n\n    // Get total completed services count\n    const totalCompletedServicesResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(serviceRequests)\n      .where(and(\n        eq(serviceRequests.status, \"accepted\"),\n        isNotNull(serviceRequests.completedAt)\n      ));\n    const totalCompletedServices = totalCompletedServicesResult[0]?.count || 0;\n\n    // Get active subscriptions count\n    const activeSubscriptionsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(coinSubscriptions)\n      .where(eq(coinSubscriptions.status, \"active\"));\n    const activeSubscriptions = activeSubscriptionsResult[0]?.count || 0;\n\n    // Get total monthly revenue from active subscriptions\n    const monthlyRevenueResult = await db\n      .select({ total: sql<number>`coalesce(sum(monthly_price), 0)` })\n      .from(coinSubscriptions)\n      .where(eq(coinSubscriptions.status, \"active\"));\n    const monthlyRevenue = monthlyRevenueResult[0]?.total || 0;\n\n    // Calculate subscription percentage\n    const subscriptionPercentage = totalUsers > 0 ? ((activeSubscriptions / totalUsers) * 100).toFixed(1) : \"0.0\";\n\n    // Get subscription counts by plan type\n    const freelancerResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(coinSubscriptions)\n      .where(and(eq(coinSubscriptions.status, \"active\"), eq(coinSubscriptions.planType, \"freelancer\")));\n    const freelancerSubs = freelancerResult[0]?.count || 0;\n\n    const professionalResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(coinSubscriptions)\n      .where(and(eq(coinSubscriptions.status, \"active\"), eq(coinSubscriptions.planType, \"professional\")));\n    const professionalSubs = professionalResult[0]?.count || 0;\n\n    const expertResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(coinSubscriptions)\n      .where(and(eq(coinSubscriptions.status, \"active\"), eq(coinSubscriptions.planType, \"expert\")));\n    const expertSubs = expertResult[0]?.count || 0;\n\n    const eliteResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(coinSubscriptions)\n      .where(and(eq(coinSubscriptions.status, \"active\"), eq(coinSubscriptions.planType, \"elite\")));\n    const eliteSubs = eliteResult[0]?.count || 0;\n\n    // Calculate percentages for each plan type\n    const freelancerPercentage = totalUsers > 0 ? ((freelancerSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const professionalPercentage = totalUsers > 0 ? ((professionalSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const expertPercentage = totalUsers > 0 ? ((expertSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n    const elitePercentage = totalUsers > 0 ? ((eliteSubs / totalUsers) * 100).toFixed(1) : \"0.0\";\n\n    // Calculate averages\n    const avgJobsPerUser = totalUsers > 0 ? (totalApprovedJobs / totalUsers).toFixed(1) : \"0.0\";\n    const avgApplicationsPerUser = totalUsers > 0 ? (totalApplications / totalUsers).toFixed(1) : \"0.0\";\n    const avgServicesPerUser = totalUsers > 0 ? (totalServices / totalUsers).toFixed(1) : \"0.0\";\n\n    return {\n      totalUsers: totalUsers.toString(),\n      totalApprovedJobs: totalApprovedJobs.toString(),\n      openJobs: openJobs.toString(),\n      closedJobs: closedJobs.toString(),\n      totalApplications: totalApplications.toString(),\n      totalServices: totalServices.toString(),\n      totalSkillEndorsements: totalSkillEndorsements.toString(),\n      totalInquiries: totalInquiries.toString(),\n      totalCompletedServices: totalCompletedServices.toString(),\n      activeSubscriptions: activeSubscriptions.toString(),\n      subscriptionPercentage,\n      monthlyRevenue: (monthlyRevenue / 100).toFixed(2), // Convert cents to dollars\n      avgJobsPerUser,\n      avgApplicationsPerUser,\n      avgServicesPerUser,\n      freelancerSubs: freelancerSubs.toString(),\n      freelancerPercentage,\n      professionalSubs: professionalSubs.toString(),\n      professionalPercentage,\n      expertSubs: expertSubs.toString(),\n      expertPercentage,\n      eliteSubs: eliteSubs.toString(),\n      elitePercentage,\n    };\n  }\n\n  async getApprovedJobs(): Promise<JobWithApplications[]> {\n    const approvedJobs = await db.select()\n      .from(jobs)\n      .where(eq(jobs.approvalStatus, \"approved\"))\n      .orderBy(desc(jobs.createdAt));\n\n    return Promise.all(approvedJobs.map(async job => {\n      const applications = await this.getApplicationsByJobId(job.id);\n      return { ...job, applications, applicationCount: applications.length };\n    }));\n  }\n\n\n\n  // Coin management methods\n  async checkAndResetCoins(userId: string): Promise<User> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) throw new Error(\"User not found\");\n\n    const now = new Date();\n    const lastReset = new Date(user.lastCoinReset || 0);\n    const daysSinceReset = Math.floor((now.getTime() - lastReset.getTime()) / (1000 * 60 * 60 * 24));\n\n    // Get user's coin cap\n    const coinCap = await this.getUserCoinCap(userId);\n\n    // Reset coins if 30 days have passed\n    if (daysSinceReset >= 30) {\n      let coinsToGrant = 20; // Default for users without subscription\n      \n      if (user.role === \"admin\") {\n        coinsToGrant = 100; // Admins get 100 coins\n      } else {\n        // Check if user has active subscription\n        const activeSubscription = await this.getUserActiveSubscription(userId);\n        if (activeSubscription) {\n          // Check if user has unlimited coin cap benefit\n          const planType = activeSubscription.planType as keyof typeof SUBSCRIPTION_PLANS;\n          const hasUnlimitedCoinCap = SUBSCRIPTION_PLANS[planType]?.hasUnlimitedCoinCap;\n          \n          if (hasUnlimitedCoinCap) {\n            // For unlimited coin cap plans, add new coins to existing balance\n            coinsToGrant = user.coins + activeSubscription.coinAllocation;\n          } else {\n            // For regular plans, reset to subscription allocation, but respect coin cap\n            coinsToGrant = Math.min(activeSubscription.coinAllocation, coinCap);\n          }\n        }\n      }\n\n      // Enforce coin cap\n      if (coinCap !== Infinity) {\n        coinsToGrant = Math.min(coinsToGrant, coinCap);\n      }\n\n      const [updatedUser] = await db\n        .update(users)\n        .set({ \n          coins: coinsToGrant,\n          lastCoinReset: now \n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser;\n    }\n\n    // Even if no reset, enforce coin cap on current balance\n    if (coinCap !== Infinity && user.coins > coinCap) {\n      const [updatedUser] = await db\n        .update(users)\n        .set({ coins: coinCap })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser;\n    }\n\n    return user;\n  }\n\n  async deductCoins(userId: string, amount: number): Promise<User> {\n    const user = await this.checkAndResetCoins(userId);\n    \n    if (user.coins < amount) {\n      throw new Error(\"Insufficient coins\");\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ coins: user.coins - amount })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  async getUserCoins(userId: string): Promise<number> {\n    const user = await this.checkAndResetCoins(userId);\n    return user.coins;\n  }\n\n  async getAllUsersWithCoins(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async addCoinsToUser(userId: string, amount: number): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const coinCap = await this.getUserCoinCap(userId);\n    let newCoins = user.coins + amount;\n    \n    // Enforce coin cap\n    if (coinCap !== Infinity) {\n      newCoins = Math.min(newCoins, coinCap);\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ coins: newCoins })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  async removeCoinsFromUser(userId: string, amount: number): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ coins: Math.max(0, user.coins - amount) })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  async setUserCoins(userId: string, amount: number): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const coinCap = await this.getUserCoinCap(userId);\n    let newCoins = Math.max(0, amount); // Prevent negative coins\n    \n    // Enforce coin cap\n    if (coinCap !== Infinity) {\n      newCoins = Math.min(newCoins, coinCap);\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ coins: newCoins })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return updatedUser;\n  }\n\n  // Profile-related methods\n  async getUserProfile(userId: string): Promise<User | undefined> {\n    return this.getUser(userId);\n  }\n\n  async updateUserProfile(userId: string, updates: { name?: string; email?: string; profileImageUrl?: string }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n\n\n  async getUserCompletedJobs(userId: string): Promise<ApplicationWithJob[]> {\n    const result = await db\n      .select({\n        application: applications,\n        job: jobs,\n      })\n      .from(applications)\n      .innerJoin(jobs, eq(applications.jobId, jobs.id))\n      .where(and(\n        eq(applications.userId, userId),\n        eq(applications.status, \"accepted\"),\n        eq(applications.isCompleted, true)\n      ))\n      .orderBy(desc(applications.completedAt));\n\n    return result.map(row => ({\n      ...row.application,\n      job: row.job\n    }));\n  }\n\n  async getUserPostedJobs(userId: string): Promise<JobWithApplications[]> {\n    const result = await db\n      .select({\n        job: jobs,\n        applicationCount: count(applications.id).as('applicationCount')\n      })\n      .from(jobs)\n      .leftJoin(applications, eq(jobs.id, applications.jobId))\n      .where(eq(jobs.userId, userId))\n      .groupBy(jobs.id)\n      .orderBy(desc(jobs.createdAt));\n\n    return result.map(row => ({\n      ...row.job,\n      applicationCount: Number(row.applicationCount),\n      applications: []  // Include empty array for consistency\n    }));\n  }\n\n  async getUserReviews(userId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        review: reviews,\n        reviewer: {\n          name: users.name,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl\n        },\n        job: {\n          title: jobs.title,\n          category: jobs.category\n        }\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.reviewerId, users.id))\n      .innerJoin(jobs, eq(reviews.jobId, jobs.id))\n      .where(eq(reviews.revieweeId, userId))\n      .orderBy(desc(reviews.createdAt));\n\n    return result.map(row => ({\n      ...row.review,\n      reviewer: row.reviewer,\n      job: row.job\n    }));\n  }\n\n  // Job report operations\n  async createJobReport(insertReport: InsertJobReport, reporterId: string): Promise<JobReport> {\n    const [report] = await db\n      .insert(jobReports)\n      .values({\n        ...insertReport,\n        reporterId,\n        status: \"pending\"\n      })\n      .returning();\n    return report;\n  }\n\n  async getJobReport(reportId: string): Promise<JobReport | undefined> {\n    const [report] = await db.select().from(jobReports).where(eq(jobReports.id, reportId));\n    return report;\n  }\n\n  async getJobReportsByJobId(jobId: string): Promise<JobReportWithDetails[]> {\n    const result = await db\n      .select({\n        report: jobReports,\n        job: jobs,\n        reporter: {\n          id: users.id,\n          name: users.name,\n          username: users.username,\n          email: users.email,\n          profileImageUrl: users.profileImageUrl,\n          role: users.role,\n          isActive: users.isActive,\n          coins: users.coins,\n          lastCoinReset: users.lastCoinReset,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n          passwordHash: users.passwordHash,\n          googleId: users.googleId,\n          isEmailVerified: users.isEmailVerified,\n          provider: users.provider,\n          stripeCustomerId: users.stripeCustomerId,\n          activeSubscriptionId: users.activeSubscriptionId,\n          passwordResetToken: users.passwordResetToken,\n          passwordResetExpires: users.passwordResetExpires\n        },\n        reviewer: {\n          id: sql<string | null>`reviewer.id`,\n          name: sql<string | null>`reviewer.name`,\n          username: sql<string | null>`reviewer.username`,\n          email: sql<string | null>`reviewer.email`,\n          profileImageUrl: sql<string | null>`reviewer.profile_image_url`,\n          role: sql<string | null>`reviewer.role`,\n          isActive: sql<boolean | null>`reviewer.is_active`,\n          coins: sql<number | null>`reviewer.coins`,\n          lastCoinReset: sql<Date | null>`reviewer.last_coin_reset`,\n          createdAt: sql<Date | null>`reviewer.created_at`,\n          updatedAt: sql<Date | null>`reviewer.updated_at`,\n          passwordHash: sql<string | null>`reviewer.password_hash`,\n          googleId: sql<string | null>`reviewer.google_id`,\n          isEmailVerified: sql<boolean | null>`reviewer.is_email_verified`,\n          provider: sql<string | null>`reviewer.provider`\n        }\n      })\n      .from(jobReports)\n      .innerJoin(jobs, eq(jobReports.jobId, jobs.id))\n      .innerJoin(users, eq(jobReports.reporterId, users.id))\n      .leftJoin(\n        sql`users as reviewer`,\n        sql`${jobReports.reviewedBy} = reviewer.id`\n      )\n      .where(eq(jobReports.jobId, jobId))\n      .orderBy(desc(jobReports.createdAt));\n\n    return result.map(row => ({\n      ...row.report,\n      job: row.job,\n      reporter: row.reporter,\n      reviewer: row.reviewer?.id ? {\n        id: row.reviewer.id!,\n        name: row.reviewer.name!,\n        username: row.reviewer.username!,\n        email: row.reviewer.email!,\n        profileImageUrl: row.reviewer.profileImageUrl,\n        role: row.reviewer.role!,\n        isActive: row.reviewer.isActive!,\n        coins: row.reviewer.coins!,\n        lastCoinReset: row.reviewer.lastCoinReset!,\n        createdAt: row.reviewer.createdAt!,\n        updatedAt: row.reviewer.updatedAt!,\n        passwordHash: row.reviewer.passwordHash,\n        googleId: row.reviewer.googleId,\n        isEmailVerified: row.reviewer.isEmailVerified!,\n        provider: row.reviewer.provider!,\n        stripeCustomerId: row.reviewer.stripeCustomerId,\n        activeSubscriptionId: row.reviewer.activeSubscriptionId,\n        passwordResetToken: row.reviewer.passwordResetToken,\n        passwordResetExpires: row.reviewer.passwordResetExpires\n      } : undefined\n    }));\n  }\n\n  async getAllJobReports(): Promise<JobReportWithDetails[]> {\n    const result = await db\n      .select({\n        report: jobReports,\n        job: jobs,\n        reporter: {\n          id: users.id,\n          name: users.name,\n          username: users.username,\n          email: users.email,\n          profileImageUrl: users.profileImageUrl,\n          role: users.role,\n          isActive: users.isActive,\n          coins: users.coins,\n          lastCoinReset: users.lastCoinReset,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n          passwordHash: users.passwordHash,\n          googleId: users.googleId,\n          isEmailVerified: users.isEmailVerified,\n          provider: users.provider\n        }\n      })\n      .from(jobReports)\n      .innerJoin(jobs, eq(jobReports.jobId, jobs.id))\n      .innerJoin(users, eq(jobReports.reporterId, users.id))\n      .orderBy(desc(jobReports.createdAt));\n\n    return result.map(row => ({\n      ...row.report,\n      job: row.job as any,\n      reporter: row.reporter as any,\n      reviewer: undefined\n    }));\n  }\n\n  async getPendingJobReports(): Promise<JobReportWithDetails[]> {\n    const result = await db\n      .select({\n        report: jobReports,\n        job: jobs,\n        reporter: {\n          id: users.id,\n          name: users.name,\n          username: users.username,\n          email: users.email,\n          profileImageUrl: users.profileImageUrl,\n          role: users.role,\n          isActive: users.isActive,\n          coins: users.coins,\n          lastCoinReset: users.lastCoinReset,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n          passwordHash: users.passwordHash,\n          googleId: users.googleId,\n          isEmailVerified: users.isEmailVerified,\n          provider: users.provider\n        }\n      })\n      .from(jobReports)\n      .innerJoin(jobs, eq(jobReports.jobId, jobs.id))\n      .innerJoin(users, eq(jobReports.reporterId, users.id))\n      .where(eq(jobReports.status, \"pending\"))\n      .orderBy(desc(jobReports.createdAt));\n\n    return result.map(row => ({\n      ...row.report,\n      job: row.job as any,\n      reporter: row.reporter as any,\n      reviewer: undefined\n    }));\n  }\n\n  async updateJobReport(reportId: string, updates: Partial<JobReport>): Promise<JobReport | undefined> {\n    const [report] = await db\n      .update(jobReports)\n      .set(updates)\n      .where(eq(jobReports.id, reportId))\n      .returning();\n    return report || undefined;\n  }\n\n  async hasUserReportedJob(userId: string, jobId: string): Promise<boolean> {\n    const [report] = await db\n      .select({ id: jobReports.id })\n      .from(jobReports)\n      .where(and(\n        eq(jobReports.reporterId, userId),\n        eq(jobReports.jobId, jobId)\n      ));\n    return !!report;\n  }\n\n  async getTopBidders(jobId: string): Promise<Array<{ name: string; coinsBid: number }>> {\n    const result = await db\n      .select({\n        name: users.name,\n        coinsBid: applications.coinsBid\n      })\n      .from(applications)\n      .innerJoin(users, eq(applications.userId, users.id))\n      .where(and(\n        eq(applications.jobId, jobId),\n        ne(sql`COALESCE(${applications.coinsBid}, 0)`, 0)\n      ))\n      .orderBy(desc(applications.coinsBid))\n      .limit(4);\n\n    return result.map(row => ({\n      name: row.name || \"Anonymous\",\n      coinsBid: row.coinsBid || 0\n    }));\n  }\n\n  // Coin purchase methods for DatabaseStorage\n  async createCoinPurchase(purchase: InsertCoinPurchase): Promise<CoinPurchase> {\n    const [result] = await db.insert(coinPurchases).values(purchase).returning();\n    return result;\n  }\n\n  async getCoinPurchase(id: string): Promise<CoinPurchase | undefined> {\n    const [result] = await db.select().from(coinPurchases).where(eq(coinPurchases.id, id));\n    return result;\n  }\n\n  async getCoinPurchaseByPaymentIntent(paymentIntentId: string): Promise<CoinPurchase | undefined> {\n    const [result] = await db.select().from(coinPurchases).where(eq(coinPurchases.stripePaymentIntentId, paymentIntentId));\n    return result;\n  }\n\n  async updateCoinPurchaseStatus(id: string, status: string, completedAt?: Date): Promise<CoinPurchase | undefined> {\n    const updates: any = { status };\n    if (completedAt) {\n      updates.completedAt = completedAt;\n    }\n    \n    const [result] = await db.update(coinPurchases)\n      .set(updates)\n      .where(eq(coinPurchases.id, id))\n      .returning();\n    return result;\n  }\n\n  // Subscription methods for DatabaseStorage\n  async createCoinSubscription(subscription: InsertCoinSubscription): Promise<CoinSubscription> {\n    const [result] = await db.insert(coinSubscriptions).values(subscription).returning();\n    return result;\n  }\n\n  async getCoinSubscription(id: string): Promise<CoinSubscription | undefined> {\n    const [result] = await db.select().from(coinSubscriptions).where(eq(coinSubscriptions.id, id));\n    return result;\n  }\n\n  async getCoinSubscriptionByStripeId(stripeSubscriptionId: string): Promise<CoinSubscription | undefined> {\n    const [result] = await db.select().from(coinSubscriptions).where(eq(coinSubscriptions.stripeSubscriptionId, stripeSubscriptionId));\n    return result;\n  }\n\n  async getUserActiveSubscription(userId: string): Promise<CoinSubscription | undefined> {\n    const [result] = await db.select().from(coinSubscriptions).where(\n      and(\n        eq(coinSubscriptions.userId, userId),\n        eq(coinSubscriptions.status, \"active\")\n      )\n    );\n    return result;\n  }\n\n  async updateCoinSubscriptionStatus(id: string, status: string, canceledAt?: Date): Promise<CoinSubscription | undefined> {\n    const updates: any = { status };\n    if (canceledAt) {\n      updates.canceledAt = canceledAt;\n    }\n    \n    const [result] = await db.update(coinSubscriptions)\n      .set(updates)\n      .where(eq(coinSubscriptions.id, id))\n      .returning();\n    return result;\n  }\n\n  async updateCoinSubscription(id: string, updates: Partial<CoinSubscription>): Promise<CoinSubscription | undefined> {\n    const [result] = await db.update(coinSubscriptions)\n      .set(updates)\n      .where(eq(coinSubscriptions.id, id))\n      .returning();\n    return result;\n  }\n\n  // Skill endorsement operations\n  async createSkillEndorsement(endorsement: InsertSkillEndorsement, endorserId: string): Promise<SkillEndorsement> {\n    const [result] = await db\n      .insert(skillEndorsements)\n      .values({\n        ...endorsement,\n        endorserId: endorserId,\n      })\n      .returning();\n    return result;\n  }\n\n  async getSkillEndorsementsByUserId(userId: string): Promise<SkillEndorsementWithUser[]> {\n    const result = await db\n      .select({\n        endorsement: skillEndorsements,\n        endorser: {\n          id: users.id,\n          name: users.name,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl\n        },\n        job: {\n          title: jobs.title,\n          category: jobs.category\n        }\n      })\n      .from(skillEndorsements)\n      .innerJoin(users, eq(skillEndorsements.endorserId, users.id))\n      .innerJoin(jobs, eq(skillEndorsements.jobId, jobs.id))\n      .where(eq(skillEndorsements.endorseeId, userId))\n      .orderBy(desc(skillEndorsements.createdAt));\n\n    return result.map(row => ({\n      ...row.endorsement,\n      endorser: row.endorser as User,\n      job: row.job as Job\n    }));\n  }\n\n  async hasUserEndorsedSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(skillEndorsements)\n      .where(\n        and(\n          eq(skillEndorsements.endorserId, endorserId),\n          eq(skillEndorsements.endorseeId, endorseeId),\n          eq(skillEndorsements.jobId, jobId)\n        )\n      );\n    \n    return (result.count || 0) > 0;\n  }\n\n  async canUserEndorseSkillForJob(endorserId: string, endorseeId: string, jobId: string): Promise<boolean> {\n    // Check if user has already endorsed this freelancer for this job\n    const hasEndorsed = await this.hasUserEndorsedSkillForJob(endorserId, endorseeId, jobId);\n    if (hasEndorsed) return false;\n\n    // Check if the job exists and endorser is the job poster\n    const job = await this.getJob(jobId);\n    if (!job || job.userId !== endorserId) return false;\n\n    // Check if the endorsee has an accepted application for this job\n    const [applicationResult] = await db\n      .select({ count: count() })\n      .from(applications)\n      .where(\n        and(\n          eq(applications.jobId, jobId),\n          eq(applications.userId, endorseeId),\n          eq(applications.status, \"accepted\")\n        )\n      );\n    \n    return (applicationResult.count || 0) > 0;\n  }\n\n  // Email verification operations for DatabaseStorage\n  async createEmailVerificationToken(token: InsertEmailVerificationToken): Promise<EmailVerificationToken> {\n    const [result] = await db\n      .insert(emailVerificationTokens)\n      .values(token)\n      .returning();\n    return result;\n  }\n\n  async getEmailVerificationToken(token: string): Promise<EmailVerificationToken | undefined> {\n    const [result] = await db\n      .select()\n      .from(emailVerificationTokens)\n      .where(eq(emailVerificationTokens.token, token));\n    return result;\n  }\n\n  async deleteEmailVerificationToken(token: string): Promise<void> {\n    await db\n      .delete(emailVerificationTokens)\n      .where(eq(emailVerificationTokens.token, token));\n  }\n\n  async verifyUserEmail(email: string): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isEmailVerified: true })\n      .where(eq(users.email, email))\n      .returning();\n    return updatedUser;\n  }\n\n  async updateUserSubscription(userId: string, planType: string): Promise<void> {\n    // First end any existing active subscription\n    await db\n      .update(coinSubscriptions)\n      .set({ \n        status: \"canceled\",\n        canceledAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(and(\n        eq(coinSubscriptions.userId, userId),\n        eq(coinSubscriptions.status, \"active\")\n      ));\n\n    // Create new subscription with the specified plan type\n    const { SUBSCRIPTION_PLANS } = await import(\"@shared/schema\");\n    const plan = SUBSCRIPTION_PLANS[planType as keyof typeof SUBSCRIPTION_PLANS];\n    \n    if (!plan) {\n      throw new Error(\"Invalid plan type\");\n    }\n\n    // Set billing cycle dates (30 days from now)\n    const now = new Date();\n    const nextBilling = new Date(now);\n    nextBilling.setDate(nextBilling.getDate() + 30);\n\n    await db.insert(coinSubscriptions).values({\n      id: randomUUID(),\n      userId,\n      planType,\n      status: \"active\",\n      monthlyPrice: plan.price, // Already in cents\n      coinAllocation: plan.coins,\n      currentPeriodStart: now,\n      currentPeriodEnd: nextBilling,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n\n    // Immediately allocate monthly coins to the user\n    await db\n      .update(users)\n      .set({ \n        coins: sql`${users.coins} + ${plan.coins}`,\n        lastCoinReset: now\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async removeUserSubscription(userId: string): Promise<void> {\n    // Cancel all active subscriptions for the user\n    await db\n      .update(coinSubscriptions)\n      .set({ \n        status: \"canceled\",\n        canceledAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(and(\n        eq(coinSubscriptions.userId, userId),\n        eq(coinSubscriptions.status, \"active\")\n      ));\n  }\n\n  // Service operations\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service || undefined;\n  }\n\n  async getServices(filters?: { category?: string; location?: string; experienceLevel?: string; query?: string }): Promise<ServiceWithRequests[]> {\n    let query = db.select().from(services);\n    \n    // Apply filters\n    const conditions = [];\n    if (filters?.category) {\n      conditions.push(eq(services.category, filters.category));\n    }\n    if (filters?.location) {\n      conditions.push(ilike(services.location, `%${filters.location}%`));\n    }\n    if (filters?.experienceLevel) {\n      conditions.push(eq(services.experienceLevel, filters.experienceLevel));\n    }\n    if (filters?.query) {\n      conditions.push(or(\n        ilike(services.title, `%${filters.query}%`),\n        ilike(services.description, `%${filters.query}%`)\n      ));\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n    \n    const serviceResults = await query;\n    \n    // Add requests to each service\n    return Promise.all(serviceResults.map(async service => {\n      const requestResults = await db\n        .select()\n        .from(serviceRequests)\n        .leftJoin(users, eq(serviceRequests.userId, users.id))\n        .where(eq(serviceRequests.serviceId, service.id));\n      \n      const requests = requestResults.map(result => ({\n        ...result.service_requests,\n        user: result.users\n      }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getApprovedServices(): Promise<ServiceWithRequests[]> {\n    const serviceResults = await db\n      .select()\n      .from(services)\n      .where(eq(services.approvalStatus, \"approved\"));\n    \n    return Promise.all(serviceResults.map(async service => {\n      const requestResults = await db\n        .select()\n        .from(serviceRequests)\n        .leftJoin(users, eq(serviceRequests.userId, users.id))\n        .where(eq(serviceRequests.serviceId, service.id));\n      \n      const requests = requestResults.map(result => ({\n        ...result.service_requests,\n        user: result.users\n      }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getPendingServices(): Promise<ServiceWithRequests[]> {\n    const serviceResults = await db\n      .select()\n      .from(services)\n      .leftJoin(users, eq(services.userId, users.id))\n      .where(eq(services.approvalStatus, \"pending\"));\n    \n    return Promise.all(serviceResults.map(async result => {\n      const service = result.services;\n      const user = result.users;\n      \n      const requestResults = await db\n        .select()\n        .from(serviceRequests)\n        .leftJoin(users, eq(serviceRequests.userId, users.id))\n        .where(eq(serviceRequests.serviceId, service.id));\n      \n      const requests = requestResults.map(requestResult => ({\n        ...requestResult.service_requests,\n        user: requestResult.users\n      }));\n      \n      return {\n        ...service,\n        user: user!,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async getServicesByUserId(userId: string): Promise<ServiceWithRequests[]> {\n    const serviceResults = await db\n      .select()\n      .from(services)\n      .where(eq(services.userId, userId));\n    \n    return Promise.all(serviceResults.map(async service => {\n      const requestResults = await db\n        .select()\n        .from(serviceRequests)\n        .leftJoin(users, eq(serviceRequests.userId, users.id))\n        .where(eq(serviceRequests.serviceId, service.id));\n      \n      const requests = requestResults.map(result => ({\n        ...result.service_requests,\n        user: result.users\n      }));\n      \n      return {\n        ...service,\n        requests: requests as ServiceRequestWithUser[],\n        requestCount: requests.length\n      };\n    }));\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    // Ensure arrays are properly formatted for the database\n    const serviceData = {\n      ...service,\n      images: service.images || [],\n      tags: service.tags || [],\n      approvalStatus: \"pending\" as const,\n      approvedBy: null,\n      approvedAt: null,\n      userId: service.userId!, // Ensure userId is included\n      status: service.status || \"active\"\n    };\n    \n    const [newService] = await db\n      .insert(services)\n      .values(serviceData)\n      .returning();\n    return newService;\n  }\n\n  async updateService(id: string, updates: Partial<Service>): Promise<Service | undefined> {\n    const [updatedService] = await db\n      .update(services)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(services.id, id))\n      .returning();\n    return updatedService || undefined;\n  }\n\n  async updateServiceImages(serviceId: string, images: string[]): Promise<Service | undefined> {\n    const [updatedService] = await db\n      .update(services)\n      .set({ images, updatedAt: new Date() })\n      .where(eq(services.id, serviceId))\n      .returning();\n    return updatedService || undefined;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Delete associated service requests first\n      await tx.delete(serviceRequests).where(eq(serviceRequests.serviceId, id));\n      // Delete the service\n      await tx.delete(services).where(eq(services.id, id));\n    });\n  }\n\n  async approveService(serviceId: string, adminId: string): Promise<Service> {\n    const [approvedService] = await db\n      .update(services)\n      .set({\n        approvalStatus: \"approved\",\n        approvedBy: adminId,\n        approvedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(services.id, serviceId))\n      .returning();\n    \n    if (!approvedService) throw new Error(\"Service not found\");\n    return approvedService;\n  }\n\n  async rejectService(serviceId: string, adminId: string): Promise<Service> {\n    const [rejectedService] = await db\n      .update(services)\n      .set({\n        approvalStatus: \"rejected\",\n        approvedBy: adminId,\n        approvedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(services.id, serviceId))\n      .returning();\n    \n    if (!rejectedService) throw new Error(\"Service not found\");\n    return rejectedService;\n  }\n\n  // Service request operations\n  async getServiceRequest(id: string): Promise<ServiceRequest | undefined> {\n    const [request] = await db.select().from(serviceRequests).where(eq(serviceRequests.id, id));\n    return request || undefined;\n  }\n\n  async getServiceRequestsByServiceId(serviceId: string): Promise<ServiceRequestWithUser[]> {\n    const results = await db\n      .select()\n      .from(serviceRequests)\n      .leftJoin(users, eq(serviceRequests.userId, users.id))\n      .where(eq(serviceRequests.serviceId, serviceId));\n    \n    return results.map(result => ({\n      ...result.service_requests,\n      user: result.users!\n    }));\n  }\n\n  async getServiceRequestsByUserId(userId: string): Promise<ServiceRequest[]> {\n    return await db.select().from(serviceRequests).where(eq(serviceRequests.userId, userId));\n  }\n\n  async createServiceRequest(request: InsertServiceRequest, userId: string): Promise<ServiceRequest> {\n    const [newRequest] = await db\n      .insert(serviceRequests)\n      .values({\n        ...request,\n        userId\n      })\n      .returning();\n    return newRequest;\n  }\n\n  async updateServiceRequest(id: string, updates: Partial<ServiceRequest>): Promise<ServiceRequest | undefined> {\n    const [updatedRequest] = await db\n      .update(serviceRequests)\n      .set(updates)\n      .where(eq(serviceRequests.id, id))\n      .returning();\n    return updatedRequest || undefined;\n  }\n\n  async updateServiceRequestStatus(requestId: string, status: string): Promise<ServiceRequest> {\n    const [updatedRequest] = await db\n      .update(serviceRequests)\n      .set({\n        status,\n        acceptedAt: status === \"accepted\" ? new Date() : undefined,\n        completedAt: status === \"completed\" ? new Date() : undefined\n      })\n      .where(eq(serviceRequests.id, requestId))\n      .returning();\n    \n    if (!updatedRequest) throw new Error(\"Service request not found\");\n    return updatedRequest;\n  }\n\n  async completeServiceRequest(requestId: string): Promise<ServiceRequest> {\n    const [updatedRequest] = await db\n      .update(serviceRequests)\n      .set({\n        completedAt: new Date()\n      })\n      .where(eq(serviceRequests.id, requestId))\n      .returning();\n    \n    if (!updatedRequest) throw new Error(\"Service request not found\");\n    return updatedRequest;\n  }\n\n  async hasUserRequestedService(userId: string, serviceId: string): Promise<boolean> {\n    const [existingRequest] = await db\n      .select()\n      .from(serviceRequests)\n      .where(and(\n        eq(serviceRequests.userId, userId),\n        eq(serviceRequests.serviceId, serviceId)\n      ));\n    return !!existingRequest;\n  }\n\n  // Service expiry operations\n  async extendService(serviceId: string, userId: string): Promise<Service> {\n    const service = await this.getService(serviceId);\n    if (!service) throw new Error(\"Service not found\");\n    if (service.userId !== userId) throw new Error(\"Unauthorized\");\n    \n    // Extend expiry by 30 days\n    const newExpiryDate = new Date(service.expiresAt);\n    newExpiryDate.setDate(newExpiryDate.getDate() + 30);\n    \n    const [updatedService] = await db\n      .update(services)\n      .set({ expiresAt: newExpiryDate })\n      .where(eq(services.id, serviceId))\n      .returning();\n    \n    return updatedService;\n  }\n\n  async closeExpiredServices(): Promise<number> {\n    const now = new Date();\n    \n    const result = await db\n      .update(services)\n      .set({ status: \"expired\" })\n      .where(and(\n        sql`${services.expiresAt} <= ${now}`,\n        eq(services.status, \"active\")\n      ))\n      .returning();\n    \n    return result.length;\n  }\n\n  // Get coin cap for a user based on their subscription\n  async getUserCoinCap(userId: string): Promise<number> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) throw new Error(\"User not found\");\n    \n    if (user.role === \"admin\") {\n      return Infinity; // Admins have no cap\n    }\n    \n    const activeSubscription = await this.getUserActiveSubscription(userId);\n    if (activeSubscription) {\n      const planType = activeSubscription.planType as keyof typeof SUBSCRIPTION_PLANS;\n      const plan = SUBSCRIPTION_PLANS[planType];\n      \n      if (plan?.hasUnlimitedCoinCap) {\n        return Infinity; // Elite plan has unlimited cap\n      }\n      \n      // Return coin cap based on plan\n      switch (planType) {\n        case 'freelancer': return 100;\n        case 'professional': return 400;\n        case 'expert': return 1000;\n        default: return 40; // Free tier default\n      }\n    }\n    \n    return 40; // Free tier cap\n  }\n\n  // Apply coin caps to all existing users\n  async applyCoincapToAllUsers(): Promise<void> {\n    console.log(\"Applying coin caps to all users...\");\n    \n    const allUsers = await db.select().from(users);\n    \n    for (const user of allUsers) {\n      try {\n        const coinCap = await this.getUserCoinCap(user.id);\n        \n        if (coinCap !== Infinity && user.coins > coinCap) {\n          await db\n            .update(users)\n            .set({ coins: coinCap })\n            .where(eq(users.id, user.id));\n          \n          console.log(`Applied coin cap to user ${user.username}: ${user.coins} -> ${coinCap}`);\n        }\n      } catch (error) {\n        console.error(`Error applying coin cap to user ${user.id}:`, error);\n      }\n    }\n    \n    console.log(\"Finished applying coin caps to all users\");\n  }\n}\n\n// Create storage instance\nexport const storage = process.env.DATABASE_URL ? new DatabaseStorage() : new MemStorage();\n","size_bytes":176793},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/categories.ts":{"content":"// Job categories for Jigz marketplace\n// Updated job categories database with 991 unique professional services\n// Removed categories as per user request\n\nexport const jobCategories = [\n  \"All Categories\",\n  \"Access Control\",\n  \"Accessory Placement\",\n  \"Accident Recovery\",\n  \"Accountability\",\n  \"Accounts Payable\",\n  \"AC Install\",\n  \"AC Repair\",\n  \"Acrylic Nails\",\n  \"Ad Copy\",\n  \"Adult CPR\",\n  \"AED Use\",\n  \"Aerial Real Estate\",\n  \"Affiliate Marketing\",\n  \"Affiliate Recruitment\",\n  \"After School Care\",\n  \"Agility Training\",\n  \"AI Model Development\",\n  \"Alarm Check\",\n  \"Alarm System Installation\",\n  \"Algae Control\",\n  \"Analytics Reporting\",\n  \"Animal Boarding\",\n  \"Animal Care\",\n  \"Animal Cleaning\",\n  \"Animal Control\",\n  \"Animal Education\",\n  \"Animal Exercise\",\n  \"Animal Health Support\",\n  \"Animal Housing\",\n  \"Animal Training\",\n  \"Antenna Installation\",\n  \"Antique Refinishing\",\n  \"Antique Restoration\",\n  \"API Development\",\n  \"API Integration\",\n  \"Appliance Hookup\",\n  \"Appliance Installation\",\n  \"Appliance Repair\",\n  \"Application Monitoring\",\n  \"Aquatic Environment Care\",\n  \"Aquarium Maintenance\",\n  \"AR App Development\",\n  \"AR/VR Development\",\n  \"Architectural Plans\",\n  \"Area Cleaning\",\n  \"Area Tours\",\n  \"Art Creation\",\n  \"Art Display\",\n  \"Art Framing\",\n  \"Art Installation\",\n  \"Articulation Therapy\",\n  \"As Built Drawings\",\n  \"Attic Insulation\",\n  \"Audio Enhancement\",\n  \"Audio Production\",\n  \"Audio Transcription\",\n  \"Audio/Visual Setup\",\n  \"Audiobook Narration\",\n  \"Authentication Systems\",\n  \"Auto Body Repair\",\n  \"Auto Detailing\",\n  \"Auto Glass Tinting\",\n  \"Auto Mechanic\",\n  \"Automated Testing\",\n  \"Automotive Tinting\",\n  \"Automation Flows\",\n  \"AWS Architecture\",\n  \"Back-End Development\",\n  \"Background Checks\",\n  \"Backsplash Install\",\n  \"Baking Services\",\n  \"Balancing\",\n  \"Ballet\",\n  \"Bank Reconciliation\",\n  \"Barrier Installation\",\n  \"Barrier Setup\",\n  \"Basic First Aid\",\n  \"Basketball Coach\",\n  \"Bath and Brush\",\n  \"Bathroom Tiling\",\n  \"Bathing Assistance\",\n  \"Battery Jump\",\n  \"Battery Replacement\",\n  \"Bee Removal\",\n  \"Beginner Lessons\",\n  \"Bicycle Repair\",\n  \"Big Data Processing\",\n  \"Bike Repair\",\n  \"Bike Service\",\n  \"Blockchain Development\",\n  \"Blog & Article Writing\",\n  \"Blown-In Insulation\",\n  \"Blueprint Creation\",\n  \"Boat Repair\",\n  \"Body Movement\",\n  \"Body Training\",\n  \"Body Work\",\n  \"Book Ghostwriting\",\n  \"Book Recording\",\n  \"Bookkeeping & Accounting\",\n  \"Bot Development\",\n  \"Bouquet Design\",\n  \"Brake Adjustment\",\n  \"Brake Repair\",\n  \"Brake Service\",\n  \"Brand Development\",\n  \"Brand Identity Design\",\n  \"Brass Instrument Repair\",\n  \"Brazilian Jiu-Jitsu\",\n  \"Breathwork\",\n  \"Brick Laying\",\n  \"Brickwork\",\n  \"Bridal Makeup\",\n  \"Brochure Design\",\n  \"Brushing and Bathing\",\n  \"Budget Preparation\",\n  \"Bug Control\",\n  \"Bug Patching\",\n  \"Bug Reporting\",\n  \"Building Demolition\",\n  \"Building Inspection\",\n  \"Building Painting\",\n  \"Building Washing\",\n  \"Business Analysis\",\n  \"Business Analytics\",\n  \"Business Automation\",\n  \"Business Card Design\",\n  \"Business Intelligence\",\n  \"Business Process Design\",\n  \"Business Research\",\n  \"Business Software\",\n  \"Buttercream Art\",\n  \"Cable Installation\",\n  \"CAD Drafting (Remote)\",\n  \"Cake Decorating\",\n  \"Camera Install\",\n  \"Camera Mounting\",\n  \"Campaign Setup\",\n  \"Canine Training\",\n  \"Car Keys\",\n  \"Car Repair\",\n  \"Career Assessment\",\n  \"Career Coaching\",\n  \"Carpet Cleaning\",\n  \"Carpet Installation\",\n  \"Carpentry\",\n  \"Cat Boarding\",\n  \"Catering\",\n  \"CCTV Installation\",\n  \"Chain Repair\",\n  \"Chair Repair\",\n  \"Character Animation\",\n  \"Character Illustration\",\n  \"Character Poses\",\n  \"Character Voices\",\n  \"Chatbot Design\",\n  \"Chatbot Development\",\n  \"Chemical Balancing\",\n  \"Childcare\",\n  \"Chip Repair\",\n  \"Chiropractic Services\",\n  \"CI CD Pipeline\",\n  \"Circuit Breaker Replacement\",\n  \"City Walking Tours\",\n  \"Climate Installation\",\n  \"Climate Repair\",\n  \"Clock Repair\",\n  \"Closed Captions\",\n  \"Closet Organizing\",\n  \"Clothing Alteration\",\n  \"Clothing Design\",\n  \"Clothing Treatment\",\n  \"Cloud Architecture\",\n  \"Club DJ\",\n  \"Code Testing\",\n  \"Cold Precipitation Removal\",\n  \"Color Selection\",\n  \"Color Services\",\n  \"Combat Training\",\n  \"Commercial Mowing\",\n  \"Commercial Voice Over\",\n  \"Commission Structure\",\n  \"Communication Bots\",\n  \"Communication Device Repair\",\n  \"Communication Equipment\",\n  \"Communication Installation\",\n  \"Communication Teaching\",\n  \"Community Management\",\n  \"Companionship\",\n  \"Complete Development\",\n  \"Computer Hardware Repair\",\n  \"Computer Learning\",\n  \"Computing Repair\",\n  \"Concept Design\",\n  \"Concrete Patios\",\n  \"Concrete Work\",\n  \"Construction Cleanup\",\n  \"Construction Debris\",\n  \"Construction Drawing\",\n  \"Construction Flagging\",\n  \"Construction Progress\",\n  \"Consumer Research\",\n  \"Contact Management\",\n  \"Content Calendar\",\n  \"Content Writing\",\n  \"Conventional Oil\",\n  \"Conversation Practice\",\n  \"Conversational Flow\",\n  \"Conversion Optimization\",\n  \"Conversion Tracking\",\n  \"Copywriting\",\n  \"Core Training\",\n  \"Corporate Events\",\n  \"Corporate Presentations\",\n  \"Corporate Videos\",\n  \"Costume Construction\",\n  \"Costume Design\",\n  \"Courier Services (local)\",\n  \"CPR Training\",\n  \"Crack Sealing\",\n  \"Creative Writing\",\n  \"CRM Administration\",\n  \"CRM Setup\",\n  \"Cross Platform Apps\",\n  \"Crown Reduction\",\n  \"Crowd Control\",\n  \"Cultural Education\",\n  \"Custom Cabinets\",\n  \"Custom Cakes\",\n  \"Custom Engraving\",\n  \"Custom Frames\",\n  \"Custom Upholstery\",\n  \"Customer Follow Up\",\n  \"Customer Support (Live Chat)\",\n  \"Cut and Trim\",\n  \"Cybersecurity Assessment\",\n  \"Cybersecurity Consulting\",\n  \"Cycle Repair\",\n  \"Daily Walks\",\n  \"Dance Instruction\",\n  \"Dashboard Automation\",\n  \"Data Analysis\",\n  \"Data Cleaning\",\n  \"Data Engineering\",\n  \"Data Entry\",\n  \"Data Pipeline\",\n  \"Data Processing\",\n  \"Data Science & Analytics\",\n  \"Data Visualization\",\n  \"Database Administration\",\n  \"Database Design\",\n  \"Daycare Service\",\n  \"DCF Modeling\",\n  \"Deadwood Removal\",\n  \"Debris Hauling\",\n  \"Debris Removal\",\n  \"Deck Building\",\n  \"Deep Cleaning\",\n  \"Deep Learning\",\n  \"Deep Tissue\",\n  \"Deer Deterrent\",\n  \"DeFi Development\",\n  \"Demolition\",\n  \"Dent Removal\",\n  \"Deployment Automation\",\n  \"Design Consultation\",\n  \"Desktop Publishing\",\n  \"DevOps Engineering\",\n  \"Dialog Polishing\",\n  \"Diet Planning\",\n  \"Digital Assets\",\n  \"Digital Collectibles\",\n  \"Digital Currency\",\n  \"Digital Illustration\",\n  \"Digital Marketing Strategy\",\n  \"Digital Translation\",\n  \"Dinner Parties\",\n  \"Direct Marketing\",\n  \"Disc Jockey (DJ)\",\n  \"Dish Mounting\",\n  \"Dishwasher Install\",\n  \"Distribution\",\n  \"Document Courier\",\n  \"Document Formatting\",\n  \"Document Translation\",\n  \"Documentation\",\n  \"Dog Boarding\",\n  \"Dog Training\",\n  \"Dog Walking\",\n  \"Door Installation\",\n  \"Downspout Flushing\",\n  \"Drain Cleaning\",\n  \"Dressing Help\",\n  \"Dressage Training\",\n  \"Driveway Installation\",\n  \"Driveway Plowing\",\n  \"Driveway Pouring\",\n  \"Driveway Washing\",\n  \"Drone Photography\",\n  \"Dry Cleaning\",\n  \"Dry Cleaning Pickup & Delivery\",\n  \"Drywall Installation\",\n  \"Drywall Patching\",\n  \"Drywall Repair\",\n  \"DVR Setup\",\n  \"E Commerce Development\",\n  \"Editorial Content\",\n  \"Editing and Mastering\",\n  \"Educational Services\",\n  \"Educational Tours\",\n  \"Elderly Care\",\n  \"Electrical Panel Upgrade\",\n  \"Electrical Repair\",\n  \"Emergency Response Training\",\n  \"Emergency Service\",\n  \"Emergency Training\",\n  \"Engine Diagnostics\",\n  \"Engine Maintenance\",\n  \"Engine Service\",\n  \"English Spanish Translation\",\n  \"English Tutoring\",\n  \"Engraving Services\",\n  \"Entertainment Software\",\n  \"Entry Door\",\n  \"Entry Installation\",\n  \"Entry Screening\",\n  \"Episode Planning\",\n  \"Equipment Repair\",\n  \"Equipment Service\",\n  \"Equine Training\",\n  \"Erection\",\n  \"Errand Running\",\n  \"ERP Consulting\",\n  \"ESL Instruction\",\n  \"Ethernet Cabling\",\n  \"ETL Pipeline Development\",\n  \"Event Barriers\",\n  \"Event Coordination\",\n  \"Event Parking\",\n  \"Event Planning\",\n  \"Event Security\",\n  \"Event Servers\",\n  \"Event Staff\",\n  \"Event Videography\",\n  \"Evening Babysitting\",\n  \"Excel & Spreadsheet Automation\",\n  \"Exercise Classes\",\n  \"Exhibit Explanation\",\n  \"Experience Design\",\n  \"Explainer Videos\",\n  \"Exterior Glass\",\n  \"Exterior Painting\",\n  \"Exterior Repair\",\n  \"Exterior Wash\",\n  \"Fabric Care\",\n  \"Fabric Cleaning\",\n  \"Fabric Repair\",\n  \"Fact Checking\",\n  \"Family Care\",\n  \"Feature Development\",\n  \"Feature Planning\",\n  \"Fence Installation\",\n  \"Fiber Pulling\",\n  \"Fiction Narration\",\n  \"Fighting Training\",\n  \"Filter Maintenance\",\n  \"Financial Modeling\",\n  \"Financial Planning\",\n  \"Financial Records\",\n  \"Fire Alarm\",\n  \"Fire Extinguisher Service\",\n  \"Fire Safety Inspection\",\n  \"First Aid Training\",\n  \"Fish Tank Care\",\n  \"Fitness Coaching (Online)\",\n  \"Fitness Training\",\n  \"Fixture Installation\",\n  \"Flagging\",\n  \"Flat Pack Assembly\",\n  \"Floor Covering Installation\",\n  \"Floor Installation\",\n  \"Floor Safe\",\n  \"Flooring\",\n  \"Floral Arrangement\",\n  \"Flower Service\",\n  \"Fluency Therapy\",\n  \"Flying Insect Removal\",\n  \"Fondant Design\",\n  \"Food Planning\",\n  \"Food Service\",\n  \"Foot Covering Repair\",\n  \"Footwear Repair\",\n  \"Formula Optimization\",\n  \"Forum Moderation\",\n  \"Foundation Repair\",\n  \"Fountain Installation\",\n  \"Fragile Packing\",\n  \"Framing\",\n  \"Freelance Writing\",\n  \"Front-End Development\",\n  \"Full Bar Service\",\n  \"Full Service Planning\",\n  \"Full Stack Development\",\n  \"Full Time Nanny\",\n  \"Full-Stack Development\",\n  \"Functional Testing\",\n  \"Funding Writing\",\n  \"Furnace Install\",\n  \"Furnace Repair\",\n  \"Furniture Assembly\",\n  \"Furniture Repair\",\n  \"Furniture Rental\",\n  \"Furniture Reupholstery\",\n  \"Furniture Upholstery\",\n  \"Game Design\",\n  \"Game Development\",\n  \"Garage Door Repair\",\n  \"Garage Organizing\",\n  \"Garbage Collection\",\n  \"Garden Maintenance\",\n  \"Garment Care\",\n  \"Garment Modification\",\n  \"Gas Optimization\",\n  \"Gear Tuning\",\n  \"Gel Manicure\",\n  \"General Repairs\",\n  \"Generator Service\",\n  \"Generative Models\",\n  \"Ghostwriting\",\n  \"GIS Mapping & Analysis\",\n  \"Glass Cleaning\",\n  \"Glass Installation\",\n  \"Glass Replacement\",\n  \"Glass Tinting\",\n  \"Goal Setting\",\n  \"Google Ads Setup\",\n  \"Government Forms\",\n  \"Grammar Check\",\n  \"Grant Research\",\n  \"Grant Writing\",\n  \"Graphic Design\",\n  \"Grass Installation\",\n  \"Grocery Runs\",\n  \"Ground Covering\",\n  \"Ground Installation\",\n  \"Groundwork Training\",\n  \"Group Direction\",\n  \"Group Walks\",\n  \"Growth Hacking\",\n  \"Guard Service\",\n  \"Guest Service\",\n  \"Guest Vehicle Service\",\n  \"Guided Meditation\",\n  \"Guitar Lessons\",\n  \"Gutter Cleaning\",\n  \"Hair Service\",\n  \"Hair Styling\",\n  \"Haircut and Styling\",\n  \"Haircuts\",\n  \"Hand Care\",\n  \"Hand Therapy\",\n  \"Handyman Services\",\n  \"Hanging Boards\",\n  \"Hardware Setup\",\n  \"Hardwood Install\",\n  \"Hatha Yoga\",\n  \"Heating Installation\",\n  \"Hedge Trimming\",\n  \"Heel Replacement\",\n  \"Height Reduction\",\n  \"Help Desk\",\n  \"Help Services\",\n  \"Hemming\",\n  \"Hip-Hop\",\n  \"Historical Tours\",\n  \"Historic Restoration\",\n  \"Hive Removal\",\n  \"Hole Patching\",\n  \"Home Inspection\",\n  \"Home Organization\",\n  \"Home Pickup\",\n  \"Home Repairs\",\n  \"Home Staging\",\n  \"Homework Help\",\n  \"Hoof Cleaning\",\n  \"Horse Care\",\n  \"Horse Grooming\",\n  \"House Exterior Painting\",\n  \"House Keys\",\n  \"House Painting\",\n  \"House Siding Wash\",\n  \"Household Junk\",\n  \"Household Waste\",\n  \"HR Consulting & Recruitment\",\n  \"HTML CSS Coding\",\n  \"Hull Repair\",\n  \"HVAC Installation\",\n  \"HVAC Repair\",\n  \"Icon Design\",\n  \"Identity Design\",\n  \"Ikea Assembly\",\n  \"Illustration\",\n  \"Image Capture\",\n  \"In Home Sitting\",\n  \"Income Tax Filing\",\n  \"Incident Response\",\n  \"Indie Game Development\",\n  \"Infant Care\",\n  \"Infant CPR\",\n  \"Infographic Design\",\n  \"Information Analysis\",\n  \"Information Management\",\n  \"Information Processing\",\n  \"Information Study\",\n  \"Infrastructure Management\",\n  \"Insect Extermination\",\n  \"Insect Removal\",\n  \"Insights Report\",\n  \"Inspection\",\n  \"Installation\",\n  \"Instrument Repair\",\n  \"Instrument Tuning\",\n  \"Insulation Installation\",\n  \"Intelligence Development\",\n  \"Interaction Design\",\n  \"Interior Decorating\",\n  \"Interior Demo\",\n  \"Interior Door Hang\",\n  \"Interior Glass\",\n  \"Interior Painting\",\n  \"Interior Shampoo\",\n  \"Interview Prep\",\n  \"Interview Transcription\",\n  \"iOS Apps\",\n  \"Ironing Services\",\n  \"Irrigation System Installation\",\n  \"IT Management\",\n  \"IT On-Site Support\",\n  \"Item Repair\",\n  \"JavaScript Development\",\n  \"Jewelry Repair\",\n  \"Job Description Writing\",\n  \"Joint Reinforcement\",\n  \"Jump Starts\",\n  \"Junk Removal\",\n  \"Karate\",\n  \"Key Cutting\",\n  \"Key Service\",\n  \"Keyword Research\",\n  \"Keyword Strategy\",\n  \"Kinetic Typography\",\n  \"KPI Definition\",\n  \"Lab Sample Collection\",\n  \"Laminate Install\",\n  \"Landing Page Copy\",\n  \"Landscape Design\",\n  \"Landscaping\",\n  \"Language Service\",\n  \"Language Tutoring\",\n  \"Large Animal Care\",\n  \"Launch Coordination\",\n  \"Laundry Services\",\n  \"Lawn Mower Repair\",\n  \"Lawn Mowing\",\n  \"Lawn Service\",\n  \"Layout Design\",\n  \"Leak Repair\",\n  \"Legal Transcription\",\n  \"Leveling and EQ\",\n  \"Life Coaching\",\n  \"Life Saving Training\",\n  \"Lighting Technician\",\n  \"Link Building\",\n  \"LinkedIn Profile\",\n  \"Litter Box Cleaning\",\n  \"Live Chat Support\",\n  \"Living Plant Installation\",\n  \"Load In\",\n  \"Local Moves\",\n  \"Local Towing\",\n  \"Location Analysis\",\n  \"Lock Installation\",\n  \"Lock Rekeying\",\n  \"Lock Service\",\n  \"Locksmith Services\",\n  \"Logo & Brand Identity Design\",\n  \"Logo Design\",\n  \"Long Distance Moves\",\n  \"Long Form Articles\",\n  \"Lube Service\",\n  \"Machine Installation\",\n  \"Machine Learning Engineering\",\n  \"Machine Repair\",\n  \"Maintenance Updates\",\n  \"Makeup Artist\",\n  \"Manicure Service\",\n  \"Map Creation\",\n  \"Marine Repair\",\n  \"Market Analysis\",\n  \"Market Research\",\n  \"Marketing Copy\",\n  \"Marketing Writing\",\n  \"Marketplace Listing\",\n  \"Martial Arts Coaching\",\n  \"Masonry\",\n  \"Massage Therapy\",\n  \"Mat Pilates\",\n  \"Material Disposal\",\n  \"Material Repair\",\n  \"Material Shaping\",\n  \"Math Tutoring\",\n  \"Meal Planning\",\n  \"Meal Service\",\n  \"Measuring and Cutting\",\n  \"Mechanical Clock Repair\",\n  \"Mechanical Drawings\",\n  \"Medical Training\",\n  \"Meditation Classes\",\n  \"Memoirs\",\n  \"Mental Wellness\",\n  \"MERN Stack\",\n  \"Meta Descriptions\",\n  \"Metal Fabrication\",\n  \"Metal Joining\",\n  \"MIG Welding\",\n  \"Migration Planning\",\n  \"Mind Body Practice\",\n  \"Mindfulness & Meditation Coaching\",\n  \"Mobile App Development\",\n  \"Mobile Phone Repair\",\n  \"Mobility Assistance\",\n  \"Model Deployment\",\n  \"Model Training\",\n  \"Money Management\",\n  \"Monitoring Setup\",\n  \"Motion Capture\",\n  \"Motion Graphics\",\n  \"Motherboard Repair\",\n  \"Motor Repair\",\n  \"Motorcycle Repair\",\n  \"Motorcycle Service\",\n  \"Mounting\",\n  \"Movement Classes\",\n  \"Movement Direction\",\n  \"Movement Therapy\",\n  \"Moving Services\",\n  \"Music Entertainment\",\n  \"Music Lessons\",\n  \"Music Lessons (Online)\",\n  \"Music Production\",\n  \"Musical Repairs\",\n  \"Musical Training\",\n  \"Museum Docent\",\n  \"Nail Technician\",\n  \"Nanny Services\",\n  \"Narration\",\n  \"Native Apps\",\n  \"Network Administration\",\n  \"Network Cabling Installation\",\n  \"Network Setup\",\n  \"Network Troubleshooting\",\n  \"Newsletter Design\",\n  \"NFT Creation & Management\",\n  \"NFT Minting\",\n  \"NLP Models\",\n  \"Noise Reduction\",\n  \"Nutrition Coaching (Online)\",\n  \"Obedience Training\",\n  \"Object Repair\",\n  \"Occupational Therapy\",\n  \"Office Furniture Setup\",\n  \"Office Support\",\n  \"Oil Change Service\",\n  \"Online Advertising\",\n  \"Online Commerce\",\n  \"Online Development\",\n  \"Online Fitness\",\n  \"Online Music Teaching\",\n  \"Online Reputation\",\n  \"Online Store Management\",\n  \"Online Tutoring (Academic)\",\n  \"Open House Hosting\",\n  \"Opening Installation\",\n  \"Opener Repair\",\n  \"Opinion Pieces\",\n  \"Outdoor Building\",\n  \"Outdoor Flooring\",\n  \"Overnight Care\",\n  \"Package Transport\",\n  \"Packing Services\",\n  \"Panel Installation\",\n  \"Panel Replacement\",\n  \"Pants Hemming\",\n  \"Parking Attendant\",\n  \"Part Time Nanny\",\n  \"Partner Marketing\",\n  \"Partnership Marketing\",\n  \"Pastry Catering\",\n  \"Pastry Service\",\n  \"Path Construction\",\n  \"Patio Installation\",\n  \"Patrol Services\",\n  \"Pattern Making\",\n  \"Pattern Matching\",\n  \"Paver Patios\",\n  \"Payment Gateway Integration\",\n  \"Pay-Per-Click (PPC) Management\",\n  \"PC Repair\",\n  \"People Management\",\n  \"Performance Art\",\n  \"Performance Marketing\",\n  \"Performance Tuning\",\n  \"Personal Assistant\",\n  \"Personal Care Assistant\",\n  \"Personal Coaching\",\n  \"Personal Development\",\n  \"Personal Ornament Repair\",\n  \"Personal Shopping\",\n  \"Personal Tasks\",\n  \"Personal Training\",\n  \"Personal Yoga\",\n  \"Pest Control\",\n  \"Pest Elimination\",\n  \"Pet Boarding\",\n  \"Pet Care\",\n  \"Pet Cleanup\",\n  \"Pet Exercise\",\n  \"Pet Grooming\",\n  \"Pet Lodging\",\n  \"Pet Sitting\",\n  \"Pet Waste Management\",\n  \"Pet Waste Removal\",\n  \"Photo Services\",\n  \"Photography\",\n  \"Physical Therapy\",\n  \"Piano Lessons\",\n  \"Piano Tuning\",\n  \"Picture Display\",\n  \"Picture Framing\",\n  \"Pilates Instruction\",\n  \"Pipe Installation\",\n  \"Pitch Decks\",\n  \"Pitch Raise\",\n  \"Plant Arrangement\",\n  \"Plant Care\",\n  \"Plant Installation\",\n  \"Plant Maintenance\",\n  \"Plated Dinner\",\n  \"Platform Construction\",\n  \"Plumbing\",\n  \"Podcast Editing\",\n  \"Podcast Production\",\n  \"Policy Enforcement\",\n  \"Pond Maintenance\",\n  \"Pool Cleaning\",\n  \"Pool Maintenance\",\n  \"Portable Time Device Service\",\n  \"Portrait Photography\",\n  \"Post Construction\",\n  \"Post Surgery Rehab\",\n  \"Posture Correction\",\n  \"Power Repair\",\n  \"PPC Management\",\n  \"Predictive Modeling\",\n  \"Presentation & Slide Design\",\n  \"Pressure Treated Decks\",\n  \"Pressure Washing\",\n  \"Print Design\",\n  \"Private Chef\",\n  \"Problem Solving\",\n  \"Process Analysis\",\n  \"Process Mapping\",\n  \"Product Descriptions\",\n  \"Product Management\",\n  \"Product Modeling\",\n  \"Product Photography\",\n  \"Product Visualization\",\n  \"Programming\",\n  \"Progress Reporting\",\n  \"Progress Tracking\",\n  \"Project Management\",\n  \"Project Planning\",\n  \"Projector Setup\",\n  \"Promotional Strategy\",\n  \"Proofreading & Editing\",\n  \"Property Arrangement\",\n  \"Property Display\",\n  \"Property Inspection\",\n  \"Property Mowing\",\n  \"Property Staging\",\n  \"Property Tours\",\n  \"Property Walkthrough\",\n  \"Protection Installation\",\n  \"Protection Services\",\n  \"Pruning\",\n  \"Publication Design\",\n  \"Publication Writing\",\n  \"Puppy Training\",\n  \"QA Testing\",\n  \"Quality Assurance (QA) Testing\",\n  \"QuickBooks Setup\",\n  \"Raccoon Removal\",\n  \"Rain System Cleaning\",\n  \"RAM Upgrade\",\n  \"React Development\",\n  \"Real Estate Showing Agent\",\n  \"Reality Development\",\n  \"Reception Equipment\",\n  \"Recipe Ideas\",\n  \"Recharge\",\n  \"Recycling Pickup\",\n  \"Refrigerator Repair\",\n  \"Reformer Pilates\",\n  \"Relocation Services\",\n  \"Remote Music Teaching\",\n  \"Remote Support\",\n  \"Renewable Energy\",\n  \"Replacement Windows\",\n  \"Reporting Dashboards\",\n  \"Reptile Control\",\n  \"Reptile Removal\",\n  \"Requirement Gathering\",\n  \"Requirements Analysis\",\n  \"Residential Mowing\",\n  \"RESTful APIs\",\n  \"Restoration Service\",\n  \"Resume & CV Writing\",\n  \"Resume Writing\",\n  \"Retention Strategies\",\n  \"Ring Resizing\",\n  \"Roadmap Planning\",\n  \"Roadside Assistance\",\n  \"Robotic Process Automation (RPA) Development\",\n  \"Rodent Control\",\n  \"ROI Assessment\",\n  \"Roof Antenna\",\n  \"Roof Cleaning\",\n  \"Roof Inspection\",\n  \"Roof Replacement\",\n  \"Roof Service\",\n  \"Roofing\",\n  \"Room Design\",\n  \"RPA Development\",\n  \"Rug Installation\",\n  \"Safe Installation\",\n  \"Safety Equipment\",\n  \"Safety Equipment Service\",\n  \"Safety Management\",\n  \"Safety Systems\",\n  \"Sales Copy\",\n  \"Sales Pages\",\n  \"Same Day Delivery\",\n  \"Satellite Dish Installation\",\n  \"Scaffolding Setup\",\n  \"Scene Sketches\",\n  \"Scenic Painting\",\n  \"Screen Replacement\",\n  \"Screenplays\",\n  \"Scriptwriting\",\n  \"Search Engine Optimization (SEO)\",\n  \"Seating Repair\",\n  \"Seating Restoration\",\n  \"Security Audit\",\n  \"Security Guard Services\",\n  \"Security Installation\",\n  \"Security Management\",\n  \"Security Service\",\n  \"Security Storage\",\n  \"Security System Installation\",\n  \"Sensor Placement\",\n  \"SEO Content Writing\",\n  \"SEO Writing\",\n  \"Server Development\",\n  \"Service Integration\",\n  \"Service Staff\",\n  \"Set Construction\",\n  \"Set Design\",\n  \"Sewing Services\",\n  \"Shaping Services\",\n  \"Shed Removal\",\n  \"Sheet Metal Bending\",\n  \"Shingle Replacement\",\n  \"Shipping API\",\n  \"Shirt Pressing\",\n  \"Shoe Repair\",\n  \"Shopify Setup\",\n  \"Shower Tiling\",\n  \"Signal Booster\",\n  \"Signal Equipment\",\n  \"Signal Reception\",\n  \"Signature Cocktails\",\n  \"Site Assessment\",\n  \"Site Cleanup\",\n  \"Site Selection\",\n  \"Skimming Service\",\n  \"Sky Photography\",\n  \"Small Engine Repair\",\n  \"Small Repairs\",\n  \"Smart Contract Coding\",\n  \"Smart Contract Development\",\n  \"Snake Catching\",\n  \"Snake Identification\",\n  \"Snake Removal\",\n  \"Snow Removal\",\n  \"Soccer Coach\",\n  \"Social Media Management\",\n  \"Social Parties\",\n  \"Social Strategy\",\n  \"Sod Installation\",\n  \"Sofa Reupholstery\",\n  \"Software Architecture\",\n  \"Software Engineering\",\n  \"Software Testing & Bug Fixing\",\n  \"Software Troubleshooting\",\n  \"Solar Panel Installation\",\n  \"Sole Repair\",\n  \"Solidity Contracts\",\n  \"Sound Design & Mixing\",\n  \"Sound Effects\",\n  \"Sound Entertainment\",\n  \"Sound Equipment\",\n  \"Sound Equipment Repair\",\n  \"Sound Setup\",\n  \"Sound System Rental\",\n  \"Sound Training\",\n  \"Space Organization\",\n  \"Space Planning\",\n  \"Spatial Analysis\",\n  \"Special Effects\",\n  \"Speech Therapy\",\n  \"Spinal Adjustment\",\n  \"Sports Coaching\",\n  \"Sports Injury Rehab\",\n  \"Spray Foam\",\n  \"Sprinkler Inspection\",\n  \"Sprinkler Setup\",\n  \"Stage Crew\",\n  \"Stage Design\",\n  \"Stage Lighting\",\n  \"Stage Lighting Design\",\n  \"Stagehand\",\n  \"Stain Removal\",\n  \"Standard Tuning\",\n  \"Statistical Modeling\",\n  \"Steam Cleaning\",\n  \"Steam Pressing\",\n  \"Stone Installation\",\n  \"Stone Veneer\",\n  \"Storage Installation\",\n  \"Storage Organization\",\n  \"Store Optimization\",\n  \"Storyboard Art\",\n  \"Storyboarding\",\n  \"Story Reading\",\n  \"Story Visualization\",\n  \"Story Writing\",\n  \"Strength Training\",\n  \"String Instrument Repair\",\n  \"Stroke Improvement\",\n  \"Structure Assessment\",\n  \"Structure Removal\",\n  \"Structure Repair\",\n  \"Subject Tutoring\",\n  \"Subtitle Addition\",\n  \"Subtitle Sync\",\n  \"Subtitling & Captioning\",\n  \"Support Structure\",\n  \"Surface Cleaning\",\n  \"Surface Installation\",\n  \"Surface Marking\",\n  \"Surface Prep\",\n  \"Surface Repair\",\n  \"Surveillance\",\n  \"Survey Design\",\n  \"Swarm Relocation\",\n  \"Swedish Massage\",\n  \"Swim Instruction\",\n  \"Synthetic Oil\",\n  \"System Architecture\",\n  \"System Design\",\n  \"System Integration\",\n  \"System Management\",\n  \"System Updates\",\n  \"Tailoring\",\n  \"Talent Acquisition\",\n  \"Taping and Mudding\",\n  \"Task Automation\",\n  \"Task Management\",\n  \"Task Service\",\n  \"Tax Preparation & Advice\",\n  \"Technical Drawing (Digital)\",\n  \"Technical Illustration\",\n  \"Technical SEO\",\n  \"Technical Support\",\n  \"Technical Writing\",\n  \"Technology Assistance\",\n  \"Technology Design\",\n  \"Technology Support\",\n  \"Template Creation\",\n  \"Template Design\",\n  \"Temporary Vehicle Care\",\n  \"Text Conversion\",\n  \"Text Review\",\n  \"Texture Matching\",\n  \"Therapeutic Massage\",\n  \"Thermal Installation\",\n  \"Third Party Integration\",\n  \"TIG Welding\",\n  \"Tile Setting\",\n  \"Time Device Repair\",\n  \"Timepiece Repair\",\n  \"Timepiece Service\",\n  \"Tire Installation\",\n  \"Token Creation\",\n  \"Tour Guide\",\n  \"Tow Truck Service\",\n  \"Traffic Control\",\n  \"Training and Support\",\n  \"Transcription\",\n  \"Translation\",\n  \"Transparency Treatment\",\n  \"Transplanting\",\n  \"Transport Service\",\n  \"Transportation Service\",\n  \"Trash Pickup\",\n  \"Travel Guide\",\n  \"Tree Planting\",\n  \"Tree Removal\",\n  \"Tree Trimming\",\n  \"Trophy Engraving\",\n  \"UI Development\",\n  \"UI Optimization\",\n  \"Unit Testing\",\n  \"Upholstery Repair\",\n  \"User Experience\",\n  \"User Manuals\",\n  \"User Research\",\n  \"User Testing\",\n  \"UX/UI Design\",\n  \"Valuation Models\",\n  \"Valet Parking\",\n  \"Vehicle Cleaning\",\n  \"Vehicle Greeting\",\n  \"Vehicle Movement\",\n  \"Vehicle Repair\",\n  \"Vehicle Retrieval\",\n  \"Vehicle Service\",\n  \"Vehicle Transport\",\n  \"Veterinary Technician\",\n  \"Video Animation\",\n  \"Video Captions\",\n  \"Video Editing\",\n  \"Video Production\",\n  \"Video Services\",\n  \"Video Workouts\",\n  \"Videography\",\n  \"Vinyasa Flow\",\n  \"Virtual Assistance\",\n  \"Virtual Piano Lessons\",\n  \"Vital Sign Monitoring\",\n  \"Vocal Coaching\",\n  \"Voice Acting\",\n  \"Voice Therapy\",\n  \"VPN Management\",\n  \"VR Experience Design\",\n  \"Vulnerability Assessment\",\n  \"Waitstaff Services\",\n  \"Wall Covering\",\n  \"Wall Decoration\",\n  \"Wall Hanging\",\n  \"Wall Installation\",\n  \"Wall Repair\",\n  \"Wall Safe\",\n  \"Wall Stabilization\",\n  \"Wall Tiling\",\n  \"Wallpaper Installation\",\n  \"Wardrobe Design\",\n  \"Wash and Fold\",\n  \"Wash and Press\",\n  \"Washer Repair\",\n  \"Washer Setup\",\n  \"Waste Disposal\",\n  \"Watch Battery\",\n  \"Watch Repair\",\n  \"Water Change\",\n  \"Water Cleaning\",\n  \"Water Feature Care\",\n  \"Water Garden Care\",\n  \"Water Installation\",\n  \"Water Repair\",\n  \"Water Training\",\n  \"Water Vehicle Repair\",\n  \"Watering Systems\",\n  \"Weather Removal\",\n  \"Web Development\",\n  \"Website Build\",\n  \"Website Copy\",\n  \"Website Localization\",\n  \"Website Optimization\",\n  \"Wedding DJ\",\n  \"Wedding Florals\",\n  \"Wedding Planning\",\n  \"Weeding\",\n  \"Weekly Meal Prep\",\n  \"Weight Loss Coaching\",\n  \"Welding\",\n  \"Wellness Coaching\",\n  \"Wheel Installation\",\n  \"Wheel Service\",\n  \"White Papers\",\n  \"Whiteboard Animation\",\n  \"Wild Animal Management\",\n  \"Wilderness First Aid\",\n  \"Wildlife Control\",\n  \"Window Cleaning\",\n  \"Window Installation\",\n  \"Window Service\",\n  \"Window Tinting\",\n  \"Windshield Install\",\n  \"Windshield Replacement\",\n  \"Wired Alarm\",\n  \"Wireless Alarm\",\n  \"Wiring Fix\",\n  \"Wood Construction\",\n  \"Wood Fence\",\n  \"Wood Refinishing\",\n  \"Woodwork\",\n  \"Work Therapy\",\n  \"Workflow Automation\",\n  \"Workplace Ergonomics\",\n  \"Writing Service\",\n  \"Written Content\",\n  \"Yard Scooping\",\n  \"Yoga Instruction\",\n  \"Youth Care\",\n  \"Youth Supervision\",\n  \"eCommerce Store Setup & Management\"\n];\n\n// Export categories without \"All Categories\" for specific use cases\nexport const categoriesWithoutAll = jobCategories.filter(category => category !== \"All Categories\");","size_bytes":25539},"shared/cities.ts":{"content":"// JIGZ World Cities Database - Optimized Version\n// 151847 locations from 208 countries\n\nexport const topCities = [\n  \"All Locations\",\n  \"Aach, Germany\",\n  \"Aalden, Netherlands\",\n  \"Aalen, Germany\",\n  \"Abbateggio, Italy\",\n  \"Abbeville, United States\",\n  \"Abbey Wood, United Kingdom\",\n  \"Abbots Bromley, United Kingdom\",\n  \"Abbots Langley, United Kingdom\",\n  \"Abbotskerswell, United Kingdom\",\n  \"Abbotts Ann, United Kingdom\",\n  \"Abegondo, Spain\",\n  \"Aberford, United Kingdom\",\n  \"Abingdon, United Kingdom\",\n  \"Abondance, France\",\n  \"Abram, United Kingdom\",\n  \"Abrest, France\",\n  \"Abridge, United Kingdom\",\n  \"Abstatt, Germany\",\n  \"Abtsgmünd, Germany\",\n  \"Acciano, Italy\",\n  \"Accrington, United Kingdom\",\n  \"Achern, Germany\",\n  \"Achstetten, Germany\",\n  \"Acklington, United Kingdom\",\n  \"Acle, United Kingdom\",\n  \"Acocks Green, United Kingdom\",\n  \"Acomb, United Kingdom\",\n  \"Acrelândia, Brazil\",\n  \"Acton, Australia\",\n  \"Acton, United Kingdom\",\n  \"Adamsville, United States\",\n  \"Addanki, India\",\n  \"Adderbury, United Kingdom\",\n  \"Addingham, United Kingdom\",\n  \"Addlestone, United Kingdom\",\n  \"Adelberg, Germany\",\n  \"Adelmannsfelden, Germany\",\n  \"Adelsheim, Germany\",\n  \"Adlington, United Kingdom\",\n  \"Adoni, India\",\n  \"Adwick le Street, United Kingdom\",\n  \"Affalterbach, Germany\",\n  \"Aglasterhausen, Germany\",\n  \"Aguascalientes, Mexico\",\n  \"Aichelberg, Germany\",\n  \"Aichhalden, Germany\",\n  \"Aichstetten, Germany\",\n  \"Aidlingen, Germany\",\n  \"Aielli, Italy\",\n  \"Aigueblanche, France\",\n  \"Aigueperse, France\",\n  \"Aime, France\",\n  \"Ainay-le-Château, France\",\n  \"Ainslie, Australia\",\n  \"Airdrie, Canada\",\n  \"Airmyn, United Kingdom\",\n  \"Aisai-shi, Japan\",\n  \"Aiton, France\",\n  \"Aitrach, Germany\",\n  \"Aix-les-Bains, France\",\n  \"Akasahebpet, India\",\n  \"Akividu, India\",\n  \"Akkarampalle, India\",\n  \"Alabaster, United States\",\n  \"Alanno, Italy\",\n  \"Alba Adriatica, Italy\",\n  \"Alba-la-Romaine, France\",\n  \"Albbruck, Germany\",\n  \"Albens, France\",\n  \"Albershausen, Germany\",\n  \"Albertville, France\",\n  \"Albertville, United States\",\n  \"Albigny-sur-Saône, France\",\n  \"Albrighton, United Kingdom\",\n  \"Albstadt, Germany\",\n  \"Alby-sur-Chéran, France\",\n  \"Alcester, United Kingdom\",\n  \"Alconbury, United Kingdom\",\n  \"Aldbourne, United Kingdom\",\n  \"Aldingen, Germany\",\n  \"Alexander City, United States\",\n  \"Alexandria, United States\",\n  \"Alfedena, Italy\",\n  \"Aliceville, United States\",\n  \"Alissas, France\",\n  \"Alixan, France\",\n  \"Allan, France\",\n  \"Allanche, France\",\n  \"Allevard, France\",\n  \"Allex, France\",\n  \"Allègre, France\",\n  \"Altino, Italy\",\n  \"Ama-gun, Japan\",\n  \"Amalapuram, India\",\n  \"Amaroo, Australia\",\n  \"Amudalavalasa, India\",\n  \"Amés, Spain\",\n  \"Anakapalle, India\",\n  \"Anantapur, India\",\n  \"Ancarano, Italy\",\n  \"Andalusia, United States\",\n  \"Angelslo, Netherlands\",\n  \"Anjō-shi, Japan\",\n  \"Annen, Netherlands\",\n  \"Anniston, United States\",\n  \"Anqing Shi, China\",\n  \"Anqing, China\",\n  \"Anversa degli Abruzzi, Italy\",\n  \"Arab, United States\",\n  \"Aranda, Australia\",\n  \"Aranga, Spain\",\n  \"Arboledas Paso Blanco [Fraccionamiento], Mexico\",\n  \"Archi, Italy\",\n  \"Arellano, Mexico\",\n  \"Ares, Spain\",\n  \"Argo, United States\",\n  \"Ari, Italy\",\n  \"Arielli, Italy\",\n  \"Arsita, Italy\",\n  \"Arteixo, Spain\",\n  \"Arzúa, Spain\",\n  \"As Pontes de García Rodríguez, Spain\",\n  \"Ashford, United States\",\n  \"Ashland, United States\",\n  \"Ashville, United States\",\n  \"Asientos, Mexico\",\n  \"Assen, Netherlands\",\n  \"Assis Brasil, Brazil\",\n  \"Ateleta, Italy\",\n  \"Atessa, Italy\",\n  \"Athabasca, Canada\",\n  \"Athens, United States\",\n  \"Atmakur, India\",\n  \"Atmore, United States\",\n  \"Attalla, United States\",\n  \"Attili, India\",\n  \"Auburn, United States\",\n  \"Auckland, New Zealand\",\n  \"Autauga County, United States\",\n  \"Avanigadda, India\",\n  \"Badvel, India\",\n  \"Baldwin County, United States\",\n  \"Ballast, Netherlands\",\n  \"Ballplay, United States\",\n  \"Bamboo Flat, India\",\n  \"Banff, Canada\",\n  \"Banganapalle, India\",\n  \"Banks, Australia\",\n  \"Bapatla, India\",\n  \"Barbour County, United States\",\n  \"Barger-Oosterveld, Netherlands\",\n  \"Bargeres, Netherlands\",\n  \"Barrhead, Canada\",\n  \"Barton, Australia\",\n  \"Bassano, Canada\",\n  \"Bay Minette, United States\",\n  \"Bayou La Batre, United States\",\n  \"Baña A, Spain\",\n  \"Bear Creek, United States\",\n  \"Beaumont, Canada\",\n  \"Beaverlodge, Canada\",\n  \"Beilen, Netherlands\",\n  \"Belconnen, Australia\",\n  \"Bengbu, China\",\n  \"Bergondo, Spain\",\n  \"Berry, United States\",\n  \"Bessemer, United States\",\n  \"Betamcherla, India\",\n  \"Betanzos, Spain\",\n  \"Bibb County, United States\",\n  \"Bimbaletes Aguascalientes (El Álamo), Mexico\",\n  \"Birmingham, United States\",\n  \"Black Diamond, Canada\",\n  \"Blackfalds, Canada\",\n  \"Blount County, United States\",\n  \"Blountsville, United States\",\n  \"Blue Ridge, United States\",\n  \"Boaz, United States\",\n  \"Boimorto, Spain\",\n  \"Boiro, Spain\",\n  \"Bon Accord, Canada\",\n  \"Bonner, Australia\",\n  \"Bonnyville, Canada\",\n  \"Bonython, Australia\",\n  \"Boqueixón, Spain\",\n  \"Borger, Netherlands\",\n  \"Bow Island, Canada\",\n  \"Bozhou, China\",\n  \"Braddon, Australia\",\n  \"Brasiléia, Brazil\",\n  \"Brent, United States\",\n  \"Brewton, United States\",\n  \"Bridgeport, United States\",\n  \"Brighton, United States\",\n  \"Brión, Spain\",\n  \"Brook Highland, United States\",\n  \"Brooks, Canada\",\n  \"Brookside, United States\",\n  \"Brookwood, United States\",\n  \"Bruce, Australia\",\n  \"Brundidge, United States\",\n  \"Bujari, Brazil\",\n  \"Bullock County, United States\",\n  \"Butler County, United States\",\n  \"Butler, United States\",\n  \"Bynum, United States\",\n  \"Cabana de Bergantiños, Spain\",\n  \"Cahaba Heights, United States\",\n  \"Calera, United States\",\n  \"Calgary, Canada\",\n  \"Calhoun County, United States\",\n  \"Calmar, Canada\",\n  \"Calvillo, Mexico\",\n  \"Calwell, Australia\",\n  \"Camden, United States\",\n  \"Campbell, Australia\",\n  \"Camrose, Canada\",\n  \"Canberra, Australia\",\n  \"Canmore, Canada\",\n  \"Capixaba, Brazil\",\n  \"Carbon Hill, United States\",\n  \"Carboneras, Mexico\",\n  \"Cardston, Canada\",\n  \"Carlisle-Rockledge, United States\",\n  \"Carrollton, United States\",\n  \"Carstairs, Canada\",\n  \"Cartagena [Fraccionamiento], Mexico\",\n  \"Casey, Australia\",\n  \"Cedar Bluff, United States\",\n  \"Center Point, United States\",\n  \"Centre, United States\",\n  \"Centreville, United States\",\n  \"Centro de Arriba, Mexico\",\n  \"Chalkville, United States\",\n  \"Chambers County, United States\",\n  \"Chaohu, China\",\n  \"Chapman, Australia\",\n  \"Charnwood, Australia\",\n  \"Chatom, United States\",\n  \"Chelsea, United States\",\n  \"Cherokee County, United States\",\n  \"Cherokee, United States\",\n  \"Chestermere, Canada\",\n  \"Chickasaw, United States\",\n  \"Chifley, Australia\",\n  \"Childersburg, United States\",\n  \"Chilton County, United States\",\n  \"Chiryū, Japan\",\n  \"Chiryū-shi, Japan\",\n  \"Chisholm, Australia\",\n  \"Chita, Japan\",\n  \"Chita-shi, Japan\",\n  \"Chizhou Shi, China\",\n  \"Chizhou, China\",\n  \"Choccolocco, United States\",\n  \"Choctaw County, United States\",\n  \"Chuzhou Shi, China\",\n  \"Chuzhou, China\",\n  \"Citronelle, United States\",\n  \"City, Australia\",\n  \"Ciénega Grande, Mexico\",\n  \"Clanton, United States\",\n  \"Claresholm, Canada\",\n  \"Clarke County, United States\",\n  \"Clay County, United States\",\n  \"Clay, United States\",\n  \"Clayton, United States\",\n  \"Cleburne County, United States\",\n  \"Cleveland, United States\",\n  \"Clio, United States\",\n  \"Coaldale, Canada\",\n  \"Coalhurst, Canada\",\n  \"Coaling, United States\",\n  \"Cochrane, Canada\",\n  \"Coevorden, Netherlands\",\n  \"Coffee County, United States\",\n  \"Colbert County, United States\",\n  \"Cold Lake, Canada\",\n  \"Collinsville, United States\",\n  \"Corral de Barrancos, Mexico\",\n  \"Cosío, Mexico\",\n  \"Crossfield, Canada\",\n  \"Cruzeiro do Sul, Brazil\",\n  \"Dalen, Netherlands\",\n  \"Datong, China\",\n  \"De Loo, Netherlands\",\n  \"Devon, Canada\",\n  \"Didsbury, Canada\",\n  \"Drayton Valley, Canada\",\n  \"Edmonton, Canada\",\n  \"Epitaciolândia, Brazil\",\n  \"Feijó, Brazil\",\n  \"Fuyang Shi, China\",\n  \"Fuyang, China\",\n  \"Gamagōri, Japan\",\n  \"Gamagōri-shi, Japan\",\n  \"Gushu, China\",\n  \"Handa, Japan\",\n  \"Handa-shi, Japan\",\n  \"Hefei Shi, China\",\n  \"Hefei, China\",\n  \"Hekinan, Japan\",\n  \"Hekinan-shi, Japan\",\n  \"Huaibei, China\",\n  \"Huainan Shi, China\",\n  \"Huainan, China\",\n  \"Huaiyuan Chengguanzhen, China\",\n  \"Huangshan Shi, China\",\n  \"Huangshan, China\",\n  \"Huoqiu Chengguanzhen, China\",\n  \"Ichinomiya, Japan\",\n  \"Ichinomiya-shi, Japan\",\n  \"Jieshou, China\",\n  \"Jordão, Brazil\",\n  \"Lucheng, China\",\n  \"Lu’an, China\",\n  \"Mangere, New Zealand\",\n  \"Manoel Urbano, Brazil\",\n  \"Manukau City, New Zealand\",\n  \"Marechal Thaumaturgo, Brazil\",\n  \"Muriwai Beach, New Zealand\",\n  \"Murrays Bay, New Zealand\",\n  \"Mâncio Lima, Brazil\",\n  \"Nicobar, India\",\n  \"North Shore, New Zealand\",\n  \"Pakuranga, New Zealand\",\n  \"Papakura, New Zealand\",\n  \"Parakai, New Zealand\",\n  \"Plácido de Castro, Brazil\",\n  \"Port Blair, India\",\n  \"Porto Acre, Brazil\",\n  \"Porto Walter, Brazil\",\n  \"Pukekohe East, New Zealand\",\n  \"South Andaman, India\"\n];\n\nexport const citiesWithoutAll = topCities.filter(city => city !== \"All Locations\");\n\nexport const allWorldCities = [\n  \"Ashkāsham, Afghanistan\",\n  \"Fayzabad, Afghanistan\",\n  \"Jurm, Afghanistan\",\n  \"Khandūd, Afghanistan\",\n  \"Rāghistān, Afghanistan\",\n  \"Wākhān, Afghanistan\",\n  \"Ghormach, Afghanistan\",\n  \"Qala i Naw, Afghanistan\",\n  \"Baghlān, Afghanistan\",\n  \"Ḩukūmatī Dahanah-ye Ghōrī, Afghanistan\",\n  \"Nahrīn, Afghanistan\",\n  \"Pul-e Khumrī, Afghanistan\",\n  \"Balkh, Afghanistan\",\n  \"Dowlatābād, Afghanistan\",\n  \"Khulm, Afghanistan\",\n  \"Lab-Sar, Afghanistan\",\n  \"Mazār-e Sharīf, Afghanistan\",\n  \"Qarchī Gak, Afghanistan\",\n  \"Bāmyān, Afghanistan\",\n  \"Panjāb, Afghanistan\",\n  \"Nīlī, Afghanistan\",\n  \"Farah, Afghanistan\",\n  \"Andkhoy, Afghanistan\",\n  \"Maymana, Afghanistan\",\n  \"Ghazni, Afghanistan\",\n  \"Fayrōz Kōh, Afghanistan\",\n  \"Shahrak, Afghanistan\",\n  \"‘Alāqahdārī Dīshū, Afghanistan\",\n  \"Gereshk, Afghanistan\",\n  \"Lashkar Gāh, Afghanistan\",\n  \"Markaz-e Ḩukūmat-e Darwēshān, Afghanistan\",\n  \"Sangīn, Afghanistan\",\n  \"Chahār Burj, Afghanistan\",\n  \"Ghōriyān, Afghanistan\",\n  \"Herāt, Afghanistan\",\n  \"Kafir Qala, Afghanistan\",\n  \"Karukh, Afghanistan\",\n  \"Kuhsān, Afghanistan\",\n  \"Kushk, Afghanistan\",\n  \"Qarah Bāgh, Afghanistan\",\n  \"Shīnḏanḏ, Afghanistan\",\n  \"Tīr Pul, Afghanistan\",\n  \"Zindah Jān, Afghanistan\",\n  \"Āqchah, Afghanistan\",\n  \"Darzāb, Afghanistan\",\n  \"Qarqīn, Afghanistan\",\n  \"Shibirghān, Afghanistan\",\n  \"Kabul, Afghanistan\",\n  \"Mīr Bachah Kōṯ, Afghanistan\",\n  \"Paghmān, Afghanistan\",\n  \"Kandahār, Afghanistan\",\n  \"Sidqābād, Afghanistan\",\n  \"Khōst, Afghanistan\",\n  \"Asadabad, Afghanistan\",\n  \"Āsmār, Afghanistan\",\n  \"Dasht-e Archī, Afghanistan\",\n  \"Imām Şāḩib, Afghanistan\",\n  \"Khanabad, Afghanistan\",\n  \"Kunduz, Afghanistan\",\n  \"Qarāwul, Afghanistan\",\n  \"Mehtar Lām, Afghanistan\",\n  \"Baraki Barak, Afghanistan\",\n  \"Ḩukūmatī Azrah, Afghanistan\",\n  \"Pul-e ‘Alam, Afghanistan\",\n  \"Bāsawul, Afghanistan\",\n  \"Jalālābād, Afghanistan\",\n  \"Khāsh, Afghanistan\",\n  \"Mīrābād, Afghanistan\",\n  \"Rūdbār, Afghanistan\",\n  \"Zaranj, Afghanistan\",\n  \"Pārūn, Afghanistan\",\n  \"Gardez, Afghanistan\",\n  \"Saṟōbī, Afghanistan\",\n  \"Zaṟah Sharan, Afghanistan\",\n  \"Zarghūn Shahr, Afghanistan\",\n  \"Bāzārak, Afghanistan\",\n  \"Charikar, Afghanistan\",\n  \"Jabal os Saraj, Afghanistan\",\n  \"Aībak, Afghanistan\",\n  \"Chīras, Afghanistan\",\n  \"Larkird, Afghanistan\",\n  \"Qal‘ah-ye Shahr, Afghanistan\",\n  \"Sang-e Chārak, Afghanistan\",\n  \"Sar-e Pul, Afghanistan\",\n  \"Tagāw-Bāy, Afghanistan\",\n  \"Tukzār, Afghanistan\",\n  \"Ārt Khwājah, Afghanistan\",\n  \"Taloqan, Afghanistan\",\n  \"Tarinkot, Afghanistan\",\n  \"Uruzgān, Afghanistan\",\n  \"Qalāt, Afghanistan\",\n  \"Banaj, Albania\",\n  \"Bashkia Berat, Albania\",\n  \"Bashkia Kuçovë, Albania\",\n  \"Bashkia Poliçan, Albania\",\n  \"Bashkia Skrapar, Albania\",\n  \"Berat, Albania\",\n  \"Çorovodë, Albania\",\n  \"Kuçovë, Albania\",\n  \"Poliçan, Albania\",\n  \"Rrethi i Beratit, Albania\",\n  \"Rrethi i Kuçovës, Albania\",\n  \"Rrethi i Skraparit, Albania\",\n  \"Ura Vajgurore, Albania\",\n  \"Bashkia Bulqizë, Albania\",\n  \"Bashkia Klos, Albania\",\n  \"Bashkia Mat, Albania\",\n  \"Bulqizë, Albania\",\n  \"Burrel, Albania\",\n  \"Klos, Albania\",\n  \"Peshkopi, Albania\",\n  \"Rrethi i Bulqizës, Albania\",\n  \"Rrethi i Dibrës, Albania\",\n  \"Rrethi i Matit, Albania\",\n  \"Ulëz, Albania\",\n  \"Bashkia Durrës, Albania\",\n  \"Bashkia Krujë, Albania\",\n  \"Bashkia Shijak, Albania\",\n  \"Durrës, Albania\",\n  \"Durrës District, Albania\",\n  \"Fushë-Krujë, Albania\",\n  \"Krujë, Albania\",\n  \"Rrethi i Krujës, Albania\",\n  \"Shijak, Albania\",\n  \"Sukth, Albania\",\n  \"Ballsh, Albania\",\n  \"Bashkia Divjakë, Albania\",\n  \"Bashkia Fier, Albania\",\n  \"Bashkia Mallakastër, Albania\",\n  \"Bashkia Patos, Albania\",\n  \"Divjakë, Albania\",\n  \"Fier, Albania\",\n  \"Fier-Çifçi, Albania\",\n  \"Lushnjë, Albania\",\n  \"Patos, Albania\",\n  \"Patos Fshat, Albania\",\n  \"Roskovec, Albania\",\n  \"Rrethi i Mallakastrës, Albania\",\n  \"Bashkia Dropull, Albania\",\n  \"Bashkia Kelcyrë, Albania\",\n  \"Bashkia Libohovë, Albania\",\n  \"Bashkia Memaliaj, Albania\",\n  \"Bashkia Përmet, Albania\",\n  \"Bashkia Tepelenë, Albania\",\n  \"Gjinkar, Albania\",\n  \"Gjirokastër, Albania\",\n  \"Këlcyrë, Albania\",\n  \"Lazarat, Albania\",\n  \"Libohovë, Albania\",\n  \"Memaliaj, Albania\",\n  \"Përmet, Albania\",\n  \"Tepelenë, Albania\",\n  \"Bashkia Devoll, Albania\",\n  \"Bashkia Kolonjë, Albania\",\n  \"Bashkia Maliq, Albania\",\n  \"Bashkia Pustec, Albania\",\n  \"Bilisht, Albania\",\n  \"Ersekë, Albania\",\n  \"Korçë, Albania\",\n  \"Leskovik, Albania\",\n  \"Libonik, Albania\",\n  \"Maliq, Albania\",\n  \"Mborje, Albania\",\n  \"Pogradec, Albania\",\n  \"Rrethi i Devollit, Albania\",\n  \"Rrethi i Kolonjës, Albania\",\n  \"Velçan, Albania\",\n  \"Voskopojë, Albania\",\n  \"Bajram Curri, Albania\",\n  \"Krumë, Albania\",\n  \"Kukës, Albania\",\n  \"Rrethi i Hasit, Albania\",\n  \"Rrethi i Kukësit, Albania\",\n  \"Bashkia Kurbin, Albania\",\n  \"Bashkia Lezhë, Albania\",\n  \"Bashkia Mirditë, Albania\",\n  \"Kurbnesh, Albania\",\n  \"Laç, Albania\",\n  \"Lezhë, Albania\",\n  \"Mamurras, Albania\",\n  \"Milot, Albania\",\n  \"Rrëshen, Albania\",\n  \"Rrethi i Kurbinit, Albania\",\n  \"Rubik, Albania\",\n  \"Shëngjin, Albania\",\n  \"Bashkia Malësi e Madhe, Albania\",\n  \"Bashkia Pukë, Albania\",\n  \"Bashkia Vau i Dejës, Albania\",\n  \"Fushë-Arrëz, Albania\",\n  \"Koplik, Albania\",\n  \"Pukë, Albania\",\n  \"Rrethi i Malësia e Madhe, Albania\",\n  \"Rrethi i Shkodrës, Albania\",\n  \"Shkodër, Albania\",\n  \"Vau i Dejës, Albania\",\n  \"Vukatanë, Albania\",\n  \"Bashkia Kavajë, Albania\",\n  \"Bashkia Vorë, Albania\",\n  \"Kamëz, Albania\",\n  \"Kavajë, Albania\",\n  \"Krrabë, Albania\",\n  \"Rrethi i Kavajës, Albania\",\n  \"Rrethi i Tiranës, Albania\",\n  \"Rrogozhinë, Albania\",\n  \"Sinaballaj, Albania\",\n  \"Tirana, Albania\",\n  \"Vorë, Albania\",\n  \"Bashkia Finiq, Albania\",\n  \"Bashkia Himarë, Albania\",\n  \"Bashkia Konispol, Albania\",\n  \"Bashkia Selenicë, Albania\",\n  \"Bashkia Vlorë, Albania\",\n  \"Delvinë, Albania\",\n  \"Himarë, Albania\",\n  \"Konispol, Albania\",\n  \"Ksamil, Albania\",\n  \"Orikum, Albania\",\n  \"Rrethi i Delvinës, Albania\",\n  \"Sarandë, Albania\",\n  \"Selenicë, Albania\",\n  \"Vlorë, Albania\",\n  \"Adrar, Algeria\",\n  \"Aoulef, Algeria\",\n  \"Reggane, Algeria\",\n  \"Timimoun, Algeria\",\n  \"Aïn Defla, Algeria\",\n  \"El Abadia, Algeria\",\n  \"El Attaf, Algeria\",\n  \"Khemis Miliana, Algeria\",\n  \"Theniet el Had, Algeria\",\n  \"Aïn Temouchent, Algeria\",\n  \"Beni Saf, Algeria\",\n  \"El Amria, Algeria\",\n  \"El Malah, Algeria\",\n  \"Hammam Bou Hadjar, Algeria\",\n  \"Aïn Taya, Algeria\",\n  \"Algiers, Algeria\",\n  \"Bab Ezzouar, Algeria\",\n  \"Birkhadem, Algeria\",\n  \"Bordj el Kiffan, Algeria\",\n  \"Dar el Beïda, Algeria\",\n  \"Rouiba, Algeria\",\n  \"Annaba, Algeria\",\n  \"Berrahal, Algeria\",\n  \"Drean, Algeria\",\n  \"El Hadjar, Algeria\",\n  \"Aïn Touta, Algeria\",\n  \"Arris, Algeria\",\n  \"Barika, Algeria\",\n  \"Batna, Algeria\",\n  \"Boumagueur, Algeria\",\n  \"Merouana, Algeria\",\n  \"Râs el Aïoun, Algeria\",\n  \"Tazoult-Lambese, Algeria\",\n  \"Béchar, Algeria\",\n  \"Akbou, Algeria\",\n  \"Amizour, Algeria\",\n  \"Barbacha, Algeria\",\n  \"Bejaïa, Algeria\",\n  \"el hed, Algeria\",\n  \"El Kseur, Algeria\",\n  \"Feraoun, Algeria\",\n  \"Seddouk, Algeria\",\n  \"Biskra, Algeria\",\n  \"Oumache, Algeria\",\n  \"Sidi Khaled, Algeria\",\n  \"Sidi Okba, Algeria\",\n  \"Tolga, Algeria\",\n  \"Zeribet el Oued, Algeria\",\n  \"Beni Mered, Algeria\",\n  \"Blida, Algeria\",\n  \"Boû Arfa, Algeria\",\n  \"Boufarik, Algeria\",\n  \"Bougara, Algeria\",\n  \"Bouinan, Algeria\",\n  \"Chebli, Algeria\",\n  \"Chiffa, Algeria\",\n  \"Larbaâ, Algeria\",\n  \"Meftah, Algeria\",\n  \"Sidi Moussa, Algeria\",\n  \"Souma, Algeria\",\n  \"Bordj Bou Arreridj, Algeria\",\n  \"Bordj Ghdir, Algeria\",\n  \"Bordj Zemoura, Algeria\",\n  \"El Achir, Algeria\",\n  \"Mansourah, Algeria\",\n  \"Melouza, Algeria\",\n  \"Râs el Oued, Algeria\",\n  \"Aïn Bessem, Algeria\",\n  \"Bouïra, Algeria\",\n  \"Chorfa, Algeria\",\n  \"Draa el Mizan, Algeria\",\n  \"Lakhdaria, Algeria\",\n  \"Sour el Ghozlane, Algeria\",\n  \"Arbatache, Algeria\",\n  \"Beni Amrane, Algeria\",\n  \"Boudouaou, Algeria\",\n  \"Boumerdas, Algeria\",\n  \"Chabet el Ameur, Algeria\",\n  \"Dellys, Algeria\",\n  \"Khemis el Khechna, Algeria\",\n  \"Makouda, Algeria\",\n  \"Naciria, Algeria\",\n  \"Ouled Moussa, Algeria\",\n  \"Reghaïa, Algeria\",\n  \"Tadmaït, Algeria\",\n  \"Thenia, Algeria\",\n  \"Tizi Gheniff, Algeria\",\n  \"Abou el Hassan, Algeria\",\n  \"Boukadir, Algeria\",\n  \"Chlef, Algeria\",\n  \"Ech Chettia, Algeria\",\n  \"Oued Fodda, Algeria\",\n  \"Oued Sly, Algeria\",\n  \"Sidi Akkacha, Algeria\",\n  \"’Aïn Abid, Algeria\",\n  \"Aïn Smara, Algeria\",\n  \"Constantine, Algeria\",\n  \"Didouche Mourad, Algeria\",\n  \"El Khroub, Algeria\",\n  \"Hamma Bouziane, Algeria\",\n  \"’Aïn el Bell, Algeria\",\n  \"Aïn Oussera, Algeria\",\n  \"Birine, Algeria\",\n  \"Charef, Algeria\",\n  \"Dar Chioukh, Algeria\",\n  \"Djelfa, Algeria\",\n  \"El Idrissia, Algeria\",\n  \"Messaad, Algeria\",\n  \"Brezina, Algeria\",\n  \"El Abiodh Sidi Cheikh, Algeria\",\n  \"El Bayadh, Algeria\",\n  \"Debila, Algeria\",\n  \"El Oued, Algeria\",\n  \"Reguiba, Algeria\",\n  \"Robbah, Algeria\",\n  \"Ben Mehidi, Algeria\",\n  \"Besbes, Algeria\",\n  \"El Kala, Algeria\",\n  \"El Tarf, Algeria\",\n  \"Berriane, Algeria\",\n  \"Ghardaïa, Algeria\",\n  \"Metlili Chaamba, Algeria\",\n  \"Boumahra Ahmed, Algeria\",\n  \"Guelma, Algeria\",\n  \"Héliopolis, Algeria\",\n  \"Illizi, Algeria\",\n  \"Jijel, Algeria\",\n  \"Khenchela, Algeria\",\n  \"Aflou, Algeria\",\n  \"Laghouat, Algeria\",\n  \"‘Aïn el Hadjel, Algeria\",\n  \"’Aïn el Melh, Algeria\",\n  \"M’Sila, Algeria\",\n  \"Sidi Aïssa, Algeria\",\n  \"Bou Hanifia el Hamamat, Algeria\",\n  \"Mascara, Algeria\",\n  \"Oued el Abtal, Algeria\",\n  \"Sig, Algeria\",\n  \"’Aïn Boucif, Algeria\",\n  \"Berrouaghia, Algeria\",\n  \"Ksar el Boukhari, Algeria\",\n  \"Médéa, Algeria\",\n  \"Chelghoum el Aïd, Algeria\",\n  \"Mila, Algeria\",\n  \"Rouached, Algeria\",\n  \"Sidi Mérouane, Algeria\",\n  \"Telerghma, Algeria\",\n  \"Mostaganem, Algeria\",\n  \"Aïn Sefra, Algeria\",\n  \"Naama, Algeria\",\n  \"’Aïn el Turk, Algeria\",\n  \"Aïn el Bya, Algeria\",\n  \"Bir el Djir, Algeria\",\n  \"Bou Tlelis, Algeria\",\n  \"Es Senia, Algeria\",\n  \"Mers el Kebir, Algeria\",\n  \"Oran, Algeria\",\n  \"Sidi ech Chahmi, Algeria\",\n  \"Djamaa, Algeria\",\n  \"El Hadjira, Algeria\",\n  \"Hassi Messaoud, Algeria\",\n  \"Megarine, Algeria\",\n  \"Ouargla, Algeria\",\n  \"Rouissat, Algeria\",\n  \"Sidi Amrane, Algeria\",\n  \"Tebesbest, Algeria\",\n  \"Touggourt, Algeria\",\n  \"Aïn Beïda, Algeria\",\n  \"Aïn Fakroun, Algeria\",\n  \"Aïn Kercha, Algeria\",\n  \"El Aouinet, Algeria\",\n  \"Meskiana, Algeria\",\n  \"Oum el Bouaghi, Algeria\",\n  \"’Aïn Merane, Algeria\",\n  \"Ammi Moussa, Algeria\",\n  \"Djidiouia, Algeria\",\n  \"Mazouna, Algeria\",\n  \"Oued Rhiou, Algeria\",\n  \"Relizane, Algeria\",\n  \"Smala, Algeria\",\n  \"Zemoura, Algeria\",\n  \"’Aïn el Hadjar, Algeria\",\n  \"Saïda, Algeria\",\n  \"Aïn Arnat, Algeria\",\n  \"BABOR - VILLE, Algeria\",\n  \"Bougaa, Algeria\",\n  \"El Eulma, Algeria\",\n  \"Salah Bey, Algeria\",\n  \"Sétif, Algeria\",\n  \"Aïn El Berd District, Algeria\",\n  \"Balidat Ameur, Algeria\",\n  \"Belarbi, Algeria\",\n  \"Ben Badis Sid Bel Abbés, Algeria\",\n  \"Djamaa, Algeria\",\n  \"El Bour, Algeria\",\n  \"El Hadjira, Algeria\",\n  \"Haoud El Hamra, Algeria\",\n  \"Hassi Messaoud, Algeria\",\n  \"Lamtar, Algeria\",\n  \"Marhoum, Algeria\",\n  \"Megarine, Algeria\",\n  \"Merine, Algeria\",\n  \"Mezaourou, Algeria\",\n  \"Moggar, Algeria\",\n  \"Moulay Slissen, Algeria\",\n  \"N'Goussa, Algeria\",\n  \"Ouargla, Algeria\",\n  \"Rouissat, Algeria\",\n  \"Sfissef, Algeria\",\n  \"Sidi Ali Boussidi, Algeria\",\n  \"Sidi Amrane, Algeria\",\n  \"Sidi Bel Abbès, Algeria\",\n  \"Sidi Brahim, Algeria\",\n  \"Sidi Hamadouche, Algeria\",\n  \"Sidi Slimane, Algeria\",\n  \"Sidi Yacoub, Algeria\",\n  \"Sidi Yahia, Algeria\",\n  \"Tabia Sid Bel Abbés, Algeria\",\n  \"Taibet, Algeria\",\n  \"Tamellaht, Algeria\",\n  \"Tamerna Djedida, Algeria\",\n  \"Tebesbest, Algeria\",\n  \"Teghalimet, Algeria\",\n  \"Telagh, Algeria\",\n  \"Tenezara, Algeria\",\n  \"Tenira, Algeria\",\n  \"Tessala, Algeria\",\n  \"Touggourt, Algeria\",\n  \"Zerouala, Algeria\",\n  \"Azzaba, Algeria\",\n  \"Karkira, Algeria\",\n  \"Skikda, Algeria\",\n  \"Tamalous, Algeria\",\n  \"Sedrata, Algeria\",\n  \"Souk Ahras, Algeria\",\n  \"I-n-Salah, Algeria\",\n  \"Tamanrasset, Algeria\",\n  \"Bir el Ater, Algeria\",\n  \"Cheria, Algeria\",\n  \"Hammamet, Algeria\",\n  \"Tébessa, Algeria\",\n  \"’Aïn Deheb, Algeria\",\n  \"Djebilet Rosfa, Algeria\",\n  \"Frenda, Algeria\",\n  \"Ksar Chellala, Algeria\",\n  \"Mehdia daira de meghila, Algeria\",\n  \"Sougueur, Algeria\",\n  \"Tiaret, Algeria\",\n  \"Tindouf, Algeria\",\n  \"’Aïn Benian, Algeria\",\n  \"Baraki, Algeria\",\n  \"Bou Ismaïl, Algeria\",\n  \"Cheraga, Algeria\",\n  \"Douera, Algeria\",\n  \"El Affroun, Algeria\",\n  \"Hadjout, Algeria\",\n  \"Kolea, Algeria\",\n  \"Mouzaïa, Algeria\",\n  \"Oued el Alleug, Algeria\",\n  \"Saoula, Algeria\",\n  \"Tipasa, Algeria\",\n  \"Zeralda, Algeria\",\n  \"Lardjem, Algeria\",\n  \"Tissemsilt, Algeria\",\n  \"’Aïn el Hammam, Algeria\",\n  \"Arhribs, Algeria\",\n  \"Azazga, Algeria\",\n  \"Beni Douala, Algeria\",\n  \"Boghni, Algeria\",\n  \"Boudjima, Algeria\",\n  \"Chemini, Algeria\",\n  \"Draa Ben Khedda, Algeria\",\n  \"Freha, Algeria\",\n  \"Ighram, Algeria\",\n  \"L’Arbaa Naït Irathen, Algeria\",\n  \"Mekla, Algeria\",\n  \"Timizart, Algeria\",\n  \"Tirmitine, Algeria\",\n  \"Tizi Ouzou, Algeria\",\n  \"Tizi Rached, Algeria\",\n  \"Tizi-n-Tleta, Algeria\",\n  \"Beni Mester, Algeria\",\n  \"Bensekrane, Algeria\",\n  \"Chetouane, Algeria\",\n  \"Hennaya, Algeria\",\n  \"Mansoûra, Algeria\",\n  \"Nedroma, Algeria\",\n  \"Ouled Mimoun, Algeria\",\n  \"Remchi, Algeria\",\n  \"Sebdou, Algeria\",\n  \"Sidi Abdelli, Algeria\",\n  \"Sidi Senoussi سيدي سنوسي, Algeria\",\n  \"Tlemcen, Algeria\",\n  \"Ituʻau, American Samoa\",\n  \"Maʻoputasi, American Samoa\",\n  \"Saʻole, American Samoa\",\n  \"Sua, American Samoa\",\n  \"Vaifanua, American Samoa\",\n  \"Faleasao, American Samoa\",\n  \"Fitiuta, American Samoa\",\n  \"Ofu, American Samoa\",\n  \"Olosega, American Samoa\",\n  \"Tau, American Samoa\",\n  \"Lealataua, American Samoa\",\n  \"Leasina, American Samoa\",\n  \"Tualatai, American Samoa\",\n  \"Tualauta, American Samoa\",\n  \"Andorra la Vella, Andorra\",\n  \"Canillo, Andorra\",\n  \"El Tarter, Andorra\",\n  \"Encamp, Andorra\",\n  \"Pas de la Casa, Andorra\",\n  \"les Escaldes, Andorra\",\n  \"Arinsal, Andorra\",\n  \"la Massana, Andorra\",\n  \"Ordino, Andorra\",\n  \"Sant Julià de Lòria, Andorra\",\n  \"Ambriz, Angola\",\n  \"Bula Atumba, Angola\",\n  \"Caxito, Angola\",\n  \"Dande, Angola\",\n  \"Muxima, Angola\",\n  \"Nambuangongo, Angola\",\n  \"Pango Aluquém, Angola\",\n  \"Úcua, Angola\",\n  \"Baía Farta, Angola\",\n  \"Balombo, Angola\",\n  \"Benguela, Angola\",\n  \"Bocoio, Angola\",\n  \"Caimbambo, Angola\",\n  \"Catumbela, Angola\",\n  \"Chongoroi, Angola\",\n  \"Cubal, Angola\",\n  \"Ganda, Angola\",\n  \"Lobito, Angola\",\n  \"Sumbe, Angola\",\n  \"Camacupa, Angola\",\n  \"Catabola, Angola\",\n  \"Chissamba, Angola\",\n  \"Cuito, Angola\",\n  \"Cabinda, Angola\",\n  \"Menongue, Angola\",\n  \"Quibala, Angola\",\n  \"Sumbe, Angola\",\n  \"Uacu Cungo, Angola\",\n  \"Camabatela, Angola\",\n  \"N’dalatando, Angola\",\n  \"Ondjiva, Angola\",\n  \"Caála, Angola\",\n  \"Chela, Angola\",\n  \"Huambo, Angola\",\n  \"Longonjo, Angola\",\n  \"Caconda, Angola\",\n  \"Caluquembe, Angola\",\n  \"Chibia, Angola\",\n  \"Chicomba, Angola\",\n  \"Chipindo, Angola\",\n  \"Cuvango, Angola\",\n  \"Gambos, Angola\",\n  \"Humpata, Angola\",\n  \"Jamba, Angola\",\n  \"Lubango, Angola\",\n  \"Matala, Angola\",\n  \"Quilengues, Angola\",\n  \"Quipungo, Angola\",\n  \"Belas, Angola\",\n  \"Cacuaco, Angola\",\n  \"Cazenga, Angola\",\n  \"Icolo e Bengo, Angola\",\n  \"Luanda, Angola\",\n  \"Talatona, Angola\",\n  \"Viana, Angola\",\n  \"Lucapa, Angola\",\n  \"Cazaji, Angola\",\n  \"Saurimo, Angola\",\n  \"Malanje, Angola\",\n  \"Léua, Angola\",\n  \"Luau, Angola\",\n  \"Luena, Angola\",\n  \"Lumeje, Angola\",\n  \"Uíge, Angola\",\n  \"Mbanza Congo, Angola\",\n  \"N'zeto, Angola\",\n  \"Soio, Angola\",\n  \"Codrington, Antigua and Barbuda\",\n  \"Piggotts, Antigua and Barbuda\",\n  \"Potters Village, Antigua and Barbuda\",\n  \"Saint John’s, Antigua and Barbuda\",\n  \"Bolands, Antigua and Barbuda\",\n  \"Falmouth, Antigua and Barbuda\",\n  \"Liberta, Antigua and Barbuda\",\n  \"All Saints, Antigua and Barbuda\",\n  \"Parham, Antigua and Barbuda\",\n  \"Agronomía, Argentina\",\n  \"Almagro, Argentina\",\n  \"Balvanera, Argentina\",\n  \"Barracas, Argentina\",\n  \"Belgrano, Argentina\",\n  \"Boedo, Argentina\",\n  \"Caballito, Argentina\",\n  \"Chacarita, Argentina\",\n  \"Coghlan, Argentina\",\n  \"Colegiales, Argentina\",\n  \"Constitución, Argentina\",\n  \"Flores, Argentina\",\n  \"Floresta, Argentina\",\n  \"La Boca, Argentina\",\n  \"La Paternal, Argentina\",\n  \"Liniers, Argentina\",\n  \"Mataderos, Argentina\",\n  \"Monserrat, Argentina\",\n  \"Monte Castro, Argentina\",\n  \"Nueva Pompeya, Argentina\",\n  \"Núñez, Argentina\",\n  \"Palermo, Argentina\",\n  \"Parque Avellaneda, Argentina\",\n  \"Parque Chacabuco, Argentina\",\n  \"Parque Chas, Argentina\",\n  \"Parque Patricios, Argentina\",\n  \"Puerto Madero, Argentina\",\n  \"Recoleta, Argentina\",\n  \"Retiro, Argentina\",\n  \"Saavedra, Argentina\",\n  \"San Cristóbal, Argentina\",\n  \"San Nicolás, Argentina\",\n  \"San Telmo, Argentina\",\n  \"Vélez Sársfield, Argentina\",\n  \"Versalles, Argentina\",\n  \"Villa Crespo, Argentina\",\n  \"Villa del Parque, Argentina\",\n  \"Villa Devoto, Argentina\",\n  \"Villa General Mitre, Argentina\",\n  \"Villa Lugano, Argentina\",\n  \"Villa Luro, Argentina\",\n  \"Villa Ortúzar, Argentina\",\n  \"Villa Pueyrredón, Argentina\",\n  \"Villa Real, Argentina\",\n  \"Villa Riachuelo, Argentina\",\n  \"Villa Santa Rita, Argentina\",\n  \"Villa Soldati, Argentina\",\n  \"Villa Urquiza, Argentina\",\n  \"Adolfo Alsina, Argentina\",\n  \"Adolfo Gonzáles Chaves, Argentina\",\n  \"Alberti, Argentina\",\n  \"Almirante Brown, Argentina\",\n  \"Arrecifes, Argentina\",\n  \"Avellaneda, Argentina\",\n  \"Ayacucho, Argentina\",\n  \"Azul, Argentina\",\n  \"Bahía Blanca, Argentina\",\n  \"Balcarce, Argentina\",\n  \"Baradero, Argentina\",\n  \"Benito Juárez, Argentina\",\n  \"Berazategui, Argentina\",\n  \"Berisso, Argentina\",\n  \"Bolívar, Argentina\",\n  \"Bragado, Argentina\",\n  \"Brandsen, Argentina\",\n  \"Campana, Argentina\",\n  \"Cañuelas, Argentina\",\n  \"Capitán Sarmiento, Argentina\",\n  \"Carlos Casares, Argentina\",\n  \"Carlos Tejedor, Argentina\",\n  \"Carmen de Areco, Argentina\",\n  \"Castelli, Argentina\",\n  \"Chacabuco, Argentina\",\n  \"Chascomús, Argentina\",\n  \"Chivilcoy, Argentina\",\n  \"Colón, Argentina\",\n  \"Coronel Dorrego, Argentina\",\n  \"Coronel Pringles, Argentina\",\n  \"Coronel Rosales, Argentina\",\n  \"Coronel Suárez, Argentina\",\n  \"Daireaux, Argentina\",\n  \"Dolores, Argentina\",\n  \"Ensenada, Argentina\",\n  \"Escobar, Argentina\",\n  \"Esteban Echeverríar, Argentina\",\n  \"Exaltación de la Cruz, Argentina\",\n  \"Ezeiza, Argentina\",\n  \"Florencio Varela, Argentina\",\n  \"Florentino Ameghino, Argentina\",\n  \"General Alvarado, Argentina\",\n  \"General Alvear, Argentina\",\n  \"General Arenales, Argentina\",\n  \"General Belgrano, Argentina\",\n  \"General Guido, Argentina\",\n  \"General La Madrid, Argentina\",\n  \"General Las Heras, Argentina\",\n  \"General Lavalle, Argentina\",\n  \"General Madariaga, Argentina\",\n  \"General Paz, Argentina\",\n  \"General Pinto, Argentina\",\n  \"General Pueyrredón, Argentina\",\n  \"General Rodríguez, Argentina\",\n  \"General San Martín, Argentina\",\n  \"General Viamonte, Argentina\",\n  \"General Villegas, Argentina\",\n  \"Guaminí, Argentina\",\n  \"Hipólito Yrigoyen, Argentina\",\n  \"Hurlingham, Argentina\",\n  \"Ituzaingó, Argentina\",\n  \"José C. Paz, Argentina\",\n  \"Junín, Argentina\",\n  \"La Costa, Argentina\",\n  \"La Matanza, Argentina\",\n  \"La Plata, Argentina\",\n  \"Lanús, Argentina\",\n  \"Laprida, Argentina\",\n  \"Las Flores, Argentina\",\n  \"Leandro N. Alem, Argentina\",\n  \"Lezama, Argentina\",\n  \"Lincoln, Argentina\",\n  \"Lobería, Argentina\",\n  \"Lobos, Argentina\",\n  \"Lomas de Zamora, Argentina\",\n  \"Luján, Argentina\",\n  \"Magdalena, Argentina\",\n  \"Maipú, Argentina\",\n  \"Malvinas Argentinas, Argentina\",\n  \"Mar Chiquita, Argentina\",\n  \"Marcos Paz, Argentina\",\n  \"Mercedes, Argentina\",\n  \"Merlo, Argentina\",\n  \"Monte, Argentina\",\n  \"Monte Hermoso, Argentina\",\n  \"Moreno, Argentina\",\n  \"Morón, Argentina\",\n  \"Navarro, Argentina\",\n  \"Necochea, Argentina\",\n  \"Nueve de Julio, Argentina\",\n  \"Olavarría, Argentina\",\n  \"Patagones, Argentina\",\n  \"Pehuajó, Argentina\",\n  \"Pellegrini, Argentina\",\n  \"Pergamino, Argentina\",\n  \"Pila, Argentina\",\n  \"Pilar, Argentina\",\n  \"Pinamar, Argentina\",\n  \"Presidente Perón, Argentina\",\n  \"Puan, Argentina\",\n  \"Punta Indio, Argentina\",\n  \"Quilmes, Argentina\",\n  \"Ramallo, Argentina\",\n  \"Rauch, Argentina\",\n  \"Rivadavia, Argentina\",\n  \"Rojas, Argentina\",\n  \"Roque Pérez, Argentina\",\n  \"Saavedra, Argentina\",\n  \"Saladillo, Argentina\",\n  \"Salliqueló, Argentina\",\n  \"Salto, Argentina\",\n  \"San Andrés de Giles, Argentina\",\n  \"San Antonio de Areco, Argentina\",\n  \"San Cayetano, Argentina\",\n  \"San Fernando, Argentina\",\n  \"San Isidro, Argentina\",\n  \"San Miguel, Argentina\",\n  \"San Nicolás, Argentina\",\n  \"San Pedro, Argentina\",\n  \"San Vicente, Argentina\",\n  \"Suipacha, Argentina\",\n  \"Tandil, Argentina\",\n  \"Tapalqué, Argentina\",\n  \"Tigre, Argentina\",\n  \"Tordillo, Argentina\",\n  \"Tornquist, Argentina\",\n  \"Trenque Lauquen, Argentina\",\n  \"Tres Arroyos, Argentina\",\n  \"Tres de Febrero, Argentina\",\n  \"Tres Lomas, Argentina\",\n  \"Veinticinco de Mayo, Argentina\",\n  \"Vicente López, Argentina\",\n  \"Villa Gesell, Argentina\",\n  \"Villarino, Argentina\",\n  \"Zárate, Argentina\",\n  \"Ancasti, Argentina\",\n  \"Andalgalá, Argentina\",\n  \"Antofagasta de la Sierra, Argentina\",\n  \"Capayán, Argentina\",\n  \"Departamento de Ambato, Argentina\",\n  \"Departamento de Ancasti, Argentina\",\n  \"Departamento de Andalgalá, Argentina\",\n  \"Departamento de Antofagasta de la Sierra, Argentina\",\n  \"Departamento de Capayán, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de El Alto, Argentina\",\n  \"Departamento de Fray Mamerto Esquiú, Argentina\",\n  \"Departamento de La Paz, Argentina\",\n  \"Departamento de Pomán, Argentina\",\n  \"Departamento de Santa María, Argentina\",\n  \"Departamento de Santa Rosa, Argentina\",\n  \"Departamento de Tinogasta, Argentina\",\n  \"Departamento de Valle Viejo, Argentina\",\n  \"El Rodeo, Argentina\",\n  \"Fiambalá, Argentina\",\n  \"Hualfín, Argentina\",\n  \"Huillapima, Argentina\",\n  \"Icaño, Argentina\",\n  \"La Puerta de San José, Argentina\",\n  \"Londres, Argentina\",\n  \"Los Altos, Argentina\",\n  \"Los Varela, Argentina\",\n  \"Mutquín, Argentina\",\n  \"Pomán, Argentina\",\n  \"Puerta de Corral Quemado, Argentina\",\n  \"Recreo, Argentina\",\n  \"San Antonio, Argentina\",\n  \"San Fernando del Valle de Catamarca, Argentina\",\n  \"Santa María, Argentina\",\n  \"Tinogasta, Argentina\",\n  \"Aviá Terai, Argentina\",\n  \"Barranqueras, Argentina\",\n  \"Basail, Argentina\",\n  \"Campo Largo, Argentina\",\n  \"Capitán Solari, Argentina\",\n  \"Castelli, Argentina\",\n  \"Charadai, Argentina\",\n  \"Charata, Argentina\",\n  \"Chorotis, Argentina\",\n  \"Ciervo Petiso, Argentina\",\n  \"Colonia Benítez, Argentina\",\n  \"Colonia Elisa, Argentina\",\n  \"Colonias Unidas, Argentina\",\n  \"Concepción del Bermejo, Argentina\",\n  \"Coronel Du Graty, Argentina\",\n  \"Corzuela, Argentina\",\n  \"Coté-Lai, Argentina\",\n  \"Departamento de Almirante Brown, Argentina\",\n  \"Departamento de Bermejo, Argentina\",\n  \"Departamento de Comandante Fernández, Argentina\",\n  \"Departamento de Doce de Octubre, Argentina\",\n  \"Departamento de Dos de Abril, Argentina\",\n  \"Departamento de General Donovan, Argentina\",\n  \"Departamento de General Güemes, Argentina\",\n  \"Departamento de Independencia, Argentina\",\n  \"Departamento de Libertad, Argentina\",\n  \"Departamento de Maipú, Argentina\",\n  \"Departamento de Nueve de Julio, Argentina\",\n  \"Departamento de O’Higgins, Argentina\",\n  \"Departamento de Presidencia de la Plaza, Argentina\",\n  \"Departamento de Quitilipi, Argentina\",\n  \"Departamento de San Fernando, Argentina\",\n  \"Departamento de San Lorenzo, Argentina\",\n  \"Departamento de Sargento Cabral, Argentina\",\n  \"Departamento de Tapenagá, Argentina\",\n  \"Fontana, Argentina\",\n  \"Gancedo, Argentina\",\n  \"General José de San Martín, Argentina\",\n  \"General Pinedo, Argentina\",\n  \"General Vedia, Argentina\",\n  \"Hermoso Campo, Argentina\",\n  \"La Clotilde, Argentina\",\n  \"La Eduvigis, Argentina\",\n  \"La Escondida, Argentina\",\n  \"La Leonesa, Argentina\",\n  \"La Tigra, Argentina\",\n  \"La Verde, Argentina\",\n  \"Laguna Limpia, Argentina\",\n  \"Lapachito, Argentina\",\n  \"Las Breñas, Argentina\",\n  \"Las Garcitas, Argentina\",\n  \"Los Frentones, Argentina\",\n  \"Machagai, Argentina\",\n  \"Makallé, Argentina\",\n  \"Margarita Belén, Argentina\",\n  \"Napenay, Argentina\",\n  \"Pampa Almirón, Argentina\",\n  \"Pampa del Indio, Argentina\",\n  \"Pampa del Infierno, Argentina\",\n  \"Presidencia de la Plaza, Argentina\",\n  \"Presidencia Roca, Argentina\",\n  \"Presidencia Roque Sáenz Peña, Argentina\",\n  \"Puerto Bermejo, Argentina\",\n  \"Puerto Tirol, Argentina\",\n  \"Puerto Vilelas, Argentina\",\n  \"Quitilipi, Argentina\",\n  \"Resistencia, Argentina\",\n  \"Samuhú, Argentina\",\n  \"San Bernardo, Argentina\",\n  \"Santa Sylvina, Argentina\",\n  \"Taco Pozo, Argentina\",\n  \"Tres Isletas, Argentina\",\n  \"Villa Ángela, Argentina\",\n  \"Villa Berthet, Argentina\",\n  \"Alto Río Senguer, Argentina\",\n  \"Camarones, Argentina\",\n  \"Comodoro Rivadavia, Argentina\",\n  \"Departamento de Biedma, Argentina\",\n  \"Departamento de Cushamen, Argentina\",\n  \"Departamento de Escalante, Argentina\",\n  \"Departamento de Florentino Ameghino, Argentina\",\n  \"Departamento de Futaleufú, Argentina\",\n  \"Departamento de Gaimán, Argentina\",\n  \"Departamento de Gastre, Argentina\",\n  \"Departamento de Languiñeo, Argentina\",\n  \"Departamento de Mártires, Argentina\",\n  \"Departamento de Paso de Indios, Argentina\",\n  \"Departamento de Rawson, Argentina\",\n  \"Departamento de Río Senguerr, Argentina\",\n  \"Departamento de Sarmiento, Argentina\",\n  \"Departamento de Tehuelches, Argentina\",\n  \"Departamento de Telsen, Argentina\",\n  \"Dolavón, Argentina\",\n  \"El Maitén, Argentina\",\n  \"Esquel, Argentina\",\n  \"Gaimán, Argentina\",\n  \"Gastre, Argentina\",\n  \"Gobernador Costa, Argentina\",\n  \"Hoyo de Epuyén, Argentina\",\n  \"José de San Martín, Argentina\",\n  \"Lago Puelo, Argentina\",\n  \"Las Plumas, Argentina\",\n  \"Puerto Madryn, Argentina\",\n  \"Rada Tilly, Argentina\",\n  \"Rawson, Argentina\",\n  \"Río Mayo, Argentina\",\n  \"Río Pico, Argentina\",\n  \"Sarmiento, Argentina\",\n  \"Tecka, Argentina\",\n  \"Trelew, Argentina\",\n  \"Trevelin, Argentina\",\n  \"Achiras, Argentina\",\n  \"Adelia María, Argentina\",\n  \"Agua de Oro, Argentina\",\n  \"Alejandro Roca, Argentina\",\n  \"Alejo Ledesma, Argentina\",\n  \"Almafuerte, Argentina\",\n  \"Alta Gracia, Argentina\",\n  \"Altos de Chipión, Argentina\",\n  \"Arias, Argentina\",\n  \"Arroyito, Argentina\",\n  \"Arroyo Cabral, Argentina\",\n  \"Balnearia, Argentina\",\n  \"Bell Ville, Argentina\",\n  \"Berrotarán, Argentina\",\n  \"Brinkmann, Argentina\",\n  \"Buchardo, Argentina\",\n  \"Camilo Aldao, Argentina\",\n  \"Cañada de Luque, Argentina\",\n  \"Canals, Argentina\",\n  \"Capilla del Monte, Argentina\",\n  \"Carnerillo, Argentina\",\n  \"Carrilobo, Argentina\",\n  \"Cavanagh, Argentina\",\n  \"Charras, Argentina\",\n  \"Chazón, Argentina\",\n  \"Cintra, Argentina\",\n  \"Colonia La Tordilla, Argentina\",\n  \"Colonia San Bartolomé, Argentina\",\n  \"Córdoba, Argentina\",\n  \"Coronel Baigorria, Argentina\",\n  \"Coronel Moldes, Argentina\",\n  \"Corral de Bustos, Argentina\",\n  \"Corralito, Argentina\",\n  \"Cosquín, Argentina\",\n  \"Costa Sacate, Argentina\",\n  \"Cruz Alta, Argentina\",\n  \"Cruz del Eje, Argentina\",\n  \"Cuesta Blanca, Argentina\",\n  \"Dalmacio Vélez Sársfield, Argentina\",\n  \"Deán Funes, Argentina\",\n  \"Del Campillo, Argentina\",\n  \"Departamento de Calamuchita, Argentina\",\n  \"Departamento de Colón, Argentina\",\n  \"Departamento de Cruz del Eje, Argentina\",\n  \"Departamento de General Roca, Argentina\",\n  \"Departamento de General San Martín, Argentina\",\n  \"Departamento de Juárez Celman, Argentina\",\n  \"Departamento de Marcos Juárez, Argentina\",\n  \"Departamento de Minas, Argentina\",\n  \"Departamento de Presidente Roque Sáenz Peña, Argentina\",\n  \"Departamento de Río Cuarto, Argentina\",\n  \"Departamento de Río Primero, Argentina\",\n  \"Departamento de Río Seco, Argentina\",\n  \"Departamento de Río Segundo, Argentina\",\n  \"Departamento de San Alberto, Argentina\",\n  \"Departamento de San Javier, Argentina\",\n  \"Departamento de San Justo, Argentina\",\n  \"Departamento de Sobremonte, Argentina\",\n  \"Departamento de Totoral, Argentina\",\n  \"Departamento de Tulumba, Argentina\",\n  \"Departamento de Unión, Argentina\",\n  \"Despeñaderos, Argentina\",\n  \"Devoto, Argentina\",\n  \"El Arañado, Argentina\",\n  \"El Tío, Argentina\",\n  \"Elena, Argentina\",\n  \"Embalse, Argentina\",\n  \"Etruria, Argentina\",\n  \"General Baldissera, Argentina\",\n  \"General Cabrera, Argentina\",\n  \"General Levalle, Argentina\",\n  \"General Roca, Argentina\",\n  \"Guatimozín, Argentina\",\n  \"Hernando, Argentina\",\n  \"Huanchillas, Argentina\",\n  \"Huerta Grande, Argentina\",\n  \"Huinca Renancó, Argentina\",\n  \"Idiazábal, Argentina\",\n  \"Inriville, Argentina\",\n  \"Isla Verde, Argentina\",\n  \"Italó, Argentina\",\n  \"James Craik, Argentina\",\n  \"Jesús María, Argentina\",\n  \"Justiniano Posse, Argentina\",\n  \"La Calera, Argentina\",\n  \"La Carlota, Argentina\",\n  \"La Cesira, Argentina\",\n  \"La Cumbre, Argentina\",\n  \"La Falda, Argentina\",\n  \"La Francia, Argentina\",\n  \"La Granja, Argentina\",\n  \"La Para, Argentina\",\n  \"La Playosa, Argentina\",\n  \"Laborde, Argentina\",\n  \"Laboulaye, Argentina\",\n  \"Laguna Larga, Argentina\",\n  \"Las Acequias, Argentina\",\n  \"Las Higueras, Argentina\",\n  \"Las Junturas, Argentina\",\n  \"Las Perdices, Argentina\",\n  \"Las Varas, Argentina\",\n  \"Las Varillas, Argentina\",\n  \"Leones, Argentina\",\n  \"Los Cocos, Argentina\",\n  \"Los Cóndores, Argentina\",\n  \"Los Surgentes, Argentina\",\n  \"Malagueño, Argentina\",\n  \"Malvinas Argentinas, Argentina\",\n  \"Marcos Juárez, Argentina\",\n  \"Marull, Argentina\",\n  \"Mattaldi, Argentina\",\n  \"Mendiolaza, Argentina\",\n  \"Mina Clavero, Argentina\",\n  \"Miramar, Argentina\",\n  \"Monte Buey, Argentina\",\n  \"Monte Cristo, Argentina\",\n  \"Monte Maíz, Argentina\",\n  \"Morrison, Argentina\",\n  \"Morteros, Argentina\",\n  \"Noetinger, Argentina\",\n  \"Obispo Trejo, Argentina\",\n  \"Oliva, Argentina\",\n  \"Oncativo, Argentina\",\n  \"Ordóñez, Argentina\",\n  \"Pascanas, Argentina\",\n  \"Pasco, Argentina\",\n  \"Pilar, Argentina\",\n  \"Piquillín, Argentina\",\n  \"Porteña, Argentina\",\n  \"Pozo del Molle, Argentina\",\n  \"Quilino, Argentina\",\n  \"Río Ceballos, Argentina\",\n  \"Río Cuarto, Argentina\",\n  \"Río Segundo, Argentina\",\n  \"Río Tercero, Argentina\",\n  \"Sacanta, Argentina\",\n  \"Saldán, Argentina\",\n  \"Salsacate, Argentina\",\n  \"Salsipuedes, Argentina\",\n  \"Sampacho, Argentina\",\n  \"San Agustín, Argentina\",\n  \"San Antonio de Litín, Argentina\",\n  \"San Basilio, Argentina\",\n  \"San Carlos, Argentina\",\n  \"San Francisco, Argentina\",\n  \"San Francisco del Chañar, Argentina\",\n  \"San José de la Dormida, Argentina\",\n  \"Santa Eufemia, Argentina\",\n  \"Santa Magdalena, Argentina\",\n  \"Santa Rosa de Calamuchita, Argentina\",\n  \"Santa Rosa de Río Primero, Argentina\",\n  \"Santiago Temple, Argentina\",\n  \"Saturnino M. Laspiur, Argentina\",\n  \"Sebastián Elcano, Argentina\",\n  \"Serrano, Argentina\",\n  \"Serrezuela, Argentina\",\n  \"Tancacha, Argentina\",\n  \"Ticino, Argentina\",\n  \"Tío Pujio, Argentina\",\n  \"Toledo, Argentina\",\n  \"Ucacha, Argentina\",\n  \"Unquillo, Argentina\",\n  \"Valle Hermoso, Argentina\",\n  \"Viamonte, Argentina\",\n  \"Vicuña Mackenna, Argentina\",\n  \"Villa Allende, Argentina\",\n  \"Villa Ascasubi, Argentina\",\n  \"Villa Berna, Argentina\",\n  \"Villa Carlos Paz, Argentina\",\n  \"Villa Concepción del Tío, Argentina\",\n  \"Villa Cura Brochero, Argentina\",\n  \"Villa de Soto, Argentina\",\n  \"Villa del Dique, Argentina\",\n  \"Villa del Rosario, Argentina\",\n  \"Villa del Totoral, Argentina\",\n  \"Villa Dolores, Argentina\",\n  \"Villa General Belgrano, Argentina\",\n  \"Villa Giardino, Argentina\",\n  \"Villa Huidobro, Argentina\",\n  \"Villa Las Rosas, Argentina\",\n  \"Villa María, Argentina\",\n  \"Villa Nueva, Argentina\",\n  \"Villa Reducción, Argentina\",\n  \"Villa Rumipal, Argentina\",\n  \"Villa Tulumba, Argentina\",\n  \"Villa Valeria, Argentina\",\n  \"Wenceslao Escalante, Argentina\",\n  \"Alvear, Argentina\",\n  \"Berón de Astrada, Argentina\",\n  \"Bonpland, Argentina\",\n  \"Chavarría, Argentina\",\n  \"Concepción, Argentina\",\n  \"Corrientes, Argentina\",\n  \"Cruz de los Milagros, Argentina\",\n  \"Curuzú Cuatiá, Argentina\",\n  \"Departamento de Bella Vista, Argentina\",\n  \"Departamento de Berón de Astrada, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de Concepción, Argentina\",\n  \"Departamento de Curuzú Cuatiá, Argentina\",\n  \"Departamento de Empedrado, Argentina\",\n  \"Departamento de Esquina, Argentina\",\n  \"Departamento de General Alvear, Argentina\",\n  \"Departamento de General Paz, Argentina\",\n  \"Departamento de Goya, Argentina\",\n  \"Departamento de Itatí, Argentina\",\n  \"Departamento de Ituzaingó, Argentina\",\n  \"Departamento de Lavalle, Argentina\",\n  \"Departamento de Mburucuyá, Argentina\",\n  \"Departamento de Mercedes, Argentina\",\n  \"Departamento de Monte Caseros, Argentina\",\n  \"Departamento de Paso de los Libres, Argentina\",\n  \"Departamento de Saladas, Argentina\",\n  \"Departamento de San Cosme, Argentina\",\n  \"Departamento de San Luis del Palmar, Argentina\",\n  \"Departamento de San Martín, Argentina\",\n  \"Departamento de San Miguel, Argentina\",\n  \"Departamento de San Roque, Argentina\",\n  \"Departamento de Santo Tomé, Argentina\",\n  \"Departamento de Sauce, Argentina\",\n  \"Empedrado, Argentina\",\n  \"Esquina, Argentina\",\n  \"Felipe Yofré, Argentina\",\n  \"Garruchos, Argentina\",\n  \"Gobernador Juan E. Martínez, Argentina\",\n  \"Gobernador Virasora, Argentina\",\n  \"Goya, Argentina\",\n  \"Herlitzka, Argentina\",\n  \"Itá Ibaté, Argentina\",\n  \"Itatí, Argentina\",\n  \"Ituzaingó, Argentina\",\n  \"Juan Pujol, Argentina\",\n  \"La Cruz, Argentina\",\n  \"Libertad, Argentina\",\n  \"Lomas de Vallejos, Argentina\",\n  \"Loreto, Argentina\",\n  \"Mariano I. Loza, Argentina\",\n  \"Mburucuyá, Argentina\",\n  \"Mercedes, Argentina\",\n  \"Mocoretá, Argentina\",\n  \"Monte Caseros, Argentina\",\n  \"Nuestra Señora del Rosario de Caa Catí, Argentina\",\n  \"Nueve de Julio, Argentina\",\n  \"Palmar Grande, Argentina\",\n  \"Paso de la Patria, Argentina\",\n  \"Paso de los Libres, Argentina\",\n  \"Pedro R. Fernández, Argentina\",\n  \"Perugorría, Argentina\",\n  \"Pueblo Libertador, Argentina\",\n  \"Riachuelo, Argentina\",\n  \"Saladas, Argentina\",\n  \"San Carlos, Argentina\",\n  \"San Cosme, Argentina\",\n  \"San Lorenzo, Argentina\",\n  \"San Luis del Palmar, Argentina\",\n  \"San Miguel, Argentina\",\n  \"Santa Lucía, Argentina\",\n  \"Santa Rosa, Argentina\",\n  \"Santo Tomé, Argentina\",\n  \"Yapeyú, Argentina\",\n  \"Yataity Calle, Argentina\",\n  \"Aldea San Antonio, Argentina\",\n  \"Aranguren, Argentina\",\n  \"Bovril, Argentina\",\n  \"Caseros, Argentina\",\n  \"Ceibas, Argentina\",\n  \"Chajarí, Argentina\",\n  \"Colón, Argentina\",\n  \"Colonia Elía, Argentina\",\n  \"Concepción del Uruguay, Argentina\",\n  \"Concordia, Argentina\",\n  \"Conscripto Bernardi, Argentina\",\n  \"Crespo, Argentina\",\n  \"Departamento de Gualeguaychú, Argentina\",\n  \"Departamento de Paraná, Argentina\",\n  \"Diamante, Argentina\",\n  \"Domínguez, Argentina\",\n  \"Federación, Argentina\",\n  \"Federal, Argentina\",\n  \"General Campos, Argentina\",\n  \"General Galarza, Argentina\",\n  \"General Ramírez, Argentina\",\n  \"Gobernador Mansilla, Argentina\",\n  \"Gualeguay, Argentina\",\n  \"Gualeguaychú, Argentina\",\n  \"Hasenkamp, Argentina\",\n  \"Hernández, Argentina\",\n  \"Herrera, Argentina\",\n  \"La Criolla, Argentina\",\n  \"La Paz, Argentina\",\n  \"Larroque, Argentina\",\n  \"Los Charrúas, Argentina\",\n  \"Los Conquistadores, Argentina\",\n  \"Lucas González, Argentina\",\n  \"Maciá, Argentina\",\n  \"Nogoyá, Argentina\",\n  \"Oro Verde, Argentina\",\n  \"Paraná, Argentina\",\n  \"Piedras Blancas, Argentina\",\n  \"Pronunciamiento, Argentina\",\n  \"Puerto Ibicuy, Argentina\",\n  \"Puerto Yeruá, Argentina\",\n  \"Rosario del Tala, Argentina\",\n  \"San Benito, Argentina\",\n  \"San Gustavo, Argentina\",\n  \"San José de Feliciano, Argentina\",\n  \"San Justo, Argentina\",\n  \"San Salvador, Argentina\",\n  \"Santa Ana, Argentina\",\n  \"Santa Anita, Argentina\",\n  \"Santa Elena, Argentina\",\n  \"Sauce de Luna, Argentina\",\n  \"Seguí, Argentina\",\n  \"Tabossi, Argentina\",\n  \"Ubajay, Argentina\",\n  \"Urdinarrain, Argentina\",\n  \"Viale, Argentina\",\n  \"Victoria, Argentina\",\n  \"Villa del Rosario, Argentina\",\n  \"Villa Elisa, Argentina\",\n  \"Villa Hernandarias, Argentina\",\n  \"Villa Mantero, Argentina\",\n  \"Villa María Grande, Argentina\",\n  \"Villa Paranacito, Argentina\",\n  \"Villa Urquiza, Argentina\",\n  \"Villaguay, Argentina\",\n  \"Clorinda, Argentina\",\n  \"Comandante Fontana, Argentina\",\n  \"Departamento de Pilcomayo, Argentina\",\n  \"El Colorado, Argentina\",\n  \"Estanislao del Campo, Argentina\",\n  \"Formosa, Argentina\",\n  \"General Enrique Mosconi, Argentina\",\n  \"Herradura, Argentina\",\n  \"Ibarreta, Argentina\",\n  \"Ingeniero Guillermo N. Juárez, Argentina\",\n  \"Laguna Naick-Neck, Argentina\",\n  \"Laguna Yema, Argentina\",\n  \"Las Lomitas, Argentina\",\n  \"Palo Santo, Argentina\",\n  \"Pirané, Argentina\",\n  \"Pozo del Tigre, Argentina\",\n  \"Riacho Eh-Eh, Argentina\",\n  \"San Francisco de Laishí, Argentina\",\n  \"Villa Escolar, Argentina\",\n  \"Villa General Guemes, Argentina\",\n  \"Abra Pampa, Argentina\",\n  \"Caimancito, Argentina\",\n  \"Calilegua, Argentina\",\n  \"Departamento de Cochinoca, Argentina\",\n  \"Departamento de Rinconada, Argentina\",\n  \"Departamento de Tumbaya, Argentina\",\n  \"El Aguilar, Argentina\",\n  \"Fraile Pintado, Argentina\",\n  \"Humahuaca, Argentina\",\n  \"Ingenio La Esperanza, Argentina\",\n  \"La Mendieta, Argentina\",\n  \"La Quiaca, Argentina\",\n  \"Libertador General San Martín, Argentina\",\n  \"Maimará, Argentina\",\n  \"Palma Sola, Argentina\",\n  \"Palpalá, Argentina\",\n  \"San Pedro de Jujuy, Argentina\",\n  \"San Salvador de Jujuy, Argentina\",\n  \"Santa Clara, Argentina\",\n  \"Tilcara, Argentina\",\n  \"Yuto, Argentina\",\n  \"Alpachiri, Argentina\",\n  \"Alta Italia, Argentina\",\n  \"Anguil, Argentina\",\n  \"Arata, Argentina\",\n  \"Bernardo Larroudé, Argentina\",\n  \"Bernasconi, Argentina\",\n  \"Caleufú, Argentina\",\n  \"Catriló, Argentina\",\n  \"Colonia Barón, Argentina\",\n  \"Departamento de Caleu-Caleu, Argentina\",\n  \"Departamento de Toay, Argentina\",\n  \"Doblas, Argentina\",\n  \"Eduardo Castex, Argentina\",\n  \"Embajador Martini, Argentina\",\n  \"General Acha, Argentina\",\n  \"General Manuel J. Campos, Argentina\",\n  \"General Pico, Argentina\",\n  \"General San Martín, Argentina\",\n  \"Guatraché, Argentina\",\n  \"Ingeniero Luiggi, Argentina\",\n  \"Intendente Alvear, Argentina\",\n  \"Jacinto Arauz, Argentina\",\n  \"La Adela, Argentina\",\n  \"La Maruja, Argentina\",\n  \"Lonquimay, Argentina\",\n  \"Macachín, Argentina\",\n  \"Miguel Riglos, Argentina\",\n  \"Parera, Argentina\",\n  \"Quemú Quemú, Argentina\",\n  \"Rancul, Argentina\",\n  \"Realicó, Argentina\",\n  \"Santa Isabel, Argentina\",\n  \"Santa Rosa, Argentina\",\n  \"Telén, Argentina\",\n  \"Trenel, Argentina\",\n  \"Uriburu, Argentina\",\n  \"Veinticinco de Mayo, Argentina\",\n  \"Victorica, Argentina\",\n  \"Winifreda, Argentina\",\n  \"Arauco, Argentina\",\n  \"Castro Barros, Argentina\",\n  \"Chamical, Argentina\",\n  \"Chilecito, Argentina\",\n  \"Departamento de Arauco, Argentina\",\n  \"Departamento de General Lamadrid, Argentina\",\n  \"Departamento de Independencia, Argentina\",\n  \"La Rioja, Argentina\",\n  \"Villa Bustos, Argentina\",\n  \"Vinchina, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de General Alvear, Argentina\",\n  \"Departamento de Godoy Cruz, Argentina\",\n  \"Departamento de Guaymallén, Argentina\",\n  \"Departamento de La Paz, Argentina\",\n  \"Departamento de Las Heras, Argentina\",\n  \"Departamento de Lavalle, Argentina\",\n  \"Departamento de Luján, Argentina\",\n  \"Departamento de Maipú, Argentina\",\n  \"Departamento de Malargüe, Argentina\",\n  \"Departamento de Rivadavia, Argentina\",\n  \"Departamento de San Carlos, Argentina\",\n  \"Departamento de San Martín, Argentina\",\n  \"Departamento de San Rafael, Argentina\",\n  \"Departamento de Santa Rosa, Argentina\",\n  \"Departamento de Tunuyán, Argentina\",\n  \"Departamento de Tupungato, Argentina\",\n  \"Godoy Cruz, Argentina\",\n  \"Las Heras, Argentina\",\n  \"Mendoza, Argentina\",\n  \"San Martín, Argentina\",\n  \"San Rafael, Argentina\",\n  \"Alba Posse, Argentina\",\n  \"Almafuerte, Argentina\",\n  \"Aristóbulo del Valle, Argentina\",\n  \"Arroyo del Medio, Argentina\",\n  \"Azara, Argentina\",\n  \"Bernardo de Irigoyen, Argentina\",\n  \"Bonpland, Argentina\",\n  \"Campo Grande, Argentina\",\n  \"Campo Ramón, Argentina\",\n  \"Campo Viera, Argentina\",\n  \"Candelaria, Argentina\",\n  \"Capioví, Argentina\",\n  \"Caraguatay, Argentina\",\n  \"Cerro Azul, Argentina\",\n  \"Cerro Corá, Argentina\",\n  \"Colonia Aurora, Argentina\",\n  \"Concepción de la Sierra, Argentina\",\n  \"Departamento de Apóstoles, Argentina\",\n  \"Departamento de Cainguás, Argentina\",\n  \"Departamento de Candelaria, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de Concepción de la Sierra, Argentina\",\n  \"Departamento de Eldorado, Argentina\",\n  \"Departamento de General Manuel Belgrano, Argentina\",\n  \"Departamento de Guaraní, Argentina\",\n  \"Departamento de Iguazú, Argentina\",\n  \"Departamento de Leandro N. Alem, Argentina\",\n  \"Departamento de Libertador General San Martín, Argentina\",\n  \"Departamento de Montecarlo, Argentina\",\n  \"Departamento de Oberá, Argentina\",\n  \"Departamento de San Ignacio, Argentina\",\n  \"Departamento de San Javier, Argentina\",\n  \"Departamento de San Pedro, Argentina\",\n  \"Departamento de Veinticinco de Mayo, Argentina\",\n  \"Dos Arroyos, Argentina\",\n  \"Dos de Mayo, Argentina\",\n  \"El Alcázar, Argentina\",\n  \"El Soberbio, Argentina\",\n  \"Florentino Ameghino, Argentina\",\n  \"Garuhapé, Argentina\",\n  \"Garupá, Argentina\",\n  \"General Alvear, Argentina\",\n  \"Gobernador Roca, Argentina\",\n  \"Guaraní, Argentina\",\n  \"Jardín América, Argentina\",\n  \"Loreto, Argentina\",\n  \"Los Helechos, Argentina\",\n  \"Mártires, Argentina\",\n  \"Mojón Grande, Argentina\",\n  \"Montecarlo, Argentina\",\n  \"Oberá, Argentina\",\n  \"Panambí, Argentina\",\n  \"Picada Gobernador López, Argentina\",\n  \"Posadas, Argentina\",\n  \"Puerto Eldorado, Argentina\",\n  \"Puerto Esperanza, Argentina\",\n  \"Puerto Iguazú, Argentina\",\n  \"Puerto Leoni, Argentina\",\n  \"Puerto Libertad, Argentina\",\n  \"Puerto Piray, Argentina\",\n  \"Puerto Rico, Argentina\",\n  \"Ruiz de Montoya, Argentina\",\n  \"San José, Argentina\",\n  \"San Pedro, Argentina\",\n  \"San Vicente, Argentina\",\n  \"Santa María, Argentina\",\n  \"Santo Pipó, Argentina\",\n  \"Tres Capones, Argentina\",\n  \"Veinticinco de Mayo, Argentina\",\n  \"Wanda, Argentina\",\n  \"Aluminé, Argentina\",\n  \"Andacollo, Argentina\",\n  \"Añelo, Argentina\",\n  \"Barrancas, Argentina\",\n  \"Buta Ranquil, Argentina\",\n  \"Centenario, Argentina\",\n  \"Chos Malal, Argentina\",\n  \"Cutral-Có, Argentina\",\n  \"Departamento de Aluminé, Argentina\",\n  \"Departamento de Añelo, Argentina\",\n  \"Departamento de Catán-Lil, Argentina\",\n  \"Departamento de Chos-Malal, Argentina\",\n  \"Departamento de Collón-Curá, Argentina\",\n  \"Departamento de Confluencia, Argentina\",\n  \"Departamento de Lácar, Argentina\",\n  \"Departamento de Minas, Argentina\",\n  \"Departamento de Zapala, Argentina\",\n  \"El Huecú, Argentina\",\n  \"Junín de los Andes, Argentina\",\n  \"Las Coloradas, Argentina\",\n  \"Las Lajas, Argentina\",\n  \"Las Ovejas, Argentina\",\n  \"Loncopué, Argentina\",\n  \"Mariano Moreno, Argentina\",\n  \"Neuquén, Argentina\",\n  \"Picún Leufú, Argentina\",\n  \"Piedra del Águila, Argentina\",\n  \"Plaza Huincul, Argentina\",\n  \"Plottier, Argentina\",\n  \"San Martín de los Andes, Argentina\",\n  \"Senillosa, Argentina\",\n  \"Villa La Angostura, Argentina\",\n  \"Vista Alegre, Argentina\",\n  \"Zapala, Argentina\",\n  \"Allen, Argentina\",\n  \"Catriel, Argentina\",\n  \"Cervantes, Argentina\",\n  \"Chichinales, Argentina\",\n  \"Chimpay, Argentina\",\n  \"Choele Choel, Argentina\",\n  \"Cinco Saltos, Argentina\",\n  \"Cipolletti, Argentina\",\n  \"Comallo, Argentina\",\n  \"Contraalmirante Cordero, Argentina\",\n  \"Coronel Belisle, Argentina\",\n  \"Darwin, Argentina\",\n  \"Departamento de Avellaneda, Argentina\",\n  \"Departamento de Veinticinco de Mayo, Argentina\",\n  \"El Bolsón, Argentina\",\n  \"El Cuy, Argentina\",\n  \"Fray Luis Beltrán, Argentina\",\n  \"General Conesa, Argentina\",\n  \"General Enrique Godoy, Argentina\",\n  \"General Fernández Oro, Argentina\",\n  \"General Roca, Argentina\",\n  \"Ingeniero Jacobacci, Argentina\",\n  \"Ingeniero Luis A. Huergo, Argentina\",\n  \"Lamarque, Argentina\",\n  \"Los Menucos, Argentina\",\n  \"Mainque, Argentina\",\n  \"Maquinchao, Argentina\",\n  \"Ñorquinco, Argentina\",\n  \"Pilcaniyeu, Argentina\",\n  \"Río Colorado, Argentina\",\n  \"San Antonio Oeste, Argentina\",\n  \"San Carlos de Bariloche, Argentina\",\n  \"Sierra Colorada, Argentina\",\n  \"Sierra Grande, Argentina\",\n  \"Valcheta, Argentina\",\n  \"Viedma, Argentina\",\n  \"Villa Regina, Argentina\",\n  \"Apolinario Saravia, Argentina\",\n  \"Cachí, Argentina\",\n  \"Cafayate, Argentina\",\n  \"Campo Quijano, Argentina\",\n  \"Chicoana, Argentina\",\n  \"Departamento Capital, Argentina\",\n  \"Departamento de Anta, Argentina\",\n  \"Departamento de Cerrillos, Argentina\",\n  \"Departamento de Chicoana, Argentina\",\n  \"Departamento de General Güemes, Argentina\",\n  \"Departamento de Guachipas, Argentina\",\n  \"Departamento de Iruya, Argentina\",\n  \"Departamento de La Poma, Argentina\",\n  \"Departamento de La Viña, Argentina\",\n  \"Departamento de Los Andes, Argentina\",\n  \"Departamento de Metán, Argentina\",\n  \"Departamento de Rivadavia, Argentina\",\n  \"Departamento de Rosario de la Frontera, Argentina\",\n  \"Departamento de Rosario de Lerma, Argentina\",\n  \"Departamento de San Carlos, Argentina\",\n  \"El Carril, Argentina\",\n  \"El Galpón, Argentina\",\n  \"El Quebrachal, Argentina\",\n  \"Embarcación, Argentina\",\n  \"General Enrique Mosconi, Argentina\",\n  \"Joaquín V. González, Argentina\",\n  \"La Caldera, Argentina\",\n  \"Las Lajitas, Argentina\",\n  \"Salta, Argentina\",\n  \"San Antonio de los Cobres, Argentina\",\n  \"San Ramón de la Nueva Orán, Argentina\",\n  \"Santa Rosa de Tastil, Argentina\",\n  \"Tartagal, Argentina\",\n  \"Albardón, Argentina\",\n  \"Calingasta, Argentina\",\n  \"Caucete, Argentina\",\n  \"Chimbas, Argentina\",\n  \"Departamento de Albardón, Argentina\",\n  \"Departamento de Angaco, Argentina\",\n  \"Departamento de Calingasta, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de Caucete, Argentina\",\n  \"Departamento de Chimbas, Argentina\",\n  \"Departamento de Iglesia, Argentina\",\n  \"Departamento de Jáchal, Argentina\",\n  \"Departamento de Nueve de Julio, Argentina\",\n  \"Departamento de Rawson, Argentina\",\n  \"Departamento de Rivadavia, Argentina\",\n  \"Departamento de San Martín, Argentina\",\n  \"Departamento de Santa Lucía, Argentina\",\n  \"Departamento de Sarmiento, Argentina\",\n  \"Departamento de Ullúm, Argentina\",\n  \"Departamento de Zonda, Argentina\",\n  \"Nueve de Julio, Argentina\",\n  \"Pocito, Argentina\",\n  \"San Agustín de Valle Fértil, Argentina\",\n  \"San José de Jáchal, Argentina\",\n  \"San Juan, Argentina\",\n  \"San Martín, Argentina\",\n  \"Santa Lucía, Argentina\",\n  \"Villa Basilio Nievas, Argentina\",\n  \"Villa Paula de Sarmiento, Argentina\",\n  \"Buena Esperanza, Argentina\",\n  \"Candelaria, Argentina\",\n  \"Concarán, Argentina\",\n  \"Juan Martín de Pueyrredón, Argentina\",\n  \"Justo Daract, Argentina\",\n  \"La Punta, Argentina\",\n  \"La Toma, Argentina\",\n  \"Luján, Argentina\",\n  \"Merlo, Argentina\",\n  \"Naschel, Argentina\",\n  \"San Francisco del Monte de Oro, Argentina\",\n  \"San Luis, Argentina\",\n  \"Santa Rosa del Conlara, Argentina\",\n  \"Tilisarao, Argentina\",\n  \"Unión, Argentina\",\n  \"Villa General Roca, Argentina\",\n  \"Villa Mercedes, Argentina\",\n  \"28 de Noviembre, Argentina\",\n  \"Caleta Olivia, Argentina\",\n  \"Comandante Luis Piedra Buena, Argentina\",\n  \"Departamento de Deseado, Argentina\",\n  \"Departamento de Güer Aike, Argentina\",\n  \"Departamento de Lago Argentino, Argentina\",\n  \"Departamento de Magallanes, Argentina\",\n  \"Departamento de Río Chico, Argentina\",\n  \"El Calafate, Argentina\",\n  \"Gobernador Gregores, Argentina\",\n  \"Las Heras, Argentina\",\n  \"Los Antiguos, Argentina\",\n  \"Perito Moreno, Argentina\",\n  \"Pico Truncado, Argentina\",\n  \"Puerto Deseado, Argentina\",\n  \"Puerto Santa Cruz, Argentina\",\n  \"Río Gallegos, Argentina\",\n  \"Río Turbio, Argentina\",\n  \"San Julián, Argentina\",\n  \"Yacimiento Río Turbio, Argentina\",\n  \"Armstrong, Argentina\",\n  \"Arroyo Seco, Argentina\",\n  \"Arrufó, Argentina\",\n  \"Avellaneda, Argentina\",\n  \"Bella Italia, Argentina\",\n  \"Calchaquí, Argentina\",\n  \"Cañada de Gómez, Argentina\",\n  \"Capitán Bermúdez, Argentina\",\n  \"Carcarañá, Argentina\",\n  \"Casilda, Argentina\",\n  \"Ceres, Argentina\",\n  \"Chañar Ladeado, Argentina\",\n  \"Coronda, Argentina\",\n  \"Departamento de Belgrano, Argentina\",\n  \"Departamento de Caseros, Argentina\",\n  \"Departamento de Castellanos, Argentina\",\n  \"Departamento de Constitución, Argentina\",\n  \"Departamento de La Capital, Argentina\",\n  \"Departamento de Nueve de Julio, Argentina\",\n  \"Departamento de San Cristóbal, Argentina\",\n  \"Departamento de San Javier, Argentina\",\n  \"Departamento de San Justo, Argentina\",\n  \"Departamento de San Lorenzo, Argentina\",\n  \"Departamento de San Martín, Argentina\",\n  \"Departamento de Vera, Argentina\",\n  \"El Trébol, Argentina\",\n  \"Esperanza, Argentina\",\n  \"Firmat, Argentina\",\n  \"Fray Luis A. Beltrán, Argentina\",\n  \"Funes, Argentina\",\n  \"Gálvez, Argentina\",\n  \"Gato Colorado, Argentina\",\n  \"Gobernador Gálvez, Argentina\",\n  \"Granadero Baigorria, Argentina\",\n  \"Helvecia, Argentina\",\n  \"Hersilia, Argentina\",\n  \"Iriondo Department, Argentina\",\n  \"Laguna Paiva, Argentina\",\n  \"Las Parejas, Argentina\",\n  \"Las Rosas, Argentina\",\n  \"Las Toscas, Argentina\",\n  \"Los Laureles, Argentina\",\n  \"Malabrigo, Argentina\",\n  \"Melincué, Argentina\",\n  \"Pérez, Argentina\",\n  \"Rafaela, Argentina\",\n  \"Reconquista, Argentina\",\n  \"Recreo, Argentina\",\n  \"Roldán, Argentina\",\n  \"Rosario, Argentina\",\n  \"Rufino, Argentina\",\n  \"San Carlos Centro, Argentina\",\n  \"San Cristóbal, Argentina\",\n  \"San Javier, Argentina\",\n  \"San Jorge, Argentina\",\n  \"San Justo, Argentina\",\n  \"Santa Fe, Argentina\",\n  \"Santo Tomé, Argentina\",\n  \"Sastre, Argentina\",\n  \"Sunchales, Argentina\",\n  \"Tacuarendí, Argentina\",\n  \"Tostado, Argentina\",\n  \"Totoras, Argentina\",\n  \"Venado Tuerto, Argentina\",\n  \"Vera, Argentina\",\n  \"Villa Cañás, Argentina\",\n  \"Villa Constitución, Argentina\",\n  \"Villa Mugueta, Argentina\",\n  \"Villa Ocampo, Argentina\",\n  \"Villa Trinidad, Argentina\",\n  \"Añatuya, Argentina\",\n  \"Beltrán, Argentina\",\n  \"Campo Gallo, Argentina\",\n  \"Clodomira, Argentina\",\n  \"Colonia Dora, Argentina\",\n  \"Departamento de Aguirre, Argentina\",\n  \"Departamento de Banda, Argentina\",\n  \"Departamento de Choya, Argentina\",\n  \"Departamento de Guasayán, Argentina\",\n  \"Departamento de Loreto, Argentina\",\n  \"Departamento de Moreno, Argentina\",\n  \"Departamento de Río Hondo, Argentina\",\n  \"Departamento de Robles, Argentina\",\n  \"Departamento de San Martín, Argentina\",\n  \"Departamento de Sarmiento, Argentina\",\n  \"El Hoyo, Argentina\",\n  \"La Banda, Argentina\",\n  \"Los Juríes, Argentina\",\n  \"Los Telares, Argentina\",\n  \"Pampa de los Guanacos, Argentina\",\n  \"Quimilí, Argentina\",\n  \"San Pedro, Argentina\",\n  \"Santiago del Estero, Argentina\",\n  \"Sumampa, Argentina\",\n  \"Suncho Corral, Argentina\",\n  \"Termas de Río Hondo, Argentina\",\n  \"Tintina, Argentina\",\n  \"Villa Atamisqui, Argentina\",\n  \"Villa General Mitre, Argentina\",\n  \"Villa Ojo de Agua, Argentina\",\n  \"Río Grande, Argentina\",\n  \"Tolhuin, Argentina\",\n  \"Ushuaia, Argentina\",\n  \"Aguilares, Argentina\",\n  \"Alderetes, Argentina\",\n  \"Bella Vista, Argentina\",\n  \"Burruyacú, Argentina\",\n  \"Departamento de Burruyacú, Argentina\",\n  \"Departamento de Capital, Argentina\",\n  \"Departamento de Cruz Alta, Argentina\",\n  \"Departamento de Famaillá, Argentina\",\n  \"Departamento de Graneros, Argentina\",\n  \"Departamento de La Cocha, Argentina\",\n  \"Departamento de Lules, Argentina\",\n  \"Departamento de Monteros, Argentina\",\n  \"Departamento de Río Chico, Argentina\",\n  \"Departamento de Simoca, Argentina\",\n  \"Departamento de Trancas, Argentina\",\n  \"Departamento de Yerba Buena, Argentina\",\n  \"Famaillá, Argentina\",\n  \"Graneros, Argentina\",\n  \"La Cocha, Argentina\",\n  \"Monteros, Argentina\",\n  \"San Miguel de Tucumán, Argentina\",\n  \"Simoca, Argentina\",\n  \"Tafí del Valle, Argentina\",\n  \"Tafí Viejo, Argentina\",\n  \"Trancas, Argentina\",\n  \"Yerba Buena, Argentina\",\n  \"Agarakavan, Armenia\",\n  \"Aparan, Armenia\",\n  \"Aragats, Armenia\",\n  \"Arteni, Armenia\",\n  \"Ashnak, Armenia\",\n  \"Ashtarak, Armenia\",\n  \"Byurakan, Armenia\",\n  \"Hnaberd, Armenia\",\n  \"Karbi, Armenia\",\n  \"Kasakh, Armenia\",\n  \"Kosh, Armenia\",\n  \"Nor Yerznka, Armenia\",\n  \"Oshakan, Armenia\",\n  \"Sasunik, Armenia\",\n  \"Shenavan, Armenia\",\n  \"T’alin, Armenia\",\n  \"Tsaghkahovit, Armenia\",\n  \"Ushi, Armenia\",\n  \"Voskevaz, Armenia\",\n  \"Zovuni, Armenia\",\n  \"Abovyan, Armenia\",\n  \"Aralez, Armenia\",\n  \"Ararat, Armenia\",\n  \"Arevabuyr, Armenia\",\n  \"Arevshat, Armenia\",\n  \"Armash, Armenia\",\n  \"Artashat, Armenia\",\n  \"Avshar, Armenia\",\n  \"Aygavan, Armenia\",\n  \"Aygepat, Armenia\",\n  \"Aygestan, Armenia\",\n  \"Aygezard, Armenia\",\n  \"Bardzrashen, Armenia\",\n  \"Berk’anush, Armenia\",\n  \"Burastan, Armenia\",\n  \"Byuravan, Armenia\",\n  \"Dalar, Armenia\",\n  \"Darakert, Armenia\",\n  \"Dashtavan, Armenia\",\n  \"Dimitrov, Armenia\",\n  \"Dvin, Armenia\",\n  \"Getazat, Armenia\",\n  \"Ghukasavan, Armenia\",\n  \"Goravan, Armenia\",\n  \"Hayanist, Armenia\",\n  \"Hovtashat, Armenia\",\n  \"Hovtashen, Armenia\",\n  \"Jrahovit, Armenia\",\n  \"Lusarrat, Armenia\",\n  \"Marmarashen, Armenia\",\n  \"Masis, Armenia\",\n  \"Mrganush, Armenia\",\n  \"Mrgavan, Armenia\",\n  \"Mrgavet, Armenia\",\n  \"Nizami, Armenia\",\n  \"Norabats’, Armenia\",\n  \"Noramarg, Armenia\",\n  \"Norashen, Armenia\",\n  \"Noyakert, Armenia\",\n  \"Nshavan, Armenia\",\n  \"Sayat’-Nova, Armenia\",\n  \"Shahumyan, Armenia\",\n  \"Sis, Armenia\",\n  \"Sisavan, Armenia\",\n  \"Surenavan, Armenia\",\n  \"Vedi, Armenia\",\n  \"Verin Artashat, Armenia\",\n  \"Verin Dvin, Armenia\",\n  \"Vosketap’, Armenia\",\n  \"Vostan, Armenia\",\n  \"Yeghegnavan, Armenia\",\n  \"Zangakatun, Armenia\",\n  \"Zorak, Armenia\",\n  \"Aghavnatun, Armenia\",\n  \"Aknalich, Armenia\",\n  \"Aknashen, Armenia\",\n  \"Alashkert, Armenia\",\n  \"Apaga, Armenia\",\n  \"Arak’s, Armenia\",\n  \"Arazap’, Armenia\",\n  \"Arbat’, Armenia\",\n  \"Arevashat, Armenia\",\n  \"Arevik, Armenia\",\n  \"Argavand, Armenia\",\n  \"Armavir, Armenia\",\n  \"Arshaluys, Armenia\",\n  \"Artimet, Armenia\",\n  \"Aygek, Armenia\",\n  \"Aygeshat, Armenia\",\n  \"Baghramyan, Armenia\",\n  \"Bambakashat, Armenia\",\n  \"Dalarik, Armenia\",\n  \"Doghs, Armenia\",\n  \"Gay, Armenia\",\n  \"Geghakert, Armenia\",\n  \"Geghanist, Armenia\",\n  \"Getashen, Armenia\",\n  \"Gmbet’, Armenia\",\n  \"Griboyedov, Armenia\",\n  \"Haykashen, Armenia\",\n  \"Hovtamej, Armenia\",\n  \"Janfida, Armenia\",\n  \"Khoronk’, Armenia\",\n  \"Lenughi, Armenia\",\n  \"Lukashin, Armenia\",\n  \"Margara, Armenia\",\n  \"Mayisyan, Armenia\",\n  \"Merdzavan, Armenia\",\n  \"Metsamor, Armenia\",\n  \"Mrgashat, Armenia\",\n  \"Musalerr, Armenia\",\n  \"Myasnikyan, Armenia\",\n  \"Nalbandyan, Armenia\",\n  \"Nor Armavir, Armenia\",\n  \"Norakert, Armenia\",\n  \"P’shatavan, Armenia\",\n  \"Ptghunk’, Armenia\",\n  \"Sardarapat, Armenia\",\n  \"Shenavan, Armenia\",\n  \"Tandzut, Armenia\",\n  \"Taronik, Armenia\",\n  \"Tsaghkunk’, Armenia\",\n  \"Tsiatsan, Armenia\",\n  \"Vagharshapat, Armenia\",\n  \"Voskehat, Armenia\",\n  \"Yeghegnut, Armenia\",\n  \"Yeraskhahun, Armenia\",\n  \"Akunk’, Armenia\",\n  \"Astghadzor, Armenia\",\n  \"Chambarak, Armenia\",\n  \"Ddmashen, Armenia\",\n  \"Drakhtik, Armenia\",\n  \"Dzoragyugh, Armenia\",\n  \"Gagarin, Armenia\",\n  \"Gandzak, Armenia\",\n  \"Gavarr, Armenia\",\n  \"Geghamasar, Armenia\",\n  \"Geghamavan, Armenia\",\n  \"Karanlukh, Armenia\",\n  \"Karchaghbyur, Armenia\",\n  \"Lanjaghbyur, Armenia\",\n  \"Lchap’, Armenia\",\n  \"Lchashen, Armenia\",\n  \"Lichk’, Armenia\",\n  \"Madina, Armenia\",\n  \"Martuni, Armenia\",\n  \"Mets Masrik, Armenia\",\n  \"Nerk’in Getashen, Armenia\",\n  \"Noratus, Armenia\",\n  \"Sarukhan, Armenia\",\n  \"Sevan, Armenia\",\n  \"Tsovagyugh, Armenia\",\n  \"Tsovak, Armenia\",\n  \"Tsovasar, Armenia\",\n  \"Tsovazard, Armenia\",\n  \"Tsovinar, Armenia\",\n  \"Vaghashen, Armenia\",\n  \"Vahan, Armenia\",\n  \"Vardenik, Armenia\",\n  \"Vardenis, Armenia\",\n  \"Varser, Armenia\",\n  \"Verin Getashen, Armenia\",\n  \"Yeranos, Armenia\",\n  \"Abovyan, Armenia\",\n  \"Aghavnadzor, Armenia\",\n  \"Akunk’, Armenia\",\n  \"Aramus, Armenia\",\n  \"Argel, Armenia\",\n  \"Arzakan, Armenia\",\n  \"Arzni, Armenia\",\n  \"Balahovit, Armenia\",\n  \"Bjni, Armenia\",\n  \"Buzhakan, Armenia\",\n  \"Byureghavan, Armenia\",\n  \"Dzoraghbyur, Armenia\",\n  \"Fantan, Armenia\",\n  \"Garrni, Armenia\",\n  \"Goght’, Armenia\",\n  \"Hrazdan, Armenia\",\n  \"Kaputan, Armenia\",\n  \"Kotayk’, Armenia\",\n  \"Lerrnanist, Armenia\",\n  \"Mayakovski, Armenia\",\n  \"Meghradzor, Armenia\",\n  \"Mrgashen, Armenia\",\n  \"Nor Geghi, Armenia\",\n  \"Nor Gyugh, Armenia\",\n  \"Prroshyan, Armenia\",\n  \"Ptghni, Armenia\",\n  \"Solak, Armenia\",\n  \"Tsaghkadzor, Armenia\",\n  \"Yeghvard, Armenia\",\n  \"Zarr, Armenia\",\n  \"Zoravan, Armenia\",\n  \"Zovaber, Armenia\",\n  \"Agarak, Armenia\",\n  \"Akht’ala, Armenia\",\n  \"Alaverdi, Armenia\",\n  \"Arevashogh, Armenia\",\n  \"Bazum, Armenia\",\n  \"Chochkan, Armenia\",\n  \"Darpas, Armenia\",\n  \"Dsegh, Armenia\",\n  \"Fioletovo, Armenia\",\n  \"Gogaran, Armenia\",\n  \"Gugark’, Armenia\",\n  \"Gyulagarak, Armenia\",\n  \"Jrashen, Armenia\",\n  \"Lerrnants’k’, Armenia\",\n  \"Lerrnapat, Armenia\",\n  \"Lerrnavan, Armenia\",\n  \"Lorut, Armenia\",\n  \"Margahovit, Armenia\",\n  \"Mets Parni, Armenia\",\n  \"Metsavan, Armenia\",\n  \"Norashen, Armenia\",\n  \"Odzun, Armenia\",\n  \"Sarahart’, Armenia\",\n  \"Saramej, Armenia\",\n  \"Shahumyan, Armenia\",\n  \"Shirakamut, Armenia\",\n  \"Shnogh, Armenia\",\n  \"Spitak, Armenia\",\n  \"Step’anavan, Armenia\",\n  \"Tashir, Armenia\",\n  \"Tsaghkaber, Armenia\",\n  \"Urrut, Armenia\",\n  \"Vahagni, Armenia\",\n  \"Vanadzor, Armenia\",\n  \"Vardablur, Armenia\",\n  \"Yeghegnut, Armenia\",\n  \"Akhuryan, Armenia\",\n  \"Amasia, Armenia\",\n  \"Anushavan, Armenia\",\n  \"Arevik, Armenia\",\n  \"Arevshat, Armenia\",\n  \"Arrap’i, Armenia\",\n  \"Azatan, Armenia\",\n  \"Basen, Armenia\",\n  \"Dzit’hank’ov, Armenia\",\n  \"Gyumri, Armenia\",\n  \"Haykavan, Armenia\",\n  \"Horrom, Armenia\",\n  \"Kamo, Armenia\",\n  \"Lerrnakert, Armenia\",\n  \"Maralik, Armenia\",\n  \"Marmashen, Armenia\",\n  \"Mayisyan, Armenia\",\n  \"Meghrashen, Armenia\",\n  \"Mets Mant’ash, Armenia\",\n  \"P’ok’r Mant’ash, Armenia\",\n  \"Pemzashen, Armenia\",\n  \"Saratak, Armenia\",\n  \"Shirak, Armenia\",\n  \"Spandaryan, Armenia\",\n  \"Voskehask, Armenia\",\n  \"Yerazgavors, Armenia\",\n  \"Agarak, Armenia\",\n  \"Akner, Armenia\",\n  \"Angeghakot’, Armenia\",\n  \"Brrnakot’, Armenia\",\n  \"Dzorastan, Armenia\",\n  \"Goris, Armenia\",\n  \"Hats’avan, Armenia\",\n  \"Kapan, Armenia\",\n  \"Khndzoresk, Armenia\",\n  \"Meghri, Armenia\",\n  \"Shaghat, Armenia\",\n  \"Shinuhayr, Armenia\",\n  \"Tegh, Armenia\",\n  \"Verishen, Armenia\",\n  \"Archis, Armenia\",\n  \"Artsvaberd, Armenia\",\n  \"Aygehovit, Armenia\",\n  \"Azatamut, Armenia\",\n  \"Bagratashen, Armenia\",\n  \"Berd, Armenia\",\n  \"Berdavan, Armenia\",\n  \"Dilijan, Armenia\",\n  \"Haghartsin, Armenia\",\n  \"Ijevan, Armenia\",\n  \"Khasht’arrak, Armenia\",\n  \"Mosesgegh, Armenia\",\n  \"Navur, Armenia\",\n  \"Noyemberyan, Armenia\",\n  \"Parravak’ar, Armenia\",\n  \"Sarigyugh, Armenia\",\n  \"Voskevan, Armenia\",\n  \"Agarakadzor, Armenia\",\n  \"Aghavnadzor, Armenia\",\n  \"Areni, Armenia\",\n  \"Getap’, Armenia\",\n  \"Gladzor, Armenia\",\n  \"Jermuk, Armenia\",\n  \"Malishka, Armenia\",\n  \"Rrind, Armenia\",\n  \"Shatin, Armenia\",\n  \"Vayk’, Armenia\",\n  \"Vernashen, Armenia\",\n  \"Yeghegis, Armenia\",\n  \"Yeghegnadzor, Armenia\",\n  \"Zarrit’ap’, Armenia\",\n  \"Arabkir, Armenia\",\n  \"Argavand, Armenia\",\n  \"Jrashen, Armenia\",\n  \"K’anak’erravan, Armenia\",\n  \"Vardadzor, Armenia\",\n  \"Yerevan, Armenia\",\n  \"Acton, Australia\",\n  \"Ainslie, Australia\",\n  \"Amaroo, Australia\",\n  \"Aranda, Australia\",\n  \"Banks, Australia\",\n  \"Barton, Australia\",\n  \"Belconnen, Australia\",\n  \"Bonner, Australia\",\n  \"Bonython, Australia\",\n  \"Braddon, Australia\",\n  \"Bruce, Australia\",\n  \"Calwell, Australia\",\n  \"Campbell, Australia\",\n  \"Canberra, Australia\",\n  \"Casey, Australia\",\n  \"Chapman, Australia\",\n  \"Charnwood, Australia\",\n  \"Chifley, Australia\",\n  \"Chisholm, Australia\",\n  \"City, Australia\",\n  \"Conder, Australia\",\n  \"Cook, Australia\",\n  \"Coombs, Australia\",\n  \"Crace, Australia\",\n  \"Curtin, Australia\",\n  \"Deakin, Australia\",\n  \"Dickson, Australia\",\n  \"Downer, Australia\",\n  \"Duffy, Australia\",\n  \"Dunlop, Australia\",\n  \"Evatt, Australia\",\n  \"Fadden, Australia\",\n  \"Farrer, Australia\",\n  \"Fisher, Australia\",\n  \"Florey, Australia\",\n  \"Flynn, Australia\",\n  \"Forde, Australia\",\n  \"Forrest, Australia\",\n  \"Franklin, Australia\",\n  \"Fraser, Australia\",\n  \"Garran, Australia\",\n  \"Gilmore, Australia\",\n  \"Giralang, Australia\",\n  \"Gordon, Australia\",\n  \"Gowrie, Australia\",\n  \"Greenway, Australia\",\n  \"Griffith, Australia\",\n  \"Gungahlin, Australia\",\n  \"Hackett, Australia\",\n  \"Harrison, Australia\",\n  \"Hawker, Australia\",\n  \"Higgins, Australia\",\n  \"Holder, Australia\",\n  \"Holt, Australia\",\n  \"Hughes, Australia\",\n  \"Isaacs, Australia\",\n  \"Isabella Plains, Australia\",\n  \"Kaleen, Australia\",\n  \"Kambah, Australia\",\n  \"Kingston, Australia\",\n  \"Latham, Australia\",\n  \"Lyneham, Australia\",\n  \"Lyons, Australia\",\n  \"Macarthur, Australia\",\n  \"Macgregor, Australia\",\n  \"Macquarie, Australia\",\n  \"Mawson, Australia\",\n  \"McKellar, Australia\",\n  \"Melba, Australia\",\n  \"Monash, Australia\",\n  \"Narrabundah, Australia\",\n  \"Ngunnawal, Australia\",\n  \"Nicholls, Australia\",\n  \"O'Connor, Australia\",\n  \"Oxley, Australia\",\n  \"Page, Australia\",\n  \"Palmerston, Australia\",\n  \"Pearce, Australia\",\n  \"Phillip, Australia\",\n  \"Red Hill, Australia\",\n  \"Reid, Australia\",\n  \"Richardson, Australia\",\n  \"Rivett, Australia\",\n  \"Scullin, Australia\",\n  \"Spence, Australia\",\n  \"Stirling, Australia\",\n  \"Theodore, Australia\",\n  \"Torrens, Australia\",\n  \"Turner, Australia\",\n  \"Wanniassa, Australia\",\n  \"Waramanga, Australia\",\n  \"Watson, Australia\",\n  \"Weetangera, Australia\",\n  \"Weston, Australia\",\n  \"Wright, Australia\",\n  \"Yarralumla, Australia\",\n  \"Abbotsbury, Australia\",\n  \"Abbotsford, Australia\",\n  \"Abercrombie, Australia\",\n  \"Aberdare, Australia\",\n  \"Aberdeen, Australia\",\n  \"Aberglasslyn, Australia\",\n  \"Abermain, Australia\",\n  \"Acacia Gardens, Australia\",\n  \"Adamstown, Australia\",\n  \"Adamstown Heights, Australia\",\n  \"Airds, Australia\",\n  \"Albion Park, Australia\",\n  \"Albion Park Rail, Australia\",\n  \"Albury, Australia\",\n  \"Albury Municipality, Australia\",\n  \"Aldavilla, Australia\",\n  \"Alexandria, Australia\",\n  \"Alfords Point, Australia\",\n  \"Allambie Heights, Australia\",\n  \"Allawah, Australia\",\n  \"Alstonville, Australia\",\n  \"Ambarvale, Australia\",\n  \"Anna Bay, Australia\",\n  \"Annandale, Australia\",\n  \"Annangrove, Australia\",\n  \"Appin, Australia\",\n  \"Arcadia, Australia\",\n  \"Arcadia vale, Australia\",\n  \"Argenton, Australia\",\n  \"Armidale, Australia\",\n  \"Arncliffe, Australia\",\n  \"Artarmon, Australia\",\n  \"Ashbury, Australia\",\n  \"Ashcroft, Australia\",\n  \"Ashfield, Australia\",\n  \"Ashmont, Australia\",\n  \"Ashtonfield, Australia\",\n  \"Asquith, Australia\",\n  \"Auburn, Australia\",\n  \"Austinmer, Australia\",\n  \"Austral, Australia\",\n  \"Avoca Beach, Australia\",\n  \"Avondale, Australia\",\n  \"Balgowlah, Australia\",\n  \"Balgowlah Heights, Australia\",\n  \"Balgownie, Australia\",\n  \"Ballina, Australia\",\n  \"Balmain, Australia\",\n  \"Balmain East, Australia\",\n  \"Balranald, Australia\",\n  \"Bangalow, Australia\",\n  \"Bangor, Australia\",\n  \"Banksia, Australia\",\n  \"Banksmeadow, Australia\",\n  \"Bankstown, Australia\",\n  \"Banora Point, Australia\",\n  \"Bar Beach, Australia\",\n  \"Barden Ridge, Australia\",\n  \"Bardia, Australia\",\n  \"Bardwell Park, Australia\",\n  \"Bardwell Valley, Australia\",\n  \"Bargo, Australia\",\n  \"Barham, Australia\",\n  \"Barnsley, Australia\",\n  \"Barooga, Australia\",\n  \"Barraba, Australia\",\n  \"Barrack Heights, Australia\",\n  \"Basin View, Australia\",\n  \"Bass Hill, Australia\",\n  \"Bateau Bay, Australia\",\n  \"Batehaven, Australia\",\n  \"Batemans Bay, Australia\",\n  \"Bathurst, Australia\",\n  \"Bathurst city centre, Australia\",\n  \"Bathurst Regional, Australia\",\n  \"Batlow, Australia\",\n  \"Baulkham Hills, Australia\",\n  \"Bay View, Australia\",\n  \"Beacon Hill, Australia\",\n  \"Beaumont Hills, Australia\",\n  \"Beecroft, Australia\",\n  \"Bega, Australia\",\n  \"Bega Valley, Australia\",\n  \"Belfield, Australia\",\n  \"Bella Vista, Australia\",\n  \"Bellambi, Australia\",\n  \"Bellbird, Australia\",\n  \"Bellevue Hill, Australia\",\n  \"Bellingen, Australia\",\n  \"Belmont, Australia\",\n  \"Belmont North, Australia\",\n  \"Belmont South, Australia\",\n  \"Belmore, Australia\",\n  \"Belrose, Australia\",\n  \"Bensville, Australia\",\n  \"Berala, Australia\",\n  \"Beresfield, Australia\",\n  \"Berkeley, Australia\",\n  \"Berkeley Vale, Australia\",\n  \"Berkshire Park, Australia\",\n  \"Bermagui, Australia\",\n  \"Berowra, Australia\",\n  \"Berowra Heights, Australia\",\n  \"Berridale, Australia\",\n  \"Berrigan, Australia\",\n  \"Berry, Australia\",\n  \"Beverley Park, Australia\",\n  \"Beverly Hills, Australia\",\n  \"Bexley, Australia\",\n  \"Bexley North, Australia\",\n  \"Bidwill, Australia\",\n  \"Bilambil Heights, Australia\",\n  \"Bilgola Plateau, Australia\",\n  \"Bingara, Australia\",\n  \"Birchgrove, Australia\",\n  \"Birmingham Gardens, Australia\",\n  \"Birrong, Australia\",\n  \"Blackalls Park, Australia\",\n  \"Blackbutt, Australia\",\n  \"Blackett, Australia\",\n  \"Blackheath, Australia\",\n  \"Blacksmiths, Australia\",\n  \"Blacktown, Australia\",\n  \"Blackwall, Australia\",\n  \"Blair Athol, Australia\",\n  \"Blakehurst, Australia\",\n  \"Bland, Australia\",\n  \"Blaxland, Australia\",\n  \"Blayney, Australia\",\n  \"Bligh Park, Australia\",\n  \"Blue Bay, Australia\",\n  \"Blue Haven, Australia\",\n  \"Blue Mountains Municipality, Australia\",\n  \"Boambee, Australia\",\n  \"Boambee East, Australia\",\n  \"Bogan, Australia\",\n  \"Bogangar, Australia\",\n  \"Boggabri, Australia\",\n  \"Bolton Point, Australia\",\n  \"Bolwarra Heights, Australia\",\n  \"Bomaderry, Australia\",\n  \"Bombala, Australia\",\n  \"Bondi, Australia\",\n  \"Bondi Beach, Australia\",\n  \"Bondi Junction, Australia\",\n  \"Bonnells Bay, Australia\",\n  \"Bonnet Bay, Australia\",\n  \"Bonny Hills, Australia\",\n  \"Bonnyrigg, Australia\",\n  \"Bonnyrigg Heights, Australia\",\n  \"Bonville, Australia\",\n  \"Booker Bay, Australia\",\n  \"Booragul, Australia\",\n  \"Boorowa, Australia\",\n  \"Bossley Park, Australia\",\n  \"Botany, Australia\",\n  \"Botany Bay, Australia\",\n  \"Bourke, Australia\",\n  \"Bourkelands, Australia\",\n  \"Bow Bowing, Australia\",\n  \"Bowen Mountain, Australia\",\n  \"Bowenfels, Australia\",\n  \"Bowral, Australia\",\n  \"Bowraville, Australia\",\n  \"Bradbury, Australia\",\n  \"Braidwood, Australia\",\n  \"Branxton, Australia\",\n  \"Breakfast Point, Australia\",\n  \"Brewarrina, Australia\",\n  \"Brighton-Le-Sands, Australia\",\n  \"Bringelly, Australia\",\n  \"Broadmeadow, Australia\",\n  \"Broken Hill, Australia\",\n  \"Broken Hill Municipality, Australia\",\n  \"Bronte, Australia\",\n  \"Brookvale, Australia\",\n  \"Broulee, Australia\",\n  \"Brunswick Heads, Australia\",\n  \"Budgewoi, Australia\",\n  \"Buff Point, Australia\",\n  \"Bulahdelah, Australia\",\n  \"Bullaburra, Australia\",\n  \"Bulli, Australia\",\n  \"Bundanoon, Australia\",\n  \"Bundeena, Australia\",\n  \"Bungarribee, Australia\",\n  \"Bungendore, Australia\",\n  \"Buronga, Australia\",\n  \"Burradoo, Australia\",\n  \"Burraneer, Australia\",\n  \"Burrill Lake, Australia\",\n  \"Burwood, Australia\",\n  \"Busby, Australia\",\n  \"Buttaba, Australia\",\n  \"Buxton, Australia\",\n  \"Byron Bay, Australia\",\n  \"Byron Shire, Australia\",\n  \"Bywong, Australia\",\n  \"Cabarita, Australia\",\n  \"Cabonne, Australia\",\n  \"Cabramatta, Australia\",\n  \"Cabramatta West, Australia\",\n  \"Caddens, Australia\",\n  \"Calala, Australia\",\n  \"Callaghan, Australia\",\n  \"Callala Bay, Australia\",\n  \"Cambewarra Village, Australia\",\n  \"Cambridge Gardens, Australia\",\n  \"Cambridge Park, Australia\",\n  \"Camden, Australia\",\n  \"Camden Haven, Australia\",\n  \"Camden South, Australia\",\n  \"Cameron Park, Australia\",\n  \"Cammeray, Australia\",\n  \"Campbelltown, Australia\",\n  \"Campbelltown Municipality, Australia\",\n  \"Camperdown, Australia\",\n  \"Campsie, Australia\",\n  \"Canada Bay, Australia\",\n  \"Canley Heights, Australia\",\n  \"Canley Vale, Australia\",\n  \"Canowindra, Australia\",\n  \"Canterbury, Australia\",\n  \"Canton Beach, Australia\",\n  \"Cardiff, Australia\",\n  \"Cardiff Heights, Australia\",\n  \"Cardiff South, Australia\",\n  \"Caringbah, Australia\",\n  \"Caringbah South, Australia\",\n  \"Carlingford, Australia\",\n  \"Carlton, Australia\",\n  \"Carnes Hill, Australia\",\n  \"Carramar, Australia\",\n  \"Carrathool, Australia\",\n  \"Carrington, Australia\",\n  \"Carss Park, Australia\",\n  \"Cartwright, Australia\",\n  \"Carwoola, Australia\",\n  \"Casino, Australia\",\n  \"Castle Cove, Australia\",\n  \"Castle Hill, Australia\",\n  \"Castlecrag, Australia\",\n  \"Castlereagh, Australia\",\n  \"Casuarina, Australia\",\n  \"Casula, Australia\",\n  \"Catalina, Australia\",\n  \"Catherine Field, Australia\",\n  \"Caves Beach, Australia\",\n  \"Cecil Hills, Australia\",\n  \"Centennial Park, Australia\",\n  \"Central Darling, Australia\",\n  \"Cessnock, Australia\",\n  \"Chain Valley Bay, Australia\",\n  \"Charlestown, Australia\",\n  \"Charmhaven, Australia\",\n  \"Chatswood, Australia\",\n  \"Chatswood West, Australia\",\n  \"Cherrybrook, Australia\",\n  \"Chester Hill, Australia\",\n  \"Chifley, Australia\",\n  \"Chinderah, Australia\",\n  \"Chippendale, Australia\",\n  \"Chipping Norton, Australia\",\n  \"Chiswick, Australia\",\n  \"Chittaway Bay, Australia\",\n  \"City of Sydney, Australia\",\n  \"Claremont Meadows, Australia\",\n  \"Clarence Town, Australia\",\n  \"Clarence Valley, Australia\",\n  \"Claymore, Australia\",\n  \"Clemton Park, Australia\",\n  \"Clontarf, Australia\",\n  \"Clovelly, Australia\",\n  \"Coal Point, Australia\",\n  \"Cobar, Australia\",\n  \"Cobbitty, Australia\",\n  \"Coffs Harbour, Australia\",\n  \"Coleambally, Australia\",\n  \"Colebee, Australia\",\n  \"Coledale, Australia\",\n  \"Collaroy, Australia\",\n  \"Collaroy Plateau, Australia\",\n  \"Colo Vale, Australia\",\n  \"Colyton, Australia\",\n  \"Como, Australia\",\n  \"Concord, Australia\",\n  \"Concord West, Australia\",\n  \"Condell Park, Australia\",\n  \"Condobolin, Australia\",\n  \"Coniston, Australia\",\n  \"Connells Point, Australia\",\n  \"Constitution Hill, Australia\",\n  \"Coogee, Australia\",\n  \"Cooks Hill, Australia\",\n  \"Coolah, Australia\",\n  \"Coolamon, Australia\",\n  \"Cooma, Australia\",\n  \"Coonabarabran, Australia\",\n  \"Coonamble, Australia\",\n  \"Cooranbong, Australia\",\n  \"Cootamundra, Australia\",\n  \"Copacabana, Australia\",\n  \"Coraki, Australia\",\n  \"Cordeaux Heights, Australia\",\n  \"Corindi Beach, Australia\",\n  \"Corlette, Australia\",\n  \"Corowa, Australia\",\n  \"Corrimal, Australia\",\n  \"Coutts Crossing, Australia\",\n  \"Cowra, Australia\",\n  \"Cranebrook, Australia\",\n  \"Cremorne, Australia\",\n  \"Cremorne Point, Australia\",\n  \"Crescent Head, Australia\",\n  \"Crestwood, Australia\",\n  \"Cringila, Australia\",\n  \"Cromer, Australia\",\n  \"Cronulla, Australia\",\n  \"Crookwell, Australia\",\n  \"Crows Nest, Australia\",\n  \"Croydon, Australia\",\n  \"Culburra Beach, Australia\",\n  \"Culcairn, Australia\",\n  \"Cumbalum, Australia\",\n  \"Cundletown, Australia\",\n  \"Curl Curl, Australia\",\n  \"Currans Hill, Australia\",\n  \"Daceyville, Australia\",\n  \"Dalmeny, Australia\",\n  \"Dapto, Australia\",\n  \"Darling Point, Australia\",\n  \"Darlinghurst, Australia\",\n  \"Darlington, Australia\",\n  \"Darlington Point, Australia\",\n  \"Davidson, Australia\",\n  \"Davistown, Australia\",\n  \"Dean Park, Australia\",\n  \"Dee Why, Australia\",\n  \"Denham Court, Australia\",\n  \"Deniliquin, Australia\",\n  \"Denistone, Australia\",\n  \"Denistone East, Australia\",\n  \"Denman, Australia\",\n  \"Dharruk, Australia\",\n  \"Dolls Point, Australia\",\n  \"Doonside, Australia\",\n  \"Dora Creek, Australia\",\n  \"Dorrigo, Australia\",\n  \"Double Bay, Australia\",\n  \"Douglas Park, Australia\",\n  \"Dover Heights, Australia\",\n  \"Drummoyne, Australia\",\n  \"Dubbo, Australia\",\n  \"Dudley, Australia\",\n  \"Dulwich Hill, Australia\",\n  \"Dundas Valley, Australia\",\n  \"Dunedoo, Australia\",\n  \"Dungog, Australia\",\n  \"Dural, Australia\",\n  \"Eagle Vale, Australia\",\n  \"Earlwood, Australia\",\n  \"East Albury, Australia\",\n  \"East Ballina, Australia\",\n  \"East Branxton, Australia\",\n  \"East Corrimal, Australia\",\n  \"East Gosford, Australia\",\n  \"East Hills, Australia\",\n  \"East Jindabyne, Australia\",\n  \"East Kempsey, Australia\",\n  \"East Killara, Australia\",\n  \"East Kurrajong, Australia\",\n  \"East Lindfield, Australia\",\n  \"East Lismore, Australia\",\n  \"East Maitland, Australia\",\n  \"East Ryde, Australia\",\n  \"East Tamworth, Australia\",\n  \"Eastlakes, Australia\",\n  \"Eastwood, Australia\",\n  \"Eden, Australia\",\n  \"Edensor Park, Australia\",\n  \"Edgecliff, Australia\",\n  \"Edgeworth, Australia\",\n  \"Edmondson Park, Australia\",\n  \"Eglinton, Australia\",\n  \"Elanora Heights, Australia\",\n  \"Elderslie, Australia\",\n  \"Eleebana, Australia\",\n  \"Elermore Vale, Australia\",\n  \"Elizabeth Bay, Australia\",\n  \"Elizabeth Hills, Australia\",\n  \"Ellalong, Australia\",\n  \"Emerald Beach, Australia\",\n  \"Emerton, Australia\",\n  \"Empire Bay, Australia\",\n  \"Emu Heights, Australia\",\n  \"Emu Plains, Australia\",\n  \"Engadine, Australia\",\n  \"Enmore, Australia\",\n  \"Epping, Australia\",\n  \"Erina, Australia\",\n  \"Ermington, Australia\",\n  \"Erskine Park, Australia\",\n  \"Erskineville, Australia\",\n  \"Eschol Park, Australia\",\n  \"Estella, Australia\",\n  \"Ettalong, Australia\",\n  \"Ettalong Beach, Australia\",\n  \"Eulomogo, Australia\",\n  \"Eurobodalla, Australia\",\n  \"Evans Head, Australia\",\n  \"Fairfield, Australia\",\n  \"Fairfield East, Australia\",\n  \"Fairfield Heights, Australia\",\n  \"Fairfield West, Australia\",\n  \"Fairlight, Australia\",\n  \"Fairy Meadow, Australia\",\n  \"Farmborough Heights, Australia\",\n  \"Faulconbridge, Australia\",\n  \"Fennell Bay, Australia\",\n  \"Fern Bay, Australia\",\n  \"Fern Hill, Australia\",\n  \"Figtree, Australia\",\n  \"Fingal Bay, Australia\",\n  \"Finley, Australia\",\n  \"Five Dock, Australia\",\n  \"Fletcher, Australia\",\n  \"Flinders, Australia\",\n  \"Floraville, Australia\",\n  \"Forbes, Australia\",\n  \"Forest Hill, Australia\",\n  \"Forest Lodge, Australia\",\n  \"Forestville, Australia\",\n  \"Forresters Beach, Australia\",\n  \"Forster, Australia\",\n  \"Frederickton, Australia\",\n  \"Freemans Reach, Australia\",\n  \"Frenchs Forest, Australia\",\n  \"Freshwater, Australia\",\n  \"Galston, Australia\",\n  \"Garden Suburb, Australia\",\n  \"Gateshead, Australia\",\n  \"Georges Hall, Australia\",\n  \"Georgetown, Australia\",\n  \"Gerringong, Australia\",\n  \"Gilgandra, Australia\",\n  \"Gillieston Heights, Australia\",\n  \"Girards Hill, Australia\",\n  \"Girraween, Australia\",\n  \"Gladesville, Australia\",\n  \"Glebe, Australia\",\n  \"Glen Alpine, Australia\",\n  \"Glen Innes, Australia\",\n  \"Glen Innes Severn, Australia\",\n  \"Glenbrook, Australia\",\n  \"Glendale, Australia\",\n  \"Glendenning, Australia\",\n  \"Glenfield, Australia\",\n  \"Glenfield Park, Australia\",\n  \"Glenhaven, Australia\",\n  \"Glenmore Park, Australia\",\n  \"Glenning Valley, Australia\",\n  \"Glenorie, Australia\",\n  \"Glenroy, Australia\",\n  \"Glenwood, Australia\",\n  \"Glossodia, Australia\",\n  \"Gloucester, Australia\",\n  \"Gol Gol, Australia\",\n  \"Googong, Australia\",\n  \"Goonellabah, Australia\",\n  \"Gordon, Australia\",\n  \"Gorokan, Australia\",\n  \"Gosford, Australia\",\n  \"Goulburn, Australia\",\n  \"Goulburn Mulwaree, Australia\",\n  \"Grafton, Australia\",\n  \"Granville, Australia\",\n  \"Grasmere, Australia\",\n  \"Grays Point, Australia\",\n  \"Greater Hume Shire, Australia\",\n  \"Green Valley, Australia\",\n  \"Greenacre, Australia\",\n  \"Greenfield Park, Australia\",\n  \"Greenwell Point, Australia\",\n  \"Greenwich, Australia\",\n  \"Gregory Hills, Australia\",\n  \"Grenfell, Australia\",\n  \"Greta, Australia\",\n  \"Greystanes, Australia\",\n  \"Griffith, Australia\",\n  \"Grose Vale, Australia\",\n  \"Guildford West, Australia\",\n  \"Gulgong, Australia\",\n  \"Gulmarrad, Australia\",\n  \"Gundagai, Australia\",\n  \"Gundaroo, Australia\",\n  \"Gunnedah, Australia\",\n  \"Guyra, Australia\",\n  \"Gwandalan, Australia\",\n  \"Gwydir, Australia\",\n  \"Gwynneville, Australia\",\n  \"Gymea, Australia\",\n  \"Gymea Bay, Australia\",\n  \"Haberfield, Australia\",\n  \"Halekulani, Australia\",\n  \"Hamilton, Australia\",\n  \"Hamlyn Terrace, Australia\",\n  \"Hammondville, Australia\",\n  \"Hanwood, Australia\",\n  \"Harrington, Australia\",\n  \"Harrington Park, Australia\",\n  \"Harris Park, Australia\",\n  \"Hassall Grove, Australia\",\n  \"Hawkesbury, Australia\",\n  \"Hawks Nest, Australia\",\n  \"Hay, Australia\",\n  \"Haymarket, Australia\",\n  \"Hazelbrook, Australia\",\n  \"Heathcote, Australia\",\n  \"Hebersham, Australia\",\n  \"Heckenberg, Australia\",\n  \"Heddon Greta, Australia\",\n  \"Helensburgh, Australia\",\n  \"Henty, Australia\",\n  \"Hill Top, Australia\",\n  \"Hillsdale, Australia\",\n  \"Hillston, Australia\",\n  \"Hillvue, Australia\",\n  \"Hinchinbrook, Australia\",\n  \"Hobartville, Australia\",\n  \"Holbrook, Australia\",\n  \"Holmesville, Australia\",\n  \"Holroyd, Australia\",\n  \"Holsworthy, Australia\",\n  \"Homebush, Australia\",\n  \"Homebush West, Australia\",\n  \"Horningsea Park, Australia\",\n  \"Hornsby, Australia\",\n  \"Hornsby Heights, Australia\",\n  \"Hornsby Shire, Australia\",\n  \"Horsley, Australia\",\n  \"Horsley Park, Australia\",\n  \"Howlong, Australia\",\n  \"Hoxton Park, Australia\",\n  \"Hunters Hill, Australia\",\n  \"Hunterview, Australia\",\n  \"Huntingwood, Australia\",\n  \"Hurlstone Park, Australia\",\n  \"Hurstville, Australia\",\n  \"Hurstville Grove, Australia\",\n  \"Illawong, Australia\",\n  \"Iluka, Australia\",\n  \"Ingleburn, Australia\",\n  \"Inverell, Australia\",\n  \"Islington, Australia\",\n  \"Jamberoo, Australia\",\n  \"Jamisontown, Australia\",\n  \"Jannali, Australia\",\n  \"Jerilderie, Australia\",\n  \"Jerrabomberra, Australia\",\n  \"Jesmond, Australia\",\n  \"Jewells, Australia\",\n  \"Jilliby, Australia\",\n  \"Jindabyne, Australia\",\n  \"Jindera, Australia\",\n  \"Jordan Springs, Australia\",\n  \"Junction Hill, Australia\",\n  \"Junee, Australia\",\n  \"Kahibah, Australia\",\n  \"Kanahooka, Australia\",\n  \"Kandos, Australia\",\n  \"Kanwal, Australia\",\n  \"Kapooka, Australia\",\n  \"Karabar, Australia\",\n  \"Kareela, Australia\",\n  \"Kariong, Australia\",\n  \"Karuah, Australia\",\n  \"Katoomba, Australia\",\n  \"Kearns, Australia\",\n  \"Keiraville, Australia\",\n  \"Kellyville, Australia\",\n  \"Kellyville Ridge, Australia\",\n  \"Kelso, Australia\",\n  \"Kemps Creek, Australia\",\n  \"Kempsey, Australia\",\n  \"Kendall, Australia\",\n  \"Kensington, Australia\",\n  \"Kenthurst, Australia\",\n  \"Kew, Australia\",\n  \"Kiama, Australia\",\n  \"Kiama Downs, Australia\",\n  \"Kilaben Bay, Australia\",\n  \"Killara, Australia\",\n  \"Killarney Heights, Australia\",\n  \"Killarney Vale, Australia\",\n  \"King Creek, Australia\",\n  \"Kings Langley, Australia\",\n  \"Kings Park, Australia\",\n  \"Kingscliff, Australia\",\n  \"Kingsford, Australia\",\n  \"Kingsgrove, Australia\",\n  \"Kingswood Park, Australia\",\n  \"Kirrawee, Australia\",\n  \"Kirribilli, Australia\",\n  \"Kogarah, Australia\",\n  \"Kogarah Bay, Australia\",\n  \"Koonawarra, Australia\",\n  \"Kooringal, Australia\",\n  \"Kootingal, Australia\",\n  \"Korora, Australia\",\n  \"Kosciuszko National Park, Australia\",\n  \"Kotara, Australia\",\n  \"Kotara South, Australia\",\n  \"Ku-ring-gai, Australia\",\n  \"Kurnell, Australia\",\n  \"Kurraba Point, Australia\",\n  \"Kurrajong Heights, Australia\",\n  \"Kurri Kurri, Australia\",\n  \"Kyle Bay, Australia\",\n  \"Kyogle, Australia\",\n  \"Lachlan, Australia\",\n  \"Lake Albert, Australia\",\n  \"Lake Cargelligo, Australia\",\n  \"Lake Cathie, Australia\",\n  \"Lake Haven, Australia\",\n  \"Lake Heights, Australia\",\n  \"Lake Illawarra, Australia\",\n  \"Lake Macquarie Shire, Australia\",\n  \"Lake Munmorah, Australia\",\n  \"Lakelands, Australia\",\n  \"Lakemba, Australia\",\n  \"Lakewood, Australia\",\n  \"Lalor Park, Australia\",\n  \"Lambton, Australia\",\n  \"Lane Cove, Australia\",\n  \"Lane Cove North, Australia\",\n  \"Lane Cove West, Australia\",\n  \"Lansvale, Australia\",\n  \"Largs, Australia\",\n  \"Lavington, Australia\",\n  \"Lawrence, Australia\",\n  \"Lawson, Australia\",\n  \"Leeton, Australia\",\n  \"Leichhardt, Australia\",\n  \"Lemon Tree Passage, Australia\",\n  \"Lennox Head, Australia\",\n  \"Leonay, Australia\",\n  \"Leppington, Australia\",\n  \"Lethbridge Park, Australia\",\n  \"Leumeah, Australia\",\n  \"Leura, Australia\",\n  \"Lewisham, Australia\",\n  \"Liberty Grove, Australia\",\n  \"Lidcombe, Australia\",\n  \"Lightning Ridge, Australia\",\n  \"Lilli Pilli, Australia\",\n  \"Lilyfield, Australia\",\n  \"Lindfield, Australia\",\n  \"Lisarow, Australia\",\n  \"Lismore, Australia\",\n  \"Lismore Heights, Australia\",\n  \"Lismore Municipality, Australia\",\n  \"Lithgow, Australia\",\n  \"Little Bay, Australia\",\n  \"Liverpool, Australia\",\n  \"Liverpool Plains, Australia\",\n  \"Llanarth, Australia\",\n  \"Llandilo, Australia\",\n  \"Lockhart, Australia\",\n  \"Loftus, Australia\",\n  \"Londonderry, Australia\",\n  \"Long Beach, Australia\",\n  \"Long Jetty, Australia\",\n  \"Longueville, Australia\",\n  \"Lorn, Australia\",\n  \"Luddenham, Australia\",\n  \"Lugarno, Australia\",\n  \"Lurnea, Australia\",\n  \"Macksville, Australia\",\n  \"Maclean, Australia\",\n  \"Macmasters Beach, Australia\",\n  \"Macquarie Fields, Australia\",\n  \"Macquarie Hills, Australia\",\n  \"Macquarie Links, Australia\",\n  \"Macquarie Park, Australia\",\n  \"Maitland, Australia\",\n  \"Maitland city centre, Australia\",\n  \"Maitland Municipality, Australia\",\n  \"Malabar, Australia\",\n  \"Malua Bay, Australia\",\n  \"Mangerton, Australia\",\n  \"Manilla, Australia\",\n  \"Manly, Australia\",\n  \"Manly Vale, Australia\",\n  \"Mannering Park, Australia\",\n  \"Maraylya, Australia\",\n  \"Marayong, Australia\",\n  \"Mardi, Australia\",\n  \"Marks Point, Australia\",\n  \"Maroubra, Australia\",\n  \"Marrickville, Australia\",\n  \"Marsfield, Australia\",\n  \"Marulan, Australia\",\n  \"Maryland, Australia\",\n  \"Maryville, Australia\",\n  \"Mascot, Australia\",\n  \"Matraville, Australia\",\n  \"Mayfield, Australia\",\n  \"Mayfield East, Australia\",\n  \"Mayfield West, Australia\",\n  \"McGraths Hill, Australia\",\n  \"McMahons Point, Australia\",\n  \"Meadowbank, Australia\",\n  \"Medowie, Australia\",\n  \"Melrose Park, Australia\",\n  \"Menai, Australia\",\n  \"Menangle, Australia\",\n  \"Merewether, Australia\",\n  \"Merewether Heights, Australia\",\n  \"Merimbula, Australia\",\n  \"Merriwa, Australia\",\n  \"Merrylands, Australia\",\n  \"Merrylands West, Australia\",\n  \"Metford, Australia\",\n  \"Mid-Western Regional, Australia\",\n  \"Middle Cove, Australia\",\n  \"Middleton Grange, Australia\",\n  \"Miller, Australia\",\n  \"Millers Point, Australia\",\n  \"Millthorpe, Australia\",\n  \"Milperra, Australia\",\n  \"Milsons Point, Australia\",\n  \"Milton, Australia\",\n  \"Minchinbury, Australia\",\n  \"Minto, Australia\",\n  \"Miranda, Australia\",\n  \"Mitchell, Australia\",\n  \"Mittagong, Australia\",\n  \"Moama, Australia\",\n  \"Mollymook, Australia\",\n  \"Mollymook Beach, Australia\",\n  \"Molong, Australia\",\n  \"Mona Vale, Australia\",\n  \"Monterey, Australia\",\n  \"Moonbi, Australia\",\n  \"Moonee Beach, Australia\",\n  \"Moorebank, Australia\",\n  \"Moree, Australia\",\n  \"Moree Plains, Australia\",\n  \"Morisset, Australia\",\n  \"Morpeth, Australia\",\n  \"Mortdale, Australia\",\n  \"Mortlake, Australia\",\n  \"Moruya, Australia\",\n  \"Mosman, Australia\",\n  \"Moss Vale, Australia\",\n  \"Mount Annan, Australia\",\n  \"Mount Austin, Australia\",\n  \"Mount Colah, Australia\",\n  \"Mount Druitt, Australia\",\n  \"Mount Hutton, Australia\",\n  \"Mount Keira, Australia\",\n  \"Mount Kembla, Australia\",\n  \"Mount Kuring-Gai, Australia\",\n  \"Mount Lewis, Australia\",\n  \"Mount Ousley, Australia\",\n  \"Mount Pleasant, Australia\",\n  \"Mount Pritchard, Australia\",\n  \"Mount Riverview, Australia\",\n  \"Mount Saint Thomas, Australia\",\n  \"Mount Vernon, Australia\",\n  \"Mount Warrigal, Australia\",\n  \"Mudgee, Australia\",\n  \"Mulgoa, Australia\",\n  \"Mullumbimby, Australia\",\n  \"Mulwala, Australia\",\n  \"Murrumbateman, Australia\",\n  \"Murrurundi, Australia\",\n  \"Murwillumbah, Australia\",\n  \"Muswellbrook, Australia\",\n  \"Nabiac, Australia\",\n  \"Nambucca, Australia\",\n  \"Nambucca Heads, Australia\",\n  \"Nambucca Shire, Australia\",\n  \"Nana Glen, Australia\",\n  \"Narara, Australia\",\n  \"Narellan, Australia\",\n  \"Narellan Vale, Australia\",\n  \"Naremburn, Australia\",\n  \"Narooma, Australia\",\n  \"Narrabeen, Australia\",\n  \"Narrabri, Australia\",\n  \"Narrandera, Australia\",\n  \"Narrawallee, Australia\",\n  \"Narraweena, Australia\",\n  \"Narromine, Australia\",\n  \"Narwee, Australia\",\n  \"Nelson Bay, Australia\",\n  \"Neutral Bay, Australia\",\n  \"New Lambton, Australia\",\n  \"New Lambton Heights, Australia\",\n  \"Newcastle, Australia\",\n  \"Newcastle city centre, Australia\",\n  \"Newcastle East, Australia\",\n  \"Newington, Australia\",\n  \"Newport, Australia\",\n  \"Newtown, Australia\",\n  \"Niagara Park, Australia\",\n  \"Nimbin, Australia\",\n  \"Noraville, Australia\",\n  \"Normanhurst, Australia\",\n  \"North Albury, Australia\",\n  \"North Avoca, Australia\",\n  \"North Balgowlah, Australia\",\n  \"North Boambee Valley, Australia\",\n  \"North Bondi, Australia\",\n  \"North Curl Curl, Australia\",\n  \"North Epping, Australia\",\n  \"North Gosford, Australia\",\n  \"North Haven, Australia\",\n  \"North Lambton, Australia\",\n  \"North Manly, Australia\",\n  \"North Narrabeen, Australia\",\n  \"North Nowra, Australia\",\n  \"North Parramatta, Australia\",\n  \"North Richmond, Australia\",\n  \"North Rocks, Australia\",\n  \"North Ryde, Australia\",\n  \"North St Marys, Australia\",\n  \"North Strathfield, Australia\",\n  \"North Sydney, Australia\",\n  \"North Tamworth, Australia\",\n  \"North Turramurra, Australia\",\n  \"North Wahroonga, Australia\",\n  \"North Willoughby, Australia\",\n  \"North Wollongong, Australia\",\n  \"Northbridge, Australia\",\n  \"Northmead, Australia\",\n  \"Nowra, Australia\",\n  \"Nowra Hill, Australia\",\n  \"Nyngan, Australia\",\n  \"Oak Flats, Australia\",\n  \"Oakdale, Australia\",\n  \"Oakhurst, Australia\",\n  \"Oakville, Australia\",\n  \"Oatlands, Australia\",\n  \"Oatley, Australia\",\n  \"Oberon, Australia\",\n  \"Ocean Shores, Australia\",\n  \"Old Bar, Australia\",\n  \"Old Erowal Bay, Australia\",\n  \"Old Guildford, Australia\",\n  \"Old Toongabbie, Australia\",\n  \"Oran Park, Australia\",\n  \"Orange, Australia\",\n  \"Orange Municipality, Australia\",\n  \"Orangeville, Australia\",\n  \"Orchard Hills, Australia\",\n  \"Ourimbah, Australia\",\n  \"Oxley Park, Australia\",\n  \"Oxley Vale, Australia\",\n  \"Oyster Bay, Australia\",\n  \"Paddington, Australia\",\n  \"Padstow, Australia\",\n  \"Padstow Heights, Australia\",\n  \"Pagewood, Australia\",\n  \"Palm Beach, Australia\",\n  \"Panania, Australia\",\n  \"Parkes, Australia\",\n  \"Parklea, Australia\",\n  \"Parramatta, Australia\",\n  \"Peak Hill, Australia\",\n  \"Peakhurst, Australia\",\n  \"Peakhurst Heights, Australia\",\n  \"Pemulwuy, Australia\",\n  \"Pendle Hill, Australia\",\n  \"Pennant Hills, Australia\",\n  \"Penrith, Australia\",\n  \"Penrith Municipality, Australia\",\n  \"Penshurst, Australia\",\n  \"Petersham, Australia\",\n  \"Phillip, Australia\",\n  \"Picnic Point, Australia\",\n  \"Picton, Australia\",\n  \"Pitt Town, Australia\",\n  \"Plumpton, Australia\",\n  \"Point Clare, Australia\",\n  \"Point Frederick, Australia\",\n  \"Point Piper, Australia\",\n  \"Pokolbin, Australia\",\n  \"Port Hacking, Australia\",\n  \"Port Kembla, Australia\",\n  \"Port Macquarie, Australia\",\n  \"Port Macquarie-Hastings, Australia\",\n  \"Port Stephens Shire, Australia\",\n  \"Portland, Australia\",\n  \"Potts Point, Australia\",\n  \"Pottsville, Australia\",\n  \"Pottsville Beach, Australia\",\n  \"Prairiewood, Australia\",\n  \"Prestons, Australia\",\n  \"Primbee, Australia\",\n  \"Prospect, Australia\",\n  \"Punchbowl, Australia\",\n  \"Putney, Australia\",\n  \"Pymble, Australia\",\n  \"Pyrmont, Australia\",\n  \"Quakers Hill, Australia\",\n  \"Queanbeyan, Australia\",\n  \"Queanbeyan East, Australia\",\n  \"Queanbeyan West, Australia\",\n  \"Queens Park, Australia\",\n  \"Queenscliff, Australia\",\n  \"Quirindi, Australia\",\n  \"Raby, Australia\",\n  \"Raglan, Australia\",\n  \"Ramsgate, Australia\",\n  \"Ramsgate Beach, Australia\",\n  \"Randwick, Australia\",\n  \"Rankin Park, Australia\",\n  \"Rathmines, Australia\",\n  \"Raworth, Australia\",\n  \"Raymond Terrace, Australia\",\n  \"Razorback, Australia\",\n  \"Redfern, Australia\",\n  \"Redhead, Australia\",\n  \"Regents Park, Australia\",\n  \"Revesby, Australia\",\n  \"Revesby Heights, Australia\",\n  \"Rhodes, Australia\",\n  \"Richmond, Australia\",\n  \"Richmond Valley, Australia\",\n  \"Riverstone, Australia\",\n  \"Riverview, Australia\",\n  \"Riverwood, Australia\",\n  \"Robertson, Australia\",\n  \"Rockdale, Australia\",\n  \"Rodd Point, Australia\",\n  \"Rooty Hill, Australia\",\n  \"Ropes Crossing, Australia\",\n  \"Rose Bay, Australia\",\n  \"Rosebery, Australia\",\n  \"Rosehill, Australia\",\n  \"Roselands, Australia\",\n  \"Rosemeadow, Australia\",\n  \"Roseville, Australia\",\n  \"Roseville Chase, Australia\",\n  \"Rouse Hill, Australia\",\n  \"Rozelle, Australia\",\n  \"Ruse, Australia\",\n  \"Rushcutters Bay, Australia\",\n  \"Russell Lea, Australia\",\n  \"Russell Vale, Australia\",\n  \"Rutherford, Australia\",\n  \"Rydalmere, Australia\",\n  \"Ryde, Australia\",\n  \"Sadleir, Australia\",\n  \"Saint Ives, Australia\",\n  \"Saint Peters, Australia\",\n  \"Salamander Bay, Australia\",\n  \"Salt Ash, Australia\",\n  \"San Remo, Australia\",\n  \"Sanctuary Point, Australia\",\n  \"Sandringham, Australia\",\n  \"Sandy Beach, Australia\",\n  \"Sans Souci, Australia\",\n  \"Sapphire Beach, Australia\",\n  \"Saratoga, Australia\",\n  \"Sawtell, Australia\",\n  \"Schofields, Australia\",\n  \"Scone, Australia\",\n  \"Seaforth, Australia\",\n  \"Sefton, Australia\",\n  \"Seven Hills, Australia\",\n  \"Shalvey, Australia\",\n  \"Shell Cove, Australia\",\n  \"Shellharbour, Australia\",\n  \"Shelly Beach, Australia\",\n  \"Shoal Bay, Australia\",\n  \"Shoalhaven Heads, Australia\",\n  \"Shoalhaven Shire, Australia\",\n  \"Shortland, Australia\",\n  \"Silverdale, Australia\",\n  \"Silverwater, Australia\",\n  \"Singleton, Australia\",\n  \"Singleton Heights, Australia\",\n  \"Skennars Head, Australia\",\n  \"Smithfield, Australia\",\n  \"Smiths Lake, Australia\",\n  \"Soldiers Point, Australia\",\n  \"Somersby, Australia\",\n  \"South Albury, Australia\",\n  \"South Bathurst, Australia\",\n  \"South Bowenfels, Australia\",\n  \"South Coogee, Australia\",\n  \"South Grafton, Australia\",\n  \"South Granville, Australia\",\n  \"South Hurstville, Australia\",\n  \"South Kempsey, Australia\",\n  \"South Lismore, Australia\",\n  \"South Murwillumbah, Australia\",\n  \"South Nowra, Australia\",\n  \"South Penrith, Australia\",\n  \"South Tamworth, Australia\",\n  \"South Turramurra, Australia\",\n  \"South Wentworthville, Australia\",\n  \"South West Rocks, Australia\",\n  \"South Windsor, Australia\",\n  \"Speers Point, Australia\",\n  \"Spring Farm, Australia\",\n  \"Springdale Heights, Australia\",\n  \"Springvale, Australia\",\n  \"Springwood, Australia\",\n  \"St Andrews, Australia\",\n  \"St Clair, Australia\",\n  \"St Helens Park, Australia\",\n  \"St Huberts Island, Australia\",\n  \"St Ives Chase, Australia\",\n  \"St Johns Park, Australia\",\n  \"St Leonards, Australia\",\n  \"St. Georges Basin, Australia\",\n  \"Stanhope Gardens, Australia\",\n  \"Stanmore, Australia\",\n  \"Stanwell Park, Australia\",\n  \"Stockton, Australia\",\n  \"Strathfield, Australia\",\n  \"Strathfield South, Australia\",\n  \"Suffolk Park, Australia\",\n  \"Summer Hill, Australia\",\n  \"Summerland Point, Australia\",\n  \"Sunshine Bay, Australia\",\n  \"Surfside, Australia\",\n  \"Surry Hills, Australia\",\n  \"Sussex Inlet, Australia\",\n  \"Sutherland, Australia\",\n  \"Sutherland Shire, Australia\",\n  \"Sutton, Australia\",\n  \"Swansea, Australia\",\n  \"Sydenham, Australia\",\n  \"Sydney, Australia\",\n  \"Sydney Central Business District, Australia\",\n  \"Sydney Olympic Park, Australia\",\n  \"Sylvania, Australia\",\n  \"Sylvania Waters, Australia\",\n  \"Table Top, Australia\",\n  \"Tahmoor, Australia\",\n  \"Tamarama, Australia\",\n  \"Tamworth, Australia\",\n  \"Tamworth Municipality, Australia\",\n  \"Tanilba Bay, Australia\",\n  \"Taree, Australia\",\n  \"Taren Point, Australia\",\n  \"Tarrawanna, Australia\",\n  \"Tarro, Australia\",\n  \"Tascott, Australia\",\n  \"Tathra, Australia\",\n  \"Tatton, Australia\",\n  \"Tea Gardens, Australia\",\n  \"Telarah, Australia\",\n  \"Telopea, Australia\",\n  \"Temora, Australia\",\n  \"Temora Municipality, Australia\",\n  \"Tempe, Australia\",\n  \"Tenambit, Australia\",\n  \"Tennyson Point, Australia\",\n  \"Tenterfield, Australia\",\n  \"Tenterfield Municipality, Australia\",\n  \"Teralba, Australia\",\n  \"Terranora, Australia\",\n  \"Terrigal, Australia\",\n  \"Terry Hills, Australia\",\n  \"The Entrance, Australia\",\n  \"The Entrance North, Australia\",\n  \"The Hill, Australia\",\n  \"The Hills Shire, Australia\",\n  \"The Junction, Australia\",\n  \"The Oaks, Australia\",\n  \"The Ponds, Australia\",\n  \"The Rock, Australia\",\n  \"The Rocks, Australia\",\n  \"Thirlmere, Australia\",\n  \"Thirroul, Australia\",\n  \"Thornleigh, Australia\",\n  \"Thornton, Australia\",\n  \"Thurgoona, Australia\",\n  \"Tighes Hill, Australia\",\n  \"Tingira Heights, Australia\",\n  \"Tinonee, Australia\",\n  \"Tocumwal, Australia\",\n  \"Tolland, Australia\",\n  \"Tomakin, Australia\",\n  \"Tomerong, Australia\",\n  \"Toongabbie, Australia\",\n  \"Toormina, Australia\",\n  \"Toronto, Australia\",\n  \"Toukley, Australia\",\n  \"Towradgi, Australia\",\n  \"Trangie, Australia\",\n  \"Tregear, Australia\",\n  \"Tuggerawong, Australia\",\n  \"Tumbarumba, Australia\",\n  \"Tumbi Vmbi, Australia\",\n  \"Tumut, Australia\",\n  \"Tuncurry, Australia\",\n  \"Tura Beach, Australia\",\n  \"Tuross Head, Australia\",\n  \"Turramurra, Australia\",\n  \"Turrella, Australia\",\n  \"Turvey Park, Australia\",\n  \"Tweed, Australia\",\n  \"Tweed Heads, Australia\",\n  \"Tweed Heads South, Australia\",\n  \"Tweed Heads West, Australia\",\n  \"Ulladulla, Australia\",\n  \"Ultimo, Australia\",\n  \"Umina Beach, Australia\",\n  \"Unanderra, Australia\",\n  \"Upper Hunter Shire, Australia\",\n  \"Upper Lachlan Shire, Australia\",\n  \"Uralla, Australia\",\n  \"Urunga, Australia\",\n  \"Valentine, Australia\",\n  \"Valla Beach, Australia\",\n  \"Valley Heights, Australia\",\n  \"Vaucluse, Australia\",\n  \"Villawood, Australia\",\n  \"Vincentia, Australia\",\n  \"Vineyard, Australia\",\n  \"Voyager Point, Australia\",\n  \"Wadalba, Australia\",\n  \"Wagga Wagga, Australia\",\n  \"Wahroonga, Australia\",\n  \"Waitara, Australia\",\n  \"Wakeley, Australia\",\n  \"Walcha, Australia\",\n  \"Walgett, Australia\",\n  \"Wallacia, Australia\",\n  \"Wallalong, Australia\",\n  \"Wallerawang, Australia\",\n  \"Wallsend, Australia\",\n  \"Wamberal, Australia\",\n  \"Wamboin, Australia\",\n  \"Wangi Wangi, Australia\",\n  \"Warabrook, Australia\",\n  \"Waratah, Australia\",\n  \"Waratah West, Australia\",\n  \"Wareemba, Australia\",\n  \"Warialda, Australia\",\n  \"Warilla, Australia\",\n  \"Warners Bay, Australia\",\n  \"Warragamba, Australia\",\n  \"Warrawee, Australia\",\n  \"Warrawong, Australia\",\n  \"Warren, Australia\",\n  \"Warren Shire, Australia\",\n  \"Warriewood, Australia\",\n  \"Warrimoo, Australia\",\n  \"Warrumbungle Shire, Australia\",\n  \"Warwick Farm, Australia\",\n  \"Watanobbi, Australia\",\n  \"Waterview Heights, Australia\",\n  \"Wattle Grove, Australia\",\n  \"Wattle Ponds, Australia\",\n  \"Wauchope, Australia\",\n  \"Waverley, Australia\",\n  \"Waverton, Australia\",\n  \"Weddin, Australia\",\n  \"Wee Waa, Australia\",\n  \"Wellington, Australia\",\n  \"Wentworth, Australia\",\n  \"Wentworth Falls, Australia\",\n  \"Wentworth Point, Australia\",\n  \"Wentworthville, Australia\",\n  \"Werrington, Australia\",\n  \"Werrington County, Australia\",\n  \"Werrington Downs, Australia\",\n  \"Werris Creek, Australia\",\n  \"West Albury, Australia\",\n  \"West Ballina, Australia\",\n  \"West Bathurst, Australia\",\n  \"West Gosford, Australia\",\n  \"West Haven, Australia\",\n  \"West Hoxton, Australia\",\n  \"West Kempsey, Australia\",\n  \"West Nowra, Australia\",\n  \"West Pennant Hills, Australia\",\n  \"West Pymble, Australia\",\n  \"West Ryde, Australia\",\n  \"West Tamworth, Australia\",\n  \"West Wallsend, Australia\",\n  \"West Wollongong, Australia\",\n  \"West Wyalong, Australia\",\n  \"Westdale, Australia\",\n  \"Westleigh, Australia\",\n  \"Westmead, Australia\",\n  \"Wetherill Park, Australia\",\n  \"Whalan, Australia\",\n  \"Whale Beach, Australia\",\n  \"Wheeler Heights, Australia\",\n  \"Whitebridge, Australia\",\n  \"Wickham, Australia\",\n  \"Wilberforce, Australia\",\n  \"Wiley Park, Australia\",\n  \"Williamtown, Australia\",\n  \"Willmot, Australia\",\n  \"Willoughby, Australia\",\n  \"Willoughby East, Australia\",\n  \"Wilton, Australia\",\n  \"Windale, Australia\",\n  \"Windang, Australia\",\n  \"Windradyne, Australia\",\n  \"Windsor, Australia\",\n  \"Windsor Downs, Australia\",\n  \"Wingecarribee, Australia\",\n  \"Wingham, Australia\",\n  \"Winmalee, Australia\",\n  \"Winston Hills, Australia\",\n  \"Wolli Creek, Australia\",\n  \"Wollondilly, Australia\",\n  \"Wollongbar, Australia\",\n  \"Wollongong, Australia\",\n  \"Wollongong city centre, Australia\",\n  \"Wollstonecraft, Australia\",\n  \"Woodberry, Australia\",\n  \"Woodbine, Australia\",\n  \"Woodcroft, Australia\",\n  \"Woodford, Australia\",\n  \"Woodpark, Australia\",\n  \"Woodrising, Australia\",\n  \"Woolgoolga, Australia\",\n  \"Woollahra, Australia\",\n  \"Woolloomooloo, Australia\",\n  \"Woolooware, Australia\",\n  \"Woongarrah, Australia\",\n  \"Woonona, Australia\",\n  \"Woronora, Australia\",\n  \"Woronora Heights, Australia\",\n  \"Worrigee, Australia\",\n  \"Woy Woy, Australia\",\n  \"Wyee, Australia\",\n  \"Wyee Point, Australia\",\n  \"Wyoming, Australia\",\n  \"Wyong, Australia\",\n  \"Wyongah, Australia\",\n  \"Yagoona, Australia\",\n  \"Yallah, Australia\",\n  \"Yamba, Australia\",\n  \"Yarravel, Australia\",\n  \"Yarrawarrah, Australia\",\n  \"Yass, Australia\",\n  \"Yass Valley, Australia\",\n  \"Yenda, Australia\",\n  \"Yennora, Australia\",\n  \"Yerrinbool, Australia\",\n  \"Yoogali, Australia\",\n  \"Young, Australia\",\n  \"Yowie Bay, Australia\",\n  \"Zetland, Australia\",\n  \"Alawa, Australia\",\n  \"Alice Springs, Australia\",\n  \"Alyangula, Australia\",\n  \"Anula, Australia\",\n  \"Araluen, Australia\",\n  \"Bakewell, Australia\",\n  \"Barkly, Australia\",\n  \"Bellamack, Australia\",\n  \"Belyuen, Australia\",\n  \"Berrimah, Australia\",\n  \"Braitling, Australia\",\n  \"Brinkin, Australia\",\n  \"Central Desert, Australia\",\n  \"Coconut Grove, Australia\",\n  \"Coomalie, Australia\",\n  \"Cossack, Australia\",\n  \"Darwin, Australia\",\n  \"Desert Springs, Australia\",\n  \"Driver, Australia\",\n  \"Durack, Australia\",\n  \"East Arnhem, Australia\",\n  \"East Side, Australia\",\n  \"Fannie Bay, Australia\",\n  \"Farrar, Australia\",\n  \"Galiwinku, Australia\",\n  \"Gillen, Australia\",\n  \"Girraween, Australia\",\n  \"Gray, Australia\",\n  \"Gunbalanya, Australia\",\n  \"Gunn, Australia\",\n  \"Herbert, Australia\",\n  \"Holtze, Australia\",\n  \"Howard Springs, Australia\",\n  \"Humpty Doo, Australia\",\n  \"Jabiru, Australia\",\n  \"Jingili, Australia\",\n  \"Johnston, Australia\",\n  \"Karama, Australia\",\n  \"Katherine, Australia\",\n  \"Katherine East, Australia\",\n  \"Katherine South, Australia\",\n  \"Larapinta, Australia\",\n  \"Larrakeyah, Australia\",\n  \"Leanyer, Australia\",\n  \"Litchfield, Australia\",\n  \"Ludmilla, Australia\",\n  \"Lyons, Australia\",\n  \"MacDonnell, Australia\",\n  \"Malak, Australia\",\n  \"Maningrida, Australia\",\n  \"Marrara, Australia\",\n  \"Milingimbi, Australia\",\n  \"Millner, Australia\",\n  \"Moil, Australia\",\n  \"Moulden, Australia\",\n  \"Muirhead, Australia\",\n  \"Nakara, Australia\",\n  \"Ngukurr, Australia\",\n  \"Nhulunbuy, Australia\",\n  \"Nightcliff, Australia\",\n  \"Palmerston, Australia\",\n  \"Parap, Australia\",\n  \"Rapid Creek, Australia\",\n  \"Roper Gulf, Australia\",\n  \"Rosebery, Australia\",\n  \"Ross, Australia\",\n  \"Sadadeen, Australia\",\n  \"Stuart Park, Australia\",\n  \"Tennant Creek, Australia\",\n  \"The Gap, Australia\",\n  \"Tiwi, Australia\",\n  \"Tiwi Islands, Australia\",\n  \"Victoria Daly, Australia\",\n  \"Virginia, Australia\",\n  \"Wadeye, Australia\",\n  \"Wagait, Australia\",\n  \"Wagaman, Australia\",\n  \"Wanguri, Australia\",\n  \"West Arnhem, Australia\",\n  \"Woodroffe, Australia\",\n  \"Wulagi, Australia\",\n  \"Wurrumiyanga, Australia\",\n  \"Yulara, Australia\",\n  \"Zuccoli, Australia\",\n  \"Acacia Ridge, Australia\",\n  \"Agnes Water, Australia\",\n  \"Airlie Beach, Australia\",\n  \"Aitkenvale, Australia\",\n  \"Albany Creek, Australia\",\n  \"Alderley, Australia\",\n  \"Aldershot, Australia\",\n  \"Alexandra Headland, Australia\",\n  \"Alexandra Hills, Australia\",\n  \"Algester, Australia\",\n  \"Alice River, Australia\",\n  \"Allenstown, Australia\",\n  \"Alligator Creek, Australia\",\n  \"Allora, Australia\",\n  \"Alton Downs, Australia\",\n  \"Andergrove, Australia\",\n  \"Annandale, Australia\",\n  \"Annerley, Australia\",\n  \"Anstead, Australia\",\n  \"Arana Hills, Australia\",\n  \"Aroona, Australia\",\n  \"Arundel, Australia\",\n  \"Ascot, Australia\",\n  \"Ashgrove, Australia\",\n  \"Ashmore, Australia\",\n  \"Aspley, Australia\",\n  \"Atherton, Australia\",\n  \"Auchenflower, Australia\",\n  \"Augustine Heights, Australia\",\n  \"Aurukun, Australia\",\n  \"Avenell Heights, Australia\",\n  \"Avoca, Australia\",\n  \"Ayr, Australia\",\n  \"Babinda, Australia\",\n  \"Bahrs Scrub, Australia\",\n  \"Bakers Creek, Australia\",\n  \"Bald Hills, Australia\",\n  \"Balmoral, Australia\",\n  \"Balonne Shire, Australia\",\n  \"Bamaga, Australia\",\n  \"Banana, Australia\",\n  \"Banksia Beach, Australia\",\n  \"Banyo, Australia\",\n  \"Barcaldine, Australia\",\n  \"Barcoo, Australia\",\n  \"Bardon, Australia\",\n  \"Barellan Point, Australia\",\n  \"Bargara, Australia\",\n  \"Barney Point, Australia\",\n  \"Battery Hill, Australia\",\n  \"Bayview Heights, Australia\",\n  \"Beachmere, Australia\",\n  \"Beaconsfield, Australia\",\n  \"Beaudesert, Australia\",\n  \"Beenleigh, Australia\",\n  \"Beerwah, Australia\",\n  \"Belgian Gardens, Australia\",\n  \"Bellara, Australia\",\n  \"Bellbird Park, Australia\",\n  \"Bellbowrie, Australia\",\n  \"Bellmere, Australia\",\n  \"Belmont, Australia\",\n  \"Benaraby, Australia\",\n  \"Benowa, Australia\",\n  \"Bentley Park, Australia\",\n  \"Berrinba, Australia\",\n  \"Berserker, Australia\",\n  \"Biggera Waters, Australia\",\n  \"Bilinga, Australia\",\n  \"Biloela, Australia\",\n  \"Birkdale, Australia\",\n  \"Birtinya, Australia\",\n  \"Black Mountain, Australia\",\n  \"Black River, Australia\",\n  \"Blackall, Australia\",\n  \"Blackall Tambo, Australia\",\n  \"Blacks Beach, Australia\",\n  \"Blackwater, Australia\",\n  \"Bli Bli, Australia\",\n  \"Bluewater, Australia\",\n  \"Bohle Plains, Australia\",\n  \"Bokarina, Australia\",\n  \"Bongaree, Australia\",\n  \"Bonogin, Australia\",\n  \"Booie, Australia\",\n  \"Boonah, Australia\",\n  \"Boondall, Australia\",\n  \"Booral, Australia\",\n  \"Booval, Australia\",\n  \"Boronia Heights, Australia\",\n  \"Bouldercombe, Australia\",\n  \"Boulia, Australia\",\n  \"Bowen, Australia\",\n  \"Bowen Hills, Australia\",\n  \"Boyne Island, Australia\",\n  \"Bracken Ridge, Australia\",\n  \"Brandon, Australia\",\n  \"Branyan, Australia\",\n  \"Brassall, Australia\",\n  \"Bray Park, Australia\",\n  \"Brendale, Australia\",\n  \"Bridgeman Downs, Australia\",\n  \"Brighton, Australia\",\n  \"Brinsmead, Australia\",\n  \"Brisbane, Australia\",\n  \"Broadbeach, Australia\",\n  \"Broadbeach Waters, Australia\",\n  \"Brookfield, Australia\",\n  \"Brookwater, Australia\",\n  \"Bucasia, Australia\",\n  \"Bucca, Australia\",\n  \"Buccan, Australia\",\n  \"Buddina, Australia\",\n  \"Buderim, Australia\",\n  \"Bulimba, Australia\",\n  \"Bulloo, Australia\",\n  \"Bundaberg, Australia\",\n  \"Bundaberg East, Australia\",\n  \"Bundaberg North, Australia\",\n  \"Bundaberg South, Australia\",\n  \"Bundaberg West, Australia\",\n  \"Bundall, Australia\",\n  \"Bundamba, Australia\",\n  \"Bungalow, Australia\",\n  \"Bunya, Australia\",\n  \"Burbank, Australia\",\n  \"Burdekin, Australia\",\n  \"Burdell, Australia\",\n  \"Burke, Australia\",\n  \"Burleigh Heads, Australia\",\n  \"Burleigh Waters, Australia\",\n  \"Burnett Heads, Australia\",\n  \"Burnside, Australia\",\n  \"Burpengary, Australia\",\n  \"Burpengary East, Australia\",\n  \"Burrum Heads, Australia\",\n  \"Bushland Beach, Australia\",\n  \"Cabarlah, Australia\",\n  \"Caboolture, Australia\",\n  \"Caboolture South, Australia\",\n  \"Cairns, Australia\",\n  \"Cairns City, Australia\",\n  \"Cairns North, Australia\",\n  \"Calamvale, Australia\",\n  \"Calliope, Australia\",\n  \"Caloundra, Australia\",\n  \"Caloundra West, Australia\",\n  \"Cambooya, Australia\",\n  \"Camira, Australia\",\n  \"Camp Hill, Australia\",\n  \"Camp Mountain, Australia\",\n  \"Cannon Hill, Australia\",\n  \"Cannonvale, Australia\",\n  \"Canungra, Australia\",\n  \"Capalaba, Australia\",\n  \"Capella, Australia\",\n  \"Caravonica, Australia\",\n  \"Carbrook, Australia\",\n  \"Cardwell, Australia\",\n  \"Carina Heights, Australia\",\n  \"Carindale, Australia\",\n  \"Carpentaria, Australia\",\n  \"Carrara, Australia\",\n  \"Carseldine, Australia\",\n  \"Cashmere, Australia\",\n  \"Cassowary Coast, Australia\",\n  \"Cedar Grove, Australia\",\n  \"Cedar Vale, Australia\",\n  \"Centenary Heights, Australia\",\n  \"Central Highlands, Australia\",\n  \"Chambers Flat, Australia\",\n  \"Chandler, Australia\",\n  \"Chapel Hill, Australia\",\n  \"Charleville, Australia\",\n  \"Charters Towers, Australia\",\n  \"Charters Towers City, Australia\",\n  \"Chatsworth, Australia\",\n  \"Chelmer, Australia\",\n  \"Cherbourg, Australia\",\n  \"Chermside, Australia\",\n  \"Chermside West, Australia\",\n  \"Childers, Australia\",\n  \"Chinchilla, Australia\",\n  \"Churchill, Australia\",\n  \"Chuwar, Australia\",\n  \"Clayfield, Australia\",\n  \"Clear Island Waters, Australia\",\n  \"Clermont, Australia\",\n  \"Cleveland, Australia\",\n  \"Clifton, Australia\",\n  \"Clifton Beach, Australia\",\n  \"Clinton, Australia\",\n  \"Cloncurry, Australia\",\n  \"Clontarf, Australia\",\n  \"Coes Creek, Australia\",\n  \"Collingwood Park, Australia\",\n  \"Collinsville, Australia\",\n  \"Condon, Australia\",\n  \"Cooee Bay, Australia\",\n  \"Cook Shire, Australia\",\n  \"Cooktown, Australia\",\n  \"Coolangatta, Australia\",\n  \"Cooloola Cove, Australia\",\n  \"Coolum Beach, Australia\",\n  \"Coombabah, Australia\",\n  \"Coomera, Australia\",\n  \"Coominya, Australia\",\n  \"Coopers Plains, Australia\",\n  \"Cooran, Australia\",\n  \"Cooroibah, Australia\",\n  \"Cooroy, Australia\",\n  \"Coorparoo, Australia\",\n  \"Coppabella, Australia\",\n  \"Coral Cove, Australia\",\n  \"Corinda, Australia\",\n  \"Cornubia, Australia\",\n  \"Cotswold Hills, Australia\",\n  \"Craiglie, Australia\",\n  \"Craignish, Australia\",\n  \"Cranbrook, Australia\",\n  \"Cranley, Australia\",\n  \"Crestmead, Australia\",\n  \"Crows Nest, Australia\",\n  \"Croydon, Australia\",\n  \"Cunnamulla, Australia\",\n  \"Curra, Australia\",\n  \"Currajong, Australia\",\n  \"Currimundi, Australia\",\n  \"Currumbin, Australia\",\n  \"Currumbin Valley, Australia\",\n  \"Currumbin Waters, Australia\",\n  \"D’Aguilar, Australia\",\n  \"Daisy Hill, Australia\",\n  \"Dakabin, Australia\",\n  \"Dalby, Australia\",\n  \"Darling Heights, Australia\",\n  \"Darra, Australia\",\n  \"Dayboro, Australia\",\n  \"Deagon, Australia\",\n  \"Deception Bay, Australia\",\n  \"Deebing Heights, Australia\",\n  \"Deeragun, Australia\",\n  \"Delaneys Creek, Australia\",\n  \"Depot Hill, Australia\",\n  \"Diamantina, Australia\",\n  \"Dicky Beach, Australia\",\n  \"Diddillibah, Australia\",\n  \"Dimbulah, Australia\",\n  \"Doolandella, Australia\",\n  \"Doomadgee, Australia\",\n  \"Doonan, Australia\",\n  \"Douglas, Australia\",\n  \"Drayton, Australia\",\n  \"Drewvale, Australia\",\n  \"Dundowran Beach, Australia\",\n  \"Durack, Australia\",\n  \"Dutton Park, Australia\",\n  \"Dysart, Australia\",\n  \"Eagle Farm, Australia\",\n  \"Eagleby, Australia\",\n  \"Earlville, Australia\",\n  \"East Brisbane, Australia\",\n  \"East Innisfail, Australia\",\n  \"East Ipswich, Australia\",\n  \"East Mackay, Australia\",\n  \"East Toowoomba, Australia\",\n  \"Eastern Heights, Australia\",\n  \"Eatons Hill, Australia\",\n  \"Edens Landing, Australia\",\n  \"Edge Hill, Australia\",\n  \"Edmonton, Australia\",\n  \"Eight Mile Plains, Australia\",\n  \"Eimeo, Australia\",\n  \"Elanora, Australia\",\n  \"Eli Waters, Australia\",\n  \"Elimbah, Australia\",\n  \"Ellen Grove, Australia\",\n  \"Elliott Heads, Australia\",\n  \"Emerald, Australia\",\n  \"Emu Park, Australia\",\n  \"Enoggera, Australia\",\n  \"Esk, Australia\",\n  \"Etheridge, Australia\",\n  \"Eudlo, Australia\",\n  \"Eumundi, Australia\",\n  \"Everton Hills, Australia\",\n  \"Everton Park, Australia\",\n  \"Fairfield, Australia\",\n  \"Fernvale, Australia\",\n  \"Ferny Grove, Australia\",\n  \"Ferny Hills, Australia\",\n  \"Fig Tree Pocket, Australia\",\n  \"Fitzgibbon, Australia\",\n  \"Flinders, Australia\",\n  \"Flinders View, Australia\",\n  \"Forest Glen, Australia\",\n  \"Forest Lake, Australia\",\n  \"Forestdale, Australia\",\n  \"Fortitude Valley, Australia\",\n  \"Fraser Coast, Australia\",\n  \"Frenchville, Australia\",\n  \"Freshwater, Australia\",\n  \"Gailes, Australia\",\n  \"Garbutt, Australia\",\n  \"Gatton, Australia\",\n  \"Gaven, Australia\",\n  \"Gayndah, Australia\",\n  \"Gaythorne, Australia\",\n  \"Geebung, Australia\",\n  \"Gilston, Australia\",\n  \"Gin Gin, Australia\",\n  \"Gladstone, Australia\",\n  \"Gladstone Central, Australia\",\n  \"Glass House Mountains, Australia\",\n  \"Glen Eden, Australia\",\n  \"Gleneagle, Australia\",\n  \"Glenella, Australia\",\n  \"Glenvale, Australia\",\n  \"Glenview, Australia\",\n  \"Gold Coast, Australia\",\n  \"Golden Beach, Australia\",\n  \"Gooburrum, Australia\",\n  \"Goodna, Australia\",\n  \"Goondiwindi, Australia\",\n  \"Gordon Park, Australia\",\n  \"Gordonvale, Australia\",\n  \"Gowrie Junction, Australia\",\n  \"Gracemere, Australia\",\n  \"Graceville, Australia\",\n  \"Grange, Australia\",\n  \"Granville, Australia\",\n  \"Greenbank, Australia\",\n  \"Greenslopes, Australia\",\n  \"Griffin, Australia\",\n  \"Gulliver, Australia\",\n  \"Gumdale, Australia\",\n  \"Gympie, Australia\",\n  \"Gympie Regional Council, Australia\",\n  \"Hamilton, Australia\",\n  \"Harlaxton, Australia\",\n  \"Harristown, Australia\",\n  \"Hatton Vale, Australia\",\n  \"Hawthorne, Australia\",\n  \"Hay Point, Australia\",\n  \"Healy, Australia\",\n  \"Heathwood, Australia\",\n  \"Heatley, Australia\",\n  \"Helensvale, Australia\",\n  \"Helidon, Australia\",\n  \"Hemmant, Australia\",\n  \"Hendra, Australia\",\n  \"Heritage Park, Australia\",\n  \"Hermit Park, Australia\",\n  \"Herston, Australia\",\n  \"Hervey Bay, Australia\",\n  \"Highfields, Australia\",\n  \"Highgate Hill, Australia\",\n  \"Highland Park, Australia\",\n  \"Highvale, Australia\",\n  \"Hillcrest, Australia\",\n  \"Hinchinbrook, Australia\",\n  \"Hodgson Vale, Australia\",\n  \"Holland Park, Australia\",\n  \"Holland Park West, Australia\",\n  \"Holloways Beach, Australia\",\n  \"Hollywell, Australia\",\n  \"Holmview, Australia\",\n  \"Home Hill, Australia\",\n  \"Hope Island, Australia\",\n  \"Hope Vale, Australia\",\n  \"Howard, Australia\",\n  \"Hughenden, Australia\",\n  \"Hyde Park, Australia\",\n  \"Idalia, Australia\",\n  \"Inala, Australia\",\n  \"Indooroopilly, Australia\",\n  \"Ingham, Australia\",\n  \"Innes Park, Australia\",\n  \"Innisfail, Australia\",\n  \"Innisfail Estate, Australia\",\n  \"Ipswich, Australia\",\n  \"Isaac, Australia\",\n  \"Jacobs Well, Australia\",\n  \"Jamboree Heights, Australia\",\n  \"Jandowae, Australia\",\n  \"Jensen, Australia\",\n  \"Jimboomba, Australia\",\n  \"Jindalee, Australia\",\n  \"Joyner, Australia\",\n  \"Jubilee Pocket, Australia\",\n  \"Julatten, Australia\",\n  \"Kalbar, Australia\",\n  \"Kalinga, Australia\",\n  \"Kalkie, Australia\",\n  \"Kallangur, Australia\",\n  \"Kamerunga, Australia\",\n  \"Kangaroo Point, Australia\",\n  \"Kanimbla, Australia\",\n  \"Karalee, Australia\",\n  \"Karana Downs, Australia\",\n  \"Karumba, Australia\",\n  \"Kawana, Australia\",\n  \"Kawungan, Australia\",\n  \"Kearneys Spring, Australia\",\n  \"Kedron, Australia\",\n  \"Kelso, Australia\",\n  \"Kelvin Grove, Australia\",\n  \"Kenmore, Australia\",\n  \"Kenmore Hills, Australia\",\n  \"Kensington Grove, Australia\",\n  \"Keperra, Australia\",\n  \"Kepnock, Australia\",\n  \"Kewarra Beach, Australia\",\n  \"Kilcoy, Australia\",\n  \"Kin Kora, Australia\",\n  \"Kingaroy, Australia\",\n  \"Kings Beach, Australia\",\n  \"Kingsthorpe, Australia\",\n  \"Kingston, Australia\",\n  \"Kippa-Ring, Australia\",\n  \"Kirkwood, Australia\",\n  \"Kirwan, Australia\",\n  \"Kleinton, Australia\",\n  \"Koongal, Australia\",\n  \"Kooralbyn, Australia\",\n  \"Kowanyama, Australia\",\n  \"Kuluin, Australia\",\n  \"Kuraby, Australia\",\n  \"Kuranda, Australia\",\n  \"Kurwongbah, Australia\",\n  \"Labrador, Australia\",\n  \"Laidley, Australia\",\n  \"Lake Macdonald, Australia\",\n  \"Lammermoor, Australia\",\n  \"Landsborough, Australia\",\n  \"Lawnton, Australia\",\n  \"Leichhardt, Australia\",\n  \"Little Mountain, Australia\",\n  \"Lockhart River, Australia\",\n  \"Lockyer Valley, Australia\",\n  \"Logan, Australia\",\n  \"Logan Central, Australia\",\n  \"Logan City, Australia\",\n  \"Logan Reserve, Australia\",\n  \"Logan Village, Australia\",\n  \"Loganholme, Australia\",\n  \"Loganlea, Australia\",\n  \"Longreach, Australia\",\n  \"Lota, Australia\",\n  \"Lower Beechmont, Australia\",\n  \"Lowood, Australia\",\n  \"Lutwyche, Australia\",\n  \"Macgregor, Australia\",\n  \"Machans Beach, Australia\",\n  \"Mackay, Australia\",\n  \"Mackay City, Australia\",\n  \"Mackenzie, Australia\",\n  \"Macleay Island, Australia\",\n  \"Magnetic Island, Australia\",\n  \"Main Beach, Australia\",\n  \"Malanda, Australia\",\n  \"Maleny, Australia\",\n  \"Mango Hill, Australia\",\n  \"Manly West, Australia\",\n  \"Manoora, Australia\",\n  \"Mansfield, Australia\",\n  \"Manunda, Australia\",\n  \"Mapleton, Australia\",\n  \"Mapoon, Australia\",\n  \"Maranoa, Australia\",\n  \"Marcoola, Australia\",\n  \"Mareeba, Australia\",\n  \"Margate, Australia\",\n  \"Marian, Australia\",\n  \"Maroochy River, Australia\",\n  \"Maroochydore, Australia\",\n  \"Marsden, Australia\",\n  \"Maryborough, Australia\",\n  \"Maudsland, Australia\",\n  \"McDowall, Australia\",\n  \"McKinlay, Australia\",\n  \"Meadowbrook, Australia\",\n  \"Menzies, Australia\",\n  \"Meridan Plains, Australia\",\n  \"Meringandan West, Australia\",\n  \"Mermaid Beach, Australia\",\n  \"Mermaid Waters, Australia\",\n  \"Merrimac, Australia\",\n  \"Miami, Australia\",\n  \"Middle Park, Australia\",\n  \"Middle Ridge, Australia\",\n  \"Middlemount, Australia\",\n  \"Miles, Australia\",\n  \"Millbank, Australia\",\n  \"Millmerran, Australia\",\n  \"Millstream, Australia\",\n  \"Milton, Australia\",\n  \"Minden, Australia\",\n  \"Minyama, Australia\",\n  \"Mirani, Australia\",\n  \"Mission Beach, Australia\",\n  \"Mission River, Australia\",\n  \"Mitchell, Australia\",\n  \"Mitchelton, Australia\",\n  \"Moffat Beach, Australia\",\n  \"Moggill, Australia\",\n  \"Molendinar, Australia\",\n  \"Monkland, Australia\",\n  \"Monto, Australia\",\n  \"Montville, Australia\",\n  \"Mooloolaba, Australia\",\n  \"Moore Park Beach, Australia\",\n  \"Mooroobool, Australia\",\n  \"Moorooka, Australia\",\n  \"Moranbah, Australia\",\n  \"Morayfield, Australia\",\n  \"Moreton Bay, Australia\",\n  \"Morningside, Australia\",\n  \"Mornington, Australia\",\n  \"Mossman, Australia\",\n  \"Mount Coolum, Australia\",\n  \"Mount Cotton, Australia\",\n  \"Mount Crosby, Australia\",\n  \"Mount Gravatt, Australia\",\n  \"Mount Gravatt East, Australia\",\n  \"Mount Isa, Australia\",\n  \"Mount Lofty, Australia\",\n  \"Mount Louisa, Australia\",\n  \"Mount Low, Australia\",\n  \"Mount Morgan, Australia\",\n  \"Mount Nathan, Australia\",\n  \"Mount Ommaney, Australia\",\n  \"Mount Pleasant, Australia\",\n  \"Mount Sheridan, Australia\",\n  \"Mount Warren Park, Australia\",\n  \"Mountain Creek, Australia\",\n  \"Moura, Australia\",\n  \"Mudgeeraba, Australia\",\n  \"Mudjimba, Australia\",\n  \"Mulambin, Australia\",\n  \"Mundingburra, Australia\",\n  \"Mundoolun, Australia\",\n  \"Mundubbera, Australia\",\n  \"Munruben, Australia\",\n  \"Murarrie, Australia\",\n  \"Murgon, Australia\",\n  \"Murray, Australia\",\n  \"Murrumba Downs, Australia\",\n  \"Murweh, Australia\",\n  \"Nambour, Australia\",\n  \"Nanango, Australia\",\n  \"Nanum, Australia\",\n  \"Napranum, Australia\",\n  \"Narangba, Australia\",\n  \"Nathan, Australia\",\n  \"Nebo, Australia\",\n  \"Nelly Bay, Australia\",\n  \"Nerang, Australia\",\n  \"New Auckland, Australia\",\n  \"New Beith, Australia\",\n  \"New Farm, Australia\",\n  \"Newmarket, Australia\",\n  \"Newport, Australia\",\n  \"Newstead, Australia\",\n  \"Newtown, Australia\",\n  \"Ninderry, Australia\",\n  \"Ningi, Australia\",\n  \"Nome, Australia\",\n  \"Noosa Heads, Australia\",\n  \"Noosaville, Australia\",\n  \"Norman Gardens, Australia\",\n  \"Norman Park, Australia\",\n  \"Normanton, Australia\",\n  \"North Booval, Australia\",\n  \"North Burnett, Australia\",\n  \"North Ipswich, Australia\",\n  \"North Lakes, Australia\",\n  \"North Mackay, Australia\",\n  \"North Maclean, Australia\",\n  \"North Toowoomba, Australia\",\n  \"North Ward, Australia\",\n  \"Northern Peninsula Area, Australia\",\n  \"Norville, Australia\",\n  \"Nudgee, Australia\",\n  \"Nundah, Australia\",\n  \"Oakey, Australia\",\n  \"Oakhurst, Australia\",\n  \"One Mile, Australia\",\n  \"Oonoonba, Australia\",\n  \"Ooralea, Australia\",\n  \"Ormeau, Australia\",\n  \"Ormeau Hills, Australia\",\n  \"Ormiston, Australia\",\n  \"Oxenford, Australia\",\n  \"Oxley, Australia\",\n  \"Pacific Paradise, Australia\",\n  \"Pacific Pines, Australia\",\n  \"Paddington, Australia\",\n  \"Palm Beach, Australia\",\n  \"Palm Cove, Australia\",\n  \"Palm Island, Australia\",\n  \"Palmwoods, Australia\",\n  \"Paradise Point, Australia\",\n  \"Park Avenue, Australia\",\n  \"Park Ridge, Australia\",\n  \"Park Ridge South, Australia\",\n  \"Parkhurst, Australia\",\n  \"Parkinson, Australia\",\n  \"Parkside, Australia\",\n  \"Parkwood, Australia\",\n  \"Paroo, Australia\",\n  \"Parramatta Park, Australia\",\n  \"Parrearra, Australia\",\n  \"Peachester, Australia\",\n  \"Pelican Waters, Australia\",\n  \"Peregian Beach, Australia\",\n  \"Peregian Springs, Australia\",\n  \"Petrie, Australia\",\n  \"Petrie Terrace, Australia\",\n  \"Pialba, Australia\",\n  \"Pie Creek, Australia\",\n  \"Pimlico, Australia\",\n  \"Pimpama, Australia\",\n  \"Pine Mountain, Australia\",\n  \"Pioneer, Australia\",\n  \"Pittsworth, Australia\",\n  \"Plainland, Australia\",\n  \"Point Vernon, Australia\",\n  \"Pomona, Australia\",\n  \"Pormpuraaw, Australia\",\n  \"Port Douglas, Australia\",\n  \"Proserpine, Australia\",\n  \"Pullenvale, Australia\",\n  \"Queenton, Australia\",\n  \"Quilpie, Australia\",\n  \"Raceview, Australia\",\n  \"Railway Estate, Australia\",\n  \"Rainbow Beach, Australia\",\n  \"Rangeville, Australia\",\n  \"Rangewood, Australia\",\n  \"Rasmussen, Australia\",\n  \"Ravenshoe, Australia\",\n  \"Red Hill, Australia\",\n  \"Redbank, Australia\",\n  \"Redbank Plains, Australia\",\n  \"Redland, Australia\",\n  \"Redland Bay, Australia\",\n  \"Redlynch, Australia\",\n  \"Reedy Creek, Australia\",\n  \"Regency Downs, Australia\",\n  \"Regents Park, Australia\",\n  \"Richlands, Australia\",\n  \"Richmond, Australia\",\n  \"River Heads, Australia\",\n  \"Riverhills, Australia\",\n  \"Riverview, Australia\",\n  \"Robertson, Australia\",\n  \"Robina, Australia\",\n  \"Rochedale, Australia\",\n  \"Rochedale South, Australia\",\n  \"Rockhampton, Australia\",\n  \"Rocklea, Australia\",\n  \"Rockville, Australia\",\n  \"Roma, Australia\",\n  \"Rosemount, Australia\",\n  \"Rosenthal Heights, Australia\",\n  \"Rosewood, Australia\",\n  \"Rosslea, Australia\",\n  \"Rothwell, Australia\",\n  \"Runaway Bay, Australia\",\n  \"Runcorn, Australia\",\n  \"Rural View, Australia\",\n  \"Russell Island, Australia\",\n  \"Sadliers Crossing, Australia\",\n  \"Salisbury, Australia\",\n  \"Samford Valley, Australia\",\n  \"Sandgate, Australia\",\n  \"Sandstone Point, Australia\",\n  \"Sarina, Australia\",\n  \"Scarborough, Australia\",\n  \"Scarness, Australia\",\n  \"Scenic Rim, Australia\",\n  \"Seven Hills, Australia\",\n  \"Seventeen Mile Rocks, Australia\",\n  \"Shailer Park, Australia\",\n  \"Sharon, Australia\",\n  \"Sheldon, Australia\",\n  \"Shorncliffe, Australia\",\n  \"Silkstone, Australia\",\n  \"Sinnamon Park, Australia\",\n  \"Sippy Downs, Australia\",\n  \"Slacks Creek, Australia\",\n  \"Slade Point, Australia\",\n  \"Soldiers Hill, Australia\",\n  \"Somerset, Australia\",\n  \"South Brisbane, Australia\",\n  \"South Burnett, Australia\",\n  \"South Gladstone, Australia\",\n  \"South Kolan, Australia\",\n  \"South Mackay, Australia\",\n  \"South Maclean, Australia\",\n  \"South Toowoomba, Australia\",\n  \"South Townsville, Australia\",\n  \"Southern Downs, Australia\",\n  \"Southport, Australia\",\n  \"Southside, Australia\",\n  \"Spring Hill, Australia\",\n  \"Springfield, Australia\",\n  \"Springfield Lakes, Australia\",\n  \"Springsure, Australia\",\n  \"Springwood, Australia\",\n  \"St George, Australia\",\n  \"Stafford, Australia\",\n  \"Stafford Heights, Australia\",\n  \"Stanthorpe, Australia\",\n  \"Strathpine, Australia\",\n  \"Stretton, Australia\",\n  \"Stuart, Australia\",\n  \"Sun Valley, Australia\",\n  \"Sunnybank, Australia\",\n  \"Sunnybank Hills, Australia\",\n  \"Sunrise Beach, Australia\",\n  \"Sunset, Australia\",\n  \"Sunshine Beach, Australia\",\n  \"Sunshine Coast, Australia\",\n  \"Surfers Paradise, Australia\",\n  \"Svensson Heights, Australia\",\n  \"Taigum, Australia\",\n  \"Tallai, Australia\",\n  \"Tallebudgera, Australia\",\n  \"Tallebudgera Valley, Australia\",\n  \"Tamborine, Australia\",\n  \"Tamborine Mountain, Australia\",\n  \"Tanah Merah, Australia\",\n  \"Tanawha, Australia\",\n  \"Tannum Sands, Australia\",\n  \"Tara, Australia\",\n  \"Taranganba, Australia\",\n  \"Taringa, Australia\",\n  \"Tarragindi, Australia\",\n  \"Telina, Australia\",\n  \"Teneriffe, Australia\",\n  \"Tewantin, Australia\",\n  \"Thabeban, Australia\",\n  \"The Gap, Australia\",\n  \"The Gemfields, Australia\",\n  \"The Range, Australia\",\n  \"Thorneside, Australia\",\n  \"Thornlands, Australia\",\n  \"Thursday Island, Australia\",\n  \"Tieri, Australia\",\n  \"Tin Can Bay, Australia\",\n  \"Tinana, Australia\",\n  \"Tingalpa, Australia\",\n  \"Tivoli, Australia\",\n  \"Tolga, Australia\",\n  \"Toogoolawah, Australia\",\n  \"Toogoom, Australia\",\n  \"Toowong, Australia\",\n  \"Toowoomba, Australia\",\n  \"Torquay, Australia\",\n  \"Torres, Australia\",\n  \"Torres Strait Island Region, Australia\",\n  \"Townsville, Australia\",\n  \"Townview, Australia\",\n  \"Trinity Beach, Australia\",\n  \"Trinity Park, Australia\",\n  \"Trunding, Australia\",\n  \"Tugun, Australia\",\n  \"Tully, Australia\",\n  \"Twin Waters, Australia\",\n  \"Underwood, Australia\",\n  \"Upper Caboolture, Australia\",\n  \"Upper Coomera, Australia\",\n  \"Upper Kedron, Australia\",\n  \"Upper Mount Gravatt, Australia\",\n  \"Urangan, Australia\",\n  \"Urraween, Australia\",\n  \"Varsity Lakes, Australia\",\n  \"Victoria Point, Australia\",\n  \"Vincent, Australia\",\n  \"Virginia, Australia\",\n  \"Wacol, Australia\",\n  \"Wakerley, Australia\",\n  \"Walkerston, Australia\",\n  \"Walkervale, Australia\",\n  \"Walloon, Australia\",\n  \"Wamuran, Australia\",\n  \"Wandal, Australia\",\n  \"Wandoan, Australia\",\n  \"Warana, Australia\",\n  \"Warner, Australia\",\n  \"Warwick, Australia\",\n  \"Waterford West, Australia\",\n  \"Wavell Heights, Australia\",\n  \"Weipa, Australia\",\n  \"Wellesley Islands, Australia\",\n  \"Wellington Point, Australia\",\n  \"West End, Australia\",\n  \"West Gladstone, Australia\",\n  \"West Mackay, Australia\",\n  \"West Rockhampton, Australia\",\n  \"West Woombye, Australia\",\n  \"Westbrook, Australia\",\n  \"Westcourt, Australia\",\n  \"Western Downs, Australia\",\n  \"Westlake, Australia\",\n  \"White Rock, Australia\",\n  \"Whitfield, Australia\",\n  \"Whitsunday, Australia\",\n  \"Whitsundays, Australia\",\n  \"Willow Vale, Australia\",\n  \"Willowbank, Australia\",\n  \"Wilsonton, Australia\",\n  \"Wilsonton Heights, Australia\",\n  \"Wilston, Australia\",\n  \"Windaroo, Australia\",\n  \"Windsor, Australia\",\n  \"Winston, Australia\",\n  \"Winton, Australia\",\n  \"Wishart, Australia\",\n  \"Withcott, Australia\",\n  \"Witta, Australia\",\n  \"Wondai, Australia\",\n  \"Wondunna, Australia\",\n  \"Wongaling Beach, Australia\",\n  \"Wongawallan, Australia\",\n  \"Woodend, Australia\",\n  \"Woodford, Australia\",\n  \"Woodgate, Australia\",\n  \"Woodridge, Australia\",\n  \"Woody Point, Australia\",\n  \"Woolloongabba, Australia\",\n  \"Wooloowin, Australia\",\n  \"Woombye, Australia\",\n  \"Woorabinda, Australia\",\n  \"Woorim, Australia\",\n  \"Woree, Australia\",\n  \"Worongary, Australia\",\n  \"Wujal Wujal, Australia\",\n  \"Wulguru, Australia\",\n  \"Wulkuraka, Australia\",\n  \"Wurtulla, Australia\",\n  \"Wynnum, Australia\",\n  \"Wynnum West, Australia\",\n  \"Wyreema, Australia\",\n  \"Yamanto, Australia\",\n  \"Yandina, Australia\",\n  \"Yaroomba, Australia\",\n  \"Yarrabah, Australia\",\n  \"Yarrabilba, Australia\",\n  \"Yarraman, Australia\",\n  \"Yatala, Australia\",\n  \"Yeerongpilly, Australia\",\n  \"Yeppoon, Australia\",\n  \"Yeppoon city centre, Australia\",\n  \"Yeronga, Australia\",\n  \"Yorkeys Knob, Australia\",\n  \"Yungaburra, Australia\",\n  \"Zillmere, Australia\",\n  \"Zilzie, Australia\",\n  \"Aberfoyle Park, Australia\",\n  \"Adelaide, Australia\",\n  \"Adelaide city centre, Australia\",\n  \"Adelaide Hills, Australia\",\n  \"Albert Park, Australia\",\n  \"Alberton, Australia\",\n  \"Aldgate, Australia\",\n  \"Aldinga Beach, Australia\",\n  \"Alexandrina, Australia\",\n  \"Allenby Gardens, Australia\",\n  \"Anangu Pitjantjatjara, Australia\",\n  \"Andrews Farm, Australia\",\n  \"Angaston, Australia\",\n  \"Angle Park, Australia\",\n  \"Angle Vale, Australia\",\n  \"Ardrossan, Australia\",\n  \"Ascot Park, Australia\",\n  \"Ashford, Australia\",\n  \"Athelstone, Australia\",\n  \"Athol Park, Australia\",\n  \"Balaklava, Australia\",\n  \"Balhannah, Australia\",\n  \"Banksia Park, Australia\",\n  \"Barmera, Australia\",\n  \"Barossa, Australia\",\n  \"Barunga West, Australia\",\n  \"Beaumont, Australia\",\n  \"Bedford Park, Australia\",\n  \"Belair, Australia\",\n  \"Bellevue Heights, Australia\",\n  \"Berri, Australia\",\n  \"Berri and Barmera, Australia\",\n  \"Beulah Park, Australia\",\n  \"Beverley, Australia\",\n  \"Birdwood, Australia\",\n  \"Birkenhead, Australia\",\n  \"Black Forest, Australia\",\n  \"Blackwood, Australia\",\n  \"Blair Athol, Australia\",\n  \"Blakeview, Australia\",\n  \"Bordertown, Australia\",\n  \"Brahma Lodge, Australia\",\n  \"Bridgewater, Australia\",\n  \"Brighton, Australia\",\n  \"Broadview, Australia\",\n  \"Brompton, Australia\",\n  \"Brooklyn Park, Australia\",\n  \"Burnside, Australia\",\n  \"Burra, Australia\",\n  \"Burton, Australia\",\n  \"Camden Park, Australia\",\n  \"Campbelltown, Australia\",\n  \"Ceduna, Australia\",\n  \"Charles Sturt, Australia\",\n  \"Cheltenham, Australia\",\n  \"Christie Downs, Australia\",\n  \"Christies Beach, Australia\",\n  \"City of West Torrens, Australia\",\n  \"Clapham, Australia\",\n  \"Clare, Australia\",\n  \"Clare and Gilbert Valleys, Australia\",\n  \"Clarence Gardens, Australia\",\n  \"Clarence Park, Australia\",\n  \"Clearview, Australia\",\n  \"Cleve, Australia\",\n  \"Clovelly Park, Australia\",\n  \"Collinswood, Australia\",\n  \"Colonel Light Gardens, Australia\",\n  \"Coober Pedy, Australia\",\n  \"Copper Coast, Australia\",\n  \"Coromandel Valley, Australia\",\n  \"Cowandilla, Australia\",\n  \"Cowell, Australia\",\n  \"Crafers, Australia\",\n  \"Crafers West, Australia\",\n  \"Craigburn Farm, Australia\",\n  \"Craigmore, Australia\",\n  \"Croydon Park, Australia\",\n  \"Crystal Brook, Australia\",\n  \"Cumberland Park, Australia\",\n  \"Darlington, Australia\",\n  \"Davoren Park, Australia\",\n  \"Daw Park, Australia\",\n  \"Dernancourt, Australia\",\n  \"Dover Gardens, Australia\",\n  \"Dulwich, Australia\",\n  \"Echunga, Australia\",\n  \"Eden Hills, Australia\",\n  \"Edwardstown, Australia\",\n  \"Elizabeth Downs, Australia\",\n  \"Elizabeth East, Australia\",\n  \"Elizabeth Grove, Australia\",\n  \"Elizabeth North, Australia\",\n  \"Elizabeth Park, Australia\",\n  \"Elizabeth South, Australia\",\n  \"Elizabeth Vale, Australia\",\n  \"Elliston, Australia\",\n  \"Encounter Bay, Australia\",\n  \"Enfield, Australia\",\n  \"Erindale, Australia\",\n  \"Ethelton, Australia\",\n  \"Evandale, Australia\",\n  \"Evanston, Australia\",\n  \"Evanston Gardens, Australia\",\n  \"Evanston Park, Australia\",\n  \"Everard Park, Australia\",\n  \"Exeter, Australia\",\n  \"Fairview Park, Australia\",\n  \"Felixstow, Australia\",\n  \"Ferryden Park, Australia\",\n  \"Findon, Australia\",\n  \"Firle, Australia\",\n  \"Flagstaff Hill, Australia\",\n  \"Flinders Park, Australia\",\n  \"Flinders Ranges, Australia\",\n  \"Forestville, Australia\",\n  \"Franklin Harbour, Australia\",\n  \"Freeling, Australia\",\n  \"Fulham, Australia\",\n  \"Fulham Gardens, Australia\",\n  \"Fullarton, Australia\",\n  \"Gawler, Australia\",\n  \"Gawler East, Australia\",\n  \"Gawler South, Australia\",\n  \"Gilberton, Australia\",\n  \"Gilles Plains, Australia\",\n  \"Glandore, Australia\",\n  \"Glen Osmond, Australia\",\n  \"Glenalta, Australia\",\n  \"Glenelg, Australia\",\n  \"Glenelg East, Australia\",\n  \"Glenelg North, Australia\",\n  \"Glenelg South, Australia\",\n  \"Glengowrie, Australia\",\n  \"Glenside, Australia\",\n  \"Glenunga, Australia\",\n  \"Glynde, Australia\",\n  \"Golden Grove, Australia\",\n  \"Goodwood, Australia\",\n  \"Goolwa, Australia\",\n  \"Goolwa Beach, Australia\",\n  \"Goyder, Australia\",\n  \"Grange, Australia\",\n  \"Grant, Australia\",\n  \"Greenacres, Australia\",\n  \"Greenock, Australia\",\n  \"Greenwith, Australia\",\n  \"Gulfview Heights, Australia\",\n  \"Hackham, Australia\",\n  \"Hackham West, Australia\",\n  \"Hahndorf, Australia\",\n  \"Hallett Cove, Australia\",\n  \"Hampstead Gardens, Australia\",\n  \"Happy Valley, Australia\",\n  \"Hawthorn, Australia\",\n  \"Hawthorndene, Australia\",\n  \"Hayborough, Australia\",\n  \"Hazelwood Park, Australia\",\n  \"Hectorville, Australia\",\n  \"Henley Beach, Australia\",\n  \"Henley Beach South, Australia\",\n  \"Hewett, Australia\",\n  \"Highbury, Australia\",\n  \"Highgate, Australia\",\n  \"Hillbank, Australia\",\n  \"Hillcrest, Australia\",\n  \"Hindmarsh Island, Australia\",\n  \"Holden Hill, Australia\",\n  \"Holdfast Bay, Australia\",\n  \"Hope Valley, Australia\",\n  \"Hove, Australia\",\n  \"Huntfield Heights, Australia\",\n  \"Hyde Park, Australia\",\n  \"Ingle Farm, Australia\",\n  \"Jamestown, Australia\",\n  \"Joslin, Australia\",\n  \"Kadina, Australia\",\n  \"Kangaroo Island, Australia\",\n  \"Kapunda, Australia\",\n  \"Karoonda East Murray, Australia\",\n  \"Keith, Australia\",\n  \"Kensington Gardens, Australia\",\n  \"Kensington Park, Australia\",\n  \"Kent Town, Australia\",\n  \"Kersbrook, Australia\",\n  \"Kidman Park, Australia\",\n  \"Kilburn, Australia\",\n  \"Kilkenny, Australia\",\n  \"Kimba, Australia\",\n  \"Kingscote, Australia\",\n  \"Kingston, Australia\",\n  \"Kingston South East, Australia\",\n  \"Klemzig, Australia\",\n  \"Kurralta Park, Australia\",\n  \"Largs Bay, Australia\",\n  \"Largs North, Australia\",\n  \"Leabrook, Australia\",\n  \"Lewiston, Australia\",\n  \"Light, Australia\",\n  \"Linden Park, Australia\",\n  \"Little Hampton, Australia\",\n  \"Lobethal, Australia\",\n  \"Lockleys, Australia\",\n  \"Lower Eyre Peninsula, Australia\",\n  \"Lower Mitcham, Australia\",\n  \"Loxton, Australia\",\n  \"Loxton Waikerie, Australia\",\n  \"Lyndoch, Australia\",\n  \"Macclesfield, Australia\",\n  \"Magill, Australia\",\n  \"Maitland, Australia\",\n  \"Mallala, Australia\",\n  \"Malvern, Australia\",\n  \"Manningham, Australia\",\n  \"Mannum, Australia\",\n  \"Mansfield Park, Australia\",\n  \"Maralinga Tjarutja, Australia\",\n  \"Marden, Australia\",\n  \"Marino, Australia\",\n  \"Marion, Australia\",\n  \"Marleston, Australia\",\n  \"Maslin Beach, Australia\",\n  \"Mawson Lakes, Australia\",\n  \"Maylands, Australia\",\n  \"McCracken, Australia\",\n  \"McLaren Flat, Australia\",\n  \"McLaren Vale, Australia\",\n  \"Meadows, Australia\",\n  \"Medindie, Australia\",\n  \"Melrose Park, Australia\",\n  \"Meningie, Australia\",\n  \"Mid Murray, Australia\",\n  \"Middleton, Australia\",\n  \"Mile End, Australia\",\n  \"Millicent, Australia\",\n  \"Millswood, Australia\",\n  \"Minlaton, Australia\",\n  \"Mitcham, Australia\",\n  \"Mitchell Park, Australia\",\n  \"Moana, Australia\",\n  \"Modbury, Australia\",\n  \"Modbury Heights, Australia\",\n  \"Modbury North, Australia\",\n  \"Monash, Australia\",\n  \"Moonta Bay, Australia\",\n  \"Moorak, Australia\",\n  \"Morphett Vale, Australia\",\n  \"Morphettville, Australia\",\n  \"Mount Barker, Australia\",\n  \"Mount Compass, Australia\",\n  \"Mount Gambier, Australia\",\n  \"Mount Remarkable, Australia\",\n  \"Munno Para, Australia\",\n  \"Munno Para West, Australia\",\n  \"Murray Bridge, Australia\",\n  \"Mylor, Australia\",\n  \"Myrtle Bank, Australia\",\n  \"Nailsworth, Australia\",\n  \"Nairne, Australia\",\n  \"Naracoorte, Australia\",\n  \"Naracoorte and Lucindale, Australia\",\n  \"Netherby, Australia\",\n  \"Netley, Australia\",\n  \"Newton, Australia\",\n  \"Noarlunga Downs, Australia\",\n  \"Normanville, Australia\",\n  \"North Adelaide, Australia\",\n  \"North Brighton, Australia\",\n  \"North Haven, Australia\",\n  \"North Plympton, Australia\",\n  \"Northern Areas, Australia\",\n  \"Northfield, Australia\",\n  \"Northgate, Australia\",\n  \"Norwood, Australia\",\n  \"Norwood Payneham St Peters, Australia\",\n  \"Novar Gardens, Australia\",\n  \"Nuriootpa, Australia\",\n  \"O'Sullivan Beach, Australia\",\n  \"O’Halloran Hill, Australia\",\n  \"Oakden, Australia\",\n  \"Oaklands Park, Australia\",\n  \"Old Noarlunga, Australia\",\n  \"Old Reynella, Australia\",\n  \"One Tree Hill, Australia\",\n  \"Onkaparinga, Australia\",\n  \"Onkaparinga Hills, Australia\",\n  \"Orroroo/Carrieton, Australia\",\n  \"Osborne, Australia\",\n  \"Ottoway, Australia\",\n  \"Panorama, Australia\",\n  \"Para Hills, Australia\",\n  \"Para Hills West, Australia\",\n  \"Para Vista, Australia\",\n  \"Paradise, Australia\",\n  \"Parafield Gardens, Australia\",\n  \"Paralowie, Australia\",\n  \"Paringa, Australia\",\n  \"Park Holme, Australia\",\n  \"Parkside, Australia\",\n  \"Pasadena, Australia\",\n  \"Payneham, Australia\",\n  \"Payneham South, Australia\",\n  \"Pennington, Australia\",\n  \"Penola, Australia\",\n  \"Peterborough, Australia\",\n  \"Peterhead, Australia\",\n  \"Playford, Australia\",\n  \"Plympton, Australia\",\n  \"Plympton Park, Australia\",\n  \"Pooraka, Australia\",\n  \"Port Adelaide, Australia\",\n  \"Port Adelaide Enfield, Australia\",\n  \"Port Augusta, Australia\",\n  \"Port Augusta West, Australia\",\n  \"Port Broughton, Australia\",\n  \"Port Elliot, Australia\",\n  \"Port Lincoln, Australia\",\n  \"Port Noarlunga, Australia\",\n  \"Port Noarlunga South, Australia\",\n  \"Port Pirie, Australia\",\n  \"Port Pirie City and Dists, Australia\",\n  \"Port Pirie South, Australia\",\n  \"Port Pirie West, Australia\",\n  \"Port Willunga, Australia\",\n  \"Prospect, Australia\",\n  \"Queenstown, Australia\",\n  \"Quorn, Australia\",\n  \"Redwood Park, Australia\",\n  \"Renmark, Australia\",\n  \"Renmark Paringa, Australia\",\n  \"Renmark West, Australia\",\n  \"Renown Park, Australia\",\n  \"Reynella, Australia\",\n  \"Reynella East, Australia\",\n  \"Richmond, Australia\",\n  \"Ridgehaven, Australia\",\n  \"Ridleyton, Australia\",\n  \"Risdon Park, Australia\",\n  \"Risdon Park South, Australia\",\n  \"Robe, Australia\",\n  \"Rose Park, Australia\",\n  \"Rosewater, Australia\",\n  \"Rosslyn Park, Australia\",\n  \"Rostrevor, Australia\",\n  \"Roxby Downs, Australia\",\n  \"Royal Park, Australia\",\n  \"Royston Park, Australia\",\n  \"Salisbury, Australia\",\n  \"Salisbury Downs, Australia\",\n  \"Salisbury East, Australia\",\n  \"Salisbury Heights, Australia\",\n  \"Salisbury North, Australia\",\n  \"Salisbury Park, Australia\",\n  \"Salisbury Plain, Australia\",\n  \"Seacliff, Australia\",\n  \"Seacliff Park, Australia\",\n  \"Seacombe Gardens, Australia\",\n  \"Seacombe Heights, Australia\",\n  \"Seaford, Australia\",\n  \"Seaford Meadows, Australia\",\n  \"Seaford Rise, Australia\",\n  \"Seaton, Australia\",\n  \"Seaview Downs, Australia\",\n  \"Sefton Park, Australia\",\n  \"Sellicks Beach, Australia\",\n  \"Semaphore, Australia\",\n  \"Semaphore Park, Australia\",\n  \"Semaphore South, Australia\",\n  \"Sheidow Park, Australia\",\n  \"Smithfield, Australia\",\n  \"Smithfield Plains, Australia\",\n  \"Solomontown, Australia\",\n  \"Somerton Park, Australia\",\n  \"South Brighton, Australia\",\n  \"South Plympton, Australia\",\n  \"Southern Mallee, Australia\",\n  \"St Agnes, Australia\",\n  \"St Georges, Australia\",\n  \"St Marys, Australia\",\n  \"St Morris, Australia\",\n  \"St Peters, Australia\",\n  \"Stirling, Australia\",\n  \"Stirling North, Australia\",\n  \"Stonyfell, Australia\",\n  \"Strathalbyn, Australia\",\n  \"Streaky Bay, Australia\",\n  \"Sturt, Australia\",\n  \"Surrey Downs, Australia\",\n  \"Tailem Bend, Australia\",\n  \"Tanunda, Australia\",\n  \"Taperoo, Australia\",\n  \"Tatiara, Australia\",\n  \"Tea Tree Gully, Australia\",\n  \"Tennyson, Australia\",\n  \"The Coorong, Australia\",\n  \"Thebarton, Australia\",\n  \"Toorak Gardens, Australia\",\n  \"Torrens Park, Australia\",\n  \"Torrensville, Australia\",\n  \"Tranmere, Australia\",\n  \"Trinity Gardens, Australia\",\n  \"Trott Park, Australia\",\n  \"Tumby Bay, Australia\",\n  \"Tusmore, Australia\",\n  \"Two Wells, Australia\",\n  \"Underdale, Australia\",\n  \"Unley, Australia\",\n  \"Unley Park, Australia\",\n  \"Vale Park, Australia\",\n  \"Valley View, Australia\",\n  \"Victor Harbor, Australia\",\n  \"Virginia, Australia\",\n  \"Waikerie, Australia\",\n  \"Wakefield, Australia\",\n  \"Walkerville, Australia\",\n  \"Walkley Heights, Australia\",\n  \"Wallaroo, Australia\",\n  \"Warradale, Australia\",\n  \"Waterloo Corner, Australia\",\n  \"Wattle Park, Australia\",\n  \"Wattle Range, Australia\",\n  \"Wayville, Australia\",\n  \"West Beach, Australia\",\n  \"West Croydon, Australia\",\n  \"West Hindmarsh, Australia\",\n  \"West Lakes, Australia\",\n  \"West Lakes Shore, Australia\",\n  \"Westbourne Park, Australia\",\n  \"Whyalla, Australia\",\n  \"Whyalla Jenkins, Australia\",\n  \"Whyalla Norrie, Australia\",\n  \"Whyalla Playford, Australia\",\n  \"Whyalla Stuart, Australia\",\n  \"Willaston, Australia\",\n  \"Williamstown, Australia\",\n  \"Willunga, Australia\",\n  \"Windsor Gardens, Australia\",\n  \"Woodcroft, Australia\",\n  \"Woodside, Australia\",\n  \"Woodville, Australia\",\n  \"Woodville Gardens, Australia\",\n  \"Woodville North, Australia\",\n  \"Woodville Park, Australia\",\n  \"Woodville South, Australia\",\n  \"Woodville West, Australia\",\n  \"Wudinna, Australia\",\n  \"Wynn Vale, Australia\",\n  \"Yankalilla, Australia\",\n  \"Yorke Peninsula, Australia\",\n  \"Acton Park, Australia\",\n  \"Austins Ferry, Australia\",\n  \"Bagdad, Australia\",\n  \"Battery Point, Australia\",\n  \"Beaconsfield, Australia\",\n  \"Beauty Point, Australia\",\n  \"Bellerive, Australia\",\n  \"Berriedale, Australia\",\n  \"Blackmans Bay, Australia\",\n  \"Blackstone Heights, Australia\",\n  \"Break O'Day, Australia\",\n  \"Bridgewater, Australia\",\n  \"Bridport, Australia\",\n  \"Brighton, Australia\",\n  \"Burnie, Australia\",\n  \"Cambridge, Australia\",\n  \"Central Coast, Australia\",\n  \"Central Highlands, Australia\",\n  \"Chigwell, Australia\",\n  \"Circular Head, Australia\",\n  \"Claremont, Australia\",\n  \"Clarence, Australia\",\n  \"Clarendon Vale, Australia\",\n  \"Cressy, Australia\",\n  \"Currie, Australia\",\n  \"Cygnet, Australia\",\n  \"Deloraine, Australia\",\n  \"Derwent Valley, Australia\",\n  \"Devonport, Australia\",\n  \"Dodges Ferry, Australia\",\n  \"Dorset, Australia\",\n  \"Dynnyrne, Australia\",\n  \"East Devonport, Australia\",\n  \"East Launceston, Australia\",\n  \"Evandale, Australia\",\n  \"Flinders, Australia\",\n  \"Franklin, Australia\",\n  \"Gagebrook, Australia\",\n  \"Geeveston, Australia\",\n  \"Geilston Bay, Australia\",\n  \"George Town, Australia\",\n  \"Glamorgan/Spring Bay, Australia\",\n  \"Glenorchy, Australia\",\n  \"Goodwood, Australia\",\n  \"Granton, Australia\",\n  \"Hadspen, Australia\",\n  \"Herdsmans Cove, Australia\",\n  \"Hillcrest, Australia\",\n  \"Hobart, Australia\",\n  \"Hobart city centre, Australia\",\n  \"Howrah, Australia\",\n  \"Huon Valley, Australia\",\n  \"Huonville, Australia\",\n  \"Invermay, Australia\",\n  \"Kentish, Australia\",\n  \"King Island, Australia\",\n  \"Kingborough, Australia\",\n  \"Kings Meadows, Australia\",\n  \"Kingston, Australia\",\n  \"Kingston Beach, Australia\",\n  \"Latrobe, Australia\",\n  \"Lauderdale, Australia\",\n  \"Launceston, Australia\",\n  \"Launceston city centre, Australia\",\n  \"Legana, Australia\",\n  \"Lenah Valley, Australia\",\n  \"Lindisfarne, Australia\",\n  \"Longford, Australia\",\n  \"Lutana, Australia\",\n  \"Margate, Australia\",\n  \"Mayfield, Australia\",\n  \"Meander Valley, Australia\",\n  \"Miandetta, Australia\",\n  \"Midway Point, Australia\",\n  \"Montello, Australia\",\n  \"Montrose, Australia\",\n  \"Moonah, Australia\",\n  \"Mornington, Australia\",\n  \"Mount Nelson, Australia\",\n  \"Mount Stuart, Australia\",\n  \"Mowbray, Australia\",\n  \"New Norfolk, Australia\",\n  \"New Town, Australia\",\n  \"Newnham, Australia\",\n  \"Newstead, Australia\",\n  \"North Hobart, Australia\",\n  \"Northern Midlands, Australia\",\n  \"Norwood, Australia\",\n  \"Oakdowns, Australia\",\n  \"Old Beach, Australia\",\n  \"Park Grove, Australia\",\n  \"Penguin, Australia\",\n  \"Perth, Australia\",\n  \"Port Sorell, Australia\",\n  \"Prospect Vale, Australia\",\n  \"Queenstown, Australia\",\n  \"Ranelagh, Australia\",\n  \"Ravenswood, Australia\",\n  \"Richmond, Australia\",\n  \"Risdon Vale, Australia\",\n  \"Riverside, Australia\",\n  \"Rocherlea, Australia\",\n  \"Rokeby, Australia\",\n  \"Romaine, Australia\",\n  \"Rosetta, Australia\",\n  \"Saint Leonards, Australia\",\n  \"Sandford, Australia\",\n  \"Sandy Bay, Australia\",\n  \"Scottsdale, Australia\",\n  \"Seven Mile Beach, Australia\",\n  \"Shearwater, Australia\",\n  \"Sheffield, Australia\",\n  \"Shorewell Park, Australia\",\n  \"Smithton, Australia\",\n  \"Snug, Australia\",\n  \"Somerset, Australia\",\n  \"Sorell, Australia\",\n  \"South Hobart, Australia\",\n  \"South Launceston, Australia\",\n  \"Southern Midlands, Australia\",\n  \"Spreyton, Australia\",\n  \"St Helens, Australia\",\n  \"Summerhill, Australia\",\n  \"Taroona, Australia\",\n  \"Tasman Peninsula, Australia\",\n  \"Tranmere, Australia\",\n  \"Trevallyn, Australia\",\n  \"Turners Beach, Australia\",\n  \"Ulverstone, Australia\",\n  \"Upper Burnie, Australia\",\n  \"Waratah/Wynyard, Australia\",\n  \"Warrane, Australia\",\n  \"Waverley, Australia\",\n  \"West Coast, Australia\",\n  \"West Hobart, Australia\",\n  \"West Launceston, Australia\",\n  \"West Moonah, Australia\",\n  \"West Tamar, Australia\",\n  \"West Ulverstone, Australia\",\n  \"Westbury, Australia\",\n  \"Wynyard, Australia\",\n  \"Youngtown, Australia\",\n  \"Abbotsford, Australia\",\n  \"Aberfeldie, Australia\",\n  \"Airport West, Australia\",\n  \"Albanvale, Australia\",\n  \"Albert Park, Australia\",\n  \"Albion, Australia\",\n  \"Alexandra, Australia\",\n  \"Alfredton, Australia\",\n  \"Allansford, Australia\",\n  \"Alphington, Australia\",\n  \"Alpine, Australia\",\n  \"Altona, Australia\",\n  \"Altona Meadows, Australia\",\n  \"Altona North, Australia\",\n  \"Anglesea, Australia\",\n  \"Apollo Bay, Australia\",\n  \"Ararat, Australia\",\n  \"Ardeer, Australia\",\n  \"Armadale, Australia\",\n  \"Armstrong Creek, Australia\",\n  \"Ascot, Australia\",\n  \"Ascot Vale, Australia\",\n  \"Ashburton, Australia\",\n  \"Ashwood, Australia\",\n  \"Aspendale, Australia\",\n  \"Aspendale Gardens, Australia\",\n  \"Attwood, Australia\",\n  \"Avenel, Australia\",\n  \"Avoca, Australia\",\n  \"Avondale Heights, Australia\",\n  \"Bacchus Marsh, Australia\",\n  \"Badger Creek, Australia\",\n  \"Bairnsdale, Australia\",\n  \"Balaclava, Australia\",\n  \"Ballan, Australia\",\n  \"Ballarat, Australia\",\n  \"Ballarat Central, Australia\",\n  \"Ballarat East, Australia\",\n  \"Ballarat North, Australia\",\n  \"Balnarring, Australia\",\n  \"Balwyn, Australia\",\n  \"Balwyn North, Australia\",\n  \"Bannockburn, Australia\",\n  \"Banyule, Australia\",\n  \"Baranduda, Australia\",\n  \"Barwon Heads, Australia\",\n  \"Bass Coast, Australia\",\n  \"Baw Baw, Australia\",\n  \"Baxter, Australia\",\n  \"Bayside, Australia\",\n  \"Bayswater, Australia\",\n  \"Bayswater North, Australia\",\n  \"Beaconsfield, Australia\",\n  \"Beaconsfield Upper, Australia\",\n  \"Beaufort, Australia\",\n  \"Beaumaris, Australia\",\n  \"Beechworth, Australia\",\n  \"Belgrave, Australia\",\n  \"Belgrave Heights, Australia\",\n  \"Belgrave South, Australia\",\n  \"Bell Park, Australia\",\n  \"Bell Post Hill, Australia\",\n  \"Bellfield, Australia\",\n  \"Belmont, Australia\",\n  \"Benalla, Australia\",\n  \"Bendigo, Australia\",\n  \"Bendigo city centre, Australia\",\n  \"Bentleigh, Australia\",\n  \"Bentleigh East, Australia\",\n  \"Berwick, Australia\",\n  \"Beveridge, Australia\",\n  \"Bittern, Australia\",\n  \"Black Hill, Australia\",\n  \"Black Rock, Australia\",\n  \"Blackburn, Australia\",\n  \"Blackburn North, Australia\",\n  \"Blackburn South, Australia\",\n  \"Blairgowrie, Australia\",\n  \"Blind Bight, Australia\",\n  \"Bonbeach, Australia\",\n  \"Boronia, Australia\",\n  \"Boroondara, Australia\",\n  \"Botanic Ridge, Australia\",\n  \"Box Hill, Australia\",\n  \"Box Hill North, Australia\",\n  \"Box Hill South, Australia\",\n  \"Braybrook, Australia\",\n  \"Briagolong, Australia\",\n  \"Briar Hill, Australia\",\n  \"Bright, Australia\",\n  \"Brighton, Australia\",\n  \"Brighton East, Australia\",\n  \"Brimbank, Australia\",\n  \"Broadford, Australia\",\n  \"Broadmeadows, Australia\",\n  \"Brookfield, Australia\",\n  \"Brooklyn, Australia\",\n  \"Brown Hill, Australia\",\n  \"Brunswick, Australia\",\n  \"Brunswick East, Australia\",\n  \"Brunswick West, Australia\",\n  \"Bulleen, Australia\",\n  \"Buloke, Australia\",\n  \"Bundoora, Australia\",\n  \"Buninyong, Australia\",\n  \"Bunyip, Australia\",\n  \"Burnside, Australia\",\n  \"Burnside Heights, Australia\",\n  \"Burwood, Australia\",\n  \"Burwood East, Australia\",\n  \"Cairnlea, Australia\",\n  \"California Gully, Australia\",\n  \"Camberwell, Australia\",\n  \"Campaspe, Australia\",\n  \"Campbellfield, Australia\",\n  \"Campbells Creek, Australia\",\n  \"Camperdown, Australia\",\n  \"Canadian, Australia\",\n  \"Canterbury, Australia\",\n  \"Cape Woolamai, Australia\",\n  \"Cardinia, Australia\",\n  \"Carisbrook, Australia\",\n  \"Carlton, Australia\",\n  \"Carlton North, Australia\",\n  \"Carnegie, Australia\",\n  \"Caroline Springs, Australia\",\n  \"Carrum, Australia\",\n  \"Carrum Downs, Australia\",\n  \"Casey, Australia\",\n  \"Casterton, Australia\",\n  \"Castlemaine, Australia\",\n  \"Caulfield, Australia\",\n  \"Caulfield East, Australia\",\n  \"Caulfield North, Australia\",\n  \"Caulfield South, Australia\",\n  \"Central Goldfields, Australia\",\n  \"Chadstone, Australia\",\n  \"Charlton, Australia\",\n  \"Chelsea, Australia\",\n  \"Chelsea Heights, Australia\",\n  \"Cheltenham, Australia\",\n  \"Chewton, Australia\",\n  \"Chiltern, Australia\",\n  \"Chirnside Park, Australia\",\n  \"Churchill, Australia\",\n  \"Clarinda, Australia\",\n  \"Clayton, Australia\",\n  \"Clayton South, Australia\",\n  \"Clifton Hill, Australia\",\n  \"Clifton Springs, Australia\",\n  \"Clunes, Australia\",\n  \"Clyde, Australia\",\n  \"Clyde North, Australia\",\n  \"Cobden, Australia\",\n  \"Cobram, Australia\",\n  \"Coburg, Australia\",\n  \"Coburg North, Australia\",\n  \"Cockatoo, Australia\",\n  \"Cohuna, Australia\",\n  \"Colac, Australia\",\n  \"Colac-Otway, Australia\",\n  \"Coldstream, Australia\",\n  \"Collingwood, Australia\",\n  \"Coolaroo, Australia\",\n  \"Corangamite, Australia\",\n  \"Corio, Australia\",\n  \"Corryong, Australia\",\n  \"Cowes, Australia\",\n  \"Craigieburn, Australia\",\n  \"Cranbourne, Australia\",\n  \"Cranbourne East, Australia\",\n  \"Cranbourne North, Australia\",\n  \"Cranbourne South, Australia\",\n  \"Cranbourne West, Australia\",\n  \"Cremorne, Australia\",\n  \"Creswick, Australia\",\n  \"Crib Point, Australia\",\n  \"Croydon, Australia\",\n  \"Croydon Hills, Australia\",\n  \"Croydon North, Australia\",\n  \"Croydon South, Australia\",\n  \"Dallas, Australia\",\n  \"Dandenong, Australia\",\n  \"Dandenong North, Australia\",\n  \"Darebin, Australia\",\n  \"Darley, Australia\",\n  \"Daylesford, Australia\",\n  \"Deer Park, Australia\",\n  \"Delacombe, Australia\",\n  \"Delahey, Australia\",\n  \"Dennington, Australia\",\n  \"Derrimut, Australia\",\n  \"Devon Meadows, Australia\",\n  \"Diamond Creek, Australia\",\n  \"Diggers Rest, Australia\",\n  \"Dimboola, Australia\",\n  \"Dingley Village, Australia\",\n  \"Dinner Plain, Australia\",\n  \"Docklands, Australia\",\n  \"Donald, Australia\",\n  \"Doncaster, Australia\",\n  \"Doncaster East, Australia\",\n  \"Donvale, Australia\",\n  \"Doreen, Australia\",\n  \"Doveton, Australia\",\n  \"Dromana, Australia\",\n  \"Drouin, Australia\",\n  \"Drysdale, Australia\",\n  \"Eagle Point, Australia\",\n  \"Eaglehawk, Australia\",\n  \"Eaglemont, Australia\",\n  \"East Bairnsdale, Australia\",\n  \"East Bendigo, Australia\",\n  \"East Geelong, Australia\",\n  \"East Gippsland, Australia\",\n  \"East Melbourne, Australia\",\n  \"Echuca, Australia\",\n  \"Eden Park, Australia\",\n  \"Edithvale, Australia\",\n  \"Elliminyt, Australia\",\n  \"Elsternwick, Australia\",\n  \"Eltham, Australia\",\n  \"Eltham North, Australia\",\n  \"Elwood, Australia\",\n  \"Emerald, Australia\",\n  \"Endeavour Hills, Australia\",\n  \"Epping, Australia\",\n  \"Epsom, Australia\",\n  \"Essendon, Australia\",\n  \"Essendon North, Australia\",\n  \"Essendon West, Australia\",\n  \"Eumemmerring, Australia\",\n  \"Euroa, Australia\",\n  \"Eynesbury, Australia\",\n  \"Fairfield, Australia\",\n  \"Falls Creek, Australia\",\n  \"Fawkner, Australia\",\n  \"Ferntree Gully, Australia\",\n  \"Ferny Creek, Australia\",\n  \"Fitzroy, Australia\",\n  \"Fitzroy North, Australia\",\n  \"Flemington, Australia\",\n  \"Flora Hill, Australia\",\n  \"Footscray, Australia\",\n  \"Forest Hill, Australia\",\n  \"Foster, Australia\",\n  \"Frankston, Australia\",\n  \"Frankston East, Australia\",\n  \"Frankston North, Australia\",\n  \"Frankston South, Australia\",\n  \"Gannawarra, Australia\",\n  \"Garfield, Australia\",\n  \"Geelong, Australia\",\n  \"Geelong city centre, Australia\",\n  \"Geelong West, Australia\",\n  \"Gembrook, Australia\",\n  \"Gisborne, Australia\",\n  \"Gladstone Park, Australia\",\n  \"Glen Eira, Australia\",\n  \"Glen Huntly, Australia\",\n  \"Glen Iris, Australia\",\n  \"Glen Waverley, Australia\",\n  \"Glenelg, Australia\",\n  \"Glenferrie, Australia\",\n  \"Glengarry, Australia\",\n  \"Glenroy, Australia\",\n  \"Golden Plains, Australia\",\n  \"Golden Point, Australia\",\n  \"Golden Square, Australia\",\n  \"Gordon, Australia\",\n  \"Gowanbrae, Australia\",\n  \"Greater Bendigo, Australia\",\n  \"Greater Dandenong, Australia\",\n  \"Greater Geelong, Australia\",\n  \"Greater Shepparton, Australia\",\n  \"Greensborough, Australia\",\n  \"Greenvale, Australia\",\n  \"Grovedale, Australia\",\n  \"Haddon, Australia\",\n  \"Hadfield, Australia\",\n  \"Hallam, Australia\",\n  \"Hamilton, Australia\",\n  \"Hamlyn Heights, Australia\",\n  \"Hampton, Australia\",\n  \"Hampton East, Australia\",\n  \"Hampton Park, Australia\",\n  \"Hastings, Australia\",\n  \"Haven, Australia\",\n  \"Hawthorn, Australia\",\n  \"Hawthorn East, Australia\",\n  \"Hawthorn South, Australia\",\n  \"Hazelwood North, Australia\",\n  \"Healesville, Australia\",\n  \"Heathcote, Australia\",\n  \"Heatherton, Australia\",\n  \"Heathmont, Australia\",\n  \"Heidelberg, Australia\",\n  \"Heidelberg Heights, Australia\",\n  \"Heidelberg West, Australia\",\n  \"Hepburn, Australia\",\n  \"Herne Hill, Australia\",\n  \"Heyfield, Australia\",\n  \"Heywood, Australia\",\n  \"Highett, Australia\",\n  \"Highton, Australia\",\n  \"Hillside, Australia\",\n  \"Hindmarsh, Australia\",\n  \"Hmas Cerberus, Australia\",\n  \"Hobsons Bay, Australia\",\n  \"Hoppers Crossing, Australia\",\n  \"Horsham, Australia\",\n  \"Hotham Heights, Australia\",\n  \"Hughesdale, Australia\",\n  \"Hume, Australia\",\n  \"Huntingdale, Australia\",\n  \"Huntly, Australia\",\n  \"Hurstbridge, Australia\",\n  \"Indented Head, Australia\",\n  \"Indigo, Australia\",\n  \"Inverleigh, Australia\",\n  \"Inverloch, Australia\",\n  \"Invermay Park, Australia\",\n  \"Ironbark, Australia\",\n  \"Irymple, Australia\",\n  \"Ivanhoe, Australia\",\n  \"Ivanhoe East, Australia\",\n  \"Jacana, Australia\",\n  \"Jackass Flat, Australia\",\n  \"Jan Juc, Australia\",\n  \"Junction Village, Australia\",\n  \"Junortoun, Australia\",\n  \"Kalimna, Australia\",\n  \"Kallista, Australia\",\n  \"Kalorama, Australia\",\n  \"Kangaroo Flat, Australia\",\n  \"Kangaroo Ground, Australia\",\n  \"Kealba, Australia\",\n  \"Keilor, Australia\",\n  \"Keilor Downs, Australia\",\n  \"Keilor East, Australia\",\n  \"Keilor Lodge, Australia\",\n  \"Keilor Park, Australia\",\n  \"Kennington, Australia\",\n  \"Kensington, Australia\",\n  \"Kerang, Australia\",\n  \"Kew, Australia\",\n  \"Kew East, Australia\",\n  \"Keysborough, Australia\",\n  \"Kialla, Australia\",\n  \"Kilmore, Australia\",\n  \"Kilsyth, Australia\",\n  \"Kilsyth South, Australia\",\n  \"Kinglake, Australia\",\n  \"Kinglake West, Australia\",\n  \"Kings Park, Australia\",\n  \"Kingsbury, Australia\",\n  \"Kingston, Australia\",\n  \"Kingsville, Australia\",\n  \"Knox, Australia\",\n  \"Knoxfield, Australia\",\n  \"Koo-Wee-Rup, Australia\",\n  \"Koroit, Australia\",\n  \"Korumburra, Australia\",\n  \"Kurunjang, Australia\",\n  \"Kyabram, Australia\",\n  \"Kyneton, Australia\",\n  \"Lake Gardens, Australia\",\n  \"Lake Wendouree, Australia\",\n  \"Lakes Entrance, Australia\",\n  \"Lalor, Australia\",\n  \"Lancefield, Australia\",\n  \"Lang Lang, Australia\",\n  \"Langwarrin, Australia\",\n  \"Langwarrin South, Australia\",\n  \"Lara, Australia\",\n  \"Latrobe, Australia\",\n  \"Launching Place, Australia\",\n  \"Laverton, Australia\",\n  \"Leongatha, Australia\",\n  \"Leopold, Australia\",\n  \"Lilydale, Australia\",\n  \"Little River, Australia\",\n  \"Loddon, Australia\",\n  \"Long Gully, Australia\",\n  \"Longford, Australia\",\n  \"Longwarry, Australia\",\n  \"Lorne, Australia\",\n  \"Lovely Banks, Australia\",\n  \"Lower Plenty, Australia\",\n  \"Lucknow, Australia\",\n  \"Lynbrook, Australia\",\n  \"Lysterfield, Australia\",\n  \"Macedon, Australia\",\n  \"Macedon Ranges, Australia\",\n  \"Macleod, Australia\",\n  \"Maddingley, Australia\",\n  \"Maffra, Australia\",\n  \"Maiden Gully, Australia\",\n  \"Maidstone, Australia\",\n  \"Maldon, Australia\",\n  \"Mallacoota, Australia\",\n  \"Malvern, Australia\",\n  \"Malvern East, Australia\",\n  \"Manifold Heights, Australia\",\n  \"Manningham, Australia\",\n  \"Mansfield, Australia\",\n  \"Maribyrnong, Australia\",\n  \"Marong, Australia\",\n  \"Maroondah, Australia\",\n  \"Maryborough, Australia\",\n  \"McCrae, Australia\",\n  \"McKinnon, Australia\",\n  \"Meadow Heights, Australia\",\n  \"Melbourne, Australia\",\n  \"Melbourne City Centre, Australia\",\n  \"Melton, Australia\",\n  \"Melton South, Australia\",\n  \"Melton West, Australia\",\n  \"Mentone, Australia\",\n  \"Merbein, Australia\",\n  \"Mernda, Australia\",\n  \"Metung, Australia\",\n  \"Mickleham, Australia\",\n  \"Middle Park, Australia\",\n  \"Mildura, Australia\",\n  \"Mildura Shire, Australia\",\n  \"Mill Park, Australia\",\n  \"Millgrove, Australia\",\n  \"Miners Rest, Australia\",\n  \"Mirboo North, Australia\",\n  \"Mitcham, Australia\",\n  \"Mitchell, Australia\",\n  \"Moe, Australia\",\n  \"Moira, Australia\",\n  \"Monash, Australia\",\n  \"Monbulk, Australia\",\n  \"Mont Albert, Australia\",\n  \"Mont Albert North, Australia\",\n  \"Montmorency, Australia\",\n  \"Montrose, Australia\",\n  \"Moolap, Australia\",\n  \"Moonee Ponds, Australia\",\n  \"Moonee Valley, Australia\",\n  \"Moorabbin, Australia\",\n  \"Moorabool, Australia\",\n  \"Moorooduc, Australia\",\n  \"Mooroolbark, Australia\",\n  \"Mooroopna, Australia\",\n  \"Mordialloc, Australia\",\n  \"Moreland, Australia\",\n  \"Mornington, Australia\",\n  \"Mornington Peninsula, Australia\",\n  \"Mortlake, Australia\",\n  \"Morwell, Australia\",\n  \"Mount Alexander, Australia\",\n  \"Mount Buller, Australia\",\n  \"Mount Clear, Australia\",\n  \"Mount Dandenong, Australia\",\n  \"Mount Duneed, Australia\",\n  \"Mount Eliza, Australia\",\n  \"Mount Evelyn, Australia\",\n  \"Mount Helen, Australia\",\n  \"Mount Macedon, Australia\",\n  \"Mount Martha, Australia\",\n  \"Mount Pleasant, Australia\",\n  \"Mount Waverley, Australia\",\n  \"Moyne, Australia\",\n  \"Mulgrave, Australia\",\n  \"Murrindindi, Australia\",\n  \"Murrumbeena, Australia\",\n  \"Myrtleford, Australia\",\n  \"Nagambie, Australia\",\n  \"Narre Warren, Australia\",\n  \"Narre Warren North, Australia\",\n  \"Narre Warren South, Australia\",\n  \"Nathalia, Australia\",\n  \"Neerim South, Australia\",\n  \"New Gisborne, Australia\",\n  \"Newborough, Australia\",\n  \"Newcomb, Australia\",\n  \"Newington, Australia\",\n  \"Newport, Australia\",\n  \"Newtown, Australia\",\n  \"Nhill, Australia\",\n  \"Nichols Point, Australia\",\n  \"Nicholson, Australia\",\n  \"Niddrie, Australia\",\n  \"Nillumbik, Australia\",\n  \"Noble Park, Australia\",\n  \"Noble Park North, Australia\",\n  \"Norlane, Australia\",\n  \"North Bendigo, Australia\",\n  \"North Brighton, Australia\",\n  \"North Geelong, Australia\",\n  \"North Melbourne, Australia\",\n  \"North Warrandyte, Australia\",\n  \"North Wonthaggi, Australia\",\n  \"Northcote, Australia\",\n  \"Northern Grampians, Australia\",\n  \"Notting Hill, Australia\",\n  \"Numurkah, Australia\",\n  \"Nunawading, Australia\",\n  \"Nyora, Australia\",\n  \"Oak Park, Australia\",\n  \"Oakleigh, Australia\",\n  \"Oakleigh East, Australia\",\n  \"Oakleigh South, Australia\",\n  \"Ocean Grove, Australia\",\n  \"Officer, Australia\",\n  \"Olinda, Australia\",\n  \"Orbost, Australia\",\n  \"Ormond, Australia\",\n  \"Ouyen, Australia\",\n  \"Pakenham, Australia\",\n  \"Pakenham Upper, Australia\",\n  \"Panton Hill, Australia\",\n  \"Park Orchards, Australia\",\n  \"Parkdale, Australia\",\n  \"Parkville, Australia\",\n  \"Pascoe Vale, Australia\",\n  \"Pascoe Vale South, Australia\",\n  \"Patterson Lakes, Australia\",\n  \"Paynesville, Australia\",\n  \"Pearcedale, Australia\",\n  \"Phillip Island, Australia\",\n  \"Plenty, Australia\",\n  \"Plumpton, Australia\",\n  \"Point Cook, Australia\",\n  \"Point Lonsdale, Australia\",\n  \"Port Fairy, Australia\",\n  \"Port Melbourne, Australia\",\n  \"Port Phillip, Australia\",\n  \"Portarlington, Australia\",\n  \"Portland, Australia\",\n  \"Prahran, Australia\",\n  \"Preston, Australia\",\n  \"Princes Hill, Australia\",\n  \"Puckapunyal, Australia\",\n  \"Pyrenees, Australia\",\n  \"Quarry Hill, Australia\",\n  \"Queenscliff, Australia\",\n  \"Queenscliffe, Australia\",\n  \"Ravenhall, Australia\",\n  \"Red Cliffs, Australia\",\n  \"Redan, Australia\",\n  \"Research, Australia\",\n  \"Reservoir, Australia\",\n  \"Richmond, Australia\",\n  \"Ringwood, Australia\",\n  \"Ringwood East, Australia\",\n  \"Ringwood North, Australia\",\n  \"Ripponlea, Australia\",\n  \"Robinvale, Australia\",\n  \"Rochester, Australia\",\n  \"Rockbank, Australia\",\n  \"Romsey, Australia\",\n  \"Rosanna, Australia\",\n  \"Rosebud, Australia\",\n  \"Rosebud West, Australia\",\n  \"Rosedale, Australia\",\n  \"Ross Creek, Australia\",\n  \"Rowville, Australia\",\n  \"Roxburgh Park, Australia\",\n  \"Rushworth, Australia\",\n  \"Rutherglen, Australia\",\n  \"Rye, Australia\",\n  \"Safety Beach, Australia\",\n  \"Saint Albans, Australia\",\n  \"Saint Andrews, Australia\",\n  \"Saint Andrews Beach, Australia\",\n  \"Saint Helena, Australia\",\n  \"Saint Kilda, Australia\",\n  \"Saint Leonards, Australia\",\n  \"Sale, Australia\",\n  \"San Remo, Australia\",\n  \"Sandhurst, Australia\",\n  \"Sandringham, Australia\",\n  \"Sassafras, Australia\",\n  \"Scoresby, Australia\",\n  \"Seabrook, Australia\",\n  \"Seaford, Australia\",\n  \"Seaholme, Australia\",\n  \"Sebastopol, Australia\",\n  \"Seddon, Australia\",\n  \"Selby, Australia\",\n  \"Seville, Australia\",\n  \"Seymour, Australia\",\n  \"Shepparton, Australia\",\n  \"Shepparton East, Australia\",\n  \"Silvan, Australia\",\n  \"Skye, Australia\",\n  \"Smythes Creek, Australia\",\n  \"Smythesdale, Australia\",\n  \"Soldiers Hill, Australia\",\n  \"Somers, Australia\",\n  \"Somerville, Australia\",\n  \"Sorrento, Australia\",\n  \"South Gippsland, Australia\",\n  \"South Kingsville, Australia\",\n  \"South Melbourne, Australia\",\n  \"South Morang, Australia\",\n  \"South Yarra, Australia\",\n  \"Southbank, Australia\",\n  \"Southern Grampians, Australia\",\n  \"Spotswood, Australia\",\n  \"Springvale, Australia\",\n  \"Springvale South, Australia\",\n  \"St Albans Park, Australia\",\n  \"St Helena, Australia\",\n  \"St Kilda East, Australia\",\n  \"St Kilda West, Australia\",\n  \"Stawell, Australia\",\n  \"Stonnington, Australia\",\n  \"Stratford, Australia\",\n  \"Strathbogie, Australia\",\n  \"Strathdale, Australia\",\n  \"Strathfieldsaye, Australia\",\n  \"Strathmerton, Australia\",\n  \"Strathmore, Australia\",\n  \"Sunbury, Australia\",\n  \"Sunshine, Australia\",\n  \"Sunshine North, Australia\",\n  \"Sunshine West, Australia\",\n  \"Surf Coast, Australia\",\n  \"Surrey Hills, Australia\",\n  \"Swan Hill, Australia\",\n  \"Sydenham, Australia\",\n  \"Tallangatta, Australia\",\n  \"Tarneit, Australia\",\n  \"Tatura, Australia\",\n  \"Taylors Hill, Australia\",\n  \"Taylors Lakes, Australia\",\n  \"Tecoma, Australia\",\n  \"Teesdale, Australia\",\n  \"Templestowe, Australia\",\n  \"Templestowe Lower, Australia\",\n  \"Terang, Australia\",\n  \"The Basin, Australia\",\n  \"The Patch, Australia\",\n  \"Thomastown, Australia\",\n  \"Thomson, Australia\",\n  \"Thornbury, Australia\",\n  \"Timboon, Australia\",\n  \"Tongala, Australia\",\n  \"Tooradin, Australia\",\n  \"Toorak, Australia\",\n  \"Tootgarook, Australia\",\n  \"Torquay, Australia\",\n  \"Towong, Australia\",\n  \"Trafalgar, Australia\",\n  \"Traralgon, Australia\",\n  \"Travancore, Australia\",\n  \"Trentham, Australia\",\n  \"Truganina, Australia\",\n  \"Tullamarine, Australia\",\n  \"Tyabb, Australia\",\n  \"Upwey, Australia\",\n  \"Vermont, Australia\",\n  \"Vermont South, Australia\",\n  \"Viewbank, Australia\",\n  \"Wahgunyah, Australia\",\n  \"Wallan, Australia\",\n  \"Wallington, Australia\",\n  \"Wandana Heights, Australia\",\n  \"Wandin North, Australia\",\n  \"Wandong, Australia\",\n  \"Wangaratta, Australia\",\n  \"Wantirna, Australia\",\n  \"Wantirna South, Australia\",\n  \"Warburton, Australia\",\n  \"Warracknabeal, Australia\",\n  \"Warragul, Australia\",\n  \"Warrandyte, Australia\",\n  \"Warranwood, Australia\",\n  \"Warrnambool, Australia\",\n  \"Waterways, Australia\",\n  \"Watsonia, Australia\",\n  \"Watsonia North, Australia\",\n  \"Wattleglen, Australia\",\n  \"Waurn Ponds, Australia\",\n  \"Wellington, Australia\",\n  \"Wendouree, Australia\",\n  \"Werribee, Australia\",\n  \"Werribee South, Australia\",\n  \"Wesburn, Australia\",\n  \"West Footscray, Australia\",\n  \"West Melbourne, Australia\",\n  \"West Wimmera, Australia\",\n  \"West Wodonga, Australia\",\n  \"Westmeadows, Australia\",\n  \"Wheelers Hill, Australia\",\n  \"White Hills, Australia\",\n  \"Whitehorse, Australia\",\n  \"Whittington, Australia\",\n  \"Whittlesea, Australia\",\n  \"Williams Landing, Australia\",\n  \"Williamstown, Australia\",\n  \"Williamstown North, Australia\",\n  \"Winchelsea, Australia\",\n  \"Windsor, Australia\",\n  \"Wodonga, Australia\",\n  \"Wollert, Australia\",\n  \"Wonga Park, Australia\",\n  \"Wonthaggi, Australia\",\n  \"Woodend, Australia\",\n  \"Woori Yallock, Australia\",\n  \"Wurruk, Australia\",\n  \"Wy Yung, Australia\",\n  \"Wyndham, Australia\",\n  \"Wyndham Vale, Australia\",\n  \"Yackandandah, Australia\",\n  \"Yallambie, Australia\",\n  \"Yallourn North, Australia\",\n  \"Yarra, Australia\",\n  \"Yarra Glen, Australia\",\n  \"Yarra Junction, Australia\",\n  \"Yarra Ranges, Australia\",\n  \"Yarragon, Australia\",\n  \"Yarram, Australia\",\n  \"Yarrambat, Australia\",\n  \"Yarraville, Australia\",\n  \"Yarrawonga, Australia\",\n  \"Yarriambiack, Australia\",\n  \"Yea, Australia\",\n  \"Abbey, Australia\",\n  \"Albany, Australia\",\n  \"Albany city centre, Australia\",\n  \"Alexander Heights, Australia\",\n  \"Alfred Cove, Australia\",\n  \"Alkimos, Australia\",\n  \"Applecross, Australia\",\n  \"Ardross, Australia\",\n  \"Armadale, Australia\",\n  \"Ascot, Australia\",\n  \"Ashburton, Australia\",\n  \"Ashby, Australia\",\n  \"Ashfield, Australia\",\n  \"Attadale, Australia\",\n  \"Atwell, Australia\",\n  \"Aubin Grove, Australia\",\n  \"Augusta, Australia\",\n  \"Augusta-Margaret River Shire, Australia\",\n  \"Australind, Australia\",\n  \"Aveley, Australia\",\n  \"Badgingarra, Australia\",\n  \"Bakers Hill, Australia\",\n  \"Balcatta, Australia\",\n  \"Baldivis, Australia\",\n  \"Balga, Australia\",\n  \"Ballajura, Australia\",\n  \"Banjup, Australia\",\n  \"Banksia Grove, Australia\",\n  \"Bassendean, Australia\",\n  \"Bateman, Australia\",\n  \"Baynton, Australia\",\n  \"Bayonet Head, Australia\",\n  \"Bayswater, Australia\",\n  \"Beachlands, Australia\",\n  \"Beaconsfield, Australia\",\n  \"Beckenham, Australia\",\n  \"Bedford, Australia\",\n  \"Bedfordale, Australia\",\n  \"Beechboro, Australia\",\n  \"Beeliar, Australia\",\n  \"Beldon, Australia\",\n  \"Bellevue, Australia\",\n  \"Belmont, Australia\",\n  \"Bennett Springs, Australia\",\n  \"Bentley, Australia\",\n  \"Beresford, Australia\",\n  \"Bertram, Australia\",\n  \"Beverley, Australia\",\n  \"Bibra Lake, Australia\",\n  \"Bicton, Australia\",\n  \"Bilingurr, Australia\",\n  \"Bindoon, Australia\",\n  \"Binningup, Australia\",\n  \"Bluff Point, Australia\",\n  \"Boddington, Australia\",\n  \"Booragoon, Australia\",\n  \"Boulder, Australia\",\n  \"Boyanup, Australia\",\n  \"Boyup Brook, Australia\",\n  \"Brabham, Australia\",\n  \"Brentwood, Australia\",\n  \"Bridgetown, Australia\",\n  \"Bridgetown-Greenbushes, Australia\",\n  \"Broadwater, Australia\",\n  \"Brockman, Australia\",\n  \"Brookdale, Australia\",\n  \"Brookton, Australia\",\n  \"Broome, Australia\",\n  \"Broomehill-Tambellup, Australia\",\n  \"Bruce Rock, Australia\",\n  \"Brunswick, Australia\",\n  \"Bulgarra, Australia\",\n  \"Bull Creek, Australia\",\n  \"Bullsbrook, Australia\",\n  \"Bunbury, Australia\",\n  \"Burns Beach, Australia\",\n  \"Burswood, Australia\",\n  \"Busselton, Australia\",\n  \"Busselton city cenre, Australia\",\n  \"Butler, Australia\",\n  \"Byford, Australia\",\n  \"Cable Beach, Australia\",\n  \"Calista, Australia\",\n  \"Cambridge, Australia\",\n  \"Camillo, Australia\",\n  \"Canning, Australia\",\n  \"Canning Vale, Australia\",\n  \"Cannington, Australia\",\n  \"Capel, Australia\",\n  \"Cardup, Australia\",\n  \"Carey Park, Australia\",\n  \"Carine, Australia\",\n  \"Carlisle, Australia\",\n  \"Carnamah, Australia\",\n  \"Carnarvon, Australia\",\n  \"Carramar, Australia\",\n  \"Castletown, Australia\",\n  \"Casuarina, Australia\",\n  \"Cataby, Australia\",\n  \"Caversham, Australia\",\n  \"Cervantes, Australia\",\n  \"Champion Lakes, Australia\",\n  \"Chapman Valley, Australia\",\n  \"Chidlow, Australia\",\n  \"Chittering, Australia\",\n  \"Churchlands, Australia\",\n  \"City Beach, Australia\",\n  \"City of Cockburn, Australia\",\n  \"City of Perth, Australia\",\n  \"Claremont, Australia\",\n  \"Clarkson, Australia\",\n  \"Cloverdale, Australia\",\n  \"Cockburn Central, Australia\",\n  \"College Grove, Australia\",\n  \"Collie, Australia\",\n  \"Como, Australia\",\n  \"Connolly, Australia\",\n  \"Coodanup, Australia\",\n  \"Coogee, Australia\",\n  \"Coolbellup, Australia\",\n  \"Coolbinia, Australia\",\n  \"Coolgardie, Australia\",\n  \"Cooloongup, Australia\",\n  \"Coorow, Australia\",\n  \"Corrigin, Australia\",\n  \"Cottesloe, Australia\",\n  \"Cowaramup, Australia\",\n  \"Craigie, Australia\",\n  \"Cranbrook, Australia\",\n  \"Crawley, Australia\",\n  \"Cuballing, Australia\",\n  \"Cue, Australia\",\n  \"Cunderdin, Australia\",\n  \"Currambine, Australia\",\n  \"Daglish, Australia\",\n  \"Dalkeith, Australia\",\n  \"Dalwallinu, Australia\",\n  \"Dalyellup, Australia\",\n  \"Dampier, Australia\",\n  \"Dampier Peninsula, Australia\",\n  \"Dandaragan, Australia\",\n  \"Darch, Australia\",\n  \"Dardanup, Australia\",\n  \"Darling Downs, Australia\",\n  \"Darlington, Australia\",\n  \"Dawesville, Australia\",\n  \"Dayton, Australia\",\n  \"Denham, Australia\",\n  \"Denmark, Australia\",\n  \"Derby, Australia\",\n  \"Derby-West Kimberley, Australia\",\n  \"Dianella, Australia\",\n  \"Djugun, Australia\",\n  \"Dongara, Australia\",\n  \"Donnybrook, Australia\",\n  \"Donnybrook-Balingup, Australia\",\n  \"Doubleview, Australia\",\n  \"Dowerin, Australia\",\n  \"Drummond Cove, Australia\",\n  \"Dudley Park, Australia\",\n  \"Dumbleyung Shire, Australia\",\n  \"Duncraig, Australia\",\n  \"Dundas, Australia\",\n  \"Dunsborough, Australia\",\n  \"East Bunbury, Australia\",\n  \"East Cannington, Australia\",\n  \"East Carnarvon, Australia\",\n  \"East Fremantle, Australia\",\n  \"East Perth, Australia\",\n  \"East Pilbara, Australia\",\n  \"East Victoria Park, Australia\",\n  \"Eaton, Australia\",\n  \"Eden Hill, Australia\",\n  \"Edgewater, Australia\",\n  \"Eglinton, Australia\",\n  \"Ellenbrook, Australia\",\n  \"Embleton, Australia\",\n  \"Erskine, Australia\",\n  \"Esperance, Australia\",\n  \"Esperance Shire, Australia\",\n  \"Exmouth, Australia\",\n  \"Falcon, Australia\",\n  \"Ferndale, Australia\",\n  \"Fitzroy Crossing, Australia\",\n  \"Floreat, Australia\",\n  \"Forrestdale, Australia\",\n  \"Forrestfield, Australia\",\n  \"Fremantle, Australia\",\n  \"Garden Island, Australia\",\n  \"Gelorup, Australia\",\n  \"Geographe, Australia\",\n  \"Geraldton, Australia\",\n  \"Geraldton city centre, Australia\",\n  \"Gidgegannup, Australia\",\n  \"Gingin, Australia\",\n  \"Girrawheen, Australia\",\n  \"Glen Forrest, Australia\",\n  \"Glen Iris, Australia\",\n  \"Glendalough, Australia\",\n  \"Gnangara, Australia\",\n  \"Gnowangerup, Australia\",\n  \"Golden Bay, Australia\",\n  \"Goomalling, Australia\",\n  \"Gooseberry Hill, Australia\",\n  \"Gosnells, Australia\",\n  \"Grasmere, Australia\",\n  \"Green Head, Australia\",\n  \"Greenfields, Australia\",\n  \"Greenmount, Australia\",\n  \"Greenwood, Australia\",\n  \"Guildford, Australia\",\n  \"Gwelup, Australia\",\n  \"Halls Creek, Australia\",\n  \"Halls Head, Australia\",\n  \"Hamersley, Australia\",\n  \"Hamilton Hill, Australia\",\n  \"Hammond Park, Australia\",\n  \"Hannans, Australia\",\n  \"Harrisdale, Australia\",\n  \"Harvey, Australia\",\n  \"Heathridge, Australia\",\n  \"Helena Valley, Australia\",\n  \"Henley Brook, Australia\",\n  \"Herne Hill, Australia\",\n  \"High Wycombe, Australia\",\n  \"Highgate, Australia\",\n  \"Hilbert, Australia\",\n  \"Hill River, Australia\",\n  \"Hillarys, Australia\",\n  \"Hillman, Australia\",\n  \"Hilton, Australia\",\n  \"Hocking, Australia\",\n  \"Huntingdale, Australia\",\n  \"Iluka, Australia\",\n  \"Inglewood, Australia\",\n  \"Innaloo, Australia\",\n  \"Irwin, Australia\",\n  \"Jandakot, Australia\",\n  \"Jane Brook, Australia\",\n  \"Jarrahdale, Australia\",\n  \"Jerramungup, Australia\",\n  \"Jindalee, Australia\",\n  \"Jolimont, Australia\",\n  \"Joondalup, Australia\",\n  \"Joondanna, Australia\",\n  \"Jurien Bay, Australia\",\n  \"Kalamunda, Australia\",\n  \"Kalbarri, Australia\",\n  \"Kalgoorlie, Australia\",\n  \"Kalgoorlie/Boulder, Australia\",\n  \"Kallaroo, Australia\",\n  \"Kambalda East, Australia\",\n  \"Kambalda West, Australia\",\n  \"Karawara, Australia\",\n  \"Kardinya, Australia\",\n  \"Karnup, Australia\",\n  \"Karratha, Australia\",\n  \"Karrinyup, Australia\",\n  \"Katanning, Australia\",\n  \"Kellerberrin, Australia\",\n  \"Kelmscott, Australia\",\n  \"Kent Shire, Australia\",\n  \"Kenwick, Australia\",\n  \"Kewdale, Australia\",\n  \"Kiara, Australia\",\n  \"Kingsley, Australia\",\n  \"Kinross, Australia\",\n  \"Kojonup, Australia\",\n  \"Kondinin, Australia\",\n  \"Koondoola, Australia\",\n  \"Koorda, Australia\",\n  \"Kulin, Australia\",\n  \"Kununurra, Australia\",\n  \"Kwinana, Australia\",\n  \"Lake Grace, Australia\",\n  \"Lakelands, Australia\",\n  \"Lamington, Australia\",\n  \"Lancelin, Australia\",\n  \"Landsdale, Australia\",\n  \"Langford, Australia\",\n  \"Lathlain, Australia\",\n  \"Laverton, Australia\",\n  \"Leda, Australia\",\n  \"Leederville, Australia\",\n  \"Leeman, Australia\",\n  \"Leeming, Australia\",\n  \"Leinster, Australia\",\n  \"Leonora, Australia\",\n  \"Leschenault, Australia\",\n  \"Lesmurdie, Australia\",\n  \"Little Grove, Australia\",\n  \"Lockridge, Australia\",\n  \"Lockyer, Australia\",\n  \"Lower Chittering, Australia\",\n  \"Lower King, Australia\",\n  \"Lynwood, Australia\",\n  \"Maddington, Australia\",\n  \"Madeley, Australia\",\n  \"Madora Bay, Australia\",\n  \"Maida Vale, Australia\",\n  \"Malaga, Australia\",\n  \"Mandurah, Australia\",\n  \"Mandurah city centre, Australia\",\n  \"Manjimup, Australia\",\n  \"Manning, Australia\",\n  \"Marangaroo, Australia\",\n  \"Marble Bar, Australia\",\n  \"Margaret River, Australia\",\n  \"Marmion, Australia\",\n  \"Martin, Australia\",\n  \"Maylands, Australia\",\n  \"McKail, Australia\",\n  \"Meadow Springs, Australia\",\n  \"Medina, Australia\",\n  \"Meekatharra, Australia\",\n  \"Melville, Australia\",\n  \"Menora, Australia\",\n  \"Menzies, Australia\",\n  \"Merredin, Australia\",\n  \"Merriwa, Australia\",\n  \"Middle Swan, Australia\",\n  \"Midland, Australia\",\n  \"Midvale, Australia\",\n  \"Millars Well, Australia\",\n  \"Millbridge, Australia\",\n  \"Mindarie, Australia\",\n  \"Mingenew, Australia\",\n  \"Mira Mar, Australia\",\n  \"Mirrabooka, Australia\",\n  \"Moora, Australia\",\n  \"Morawa, Australia\",\n  \"Morley, Australia\",\n  \"Mosman Park, Australia\",\n  \"Mount Barker, Australia\",\n  \"Mount Claremont, Australia\",\n  \"Mount Hawthorn, Australia\",\n  \"Mount Helena, Australia\",\n  \"Mount Lawley, Australia\",\n  \"Mount Magnet, Australia\",\n  \"Mount Marshall, Australia\",\n  \"Mount Melville, Australia\",\n  \"Mount Nasura, Australia\",\n  \"Mount Pleasant, Australia\",\n  \"Mount Richon, Australia\",\n  \"Mount Tarcoola, Australia\",\n  \"Muchea, Australia\",\n  \"Mukinbudin, Australia\",\n  \"Mullaloo, Australia\",\n  \"Mundaring, Australia\",\n  \"Mundijong, Australia\",\n  \"Munster, Australia\",\n  \"Murchison, Australia\",\n  \"Murdoch, Australia\",\n  \"Murray, Australia\",\n  \"Myaree, Australia\",\n  \"Nannup, Australia\",\n  \"Narembeen, Australia\",\n  \"Narrogin, Australia\",\n  \"Nedlands, Australia\",\n  \"Newman, Australia\",\n  \"Ngaanyatjarraku, Australia\",\n  \"Nickol, Australia\",\n  \"Nollamara, Australia\",\n  \"Noranda, Australia\",\n  \"North Beach, Australia\",\n  \"North Coogee, Australia\",\n  \"North Fremantle, Australia\",\n  \"North Lake, Australia\",\n  \"North Perth, Australia\",\n  \"Northam, Australia\",\n  \"Northampton Shire, Australia\",\n  \"Northbridge, Australia\",\n  \"Nullagine, Australia\",\n  \"Nulsen, Australia\",\n  \"Nungarin, Australia\",\n  \"Oakford, Australia\",\n  \"Ocean Reef, Australia\",\n  \"Onslow, Australia\",\n  \"Orana, Australia\",\n  \"Orelia, Australia\",\n  \"Osborne Park, Australia\",\n  \"Padbury, Australia\",\n  \"Palmyra, Australia\",\n  \"Paraburdoo, Australia\",\n  \"Parkerville, Australia\",\n  \"Parkwood, Australia\",\n  \"Parmelia, Australia\",\n  \"Pearce, Australia\",\n  \"Pearsall, Australia\",\n  \"Pegs Creek, Australia\",\n  \"Pemberton, Australia\",\n  \"Peppermint Grove, Australia\",\n  \"Perenjori, Australia\",\n  \"Perth, Australia\",\n  \"Perth city centre, Australia\",\n  \"Piara Waters, Australia\",\n  \"Piccadilly, Australia\",\n  \"Pingelly, Australia\",\n  \"Pinjarra, Australia\",\n  \"Plantagenet Shire, Australia\",\n  \"Port Denison, Australia\",\n  \"Port Hedland, Australia\",\n  \"Port Kennedy, Australia\",\n  \"Quairading, Australia\",\n  \"Queens Park, Australia\",\n  \"Quindalup, Australia\",\n  \"Quinns Rocks, Australia\",\n  \"Rangeway, Australia\",\n  \"Ravensthorpe, Australia\",\n  \"Ravenswood, Australia\",\n  \"Redcliffe, Australia\",\n  \"Regans Ford, Australia\",\n  \"Ridgewood, Australia\",\n  \"Riverton, Australia\",\n  \"Rivervale, Australia\",\n  \"Rockingham, Australia\",\n  \"Rockingham city centre, Australia\",\n  \"Roebuck, Australia\",\n  \"Roleystone, Australia\",\n  \"Rossmoyne, Australia\",\n  \"Safety Bay, Australia\",\n  \"Salter Point, Australia\",\n  \"Samson, Australia\",\n  \"Sandstone, Australia\",\n  \"Scarborough, Australia\",\n  \"Secret Harbour, Australia\",\n  \"Serpentine, Australia\",\n  \"Serpentine-Jarrahdale, Australia\",\n  \"Seville Grove, Australia\",\n  \"Shark Bay, Australia\",\n  \"Shelley, Australia\",\n  \"Shenton Park, Australia\",\n  \"Shoalwater, Australia\",\n  \"Silver Sands, Australia\",\n  \"Sinagra, Australia\",\n  \"Singleton, Australia\",\n  \"Somerville, Australia\",\n  \"Sorrento, Australia\",\n  \"South Bunbury, Australia\",\n  \"South Carnarvon, Australia\",\n  \"South Fremantle, Australia\",\n  \"South Guildford, Australia\",\n  \"South Hedland, Australia\",\n  \"South Kalgoorlie, Australia\",\n  \"South Lake, Australia\",\n  \"South Perth, Australia\",\n  \"South Yunderup, Australia\",\n  \"Southern River, Australia\",\n  \"Spalding, Australia\",\n  \"Spearwood, Australia\",\n  \"Spencer Park, Australia\",\n  \"St George Ranges, Australia\",\n  \"St James, Australia\",\n  \"Stirling, Australia\",\n  \"Stoneville, Australia\",\n  \"Strathalbyn, Australia\",\n  \"Stratton, Australia\",\n  \"Subiaco, Australia\",\n  \"Success, Australia\",\n  \"Sunset Beach, Australia\",\n  \"Swan, Australia\",\n  \"Swan View, Australia\",\n  \"Swanbourne, Australia\",\n  \"Tammin, Australia\",\n  \"Tapping, Australia\",\n  \"Tarcoola Beach, Australia\",\n  \"Telfer, Australia\",\n  \"The Vines, Australia\",\n  \"Thornlie, Australia\",\n  \"Three Springs, Australia\",\n  \"Tom Price, Australia\",\n  \"Toodyay, Australia\",\n  \"Trayning, Australia\",\n  \"Trigg, Australia\",\n  \"Tuart Hill, Australia\",\n  \"Two Rocks, Australia\",\n  \"Upper Gascoyne, Australia\",\n  \"Usher, Australia\",\n  \"Utakarra, Australia\",\n  \"Vasse, Australia\",\n  \"Victoria Park, Australia\",\n  \"Victoria Plains, Australia\",\n  \"Vincent, Australia\",\n  \"Viveash, Australia\",\n  \"Waggrakine, Australia\",\n  \"Wagin, Australia\",\n  \"Waikiki, Australia\",\n  \"Wandering, Australia\",\n  \"Wandi, Australia\",\n  \"Wandina, Australia\",\n  \"Wannanup, Australia\",\n  \"Wanneroo, Australia\",\n  \"Warnbro, Australia\",\n  \"Waroona, Australia\",\n  \"Warwick, Australia\",\n  \"Waterford, Australia\",\n  \"Watermans Bay, Australia\",\n  \"Wattle Grove, Australia\",\n  \"Wellard, Australia\",\n  \"Wembley, Australia\",\n  \"Wembley Downs, Australia\",\n  \"West Arthur, Australia\",\n  \"West Beach, Australia\",\n  \"West Busselton, Australia\",\n  \"West Lamington, Australia\",\n  \"West Leederville, Australia\",\n  \"West Perth, Australia\",\n  \"Westminster, Australia\",\n  \"Westonia, Australia\",\n  \"White Gum Valley, Australia\",\n  \"Wickepin, Australia\",\n  \"Wickham, Australia\",\n  \"Willagee, Australia\",\n  \"Willetton, Australia\",\n  \"Williams, Australia\",\n  \"Wilson, Australia\",\n  \"Wiluna, Australia\",\n  \"Winthrop, Australia\",\n  \"Withers, Australia\",\n  \"Wongan-Ballidu, Australia\",\n  \"Wonthella, Australia\",\n  \"Woodanilling, Australia\",\n  \"Woodbridge, Australia\",\n  \"Woodridge, Australia\",\n  \"Woodvale, Australia\",\n  \"Wooroloo, Australia\",\n  \"Woorree, Australia\",\n  \"Wundowie, Australia\",\n  \"Wyalkatchem, Australia\",\n  \"Wyndham-East Kimberley, Australia\",\n  \"Yakamia, Australia\",\n  \"Yalgoo, Australia\",\n  \"Yallingup, Australia\",\n  \"Yalyalup, Australia\",\n  \"Yanchep, Australia\",\n  \"Yangebup, Australia\",\n  \"Yilgarn, Australia\",\n  \"Yokine, Australia\",\n  \"York, Australia\",\n  \"Andau, Austria\",\n  \"Antau, Austria\",\n  \"Apetlon, Austria\",\n  \"Bad Sauerbrunn, Austria\",\n  \"Bad Tatzmannsdorf, Austria\",\n  \"Badersdorf, Austria\",\n  \"Bernstein, Austria\",\n  \"Bocksdorf, Austria\",\n  \"Breitenbrunn, Austria\",\n  \"Bruckneudorf, Austria\",\n  \"Deutsch Jahrndorf, Austria\",\n  \"Deutsch Kaltenbrunn, Austria\",\n  \"Deutschkreutz, Austria\",\n  \"Donnerskirchen, Austria\",\n  \"Drassburg, Austria\",\n  \"Eberau, Austria\",\n  \"Edelstal, Austria\",\n  \"Eisenstadt, Austria\",\n  \"Eisenstadt Stadt, Austria\",\n  \"Eisenstadt-Umgebung, Austria\",\n  \"Eltendorf, Austria\",\n  \"Forchtenstein, Austria\",\n  \"Frauenkirchen, Austria\",\n  \"Gattendorf, Austria\",\n  \"Gols, Austria\",\n  \"Grafenschachen, Austria\",\n  \"Grosshöflein, Austria\",\n  \"Grosspetersdorf, Austria\",\n  \"Güssing, Austria\",\n  \"Güttenbach, Austria\",\n  \"Hackerberg, Austria\",\n  \"Halbturn, Austria\",\n  \"Hannersdorf, Austria\",\n  \"Heiligenbrunn, Austria\",\n  \"Heiligenkreuz im Lafnitztal, Austria\",\n  \"Heugraben, Austria\",\n  \"Hirm, Austria\",\n  \"Horitschon, Austria\",\n  \"Hornstein, Austria\",\n  \"Illmitz, Austria\",\n  \"Inzenhof, Austria\",\n  \"Jabing, Austria\",\n  \"Jennersdorf, Austria\",\n  \"Jois, Austria\",\n  \"Kaisersdorf, Austria\",\n  \"Kemeten, Austria\",\n  \"Kittsee, Austria\",\n  \"Kleinhöflein im Burgenland, Austria\",\n  \"Kleinmürbisch, Austria\",\n  \"Klingenbach, Austria\",\n  \"Kobersdorf, Austria\",\n  \"Kohfidisch, Austria\",\n  \"Königsdorf, Austria\",\n  \"Krensdorf, Austria\",\n  \"Kukmirn, Austria\",\n  \"Lackenbach, Austria\",\n  \"Lackendorf, Austria\",\n  \"Leithaprodersdorf, Austria\",\n  \"Litzelsdorf, Austria\",\n  \"Lockenhaus, Austria\",\n  \"Loipersbach im Burgenland, Austria\",\n  \"Loretto, Austria\",\n  \"Lutzmannsburg, Austria\",\n  \"Mannersdorf an der Rabnitz, Austria\",\n  \"Mariasdorf, Austria\",\n  \"Markt Allhau, Austria\",\n  \"Markt Neuhodis, Austria\",\n  \"Markt Sankt Martin, Austria\",\n  \"Marz, Austria\",\n  \"Mattersburg, Austria\",\n  \"Mischendorf, Austria\",\n  \"Mitterpullendorf, Austria\",\n  \"Mogersdorf, Austria\",\n  \"Mönchhof, Austria\",\n  \"Mörbisch am See, Austria\",\n  \"Moschendorf, Austria\",\n  \"Mühlgraben, Austria\",\n  \"Müllendorf, Austria\",\n  \"Neckenmarkt, Austria\",\n  \"Neuberg im Burgenland, Austria\",\n  \"Neudörfl, Austria\",\n  \"Neufeld an der Leitha, Austria\",\n  \"Neuhaus am Klausenbach, Austria\",\n  \"Neusiedl am See, Austria\",\n  \"Neustift an der Lafnitz, Austria\",\n  \"Neustift bei Güssing, Austria\",\n  \"Neutal, Austria\",\n  \"Nickelsdorf, Austria\",\n  \"Nikitsch, Austria\",\n  \"Oberdorf im Burgenland, Austria\",\n  \"Oberloisdorf, Austria\",\n  \"Oberpullendorf, Austria\",\n  \"Oberschützen, Austria\",\n  \"Oberwart, Austria\",\n  \"Oggau, Austria\",\n  \"Olbendorf, Austria\",\n  \"Ollersdorf im Burgenland, Austria\",\n  \"Oslip, Austria\",\n  \"Pama, Austria\",\n  \"Pamhagen, Austria\",\n  \"Parndorf, Austria\",\n  \"Pilgersdorf, Austria\",\n  \"Pinkafeld, Austria\",\n  \"Piringsdorf, Austria\",\n  \"Podersdorf am See, Austria\",\n  \"Politischer Bezirk Güssing, Austria\",\n  \"Politischer Bezirk Jennersdorf, Austria\",\n  \"Politischer Bezirk Mattersburg, Austria\",\n  \"Politischer Bezirk Neusiedl am See, Austria\",\n  \"Politischer Bezirk Oberpullendorf, Austria\",\n  \"Politischer Bezirk Oberwart, Austria\",\n  \"Pöttelsdorf, Austria\",\n  \"Pöttsching, Austria\",\n  \"Potzneusiedl, Austria\",\n  \"Purbach am Neusiedler See, Austria\",\n  \"Raiding, Austria\",\n  \"Rechnitz, Austria\",\n  \"Riedlingsdorf, Austria\",\n  \"Ritzing, Austria\",\n  \"Rohr im Burgenland, Austria\",\n  \"Rohrbach bei Mattersburg, Austria\",\n  \"Rotenturm an der Pinka, Austria\",\n  \"Rudersdorf, Austria\",\n  \"Rust, Austria\",\n  \"Rust Stadt, Austria\",\n  \"Sankt Andrä am Zicksee, Austria\",\n  \"Sankt Georgen am Leithagebirge, Austria\",\n  \"Sankt Margarethen im Burgenland, Austria\",\n  \"Sankt Martin an der Raab, Austria\",\n  \"Sankt Michael im Burgenland, Austria\",\n  \"Schachendorf, Austria\",\n  \"Schandorf, Austria\",\n  \"Schattendorf, Austria\",\n  \"Schützen am Gebirge, Austria\",\n  \"Siegendorf im Burgenland, Austria\",\n  \"Sieggraben, Austria\",\n  \"Sigless, Austria\",\n  \"Stadtschlaining, Austria\",\n  \"Stegersbach, Austria\",\n  \"Steinbrunn, Austria\",\n  \"Stinatz, Austria\",\n  \"Stoob, Austria\",\n  \"Stotzing, Austria\",\n  \"Strem, Austria\",\n  \"Tadten, Austria\",\n  \"Tobaj, Austria\",\n  \"Trausdorf an der Wulka, Austria\",\n  \"Tschanigraben, Austria\",\n  \"Unterfrauenhaid, Austria\",\n  \"Unterkohlstätten, Austria\",\n  \"Unterwart, Austria\",\n  \"Wallern im Burgenland, Austria\",\n  \"Weichselbaum, Austria\",\n  \"Weiden am See, Austria\",\n  \"Weiden bei Rechnitz, Austria\",\n  \"Weingraben, Austria\",\n  \"Weppersdorf, Austria\",\n  \"Wiesen, Austria\",\n  \"Wiesfleck, Austria\",\n  \"Wimpassing an der Leitha, Austria\",\n  \"Winden am See, Austria\",\n  \"Wolfau, Austria\",\n  \"Wörterberg, Austria\",\n  \"Wulkaprodersdorf, Austria\",\n  \"Zagersdorf, Austria\",\n  \"Zillingtal, Austria\",\n  \"Zurndorf, Austria\",\n  \"Albeck, Austria\",\n  \"Althofen, Austria\",\n  \"Annabichl, Austria\",\n  \"Arnoldstein, Austria\",\n  \"Arriach, Austria\",\n  \"Auen, Austria\",\n  \"Bad Bleiberg, Austria\",\n  \"Bad Eisenkappel, Austria\",\n  \"Bad Kleinkirchheim, Austria\",\n  \"Bad Sankt Leonhard im Lavanttal, Austria\",\n  \"Baldramsdorf, Austria\",\n  \"Berg im Drautal, Austria\",\n  \"Bleiburg, Austria\",\n  \"Bodensdorf, Austria\",\n  \"Brückl, Austria\",\n  \"Dellach, Austria\",\n  \"Dellach im Drautal, Austria\",\n  \"Deutsch Griffen, Austria\",\n  \"Deutsch-Griffen, Austria\",\n  \"Diex, Austria\",\n  \"Döbriach, Austria\",\n  \"Draschen, Austria\",\n  \"Ebenthal, Austria\",\n  \"Eberndorf, Austria\",\n  \"Eberstein, Austria\",\n  \"Ebriach, Austria\",\n  \"Eisenkappel-Vellach, Austria\",\n  \"Faak am See, Austria\",\n  \"Feffernitz, Austria\",\n  \"Feistritz an der Drau, Austria\",\n  \"Feistritz an der Gail, Austria\",\n  \"Feistritz im Rosental, Austria\",\n  \"Feistritz ob Bleiburg, Austria\",\n  \"Feld am See, Austria\",\n  \"Feldkirchen District, Austria\",\n  \"Feldkirchen in Kärnten, Austria\",\n  \"Ferlach, Austria\",\n  \"Ferndorf, Austria\",\n  \"Finkenstein, Austria\",\n  \"Finkenstein am Faaker See, Austria\",\n  \"Flattach, Austria\",\n  \"Föderlach I, Austria\",\n  \"Frantschach-Sankt Gertraud, Austria\",\n  \"Frauenstein, Austria\",\n  \"Fresach, Austria\",\n  \"Fresen, Austria\",\n  \"Friesach, Austria\",\n  \"Fürnitz, Austria\",\n  \"Gailitz, Austria\",\n  \"Gallizien, Austria\",\n  \"Gemmersdorf, Austria\",\n  \"Gerlamoos, Austria\",\n  \"Gitschtal, Austria\",\n  \"Glanegg, Austria\",\n  \"Globasnitz, Austria\",\n  \"Glödnitz, Austria\",\n  \"Gmünd, Austria\",\n  \"Gmünd in Kärnten, Austria\",\n  \"Gnesau, Austria\",\n  \"Görtschach, Austria\",\n  \"Grafenstein, Austria\",\n  \"Greifenburg, Austria\",\n  \"Gries, Austria\",\n  \"Griffen, Austria\",\n  \"Großkirchheim, Austria\",\n  \"Gurk, Austria\",\n  \"Guttaring, Austria\",\n  \"Heiligenblut, Austria\",\n  \"Hermagor, Austria\",\n  \"Hermagor District, Austria\",\n  \"Hermagor-Pressegger See, Austria\",\n  \"Himmelberg, Austria\",\n  \"Hohenthurn, Austria\",\n  \"Hörtendorf, Austria\",\n  \"Hüttenberg, Austria\",\n  \"Irschen, Austria\",\n  \"Kappel am Krappfeld, Austria\",\n  \"Keutschach am See, Austria\",\n  \"Kirchbach, Austria\",\n  \"Klagenfurt, Austria\",\n  \"Klagenfurt am Wörthersee, Austria\",\n  \"Klagenfurt-Land District, Austria\",\n  \"Kleblach-Lind, Austria\",\n  \"Klein Sankt Paul, Austria\",\n  \"Kleinedling, Austria\",\n  \"Kötschach, Austria\",\n  \"Kötschach-Mauthen, Austria\",\n  \"Köttmannsdorf, Austria\",\n  \"Krems, Austria\",\n  \"Krumpendorf, Austria\",\n  \"Kühnsdorf, Austria\",\n  \"Lamnitz, Austria\",\n  \"Landskron, Austria\",\n  \"Launsdorf, Austria\",\n  \"Lavamünd, Austria\",\n  \"Ledenitzen, Austria\",\n  \"Lendorf, Austria\",\n  \"Leppen, Austria\",\n  \"Lesachtal, Austria\",\n  \"Liebenfels, Austria\",\n  \"Lind, Austria\",\n  \"Lobersberg, Austria\",\n  \"Ludmannsdorf, Austria\",\n  \"Lurnfeld, Austria\",\n  \"Magdalensberg, Austria\",\n  \"Mallnitz, Austria\",\n  \"Malta, Austria\",\n  \"Maria Rain, Austria\",\n  \"Maria Saal, Austria\",\n  \"Maria Wörth, Austria\",\n  \"Mautbrücken, Austria\",\n  \"Metnitz, Austria\",\n  \"Micheldorf, Austria\",\n  \"Millstatt, Austria\",\n  \"Mölbling, Austria\",\n  \"Möllbrücke, Austria\",\n  \"Moosburg, Austria\",\n  \"Mörtschach, Austria\",\n  \"Mühldorf, Austria\",\n  \"Neu-Feffernitz, Austria\",\n  \"Neuhaus, Austria\",\n  \"Niederdorf, Austria\",\n  \"Nötsch im Gailtal, Austria\",\n  \"Oberdörfl, Austria\",\n  \"Oberdrauburg, Austria\",\n  \"Obermillstatt, Austria\",\n  \"Obervellach, Austria\",\n  \"Ossiach, Austria\",\n  \"Paternion, Austria\",\n  \"Pischeldorf, Austria\",\n  \"Pöckau, Austria\",\n  \"Poggersdorf, Austria\",\n  \"Pörtschach am Wörthersee, Austria\",\n  \"Preitenegg, Austria\",\n  \"Priel, Austria\",\n  \"Pusarnitz, Austria\",\n  \"Radenthein, Austria\",\n  \"Rain, Austria\",\n  \"Rangersdorf, Austria\",\n  \"Reding, Austria\",\n  \"Reichenau, Austria\",\n  \"Reichenfels, Austria\",\n  \"Reißeck, Austria\",\n  \"Rennweg am Katschberg, Austria\",\n  \"Rittersdorf, Austria\",\n  \"Rosegg, Austria\",\n  \"Ruden, Austria\",\n  \"Sachsenburg, Austria\",\n  \"Sankt Andrä, Austria\",\n  \"Sankt Egyden an der Drau, Austria\",\n  \"Sankt Georgen am Längsee, Austria\",\n  \"Sankt Georgen im Lavanttal, Austria\",\n  \"Sankt Jakob, Austria\",\n  \"Sankt Jakob im Rosental, Austria\",\n  \"Sankt Kanzian am Klopeiner See, Austria\",\n  \"Sankt Leonhard, Austria\",\n  \"Sankt Magdalen, Austria\",\n  \"Sankt Margareten im Rosental, Austria\",\n  \"Sankt Martin, Austria\",\n  \"Sankt Paul im Lavanttal, Austria\",\n  \"Sankt Peter, Austria\",\n  \"Sankt Ruprecht, Austria\",\n  \"Sankt Stefan, Austria\",\n  \"Sankt Stefan im Gailtal, Austria\",\n  \"Sankt Urban, Austria\",\n  \"Sankt Veit an der Glan, Austria\",\n  \"Sankt Veit an der Glan District, Austria\",\n  \"Schiefling am See, Austria\",\n  \"Schleben, Austria\",\n  \"Seebach, Austria\",\n  \"Seeboden, Austria\",\n  \"Seitenberg, Austria\",\n  \"Sirnitz, Austria\",\n  \"Sittersdorf, Austria\",\n  \"Spittal an der Drau, Austria\",\n  \"Spittal an der Drau District, Austria\",\n  \"St. Agathen und Perau, Austria\",\n  \"St. Andrä, Austria\",\n  \"St. Margareten im Rosental, Austria\",\n  \"St. Paul im Lavanttal, Austria\",\n  \"St. Stefan im Gailtal, Austria\",\n  \"St. Urban, Austria\",\n  \"St. Veit an der Glan, Austria\",\n  \"St. Veiter Vorstadt, Austria\",\n  \"Stall, Austria\",\n  \"Steindorf am Ossiacher See, Austria\",\n  \"Steinfeld, Austria\",\n  \"Steuerberg, Austria\",\n  \"Stockenboi, Austria\",\n  \"Straßburg, Austria\",\n  \"Straßburg-Stadt, Austria\",\n  \"Suetschach, Austria\",\n  \"Techelsberg, Austria\",\n  \"Timenitz, Austria\",\n  \"Trebesing, Austria\",\n  \"Treffen, Austria\",\n  \"Treibach, Austria\",\n  \"Tschachoritsch, Austria\",\n  \"Umberg, Austria\",\n  \"Untere Fellach, Austria\",\n  \"Velden am Wörther See, Austria\",\n  \"Velden am Wörthersee, Austria\",\n  \"Viktring, Austria\",\n  \"Viktringer Vorstadt, Austria\",\n  \"Villach, Austria\",\n  \"Villach-Innere Stadt, Austria\",\n  \"Villach-Land District, Austria\",\n  \"Villacher Vorstadt, Austria\",\n  \"Völkendorf, Austria\",\n  \"Völkermarkt, Austria\",\n  \"Völkermarkt District, Austria\",\n  \"Völkermarkter Vorstadt, Austria\",\n  \"Waiern, Austria\",\n  \"Warmbad-Judendorf, Austria\",\n  \"Weißensee, Austria\",\n  \"Weißenstein, Austria\",\n  \"Weitensfeld, Austria\",\n  \"Weitensfeld im Gurktal, Austria\",\n  \"Wernberg, Austria\",\n  \"Winklern, Austria\",\n  \"Wölfnitz, Austria\",\n  \"Wolfsberg, Austria\",\n  \"Wolfsberg District, Austria\",\n  \"Wudmath, Austria\",\n  \"Zell, Austria\",\n  \"Absdorf, Austria\",\n  \"Achau, Austria\",\n  \"Aderklaa, Austria\",\n  \"Aggsbach, Austria\",\n  \"Alland, Austria\",\n  \"Allentsteig, Austria\",\n  \"Allhartsberg, Austria\",\n  \"Altenburg, Austria\",\n  \"Altendorf, Austria\",\n  \"Altenmarkt an der Triesting, Austria\",\n  \"Altlengbach, Austria\",\n  \"Altlichtenwarth, Austria\",\n  \"Altmelon, Austria\",\n  \"Amstetten, Austria\",\n  \"Andlersdorf, Austria\",\n  \"Angern an der March, Austria\",\n  \"Arbesbach, Austria\",\n  \"Ardagger Stift, Austria\",\n  \"Aschbach Markt, Austria\",\n  \"Aspang Markt, Austria\",\n  \"Asparn an der Zaya, Austria\",\n  \"Asperhofen, Austria\",\n  \"Atzenbrugg, Austria\",\n  \"Au am Leithaberge, Austria\",\n  \"Auersthal, Austria\",\n  \"Bad Deutsch-Altenburg, Austria\",\n  \"Bad Erlach, Austria\",\n  \"Bad Fischau, Austria\",\n  \"Bad Pirawarth, Austria\",\n  \"Bad Schönau, Austria\",\n  \"Bad Traunstein, Austria\",\n  \"Bad Vöslau, Austria\",\n  \"Baden, Austria\",\n  \"Bärnkopf, Austria\",\n  \"Behamberg, Austria\",\n  \"Berg, Austria\",\n  \"Bergland, Austria\",\n  \"Berndorf, Austria\",\n  \"Bernhardsthal, Austria\",\n  \"Biberbach, Austria\",\n  \"Biedermannsdorf, Austria\",\n  \"Bisamberg, Austria\",\n  \"Bischofstetten, Austria\",\n  \"Blindenmarkt, Austria\",\n  \"Bockfließ, Austria\",\n  \"Böheimkirchen, Austria\",\n  \"Breitenau, Austria\",\n  \"Breitenfurt bei Wien, Austria\",\n  \"Bromberg, Austria\",\n  \"Bruck an der Leitha, Austria\",\n  \"Brunn am Gebirge, Austria\",\n  \"Brunn an der Schneebergbahn, Austria\",\n  \"Brunn an der Wild, Austria\",\n  \"Buchbach, Austria\",\n  \"Deutsch-Wagram, Austria\",\n  \"Dobersberg, Austria\",\n  \"Dorfstetten, Austria\",\n  \"Drasenhofen, Austria\",\n  \"Drösing, Austria\",\n  \"Droß, Austria\",\n  \"Dürnkrut, Austria\",\n  \"Dürnstein, Austria\",\n  \"Ebenfurth, Austria\",\n  \"Ebenthal, Austria\",\n  \"Ebergassing, Austria\",\n  \"Ebreichsdorf, Austria\",\n  \"Echsenbach, Austria\",\n  \"Eckartsau, Austria\",\n  \"Edlitz, Austria\",\n  \"Eggenburg, Austria\",\n  \"Eggendorf, Austria\",\n  \"Eggern, Austria\",\n  \"Eichgraben, Austria\",\n  \"Eisgarn, Austria\",\n  \"Emmersdorf an der Donau, Austria\",\n  \"Engelhartstetten, Austria\",\n  \"Ennsdorf, Austria\",\n  \"Enzenreith, Austria\",\n  \"Enzersdorf an der Fischa, Austria\",\n  \"Enzersfeld, Austria\",\n  \"Erlauf, Austria\",\n  \"Ernstbrunn, Austria\",\n  \"Ernsthofen, Austria\",\n  \"Erpersdorf, Austria\",\n  \"Ertl, Austria\",\n  \"Eschenau, Austria\",\n  \"Euratsfeld, Austria\",\n  \"Falkenstein, Austria\",\n  \"Fallbach, Austria\",\n  \"Feistritz am Wechsel, Austria\",\n  \"Felixdorf, Austria\",\n  \"Fels am Wagram, Austria\",\n  \"Ferschnitz, Austria\",\n  \"Fischamend-Markt, Austria\",\n  \"Frankenfels, Austria\",\n  \"Frohsdorf, Austria\",\n  \"Furth an der Triesting, Austria\",\n  \"Furth bei Göttweig, Austria\",\n  \"Gaaden, Austria\",\n  \"Gablitz, Austria\",\n  \"Gainfarn, Austria\",\n  \"Gaming, Austria\",\n  \"Gänserndorf, Austria\",\n  \"Gars am Kamp, Austria\",\n  \"Gastern, Austria\",\n  \"Gaubitsch, Austria\",\n  \"Gaweinstal, Austria\",\n  \"Gedersdorf, Austria\",\n  \"Geras, Austria\",\n  \"Gerasdorf bei Wien, Austria\",\n  \"Gerersdorf, Austria\",\n  \"Gerolding, Austria\",\n  \"Gföhl, Austria\",\n  \"Gießhübl, Austria\",\n  \"Glinzendorf, Austria\",\n  \"Gloggnitz, Austria\",\n  \"Gmünd, Austria\",\n  \"Gnadendorf, Austria\",\n  \"Gneixendorf, Austria\",\n  \"Göllersdorf, Austria\",\n  \"Göpfritz an der Wild, Austria\",\n  \"Göstling an der Ybbs, Austria\",\n  \"Götzendorf an der Leitha, Austria\",\n  \"Grafenegg, Austria\",\n  \"Grafenschlag, Austria\",\n  \"Grafenwörth, Austria\",\n  \"Gramatneusiedl, Austria\",\n  \"Greinsfurth, Austria\",\n  \"Gresten, Austria\",\n  \"Grimmenstein, Austria\",\n  \"Groß-Engersdorf, Austria\",\n  \"Groß-Enzersdorf, Austria\",\n  \"Groß-Gerungs, Austria\",\n  \"Groß-Schweinbarth, Austria\",\n  \"Groß-Siegharts, Austria\",\n  \"Großebersdorf, Austria\",\n  \"Großharras, Austria\",\n  \"Großhofen, Austria\",\n  \"Großkrut, Austria\",\n  \"Großmugl, Austria\",\n  \"Großriedenthal, Austria\",\n  \"Großrußbach, Austria\",\n  \"Großweikersdorf, Austria\",\n  \"Grünbach am Schneeberg, Austria\",\n  \"Gugging, Austria\",\n  \"Gumpoldskirchen, Austria\",\n  \"Günselsdorf, Austria\",\n  \"Guntersdorf, Austria\",\n  \"Guntramsdorf, Austria\",\n  \"Gutenbrunn, Austria\",\n  \"Gutenstein, Austria\",\n  \"Haag, Austria\",\n  \"Hadersdorf am Kamp, Austria\",\n  \"Hadres, Austria\",\n  \"Hafnerbach, Austria\",\n  \"Hagenbrunn, Austria\",\n  \"Haidershofen, Austria\",\n  \"Hainburg an der Donau, Austria\",\n  \"Hainfeld, Austria\",\n  \"Hardegg, Austria\",\n  \"Haringsee, Austria\",\n  \"Harland, Austria\",\n  \"Harmannsdorf, Austria\",\n  \"Hart, Austria\",\n  \"Haugschlag, Austria\",\n  \"Haugsdorf, Austria\",\n  \"Haunoldstein, Austria\",\n  \"Hausbrunn, Austria\",\n  \"Hauskirchen, Austria\",\n  \"Hausleiten, Austria\",\n  \"Hausmening, Austria\",\n  \"Heidenreichstein, Austria\",\n  \"Heiligeneich, Austria\",\n  \"Heiligenkreuz, Austria\",\n  \"Hennersdorf, Austria\",\n  \"Hernstein, Austria\",\n  \"Herrnbaumgarten, Austria\",\n  \"Herzogenburg, Austria\",\n  \"Himberg, Austria\",\n  \"Hinterbrühl, Austria\",\n  \"Hinterleiten, Austria\",\n  \"Hirschbach, Austria\",\n  \"Hirtenberg, Austria\",\n  \"Hochleithen, Austria\",\n  \"Hochwolkersdorf, Austria\",\n  \"Hof am Leithaberge, Austria\",\n  \"Hofamt Priel, Austria\",\n  \"Höflein, Austria\",\n  \"Höfling, Austria\",\n  \"Hofstetten, Austria\",\n  \"Hohenau, Austria\",\n  \"Hohenberg, Austria\",\n  \"Hoheneich, Austria\",\n  \"Hohenruppersdorf, Austria\",\n  \"Hollabrunn, Austria\",\n  \"Hollenstein an der Ybbs, Austria\",\n  \"Hollenthon, Austria\",\n  \"Horn, Austria\",\n  \"Hundsheim, Austria\",\n  \"Hürm, Austria\",\n  \"Hutten, Austria\",\n  \"Jaidhof, Austria\",\n  \"Japons, Austria\",\n  \"Jedenspeigen, Austria\",\n  \"Kaltenleutgeben, Austria\",\n  \"Kapelln, Austria\",\n  \"Karlstetten, Austria\",\n  \"Kasten bei Böheimkirchen, Austria\",\n  \"Katzelsdorf, Austria\",\n  \"Kaumberg, Austria\",\n  \"Kautzen, Austria\",\n  \"Kematen an der Ybbs, Austria\",\n  \"Kierling, Austria\",\n  \"Kilb, Austria\",\n  \"Kirchberg am Wagram, Austria\",\n  \"Kirchberg am Walde, Austria\",\n  \"Kirchberg am Wechsel, Austria\",\n  \"Kirchberg an der Pielach, Austria\",\n  \"Kirchschlag, Austria\",\n  \"Kirchschlag in der Buckligen Welt, Austria\",\n  \"Kirchstetten, Austria\",\n  \"Kirnberg an der Mank, Austria\",\n  \"Klausen-Leopoldsdorf, Austria\",\n  \"Klein-Neusiedl, Austria\",\n  \"Klein-Pöchlarn, Austria\",\n  \"Kleinzell, Austria\",\n  \"Klosterneuburg, Austria\",\n  \"Königstetten, Austria\",\n  \"Korneuburg, Austria\",\n  \"Kottingbrunn, Austria\",\n  \"Krems an der Donau, Austria\",\n  \"Krems an der Donau Stadt, Austria\",\n  \"Kritzendorf, Austria\",\n  \"Krumau am Kamp, Austria\",\n  \"Krumbach Markt, Austria\",\n  \"Krumnussbaum, Austria\",\n  \"Laa an der Thaya, Austria\",\n  \"Laab im Walde, Austria\",\n  \"Ladendorf, Austria\",\n  \"Landegg, Austria\",\n  \"Langau, Austria\",\n  \"Langenlebarn-Oberaigen, Austria\",\n  \"Langenlois, Austria\",\n  \"Langenrohr, Austria\",\n  \"Langenzersdorf, Austria\",\n  \"Langschlag, Austria\",\n  \"Lanzendorf, Austria\",\n  \"Lanzenkirchen, Austria\",\n  \"Lassee, Austria\",\n  \"Laxenburg, Austria\",\n  \"Leiben, Austria\",\n  \"Leitzersdorf, Austria\",\n  \"Lengenfeld, Austria\",\n  \"Leobendorf, Austria\",\n  \"Leobersdorf, Austria\",\n  \"Leopoldsdorf, Austria\",\n  \"Leopoldsdorf im Marchfelde, Austria\",\n  \"Lerchenfeld, Austria\",\n  \"Lichtenegg, Austria\",\n  \"Lichtenwörth, Austria\",\n  \"Lilienfeld, Austria\",\n  \"Litschau, Austria\",\n  \"Loich, Austria\",\n  \"Loosdorf, Austria\",\n  \"Lunz am See, Austria\",\n  \"Mailberg, Austria\",\n  \"Maissau, Austria\",\n  \"Mank, Austria\",\n  \"Mannersdorf am Leithagebirge, Austria\",\n  \"Mannsdorf an der Donau, Austria\",\n  \"Mannswörth, Austria\",\n  \"Marbach an der Donau, Austria\",\n  \"Marchegg, Austria\",\n  \"Margarethen am Moos, Austria\",\n  \"Maria Ellend, Austria\",\n  \"Maria Enzersdorf, Austria\",\n  \"Maria Laach am Jauerling, Austria\",\n  \"Maria Lanzendorf, Austria\",\n  \"Maria Taferl, Austria\",\n  \"Maria-Anzbach, Austria\",\n  \"Markersdorf an der Pielach, Austria\",\n  \"Markgrafneusiedl, Austria\",\n  \"Markt Piesting, Austria\",\n  \"Martinsberg, Austria\",\n  \"Matzen, Austria\",\n  \"Matzendorf, Austria\",\n  \"Mauer bei Amstetten, Austria\",\n  \"Mauerbach, Austria\",\n  \"Mautern, Austria\",\n  \"Melk, Austria\",\n  \"Michelhausen, Austria\",\n  \"Miesenbach, Austria\",\n  \"Mistelbach, Austria\",\n  \"Mitterbach am Erlaufsee, Austria\",\n  \"Mitterndorf an der Fischa, Austria\",\n  \"Mödling, Austria\",\n  \"Möllersdorf, Austria\",\n  \"Mönichkirchen, Austria\",\n  \"Moosbrunn, Austria\",\n  \"Muckendorf an der Donau, Austria\",\n  \"Muggendorf, Austria\",\n  \"Mühldorf, Austria\",\n  \"Münchendorf, Austria\",\n  \"Neidling, Austria\",\n  \"Neu-Guntramsdorf, Austria\",\n  \"Neudorf bei Staatz, Austria\",\n  \"Neufurth, Austria\",\n  \"Neuhofen an der Ybbs, Austria\",\n  \"Neulengbach, Austria\",\n  \"Neumarkt an der Ybbs, Austria\",\n  \"Neunkirchen, Austria\",\n  \"Neusiedl, Austria\",\n  \"Neusiedl an der Zaya, Austria\",\n  \"Niederhollabrunn, Austria\",\n  \"Niederleis, Austria\",\n  \"Nöchling, Austria\",\n  \"Ober-Grafendorf, Austria\",\n  \"Oberhausen, Austria\",\n  \"Oberndorf an der Melk, Austria\",\n  \"Oberndorf in der Ebene, Austria\",\n  \"Obersdorf, Austria\",\n  \"Obersiebenbrunn, Austria\",\n  \"Oberwagram, Austria\",\n  \"Oberwaltersdorf, Austria\",\n  \"Oberwölbling, Austria\",\n  \"Oehling, Austria\",\n  \"Oeynhausen, Austria\",\n  \"Opponitz, Austria\",\n  \"Orth an der Donau, Austria\",\n  \"Ottenschlag, Austria\",\n  \"Ottenthal, Austria\",\n  \"Otterthal, Austria\",\n  \"Parbasdorf, Austria\",\n  \"Paudorf, Austria\",\n  \"Payerbach, Austria\",\n  \"Penz, Austria\",\n  \"Perchtoldsdorf, Austria\",\n  \"Pernegg, Austria\",\n  \"Pernersdorf, Austria\",\n  \"Pernitz, Austria\",\n  \"Persenbeug, Austria\",\n  \"Petronell-Carnuntum, Austria\",\n  \"Petzenkirchen, Austria\",\n  \"Pfaffstätten, Austria\",\n  \"Pillichsdorf, Austria\",\n  \"Pitten, Austria\",\n  \"Pöchlarn, Austria\",\n  \"Pöggstall, Austria\",\n  \"Politischer Bezirk Amstetten, Austria\",\n  \"Politischer Bezirk Baden, Austria\",\n  \"Politischer Bezirk Bruck an der Leitha, Austria\",\n  \"Politischer Bezirk Gänserndorf, Austria\",\n  \"Politischer Bezirk Gmünd, Austria\",\n  \"Politischer Bezirk Hollabrunn, Austria\",\n  \"Politischer Bezirk Horn, Austria\",\n  \"Politischer Bezirk Korneuburg, Austria\",\n  \"Politischer Bezirk Krems, Austria\",\n  \"Politischer Bezirk Lilienfeld, Austria\",\n  \"Politischer Bezirk Melk, Austria\",\n  \"Politischer Bezirk Mistelbach, Austria\",\n  \"Politischer Bezirk Mödling, Austria\",\n  \"Politischer Bezirk Neunkirchen, Austria\",\n  \"Politischer Bezirk Sankt Pölten, Austria\",\n  \"Politischer Bezirk Scheibbs, Austria\",\n  \"Politischer Bezirk Tulln, Austria\",\n  \"Politischer Bezirk Waidhofen an der Thaya, Austria\",\n  \"Politischer Bezirk Wiener Neustadt, Austria\",\n  \"Politischer Bezirk Zwettl, Austria\",\n  \"Pottenbrunn, Austria\",\n  \"Pottendorf, Austria\",\n  \"Pottenstein, Austria\",\n  \"Pottschach, Austria\",\n  \"Poysdorf, Austria\",\n  \"Prellenkirchen, Austria\",\n  \"Pressbaum, Austria\",\n  \"Prigglitz, Austria\",\n  \"Prinzersdorf, Austria\",\n  \"Prottes, Austria\",\n  \"Puchberg am Schneeberg, Austria\",\n  \"Puchenstuben, Austria\",\n  \"Pulkau, Austria\",\n  \"Purgstall, Austria\",\n  \"Purkersdorf, Austria\",\n  \"Pyhra, Austria\",\n  \"Raabs an der Thaya, Austria\",\n  \"Raach am Hochgebirge, Austria\",\n  \"Raasdorf, Austria\",\n  \"Rabensburg, Austria\",\n  \"Rabenstein an der Pielach, Austria\",\n  \"Ramsau, Austria\",\n  \"Randegg, Austria\",\n  \"Rannersdorf, Austria\",\n  \"Rappottenstein, Austria\",\n  \"Rastenfeld, Austria\",\n  \"Ratzersdorf an der Traisen, Austria\",\n  \"Rauchenwarth, Austria\",\n  \"Ravelsbach, Austria\",\n  \"Raxendorf, Austria\",\n  \"Rehberg, Austria\",\n  \"Reichenau an der Rax, Austria\",\n  \"Reingers, Austria\",\n  \"Reinsberg, Austria\",\n  \"Reisenberg, Austria\",\n  \"Retz, Austria\",\n  \"Rohr im Gebirge, Austria\",\n  \"Rohrau, Austria\",\n  \"Rohrbach an der Gölsen, Austria\",\n  \"Röhrenbach, Austria\",\n  \"Rohrendorf bei Krems, Austria\",\n  \"Röschitz, Austria\",\n  \"Rosenau am Sonntagberg, Austria\",\n  \"Ruprechtshofen, Austria\",\n  \"Sallingberg, Austria\",\n  \"Sankt Aegyd am Neuwalde, Austria\",\n  \"Sankt Andrä vor dem Hagenthale, Austria\",\n  \"Sankt Corona am Wechsel, Austria\",\n  \"Sankt Georgen am Ybbsfelde, Austria\",\n  \"Sankt Georgen an der Leys, Austria\",\n  \"Sankt Leonhard am Forst, Austria\",\n  \"Sankt Leonhard am Hornerwald, Austria\",\n  \"Sankt Margarethen an der Sierning, Austria\",\n  \"Sankt Martin am Ybbsfelde, Austria\",\n  \"Sankt Pantaleon, Austria\",\n  \"Sankt Peter in der Au Markt, Austria\",\n  \"Sankt Pölten, Austria\",\n  \"Sankt Pölten Stadt, Austria\",\n  \"Sankt Valentin, Austria\",\n  \"Sankt Veit an der Gölsen, Austria\",\n  \"Scharndorf, Austria\",\n  \"Scheibbs, Austria\",\n  \"Schleinbach, Austria\",\n  \"Schönau an der Triesting, Austria\",\n  \"Schönbach, Austria\",\n  \"Schönkirchen-Reyersdorf, Austria\",\n  \"Schottwien, Austria\",\n  \"Schrattenbach, Austria\",\n  \"Schrattenberg, Austria\",\n  \"Schrattenthal, Austria\",\n  \"Schrems, Austria\",\n  \"Schwadorf, Austria\",\n  \"Schwarzau am Steinfeld, Austria\",\n  \"Schwarzau im Gebirge, Austria\",\n  \"Schwarzenau, Austria\",\n  \"Schwarzenbach, Austria\",\n  \"Schwarzenbach an der Pielach, Austria\",\n  \"Schwechat, Austria\",\n  \"Schweiggers, Austria\",\n  \"Seebenstein, Austria\",\n  \"Seibersdorf, Austria\",\n  \"Seitenstetten Markt, Austria\",\n  \"Semmering, Austria\",\n  \"Senftenberg, Austria\",\n  \"Seyring, Austria\",\n  \"Sieghartskirchen, Austria\",\n  \"Sierndorf, Austria\",\n  \"Sigmundsherberg, Austria\",\n  \"Sitzendorf an der Schmida, Austria\",\n  \"Sollenau, Austria\",\n  \"Sommerein, Austria\",\n  \"Sonntagberg, Austria\",\n  \"Sooss, Austria\",\n  \"Spannberg, Austria\",\n  \"Spillern, Austria\",\n  \"Spitz, Austria\",\n  \"Spratzern, Austria\",\n  \"Staatz, Austria\",\n  \"Stattersdorf, Austria\",\n  \"Statzendorf, Austria\",\n  \"Stein an der Donau, Austria\",\n  \"Steinabrückl, Austria\",\n  \"Steinakirchen am Forst, Austria\",\n  \"Stephanshart, Austria\",\n  \"Stetteldorf am Wagram, Austria\",\n  \"Stetten, Austria\",\n  \"Stockerau, Austria\",\n  \"Stollhofen, Austria\",\n  \"Stössing, Austria\",\n  \"Strass, Austria\",\n  \"Strasshof an der Nordbahn, Austria\",\n  \"Stratzing, Austria\",\n  \"Strengberg, Austria\",\n  \"Stronsdorf, Austria\",\n  \"Tattendorf, Austria\",\n  \"Teesdorf, Austria\",\n  \"Ternitz, Austria\",\n  \"Thaya, Austria\",\n  \"Theresienfeld, Austria\",\n  \"Thomasberg, Austria\",\n  \"Tiefenbach, Austria\",\n  \"Traisen, Austria\",\n  \"Traiskirchen, Austria\",\n  \"Traismauer, Austria\",\n  \"Trattenbach, Austria\",\n  \"Trautmannsdorf an der Leitha, Austria\",\n  \"Tribuswinkel, Austria\",\n  \"Trumau, Austria\",\n  \"Tulbing, Austria\",\n  \"Tulln, Austria\",\n  \"Tullnerbach-Lawies, Austria\",\n  \"Türnitz, Austria\",\n  \"Ulrichskirchen, Austria\",\n  \"Untersiebenbrunn, Austria\",\n  \"Unterstinkenbrunn, Austria\",\n  \"Unterwagram, Austria\",\n  \"Unterwaltersdorf, Austria\",\n  \"Velm, Austria\",\n  \"Viehofen, Austria\",\n  \"Vitis, Austria\",\n  \"Vösendorf, Austria\",\n  \"Waidhofen an der Thaya, Austria\",\n  \"Waidhofen an der Ybbs, Austria\",\n  \"Waidhofen an der Ybbs Stadt, Austria\",\n  \"Waidmannsfeld, Austria\",\n  \"Waldegg, Austria\",\n  \"Waldenstein, Austria\",\n  \"Waldhausen, Austria\",\n  \"Waldkirchen an der Thaya, Austria\",\n  \"Wallsee, Austria\",\n  \"Walpersbach, Austria\",\n  \"Wang, Austria\",\n  \"Warth, Austria\",\n  \"Wartmannstetten, Austria\",\n  \"Weidling, Austria\",\n  \"Weigelsdorf, Austria\",\n  \"Weikendorf, Austria\",\n  \"Weikersdorf am Steinfelde, Austria\",\n  \"Weinburg, Austria\",\n  \"Weinzierl am Walde, Austria\",\n  \"Weinzierl bei Krems, Austria\",\n  \"Weissenbach an der Triesting, Austria\",\n  \"Weißenkirchen in der Wachau, Austria\",\n  \"Weistrach, Austria\",\n  \"Weiten, Austria\",\n  \"Weitersfeld, Austria\",\n  \"Weitra, Austria\",\n  \"Wiener Neudorf, Austria\",\n  \"Wiener Neustadt, Austria\",\n  \"Wiener Neustadt Stadt, Austria\",\n  \"Wienersdorf, Austria\",\n  \"Wieselburg, Austria\",\n  \"Wiesmath, Austria\",\n  \"Wilfersdorf, Austria\",\n  \"Wilfleinsdorf, Austria\",\n  \"Wilhelmsburg, Austria\",\n  \"Willendorf am Steinfelde, Austria\",\n  \"Wimpassing im Schwarzatale, Austria\",\n  \"Windhag, Austria\",\n  \"Windigsteig, Austria\",\n  \"Winklarn, Austria\",\n  \"Winzendorf, Austria\",\n  \"Wolfpassing, Austria\",\n  \"Wolfsbach, Austria\",\n  \"Wolfsgraben, Austria\",\n  \"Wolfsthal, Austria\",\n  \"Wolkersdorf im Weinviertel, Austria\",\n  \"Wöllersdorf, Austria\",\n  \"Wördern, Austria\",\n  \"Wullersdorf, Austria\",\n  \"Würflach, Austria\",\n  \"Würmla, Austria\",\n  \"Ybbs an der Donau, Austria\",\n  \"Ybbsitz, Austria\",\n  \"Ysper, Austria\",\n  \"Zeillern, Austria\",\n  \"Zeiselmauer, Austria\",\n  \"Zell-Arzberg, Austria\",\n  \"Zell-Markt, Austria\",\n  \"Zellerndorf, Austria\",\n  \"Ziersdorf, Austria\",\n  \"Zillingdorf, Austria\",\n  \"Zistersdorf, Austria\",\n  \"Zöbern, Austria\",\n  \"Zwentendorf, Austria\",\n  \"Zwettl Stadt, Austria\",\n  \"Zwölfaxing, Austria\",\n  \"Abtenau, Austria\",\n  \"Adnet, Austria\",\n  \"Altenmarkt im Pongau, Austria\",\n  \"Anger, Austria\",\n  \"Anif, Austria\",\n  \"Anthering, Austria\",\n  \"Au, Austria\",\n  \"Bad Gastein, Austria\",\n  \"Bad Hofgastein, Austria\",\n  \"Bergheim, Austria\",\n  \"Berndorf bei Salzburg, Austria\",\n  \"Bischofshofen, Austria\",\n  \"Bramberg am Wildkogel, Austria\",\n  \"Bruck an der Großglocknerstraße, Austria\",\n  \"Burgfried, Austria\",\n  \"Bürmoos, Austria\",\n  \"Dienten am Hochkönig, Austria\",\n  \"Dorfbeuern, Austria\",\n  \"Dorfgastein, Austria\",\n  \"Eben im Pongau, Austria\",\n  \"Ebenau, Austria\",\n  \"Eching, Austria\",\n  \"Elixhausen, Austria\",\n  \"Elsbethen, Austria\",\n  \"Esch, Austria\",\n  \"Eugendorf, Austria\",\n  \"Faistenau, Austria\",\n  \"Filzmoos, Austria\",\n  \"Flachau, Austria\",\n  \"Forstau, Austria\",\n  \"Fuschl am See, Austria\",\n  \"Georgenberg, Austria\",\n  \"Glanegg, Austria\",\n  \"Glasenbach, Austria\",\n  \"Golling an der Salzach, Austria\",\n  \"Grödig, Austria\",\n  \"Grossarl, Austria\",\n  \"Grossgmain, Austria\",\n  \"Habach, Austria\",\n  \"Hallein, Austria\",\n  \"Hallwang, Austria\",\n  \"Henndorf am Wallersee, Austria\",\n  \"Himmelreich, Austria\",\n  \"Hinterglemm, Austria\",\n  \"Hintersee, Austria\",\n  \"Hof, Austria\",\n  \"Hof bei Salzburg, Austria\",\n  \"Hollersbach im Pinzgau, Austria\",\n  \"Hüttau, Austria\",\n  \"Hüttschlag, Austria\",\n  \"Irrsdorf, Austria\",\n  \"Kaprun, Austria\",\n  \"Kleinarl, Austria\",\n  \"Koppl, Austria\",\n  \"Köstendorf, Austria\",\n  \"Krimml, Austria\",\n  \"Krispl, Austria\",\n  \"Kuchl, Austria\",\n  \"Lamprechtshausen, Austria\",\n  \"Lehen, Austria\",\n  \"Lend, Austria\",\n  \"Lengfelden, Austria\",\n  \"Leogang, Austria\",\n  \"Lofer, Austria\",\n  \"Maishofen, Austria\",\n  \"Maria Alm am Steinernen Meer, Austria\",\n  \"Mariapfarr, Austria\",\n  \"Mattsee, Austria\",\n  \"Mauterndorf, Austria\",\n  \"Mitterberghütten, Austria\",\n  \"Mitterhofen, Austria\",\n  \"Mittersill, Austria\",\n  \"Mühlbach am Hochkönig, Austria\",\n  \"Neualm, Austria\",\n  \"Neukirchen am Großvenediger, Austria\",\n  \"Neumarkt am Wallersee, Austria\",\n  \"Niederalm, Austria\",\n  \"Niedernsill, Austria\",\n  \"Nußdorf am Haunsberg, Austria\",\n  \"Oberalm, Austria\",\n  \"Obergäu, Austria\",\n  \"Oberndorf bei Salzburg, Austria\",\n  \"Obertrum am See, Austria\",\n  \"Pfarrwerfen, Austria\",\n  \"Pichl, Austria\",\n  \"Piesendorf, Austria\",\n  \"Plainfeld, Austria\",\n  \"Plankenau, Austria\",\n  \"Politischer Bezirk Hallein, Austria\",\n  \"Politischer Bezirk Salzburg-Umgebung, Austria\",\n  \"Politischer Bezirk Sankt Johann im Pongau, Austria\",\n  \"Politischer Bezirk Tamsweg, Austria\",\n  \"Puch bei Hallein, Austria\",\n  \"Radstadt, Austria\",\n  \"Ramingstein, Austria\",\n  \"Rauris, Austria\",\n  \"Reinbach, Austria\",\n  \"Reitberg, Austria\",\n  \"Saalbach, Austria\",\n  \"Saalfelden am Steinernen Meer, Austria\",\n  \"Salzburg, Austria\",\n  \"Salzburg Stadt, Austria\",\n  \"Sankt Andrä im Lungau, Austria\",\n  \"Sankt Gilgen, Austria\",\n  \"Sankt Johann im Pongau, Austria\",\n  \"Sankt Leonhard, Austria\",\n  \"Sankt Margarethen im Lungau, Austria\",\n  \"Sankt Martin bei Lofer, Austria\",\n  \"Sankt Michael im Lungau, Austria\",\n  \"Sankt Veit im Pongau, Austria\",\n  \"Scheffau am Tennengebirge, Austria\",\n  \"Schleedorf, Austria\",\n  \"Schwarzach im Pongau, Austria\",\n  \"Seeham, Austria\",\n  \"Seekirchen am Wallersee, Austria\",\n  \"Seewalchen, Austria\",\n  \"Siezenheim, Austria\",\n  \"St. Martin of Tennengebirge, Austria\",\n  \"Strasswalchen, Austria\",\n  \"Strobl, Austria\",\n  \"Stuhlfelden, Austria\",\n  \"Tamsweg, Austria\",\n  \"Taugl, Austria\",\n  \"Taxach, Austria\",\n  \"Taxenbach, Austria\",\n  \"Thalgau, Austria\",\n  \"Thomatal, Austria\",\n  \"Thumersbach, Austria\",\n  \"Tweng, Austria\",\n  \"Unken, Austria\",\n  \"Unternberg, Austria\",\n  \"Untertauern, Austria\",\n  \"Uttendorf, Austria\",\n  \"Viehhausen, Austria\",\n  \"Viehhofen, Austria\",\n  \"Vigaun, Austria\",\n  \"Wagnergraben, Austria\",\n  \"Wagrain, Austria\",\n  \"Walchen, Austria\",\n  \"Wald im Pinzgau, Austria\",\n  \"Waldprechting, Austria\",\n  \"Wals, Austria\",\n  \"Walserfeld, Austria\",\n  \"Werfen, Austria\",\n  \"Werfenweng, Austria\",\n  \"Zederhaus, Austria\",\n  \"Zell am See, Austria\",\n  \"Abtissendorf, Austria\",\n  \"Admont, Austria\",\n  \"Aflenz Kurort, Austria\",\n  \"Aibl, Austria\",\n  \"Aigen im Ennstal, Austria\",\n  \"Albersdorf, Austria\",\n  \"Allerheiligen bei Wildon, Austria\",\n  \"Allerheiligen im Mürztal, Austria\",\n  \"Altaussee, Austria\",\n  \"Altenmarkt bei Fürstenfeld, Austria\",\n  \"Altenmarkt bei Sankt Gallen, Austria\",\n  \"Andritz, Austria\",\n  \"Anger, Austria\",\n  \"Apfelberg, Austria\",\n  \"Ardning, Austria\",\n  \"Arnfels, Austria\",\n  \"Arzberg, Austria\",\n  \"Attendorf, Austria\",\n  \"Auersbach, Austria\",\n  \"Bad Aussee, Austria\",\n  \"Bad Blumau, Austria\",\n  \"Bad Gams, Austria\",\n  \"Bad Gleichenberg, Austria\",\n  \"Bad Radkersburg, Austria\",\n  \"Bad Waltersdorf, Austria\",\n  \"Baierdorf-Umgebung, Austria\",\n  \"Bairisch Kölldorf, Austria\",\n  \"Bärnbach, Austria\",\n  \"Baumgarten bei Gnas, Austria\",\n  \"Berndorf, Austria\",\n  \"Bierbaum am Auersbach, Austria\",\n  \"Birkfeld, Austria\",\n  \"Blaindorf, Austria\",\n  \"Breitenfeld am Tannenriegel, Austria\",\n  \"Breitenfeld an der Rittschein, Austria\",\n  \"Bretstein, Austria\",\n  \"Bruck an der Mur, Austria\",\n  \"Brunn, Austria\",\n  \"Burgau, Austria\",\n  \"Dechantskirchen, Austria\",\n  \"Deuchendorf, Austria\",\n  \"Deutsch Goritz, Austria\",\n  \"Deutschfeistritz, Austria\",\n  \"Deutschlandsberg, Austria\",\n  \"Diemlach, Austria\",\n  \"Dienersdorf, Austria\",\n  \"Dietersdorf, Austria\",\n  \"Dietersdorf am Gnasbach, Austria\",\n  \"Donawitz, Austria\",\n  \"Donnersbach, Austria\",\n  \"Dürnstein in der Steiermark, Austria\",\n  \"Ebersdorf, Austria\",\n  \"Edelsbach bei Feldbach, Austria\",\n  \"Edelschrott, Austria\",\n  \"Edelsgrub, Austria\",\n  \"Edelstauden, Austria\",\n  \"Eggenberg, Austria\",\n  \"Eggersdorf bei Graz, Austria\",\n  \"Ehrenhausen, Austria\",\n  \"Eibiswald, Austria\",\n  \"Eichberg, Austria\",\n  \"Eichfeld, Austria\",\n  \"Eisbach, Austria\",\n  \"Eisenerz, Austria\",\n  \"Empersdorf, Austria\",\n  \"Eppenstein, Austria\",\n  \"Falkenburg, Austria\",\n  \"Farrach, Austria\",\n  \"Fehring, Austria\",\n  \"Feistritz bei Knittelfeld, Austria\",\n  \"Feldbach, Austria\",\n  \"Feldkirchen bei Graz, Austria\",\n  \"Fernitz, Austria\",\n  \"Fischbach, Austria\",\n  \"Fladnitz im Raabtal, Austria\",\n  \"Flatschach, Austria\",\n  \"Floing, Austria\",\n  \"Fohnsdorf, Austria\",\n  \"Frannach, Austria\",\n  \"Frauenberg, Austria\",\n  \"Freidorf an der Laßnitz, Austria\",\n  \"Freiland bei Deutschlandsberg, Austria\",\n  \"Friedberg, Austria\",\n  \"Frohnleiten, Austria\",\n  \"Fürstenfeld, Austria\",\n  \"Gaal, Austria\",\n  \"Gabersdorf, Austria\",\n  \"Gallmannsegg, Austria\",\n  \"Gamlitz, Austria\",\n  \"Gams bei Hieflau, Austria\",\n  \"Ganz, Austria\",\n  \"Garanas, Austria\",\n  \"Gasen, Austria\",\n  \"Geidorf, Austria\",\n  \"Geistthal, Austria\",\n  \"Gersdorf an der Feistritz, Austria\",\n  \"Gleinstätten, Austria\",\n  \"Gleisdorf, Austria\",\n  \"Glojach, Austria\",\n  \"Gnas, Austria\",\n  \"Gniebing, Austria\",\n  \"Gosdorf, Austria\",\n  \"Göss, Austria\",\n  \"Gössenberg, Austria\",\n  \"Gossendorf, Austria\",\n  \"Gösting, Austria\",\n  \"Göttelsberg, Austria\",\n  \"Grabersdorf, Austria\",\n  \"Grafendorf bei Hartberg, Austria\",\n  \"Gralla, Austria\",\n  \"Grambach, Austria\",\n  \"Gratkorn, Austria\",\n  \"Gratwein, Austria\",\n  \"Graz, Austria\",\n  \"Graz Stadt, Austria\",\n  \"Greisdorf, Austria\",\n  \"Gressenberg, Austria\",\n  \"Gries, Austria\",\n  \"Gröbming, Austria\",\n  \"Groß Sankt Florian, Austria\",\n  \"Großklein, Austria\",\n  \"Großlobming, Austria\",\n  \"Großsölk, Austria\",\n  \"Grosssulz, Austria\",\n  \"Gundersdorf, Austria\",\n  \"Hafendorf, Austria\",\n  \"Hainersdorf, Austria\",\n  \"Hainsdorf im Schwarzautal, Austria\",\n  \"Halbenrain, Austria\",\n  \"Hall bei Admont, Austria\",\n  \"Hart bei Graz, Austria\",\n  \"Hartberg, Austria\",\n  \"Hartl, Austria\",\n  \"Hartmannsdorf, Austria\",\n  \"Hatzendorf, Austria\",\n  \"Haus, Austria\",\n  \"Haus im Ennstal, Austria\",\n  \"Hausmannstätten, Austria\",\n  \"Heiligenkreuz am Waasen, Austria\",\n  \"Heimschuh, Austria\",\n  \"Hengsberg, Austria\",\n  \"Hetzendorf, Austria\",\n  \"Hieflau, Austria\",\n  \"Hinterberg, Austria\",\n  \"Hirnsdorf, Austria\",\n  \"Hitzendorf, Austria\",\n  \"Hochtregist, Austria\",\n  \"Höf, Austria\",\n  \"Hof bei Straden, Austria\",\n  \"Hofstätten an der Raab, Austria\",\n  \"Hohenau an der Raab, Austria\",\n  \"Hohentauern, Austria\",\n  \"Hollenegg, Austria\",\n  \"Hönigsberg, Austria\",\n  \"Ilz, Austria\",\n  \"Innere Stadt, Austria\",\n  \"Irdning, Austria\",\n  \"Jagerberg, Austria\",\n  \"Jakomini, Austria\",\n  \"Johnsbach, Austria\",\n  \"Judenburg, Austria\",\n  \"Judendorf, Austria\",\n  \"Kaibing, Austria\",\n  \"Kainach bei Voitsberg, Austria\",\n  \"Kainbach, Austria\",\n  \"Kaindorf, Austria\",\n  \"Kaindorf an der Sulm, Austria\",\n  \"Kalsdorf bei Graz, Austria\",\n  \"Kalwang, Austria\",\n  \"Kammern im Liesingtal, Austria\",\n  \"Kapellen, Austria\",\n  \"Kapfenberg, Austria\",\n  \"Kapfenstein, Austria\",\n  \"Kindberg, Austria\",\n  \"Kirchbach in Steiermark, Austria\",\n  \"Kirchberg an der Raab, Austria\",\n  \"Kirchenviertel, Austria\",\n  \"Kitzeck im Sausal, Austria\",\n  \"Kleinlobming, Austria\",\n  \"Kleinsöding, Austria\",\n  \"Kleinsölk, Austria\",\n  \"Klöch, Austria\",\n  \"Kloster, Austria\",\n  \"Knittelfeld, Austria\",\n  \"Kobenz, Austria\",\n  \"Köflach, Austria\",\n  \"Kohlberg, Austria\",\n  \"Kohlschwarz, Austria\",\n  \"Krakaudorf, Austria\",\n  \"Krakauhintermühlen, Austria\",\n  \"Krakauschatten, Austria\",\n  \"Kraubath an der Mur, Austria\",\n  \"Krieglach, Austria\",\n  \"Krottendorf, Austria\",\n  \"Krottendorf bei Ligist, Austria\",\n  \"Krumegg, Austria\",\n  \"Krusdorf, Austria\",\n  \"Kulm am Zirbitz, Austria\",\n  \"Kumberg, Austria\",\n  \"Labuch, Austria\",\n  \"Lafnitz, Austria\",\n  \"Landl, Austria\",\n  \"Lang, Austria\",\n  \"Langegg bei Graz, Austria\",\n  \"Langenwang, Austria\",\n  \"Lannach, Austria\",\n  \"Lassnitzhöhe, Austria\",\n  \"Leibnitz, Austria\",\n  \"Leitendorf, Austria\",\n  \"Leitersdorf im Raabtal, Austria\",\n  \"Leitring, Austria\",\n  \"Lend, Austria\",\n  \"Leoben, Austria\",\n  \"Leutschach, Austria\",\n  \"Liebenau, Austria\",\n  \"Lieboch, Austria\",\n  \"Liesingtal, Austria\",\n  \"Liezen, Austria\",\n  \"Ligist, Austria\",\n  \"Lödersdorf, Austria\",\n  \"Loipersdorf bei Fürstenfeld, Austria\",\n  \"Maierdorf, Austria\",\n  \"Maria Lankowitz, Austria\",\n  \"Mariahof, Austria\",\n  \"Mariatrost, Austria\",\n  \"Mariazell, Austria\",\n  \"Mautern in Steiermark, Austria\",\n  \"Mellach, Austria\",\n  \"Merkendorf, Austria\",\n  \"Mettersdorf am Saßbach, Austria\",\n  \"Michaelerberg, Austria\",\n  \"Mitterdorf an der Raab, Austria\",\n  \"Mitterdorf im Mürztal, Austria\",\n  \"Mitterlabill, Austria\",\n  \"Mitterndorf im Steirischen Salzkammergut, Austria\",\n  \"Modriach, Austria\",\n  \"Mönichwald, Austria\",\n  \"Mooskirchen, Austria\",\n  \"Mortantsch, Austria\",\n  \"Mühldorf bei Feldbach, Austria\",\n  \"Mühlen, Austria\",\n  \"Murau, Austria\",\n  \"Mureck, Austria\",\n  \"Mürzhofen, Austria\",\n  \"Mürzsteg, Austria\",\n  \"Mürzzuschlag, Austria\",\n  \"Naas, Austria\",\n  \"Nestelbach bei Graz, Austria\",\n  \"Nestelbach im Ilztal, Austria\",\n  \"Neuberg an der Mürz, Austria\",\n  \"Neudau, Austria\",\n  \"Neumarkt in Steiermark, Austria\",\n  \"Neutillmitsch, Austria\",\n  \"Niederöblarn, Austria\",\n  \"Niederschöckl, Austria\",\n  \"Niederwölz, Austria\",\n  \"Niklasdorf, Austria\",\n  \"Nitscha, Austria\",\n  \"Obdach, Austria\",\n  \"Oberaich, Austria\",\n  \"Oberdorf am Hochegg, Austria\",\n  \"Oberhaag, Austria\",\n  \"Oberkurzheim, Austria\",\n  \"Oberpremstätten, Austria\",\n  \"Oberrettenbach, Austria\",\n  \"Oberstorcha, Austria\",\n  \"Obervogau, Austria\",\n  \"Oberweg, Austria\",\n  \"Oberwölz Stadt, Austria\",\n  \"Oberzeiring, Austria\",\n  \"Öblarn, Austria\",\n  \"Oppenberg, Austria\",\n  \"Ortgraben, Austria\",\n  \"Osterwitz, Austria\",\n  \"Pack, Austria\",\n  \"Paldau, Austria\",\n  \"Palfau, Austria\",\n  \"Parschlug, Austria\",\n  \"Passail, Austria\",\n  \"Peggau, Austria\",\n  \"Perchau am Sattel, Austria\",\n  \"Perlsdorf, Austria\",\n  \"Pernegg an der Mur, Austria\",\n  \"Pertlstein, Austria\",\n  \"Piberegg, Austria\",\n  \"Pichling bei Köflach, Austria\",\n  \"Pinggau, Austria\",\n  \"Pirching am Traubenberg, Austria\",\n  \"Pirka, Austria\",\n  \"Pischelsdorf in der Steiermark, Austria\",\n  \"Pistorf, Austria\",\n  \"Pitschgau, Austria\",\n  \"Politischer Bezirk Bruck-Mürzzuschlag, Austria\",\n  \"Politischer Bezirk Deutschlandsberg, Austria\",\n  \"Politischer Bezirk Graz-Umgebung, Austria\",\n  \"Politischer Bezirk Hartberg-Fürstenfeld, Austria\",\n  \"Politischer Bezirk Leibnitz, Austria\",\n  \"Politischer Bezirk Leoben, Austria\",\n  \"Politischer Bezirk Liezen, Austria\",\n  \"Politischer Bezirk Murau, Austria\",\n  \"Politischer Bezirk Murtal, Austria\",\n  \"Politischer Bezirk Südoststeiermark, Austria\",\n  \"Politischer Bezirk Voitsberg, Austria\",\n  \"Politischer Bezirk Weiz, Austria\",\n  \"Pöllau, Austria\",\n  \"Pöllauberg, Austria\",\n  \"Pöls, Austria\",\n  \"Poppendorf, Austria\",\n  \"Preding, Austria\",\n  \"Proleb, Austria\",\n  \"Pruggern, Austria\",\n  \"Puch bei Weiz, Austria\",\n  \"Puntigam, Austria\",\n  \"Pusterwald, Austria\",\n  \"Raaba, Austria\",\n  \"Raabau, Austria\",\n  \"Rabenwald, Austria\",\n  \"Rachau, Austria\",\n  \"Ragnitz, Austria\",\n  \"Ramsau am Dachstein, Austria\",\n  \"Raning, Austria\",\n  \"Ranten, Austria\",\n  \"Rassach, Austria\",\n  \"Ratsch an der Weinstraße, Austria\",\n  \"Ratschendorf, Austria\",\n  \"Ratten, Austria\",\n  \"Reichendorf, Austria\",\n  \"Reifling, Austria\",\n  \"Rettenegg, Austria\",\n  \"Retznei, Austria\",\n  \"Riegersburg, Austria\",\n  \"Ries, Austria\",\n  \"Rohrbach an der Lafnitz, Austria\",\n  \"Rosental an der Kainach, Austria\",\n  \"Röthelstein, Austria\",\n  \"Rottenmann, Austria\",\n  \"Salla, Austria\",\n  \"Sankt Anna am Aigen, Austria\",\n  \"Sankt Bartholomä, Austria\",\n  \"Sankt Blasen, Austria\",\n  \"Sankt Gallen, Austria\",\n  \"Sankt Georgen an der Stiefing, Austria\",\n  \"Sankt Georgen ob Judenburg, Austria\",\n  \"Sankt Georgen ob Murau, Austria\",\n  \"Sankt Ilgen, Austria\",\n  \"Sankt Jakob im Walde, Austria\",\n  \"Sankt Jakob-Breitenau, Austria\",\n  \"Sankt Johann am Tauern, Austria\",\n  \"Sankt Johann bei Herberstein, Austria\",\n  \"Sankt Johann im Saggautal, Austria\",\n  \"Sankt Johann in der Haide, Austria\",\n  \"Sankt Josef (Weststeiermark), Austria\",\n  \"Sankt Katharein an der Laming, Austria\",\n  \"Sankt Kathrein am Hauenstein, Austria\",\n  \"Sankt Kathrein am Offenegg, Austria\",\n  \"Sankt Lambrecht, Austria\",\n  \"Sankt Leonhard, Austria\",\n  \"Sankt Lorenzen am Wechsel, Austria\",\n  \"Sankt Lorenzen bei Knittelfeld, Austria\",\n  \"Sankt Lorenzen bei Scheifling, Austria\",\n  \"Sankt Lorenzen im Mürztal, Austria\",\n  \"Sankt Marein bei Graz, Austria\",\n  \"Sankt Marein bei Knittelfeld, Austria\",\n  \"Sankt Marein bei Neumarkt, Austria\",\n  \"Sankt Marein im Mürztal, Austria\",\n  \"Sankt Margarethen an der Raab, Austria\",\n  \"Sankt Margarethen bei Knittelfeld, Austria\",\n  \"Sankt Martin, Austria\",\n  \"Sankt Martin am Grimming, Austria\",\n  \"Sankt Martin im Sulmtal, Austria\",\n  \"Sankt Michael in Obersteiermark, Austria\",\n  \"Sankt Nikolai im Sausal, Austria\",\n  \"Sankt Nikolai im Sölktal, Austria\",\n  \"Sankt Nikolai ob Draßling, Austria\",\n  \"Sankt Oswald bei Plankenwarth, Austria\",\n  \"Sankt Oswald ob Eibiswald, Austria\",\n  \"Sankt Peter, Austria\",\n  \"Sankt Peter am Kammersberg, Austria\",\n  \"Sankt Peter am Ottersbach, Austria\",\n  \"Sankt Peter im Sulmtal, Austria\",\n  \"Sankt Peter ob Judenburg, Austria\",\n  \"Sankt Peter-Freienstein, Austria\",\n  \"Sankt Radegund bei Graz, Austria\",\n  \"Sankt Ruprecht an der Raab, Austria\",\n  \"Sankt Stefan im Rosental, Austria\",\n  \"Sankt Stefan ob Leoben, Austria\",\n  \"Sankt Stefan ob Stainz, Austria\",\n  \"Sankt Ulrich am Waasen, Austria\",\n  \"Sankt Veit am Vogau, Austria\",\n  \"Schachen bei Vorau, Austria\",\n  \"Schäffern, Austria\",\n  \"Scheifling, Austria\",\n  \"Schladming, Austria\",\n  \"Schöder, Austria\",\n  \"Schrems bei Frohnleiten, Austria\",\n  \"Schwanberg, Austria\",\n  \"Schwarzau im Schwarzautal, Austria\",\n  \"Sebersdorf, Austria\",\n  \"Seckau, Austria\",\n  \"Seggauberg, Austria\",\n  \"Seiersberg, Austria\",\n  \"Selzthal, Austria\",\n  \"Semriach, Austria\",\n  \"Siegersdorf bei Herberstein, Austria\",\n  \"Sinabelkirchen, Austria\",\n  \"Soboth, Austria\",\n  \"Söchau, Austria\",\n  \"Södingberg, Austria\",\n  \"Spatenhof, Austria\",\n  \"Spielberg bei Knittelfeld, Austria\",\n  \"Spielfeld, Austria\",\n  \"Spital am Semmering, Austria\",\n  \"Stadl an der Mur, Austria\",\n  \"Stainach, Austria\",\n  \"Stainz, Austria\",\n  \"Stainz bei Straden, Austria\",\n  \"Stallhof, Austria\",\n  \"Stallhofen, Austria\",\n  \"Stambach, Austria\",\n  \"Stattegg, Austria\",\n  \"Stein, Austria\",\n  \"Stenzengreith, Austria\",\n  \"Stiwoll, Austria\",\n  \"Straden, Austria\",\n  \"Strallegg, Austria\",\n  \"Straß in Steiermark, Austria\",\n  \"Strassengel, Austria\",\n  \"Straßgang, Austria\",\n  \"Stubenberg, Austria\",\n  \"Studenzen, Austria\",\n  \"Sulztal an der Weinstraße, Austria\",\n  \"Tauplitz, Austria\",\n  \"Teufenbach, Austria\",\n  \"Thal, Austria\",\n  \"Thörl, Austria\",\n  \"Tieschen, Austria\",\n  \"Tillmitsch, Austria\",\n  \"Tillmitsch Links der Laßnitz, Austria\",\n  \"Traboch, Austria\",\n  \"Trahütten, Austria\",\n  \"Trautmannsdorf in Oststeiermark, Austria\",\n  \"Treglwang, Austria\",\n  \"Trieben, Austria\",\n  \"Triebendorf, Austria\",\n  \"Trofaiach, Austria\",\n  \"Trössing, Austria\",\n  \"Turnau, Austria\",\n  \"Übelbach, Austria\",\n  \"Übersbach, Austria\",\n  \"Ungerdorf, Austria\",\n  \"Unterauersbach, Austria\",\n  \"Unterbergla, Austria\",\n  \"Unterfladnitz, Austria\",\n  \"Unterlamm, Austria\",\n  \"Unterpremstätten, Austria\",\n  \"Utschtal, Austria\",\n  \"Vasoldsberg, Austria\",\n  \"Veitsch, Austria\",\n  \"Vogau, Austria\",\n  \"Voitsberg, Austria\",\n  \"Vorau, Austria\",\n  \"Vordernberg, Austria\",\n  \"Wagna, Austria\",\n  \"Wagnitz, Austria\",\n  \"Wald am Schoberpaß, Austria\",\n  \"Waltendorf, Austria\",\n  \"Wartberg, Austria\",\n  \"Weinburg am Saßbach, Austria\",\n  \"Weißenbach bei Liezen, Austria\",\n  \"Weißkirchen in Steiermark, Austria\",\n  \"Weiz, Austria\",\n  \"Werndorf, Austria\",\n  \"Wernersdorf, Austria\",\n  \"Wettmannstätten, Austria\",\n  \"Wetzelsdorf, Austria\",\n  \"Wies, Austria\",\n  \"Wildalpen, Austria\",\n  \"Wildon, Austria\",\n  \"Winklern bei Oberwölz, Austria\",\n  \"Wolfsberg im Schwarzautal, Austria\",\n  \"Wörschach, Austria\",\n  \"Wörth an der Lafnitz, Austria\",\n  \"Wundschuh, Austria\",\n  \"Zeltweg, Austria\",\n  \"Zerlach, Austria\",\n  \"Zettling, Austria\",\n  \"Zeutschach, Austria\",\n  \"Abfaltersbach, Austria\",\n  \"Absam, Austria\",\n  \"Achenkirch, Austria\",\n  \"Ainet, Austria\",\n  \"Aldrans, Austria\",\n  \"Alpbach, Austria\",\n  \"Amlach, Austria\",\n  \"Ampass, Austria\",\n  \"Amras, Austria\",\n  \"Angath, Austria\",\n  \"Angerberg, Austria\",\n  \"Anras, Austria\",\n  \"Arzl, Austria\",\n  \"Arzl im Pitztal, Austria\",\n  \"Aschau, Austria\",\n  \"Aschau im Zillertal, Austria\",\n  \"Aurach, Austria\",\n  \"Außervillgraten, Austria\",\n  \"Axams, Austria\",\n  \"Bad Häring, Austria\",\n  \"Barwies, Austria\",\n  \"Baumkirchen, Austria\",\n  \"Berwang, Austria\",\n  \"Biberwier, Austria\",\n  \"Bichlbach, Austria\",\n  \"Birgitz, Austria\",\n  \"Brandenberg, Austria\",\n  \"Breitenbach am Inn, Austria\",\n  \"Breitenwang, Austria\",\n  \"Brixen im Thale, Austria\",\n  \"Brixlegg, Austria\",\n  \"Bruck am Ziller, Austria\",\n  \"Buch in Tirol, Austria\",\n  \"Debant, Austria\",\n  \"Dölsach, Austria\",\n  \"Ebbs, Austria\",\n  \"Eben am Achensee, Austria\",\n  \"Ehenbichl, Austria\",\n  \"Ehrwald, Austria\",\n  \"Elbigenalp, Austria\",\n  \"Ellbögen, Austria\",\n  \"Ellmau, Austria\",\n  \"Elmen, Austria\",\n  \"Endach, Austria\",\n  \"Erl, Austria\",\n  \"Erpfendorf, Austria\",\n  \"Fendels, Austria\",\n  \"Fieberbrunn, Austria\",\n  \"Fiecht, Austria\",\n  \"Finkenberg, Austria\",\n  \"Fiss, Austria\",\n  \"Flaurling, Austria\",\n  \"Fliess, Austria\",\n  \"Flirsch, Austria\",\n  \"Forchach, Austria\",\n  \"Fritzens, Austria\",\n  \"Fügen, Austria\",\n  \"Fügenberg, Austria\",\n  \"Fulpmes, Austria\",\n  \"Gallzein, Austria\",\n  \"Galtür, Austria\",\n  \"Gerlos, Austria\",\n  \"Gerlosberg, Austria\",\n  \"Gnadenwald, Austria\",\n  \"Going, Austria\",\n  \"Götzens, Austria\",\n  \"Gramais, Austria\",\n  \"Grän, Austria\",\n  \"Gries am Brenner, Austria\",\n  \"Gries im Sellrain, Austria\",\n  \"Grins, Austria\",\n  \"Grinzens, Austria\",\n  \"Gschnitz, Austria\",\n  \"Haiming, Austria\",\n  \"Hainzenberg, Austria\",\n  \"Hall in Tirol, Austria\",\n  \"Hart im Zillertal, Austria\",\n  \"Häselgehr, Austria\",\n  \"Hatting, Austria\",\n  \"Heinfels, Austria\",\n  \"Heiterwang, Austria\",\n  \"Hippach, Austria\",\n  \"Hochfilzen, Austria\",\n  \"Höfen, Austria\",\n  \"Holzgau, Austria\",\n  \"Hopfgarten im Brixental, Austria\",\n  \"Hopfgarten in Defereggen, Austria\",\n  \"Hötting, Austria\",\n  \"Igls, Austria\",\n  \"Imst, Austria\",\n  \"Imsterberg, Austria\",\n  \"Innervillgraten, Austria\",\n  \"Innsbruck, Austria\",\n  \"Innsbruck Stadt, Austria\",\n  \"Inzing, Austria\",\n  \"Ischgl, Austria\",\n  \"Itter, Austria\",\n  \"Jenbach, Austria\",\n  \"Jerzens, Austria\",\n  \"Jochberg, Austria\",\n  \"Jungholz, Austria\",\n  \"Kaltenbach, Austria\",\n  \"Kapfing, Austria\",\n  \"Kappl, Austria\",\n  \"Karres, Austria\",\n  \"Karrösten, Austria\",\n  \"Kartitsch, Austria\",\n  \"Kauns, Austria\",\n  \"Kematen in Tirol, Austria\",\n  \"Kirchberg in Tirol, Austria\",\n  \"Kirchbichl, Austria\",\n  \"Kirchdorf in Tirol, Austria\",\n  \"Kitzbühel, Austria\",\n  \"Kolsass, Austria\",\n  \"Kolsassberg, Austria\",\n  \"Kössen, Austria\",\n  \"Kramsach, Austria\",\n  \"Kufstein, Austria\",\n  \"Kundl, Austria\",\n  \"Ladis, Austria\",\n  \"Landeck, Austria\",\n  \"Längenfeld, Austria\",\n  \"Lans, Austria\",\n  \"Lavant, Austria\",\n  \"Lechaschau, Austria\",\n  \"Leisach, Austria\",\n  \"Lermoos, Austria\",\n  \"Leutasch, Austria\",\n  \"Lienz, Austria\",\n  \"Mariastein, Austria\",\n  \"Mariatal, Austria\",\n  \"Matrei am Brenner, Austria\",\n  \"Matrei in Osttirol, Austria\",\n  \"Maurach, Austria\",\n  \"Mayrhofen, Austria\",\n  \"Medraz, Austria\",\n  \"Mieders, Austria\",\n  \"Mieming, Austria\",\n  \"Mils bei Imst, Austria\",\n  \"Mils bei Solbad Hall, Austria\",\n  \"Mitterndorf, Austria\",\n  \"Mötz, Austria\",\n  \"Mühlau, Austria\",\n  \"Mühlbachl, Austria\",\n  \"Münster, Austria\",\n  \"Musau, Austria\",\n  \"Mutters, Austria\",\n  \"Namlos, Austria\",\n  \"Nassereith, Austria\",\n  \"Natters, Austria\",\n  \"Nauders, Austria\",\n  \"Nesselwängle, Austria\",\n  \"Neustift im Stubaital, Austria\",\n  \"Niederau, Austria\",\n  \"Niederbreitenbach, Austria\",\n  \"Niederndorf, Austria\",\n  \"Nikolsdorf, Austria\",\n  \"Oberau, Austria\",\n  \"Oberhofen im Inntal, Austria\",\n  \"Oberlienz, Austria\",\n  \"Obermieming, Austria\",\n  \"Obernberg am Brenner, Austria\",\n  \"Oberndorf in Tirol, Austria\",\n  \"Oberperfuss, Austria\",\n  \"Obertilliach, Austria\",\n  \"Obsteig, Austria\",\n  \"Oetz, Austria\",\n  \"Ötztal-Bahnhof, Austria\",\n  \"Patsch, Austria\",\n  \"Pettnau, Austria\",\n  \"Pettneu, Austria\",\n  \"Pfaffenhofen, Austria\",\n  \"Pflach, Austria\",\n  \"Pfons, Austria\",\n  \"Pfunds, Austria\",\n  \"Pians, Austria\",\n  \"Pill, Austria\",\n  \"Politischer Bezirk Imst, Austria\",\n  \"Politischer Bezirk Innsbruck Land, Austria\",\n  \"Politischer Bezirk Kitzbühel, Austria\",\n  \"Politischer Bezirk Kufstein, Austria\",\n  \"Politischer Bezirk Landeck, Austria\",\n  \"Politischer Bezirk Lienz, Austria\",\n  \"Politischer Bezirk Reutte, Austria\",\n  \"Politischer Bezirk Schwaz, Austria\",\n  \"Polling in Tirol, Austria\",\n  \"Pradl, Austria\",\n  \"Prutz, Austria\",\n  \"Radfeld, Austria\",\n  \"Ramsau im Zillertal, Austria\",\n  \"Ranggen, Austria\",\n  \"Rattenberg, Austria\",\n  \"Reith bei Kitzbühel, Austria\",\n  \"Reith bei Seefeld, Austria\",\n  \"Reith im Alpbachtal, Austria\",\n  \"Rettenschöss, Austria\",\n  \"Reutte, Austria\",\n  \"Ried im Oberinntal, Austria\",\n  \"Ried im Zillertal, Austria\",\n  \"Rietz, Austria\",\n  \"Rinn, Austria\",\n  \"Rohrberg, Austria\",\n  \"Roppen, Austria\",\n  \"Rum, Austria\",\n  \"Sankt Johann in Tirol, Austria\",\n  \"Sankt Ulrich am Pillersee, Austria\",\n  \"Sankt Veit in Defereggen, Austria\",\n  \"Sautens, Austria\",\n  \"Scharnitz, Austria\",\n  \"Schattwald, Austria\",\n  \"Scheffau am Wilden Kaiser, Austria\",\n  \"Schlaiten, Austria\",\n  \"Schlitters, Austria\",\n  \"Schönberg im Stubaital, Austria\",\n  \"Schönwies, Austria\",\n  \"Schwaz, Austria\",\n  \"Schwendau, Austria\",\n  \"Schwendt, Austria\",\n  \"Schwoich, Austria\",\n  \"See, Austria\",\n  \"Seefeld in Tirol, Austria\",\n  \"Sellrain, Austria\",\n  \"Serfaus, Austria\",\n  \"Sillian, Austria\",\n  \"Silz, Austria\",\n  \"Sistrans, Austria\",\n  \"Sölden, Austria\",\n  \"Söll, Austria\",\n  \"St Anton am Arlberg, Austria\",\n  \"Stams, Austria\",\n  \"Stans, Austria\",\n  \"Stanz bei Landeck, Austria\",\n  \"Stanzach, Austria\",\n  \"Steeg, Austria\",\n  \"Steinach am Brenner, Austria\",\n  \"Strass im Zillertal, Austria\",\n  \"Strassen, Austria\",\n  \"Strengen, Austria\",\n  \"Stumm, Austria\",\n  \"Stummerberg, Austria\",\n  \"Tannheim, Austria\",\n  \"Tarrenz, Austria\",\n  \"Telfes im Stubai, Austria\",\n  \"Telfs, Austria\",\n  \"Terfens, Austria\",\n  \"Thaur, Austria\",\n  \"Thurn, Austria\",\n  \"Tobadill, Austria\",\n  \"Trins, Austria\",\n  \"Tristach, Austria\",\n  \"Tulfes, Austria\",\n  \"Tux, Austria\",\n  \"Uderns, Austria\",\n  \"Umhausen, Austria\",\n  \"Unterlangkampfen, Austria\",\n  \"Unterperfuss, Austria\",\n  \"Untertilliach, Austria\",\n  \"Vals, Austria\",\n  \"Vils, Austria\",\n  \"Virgen, Austria\",\n  \"Volders, Austria\",\n  \"Voldöpp, Austria\",\n  \"Völs, Austria\",\n  \"Vomp, Austria\",\n  \"Vorderhornbach, Austria\",\n  \"Vorderthiersee, Austria\",\n  \"Waidring, Austria\",\n  \"Walchsee, Austria\",\n  \"Wängle, Austria\",\n  \"Wattenberg, Austria\",\n  \"Wattens, Austria\",\n  \"Weer, Austria\",\n  \"Weerberg, Austria\",\n  \"Weissach, Austria\",\n  \"Weissenbach am Lech, Austria\",\n  \"Wenns, Austria\",\n  \"Westendorf, Austria\",\n  \"Wiesing, Austria\",\n  \"Wildermieming, Austria\",\n  \"Wildschönau, Austria\",\n  \"Wilten, Austria\",\n  \"Wörgl, Austria\",\n  \"Zams, Austria\",\n  \"Zell, Austria\",\n  \"Zell am Ziller, Austria\",\n  \"Zellberg, Austria\",\n  \"Zirl, Austria\",\n  \"Zöblen, Austria\",\n  \"Abwinden, Austria\",\n  \"Adlwang, Austria\",\n  \"Afiesl, Austria\",\n  \"Ahorn, Austria\",\n  \"Aichkirchen, Austria\",\n  \"Aigen im Mühlkreis, Austria\",\n  \"Aistersheim, Austria\",\n  \"Alberndorf in der Riedmark, Austria\",\n  \"Alkoven, Austria\",\n  \"Allerheiligen im Mühlkreis, Austria\",\n  \"Allhaming, Austria\",\n  \"Altenberg bei Linz, Austria\",\n  \"Altenfelden, Austria\",\n  \"Altheim, Austria\",\n  \"Altlichtenberg, Austria\",\n  \"Altmünster, Austria\",\n  \"Ampflwang, Austria\",\n  \"Andorf, Austria\",\n  \"Ansfelden, Austria\",\n  \"Arnreit, Austria\",\n  \"Aschach an der Donau, Austria\",\n  \"Aschach an der Steyr, Austria\",\n  \"Asten, Austria\",\n  \"Attersee, Austria\",\n  \"Attnang, Austria\",\n  \"Attnang-Puchheim, Austria\",\n  \"Atzbach, Austria\",\n  \"Atzesberg, Austria\",\n  \"Au an der Traun, Austria\",\n  \"Audorf, Austria\",\n  \"Aurach am Hongar, Austria\",\n  \"Aurolzmünster, Austria\",\n  \"Bachmanning, Austria\",\n  \"Bad Goisern, Austria\",\n  \"Bad Hall, Austria\",\n  \"Bad Ischl, Austria\",\n  \"Bad Kreuzen, Austria\",\n  \"Bad Leonfelden, Austria\",\n  \"Bad Schallerbach, Austria\",\n  \"Bad Zell, Austria\",\n  \"Berg, Austria\",\n  \"Bergern, Austria\",\n  \"Bergham, Austria\",\n  \"Bernardin, Austria\",\n  \"Brandln, Austria\",\n  \"Braunau am Inn, Austria\",\n  \"Braunau Neustadt, Austria\",\n  \"Buchkirchen, Austria\",\n  \"Burgfried, Austria\",\n  \"Desselbrunn, Austria\",\n  \"Dickerldorf, Austria\",\n  \"Diesseits, Austria\",\n  \"Dietach, Austria\",\n  \"Dietachdorf, Austria\",\n  \"Doppl, Austria\",\n  \"Dörfl, Austria\",\n  \"Dürnau, Austria\",\n  \"Ebensee, Austria\",\n  \"Eberschwang, Austria\",\n  \"Eberstalzell, Austria\",\n  \"Edt bei Lambach, Austria\",\n  \"Eferding, Austria\",\n  \"Eidenberg, Austria\",\n  \"Engerwitzdorf, Austria\",\n  \"Enns, Austria\",\n  \"Feldkirchen an der Donau, Austria\",\n  \"Fisching, Austria\",\n  \"Fornach, Austria\",\n  \"Frankenburg, Austria\",\n  \"Frankenmarkt, Austria\",\n  \"Freindorf, Austria\",\n  \"Freistadt, Austria\",\n  \"Gaflenz, Austria\",\n  \"Gallneukirchen, Austria\",\n  \"Gallspach, Austria\",\n  \"Gampern, Austria\",\n  \"Garsten, Austria\",\n  \"Gaspoltshofen, Austria\",\n  \"Gaumberg, Austria\",\n  \"Geboltskirchen, Austria\",\n  \"Gmunden, Austria\",\n  \"Goldwörth, Austria\",\n  \"Gosau, Austria\",\n  \"Gramastetten, Austria\",\n  \"Grein, Austria\",\n  \"Grieskirchen, Austria\",\n  \"Grossraming, Austria\",\n  \"Grünau im Almtal, Austria\",\n  \"Grünburg, Austria\",\n  \"Gschwandt, Austria\",\n  \"Gunskirchen, Austria\",\n  \"Gutau, Austria\",\n  \"Haag, Austria\",\n  \"Haag am Hausruck, Austria\",\n  \"Hagenberg im Mühlkreis, Austria\",\n  \"Haibach im Mühlkreis, Austria\",\n  \"Haid, Austria\",\n  \"Haiden, Austria\",\n  \"Haidl, Austria\",\n  \"Handenberg, Austria\",\n  \"Hart, Austria\",\n  \"Hartheim, Austria\",\n  \"Hartkirchen, Austria\",\n  \"Haselbach, Austria\",\n  \"Haslach an der Mühl, Austria\",\n  \"Hellmonsödt, Austria\",\n  \"Herzogsdorf, Austria\",\n  \"Hochburg-Ach, Austria\",\n  \"Hochpoint, Austria\",\n  \"Hof, Austria\",\n  \"Hofkirchen im Traunkreis, Austria\",\n  \"Holzhausen, Austria\",\n  \"Hörsching, Austria\",\n  \"Innerschwand, Austria\",\n  \"Inzersdorf im Kremstal, Austria\",\n  \"Kaltenbach, Austria\",\n  \"Katsdorf, Austria\",\n  \"Kematen an der Krems, Austria\",\n  \"Kirchberg ob der Donau, Austria\",\n  \"Kirchdorf an der Krems, Austria\",\n  \"Kirchschlag bei Linz, Austria\",\n  \"Klaffer am Hochficht, Austria\",\n  \"Königswiesen, Austria\",\n  \"Kopfing im Innkreis, Austria\",\n  \"Kremsdorf, Austria\",\n  \"Kremsmünster, Austria\",\n  \"Kronstorf, Austria\",\n  \"Laab, Austria\",\n  \"Laahen, Austria\",\n  \"Laakirchen, Austria\",\n  \"Lambach, Austria\",\n  \"Langenstein, Austria\",\n  \"Langholzfeld, Austria\",\n  \"Laussa, Austria\",\n  \"Lembach im Mühlkreis, Austria\",\n  \"Lenzing, Austria\",\n  \"Leonding, Austria\",\n  \"Leonstein, Austria\",\n  \"Lichtenegg, Austria\",\n  \"Linz, Austria\",\n  \"Linz Stadt, Austria\",\n  \"Losenstein, Austria\",\n  \"Luftenberg an der Donau, Austria\",\n  \"Manning, Austria\",\n  \"Marchtrenk, Austria\",\n  \"Maria Neustift, Austria\",\n  \"Maria Schmolln, Austria\",\n  \"Mattighofen, Austria\",\n  \"Mauerkirchen, Austria\",\n  \"Meggenhofen, Austria\",\n  \"Mehrnbach, Austria\",\n  \"Michaelnbach, Austria\",\n  \"Micheldorf in Oberösterreich, Austria\",\n  \"Mitterkirchen im Machland, Austria\",\n  \"Mittertreffling, Austria\",\n  \"Molln, Austria\",\n  \"Mondsee, Austria\",\n  \"Moosdorf, Austria\",\n  \"Mühldorf, Austria\",\n  \"Munderfing, Austria\",\n  \"Münzbach, Austria\",\n  \"Münzkirchen, Austria\",\n  \"Naarn im Machlande, Austria\",\n  \"Natternbach, Austria\",\n  \"Nebelberg, Austria\",\n  \"Neubau, Austria\",\n  \"Neue Heimat, Austria\",\n  \"Neuhofen an der Krems, Austria\",\n  \"Neukirchen, Austria\",\n  \"Neukirchen am Walde, Austria\",\n  \"Neukirchen an der Vöckla, Austria\",\n  \"Neukirchen bei Lambach, Austria\",\n  \"Neumarkt im Hausruckkreis, Austria\",\n  \"Neumarkt im Mühlkreis, Austria\",\n  \"Neuzeug, Austria\",\n  \"Niederneukirchen, Austria\",\n  \"Niederstraß, Austria\",\n  \"Niederthalheim, Austria\",\n  \"Nöstlbach, Austria\",\n  \"Oberhaid, Austria\",\n  \"Oberhart, Austria\",\n  \"Oberhofen am Irrsee, Austria\",\n  \"Obernberg am Inn, Austria\",\n  \"Oberndorf bei Schwanenstadt, Austria\",\n  \"Oberneukirchen, Austria\",\n  \"Oberwang, Austria\",\n  \"Oedt, Austria\",\n  \"Oepping, Austria\",\n  \"Offenhausen, Austria\",\n  \"Ohlsdorf, Austria\",\n  \"Ort im Innkreis, Austria\",\n  \"Ostermiething, Austria\",\n  \"Ottenschlag im Mühlkreis, Austria\",\n  \"Ottensheim, Austria\",\n  \"Ottnang am Hausruck, Austria\",\n  \"Pabneukirchen, Austria\",\n  \"Palting, Austria\",\n  \"Pasching, Austria\",\n  \"Pattigham, Austria\",\n  \"Pennewang, Austria\",\n  \"Perg, Austria\",\n  \"Perwang am Grabensee, Austria\",\n  \"Pettenbach, Austria\",\n  \"Peuerbach, Austria\",\n  \"Pfaffing, Austria\",\n  \"Pfarrkirchen bei Bad Hall, Austria\",\n  \"Pichl bei Wels, Austria\",\n  \"Pierbach, Austria\",\n  \"Pinsdorf, Austria\",\n  \"Pitzenberg, Austria\",\n  \"Plesching, Austria\",\n  \"Politischer Bezirk Braunau am Inn, Austria\",\n  \"Politischer Bezirk Eferding, Austria\",\n  \"Politischer Bezirk Freistadt, Austria\",\n  \"Politischer Bezirk Gmunden, Austria\",\n  \"Politischer Bezirk Grieskirchen, Austria\",\n  \"Politischer Bezirk Kirchdorf an der Krems, Austria\",\n  \"Politischer Bezirk Linz-Land, Austria\",\n  \"Politischer Bezirk Perg, Austria\",\n  \"Politischer Bezirk Ried im Innkreis, Austria\",\n  \"Politischer Bezirk Rohrbach, Austria\",\n  \"Politischer Bezirk Schärding, Austria\",\n  \"Politischer Bezirk Steyr-Land, Austria\",\n  \"Politischer Bezirk Urfahr-Umgebung, Austria\",\n  \"Politischer Bezirk Vöcklabruck, Austria\",\n  \"Pötting, Austria\",\n  \"Pram, Austria\",\n  \"Prambachkirchen, Austria\",\n  \"Pramet, Austria\",\n  \"Pregarten, Austria\",\n  \"Puchenau, Austria\",\n  \"Puchheim, Austria\",\n  \"Puchlkirchen am Trattberg, Austria\",\n  \"Pucking, Austria\",\n  \"Pühret, Austria\",\n  \"Raab, Austria\",\n  \"Raffelstetten, Austria\",\n  \"Rainbach im Mühlkreis, Austria\",\n  \"Ranshofen, Austria\",\n  \"Redleiten, Austria\",\n  \"Redlham, Austria\",\n  \"Regau, Austria\",\n  \"Reichenau im Mühlkreis, Austria\",\n  \"Reichenthal, Austria\",\n  \"Reichraming, Austria\",\n  \"Reiterndorf, Austria\",\n  \"Ried im Innkreis, Austria\",\n  \"Ried im Traunkreis, Austria\",\n  \"Ried in der Riedmark, Austria\",\n  \"Rohr im Kremstal, Austria\",\n  \"Rohrbach-Berg, Austria\",\n  \"Roitham, Austria\",\n  \"Rufling, Austria\",\n  \"Rüstorf, Austria\",\n  \"Rutzenham, Austria\",\n  \"Sammersdorf, Austria\",\n  \"Sankt Aegidi, Austria\",\n  \"Sankt Dionysen, Austria\",\n  \"Sankt Florian, Austria\",\n  \"Sankt Georgen am Fillmannsbach, Austria\",\n  \"Sankt Georgen an der Gusen, Austria\",\n  \"Sankt Georgen bei Obernberg am Inn, Austria\",\n  \"Sankt Georgen im Attergau, Austria\",\n  \"Sankt Gotthard im Mühlkreis, Austria\",\n  \"Sankt Lorenz, Austria\",\n  \"Sankt Marien, Austria\",\n  \"Sankt Martin, Austria\",\n  \"Sankt Martin im Mühlkreis, Austria\",\n  \"Sankt Oswald bei Freistadt, Austria\",\n  \"Sankt Peter am Hart, Austria\",\n  \"Sankt Ulrich bei Steyr, Austria\",\n  \"Sankt Wolfgang im Salzkammergut, Austria\",\n  \"Sarleinsbach, Austria\",\n  \"Sattledt, Austria\",\n  \"Schafwiesen, Austria\",\n  \"Schalchen, Austria\",\n  \"Schalchham, Austria\",\n  \"Schardenberg, Austria\",\n  \"Schärding, Austria\",\n  \"Schärding Vorstadt, Austria\",\n  \"Scharnstein, Austria\",\n  \"Schenkenfelden, Austria\",\n  \"Schildorn, Austria\",\n  \"Schlatt, Austria\",\n  \"Schlierbach, Austria\",\n  \"Schlüsslberg, Austria\",\n  \"Schöndorf, Austria\",\n  \"Schönering, Austria\",\n  \"Schörfling, Austria\",\n  \"Schwanenstadt, Austria\",\n  \"Schweinbach, Austria\",\n  \"Schwertberg, Austria\",\n  \"Seewalchen, Austria\",\n  \"Sierning, Austria\",\n  \"Sonnberg im Mühlkreis, Austria\",\n  \"Spital am Pyhrn, Austria\",\n  \"Stadl-Hausruck, Austria\",\n  \"Stadl-Paura, Austria\",\n  \"Stadl-Traun, Austria\",\n  \"Steinbach am Attersee, Austria\",\n  \"Steinerkirchen an der Traun, Austria\",\n  \"Steinfeld, Austria\",\n  \"Steinhaus, Austria\",\n  \"Steyr, Austria\",\n  \"Steyr Stadt, Austria\",\n  \"Steyregg, Austria\",\n  \"Strassham, Austria\",\n  \"Taiskirchen im Innkreis, Austria\",\n  \"Taufkirchen an der Trattnach, Austria\",\n  \"Ternberg, Austria\",\n  \"Thalheim bei Wels, Austria\",\n  \"Tiefgraben, Austria\",\n  \"Timelkam, Austria\",\n  \"Tragwein, Austria\",\n  \"Traun, Austria\",\n  \"Traunkirchen, Austria\",\n  \"Ufer, Austria\",\n  \"Ulrichsberg, Austria\",\n  \"Ungenach, Austria\",\n  \"Untereisenfeld, Austria\",\n  \"Unterjosefstal, Austria\",\n  \"Uttendorf, Austria\",\n  \"Utzenaich, Austria\",\n  \"Viechtwang, Austria\",\n  \"Vöcklabruck, Austria\",\n  \"Vöcklamarkt, Austria\",\n  \"Vorchdorf, Austria\",\n  \"Wagrain, Austria\",\n  \"Wagram, Austria\",\n  \"Waizenkirchen, Austria\",\n  \"Walding, Austria\",\n  \"Waldkirchen am Wesen, Austria\",\n  \"Waldneukirchen, Austria\",\n  \"Waldzell, Austria\",\n  \"Wallern an der Trattnach, Austria\",\n  \"Wartberg an der Krems, Austria\",\n  \"Wartberg ob der Aist, Austria\",\n  \"Weibern, Austria\",\n  \"Weilbach, Austria\",\n  \"Weißenkirchen im Attergau, Austria\",\n  \"Weisskirchen an der Traun, Austria\",\n  \"Weitersfelden, Austria\",\n  \"Wels, Austria\",\n  \"Wels Stadt, Austria\",\n  \"Wels-Land, Austria\",\n  \"Wendling, Austria\",\n  \"Weng im Innkreis, Austria\",\n  \"Wernstein am Inn, Austria\",\n  \"Weyer, Austria\",\n  \"Weyregg, Austria\",\n  \"Wimpassing, Austria\",\n  \"Wimsbach, Austria\",\n  \"Windhaag bei Freistadt, Austria\",\n  \"Windhaag bei Perg, Austria\",\n  \"Windischgarsten, Austria\",\n  \"Wippenham, Austria\",\n  \"Wispl, Austria\",\n  \"Wolfern, Austria\",\n  \"Wolfsegg am Hausruck, Austria\",\n  \"Zell am Moos, Austria\",\n  \"Zell am Pettenfirst, Austria\",\n  \"Zell an der Pram, Austria\",\n  \"Zwettl an der Rodl, Austria\",\n  \"Donaustadt, Austria\",\n  \"Favoriten, Austria\",\n  \"Floridsdorf, Austria\",\n  \"Hernals, Austria\",\n  \"Hietzing, Austria\",\n  \"Innere Stadt, Austria\",\n  \"Meidling, Austria\",\n  \"Ottakring, Austria\",\n  \"Simmering, Austria\",\n  \"Vienna, Austria\",\n  \"Alberschwende, Austria\",\n  \"Altach, Austria\",\n  \"Andelsbuch, Austria\",\n  \"Au, Austria\",\n  \"Ausserbraz, Austria\",\n  \"Bartholomäberg, Austria\",\n  \"Batschuns, Austria\",\n  \"Bezau, Austria\",\n  \"Bildstein, Austria\",\n  \"Bizau, Austria\",\n  \"Blons, Austria\",\n  \"Bludenz, Austria\",\n  \"Bludesch, Austria\",\n  \"Brand, Austria\",\n  \"Bregenz, Austria\",\n  \"Bürs, Austria\",\n  \"Bürserberg, Austria\",\n  \"Dalaas, Austria\",\n  \"Damüls, Austria\",\n  \"Doren, Austria\",\n  \"Dornbirn, Austria\",\n  \"Düns, Austria\",\n  \"Dünserberg, Austria\",\n  \"Egg, Austria\",\n  \"Eichenberg, Austria\",\n  \"Feldkirch, Austria\",\n  \"Frastanz, Austria\",\n  \"Fraxern, Austria\",\n  \"Fußach, Austria\",\n  \"Gaißau, Austria\",\n  \"Gaschurn, Austria\",\n  \"Göfis, Austria\",\n  \"Götzis, Austria\",\n  \"Großdorf, Austria\",\n  \"Hard, Austria\",\n  \"Hirschegg, Austria\",\n  \"Hittisau, Austria\",\n  \"Höchst, Austria\",\n  \"Hohenems, Austria\",\n  \"Hohenweiler, Austria\",\n  \"Hörbranz, Austria\",\n  \"Innerbraz, Austria\",\n  \"Kennelbach, Austria\",\n  \"Klaus, Austria\",\n  \"Klösterle, Austria\",\n  \"Koblach, Austria\",\n  \"Krumbach, Austria\",\n  \"Langen, Austria\",\n  \"Langenegg, Austria\",\n  \"Lauterach, Austria\",\n  \"Lech, Austria\",\n  \"Lingenau, Austria\",\n  \"Lochau, Austria\",\n  \"Lorüns, Austria\",\n  \"Ludesch, Austria\",\n  \"Lustenau, Austria\",\n  \"Mäder, Austria\",\n  \"Meiningen, Austria\",\n  \"Mellau, Austria\",\n  \"Mittelberg, Austria\",\n  \"Möggers, Austria\",\n  \"Muntlix, Austria\",\n  \"Nenzing, Austria\",\n  \"Nüziders, Austria\",\n  \"Politischer Bezirk Bludenz, Austria\",\n  \"Politischer Bezirk Bregenz, Austria\",\n  \"Politischer Bezirk Dornbirn, Austria\",\n  \"Politischer Bezirk Feldkirch, Austria\",\n  \"Raggal, Austria\",\n  \"Rankweil, Austria\",\n  \"Reuthe, Austria\",\n  \"Riefensberg, Austria\",\n  \"Riezlern, Austria\",\n  \"Röns, Austria\",\n  \"Röthis, Austria\",\n  \"Sankt Anton im Montafon, Austria\",\n  \"Sankt Gallenkirch, Austria\",\n  \"Satteins, Austria\",\n  \"Schlins, Austria\",\n  \"Schnepfau, Austria\",\n  \"Schnifis, Austria\",\n  \"Schoppernau, Austria\",\n  \"Schröcken, Austria\",\n  \"Schruns, Austria\",\n  \"Schwarzach, Austria\",\n  \"Schwarzenberg, Austria\",\n  \"Sibratsgfäll, Austria\",\n  \"Silbertal, Austria\",\n  \"Stallehr, Austria\",\n  \"Sulz, Austria\",\n  \"Sulzberg, Austria\",\n  \"Thüringen, Austria\",\n  \"Tschagguns, Austria\",\n  \"Übersaxen, Austria\",\n  \"Vandans, Austria\",\n  \"Viktorsberg, Austria\",\n  \"Warth, Austria\",\n  \"Weiler, Austria\",\n  \"Wolfurt, Austria\",\n  \"Ceyranbatan, Azerbaijan\",\n  \"Digah, Azerbaijan\",\n  \"Gyuzdek, Azerbaijan\",\n  \"Khirdalan, Azerbaijan\",\n  \"Qobu, Azerbaijan\",\n  \"Saray, Azerbaijan\",\n  \"Ağdam, Azerbaijan\",\n  \"Ağdaş, Azerbaijan\",\n  \"Agdzhabedy, Azerbaijan\",\n  \"Avşar, Azerbaijan\",\n  \"Aghstafa, Azerbaijan\",\n  \"Saloğlu, Azerbaijan\",\n  \"Vurğun, Azerbaijan\",\n  \"Aghsu, Azerbaijan\",\n  \"Astara, Azerbaijan\",\n  \"Kizhaba, Azerbaijan\",\n  \"Amirdzhan, Azerbaijan\",\n  \"Badamdar, Azerbaijan\",\n  \"Bakıxanov, Azerbaijan\",\n  \"Baku, Azerbaijan\",\n  \"Balakhani, Azerbaijan\",\n  \"Bilajari, Azerbaijan\",\n  \"Bilajer, Azerbaijan\",\n  \"Binagadi, Azerbaijan\",\n  \"Biny Selo, Azerbaijan\",\n  \"Buzovna, Azerbaijan\",\n  \"Hövsan, Azerbaijan\",\n  \"Khodzhi-Gasan, Azerbaijan\",\n  \"Korgöz, Azerbaijan\",\n  \"Lökbatan, Azerbaijan\",\n  \"Mardakan, Azerbaijan\",\n  \"Maştağa, Azerbaijan\",\n  \"Nardaran, Azerbaijan\",\n  \"Nizami Rayonu, Azerbaijan\",\n  \"Pirallahı, Azerbaijan\",\n  \"Puta, Azerbaijan\",\n  \"Qala, Azerbaijan\",\n  \"Qaraçuxur, Azerbaijan\",\n  \"Qobustan, Azerbaijan\",\n  \"Ramana, Azerbaijan\",\n  \"Sabunçu, Azerbaijan\",\n  \"Sanqaçal, Azerbaijan\",\n  \"Türkan, Azerbaijan\",\n  \"Yeni Suraxanı, Azerbaijan\",\n  \"Zabrat, Azerbaijan\",\n  \"Zyrya, Azerbaijan\",\n  \"Belokany, Azerbaijan\",\n  \"Qabaqçöl, Azerbaijan\",\n  \"Barda, Azerbaijan\",\n  \"Samuxlu, Azerbaijan\",\n  \"Beylagan, Azerbaijan\",\n  \"Birinci Aşıqlı, Azerbaijan\",\n  \"Dünyamalılar, Azerbaijan\",\n  \"Orjonikidze, Azerbaijan\",\n  \"Yuxarı Aran, Azerbaijan\",\n  \"Pushkino, Azerbaijan\",\n  \"Verkhniy Dashkesan, Azerbaijan\",\n  \"Yukhary-Dashkesan, Azerbaijan\",\n  \"Fizuli, Azerbaijan\",\n  \"Horadiz, Azerbaijan\",\n  \"Ganja, Azerbaijan\",\n  \"Arıqdam, Azerbaijan\",\n  \"Arıqıran, Azerbaijan\",\n  \"Böyük Qaramurad, Azerbaijan\",\n  \"Kyadabek, Azerbaijan\",\n  \"Novosaratovka, Azerbaijan\",\n  \"Qobustan, Azerbaijan\",\n  \"Goranboy, Azerbaijan\",\n  \"Qızılhacılı, Azerbaijan\",\n  \"Geoktschai, Azerbaijan\",\n  \"Yelenendorf, Azerbaijan\",\n  \"Hacıqabul, Azerbaijan\",\n  \"Mughan, Azerbaijan\",\n  \"Imishli, Azerbaijan\",\n  \"Basqal, Azerbaijan\",\n  \"İsmayıllı, Azerbaijan\",\n  \"Jebrail, Azerbaijan\",\n  \"Jalilabad, Azerbaijan\",\n  \"Prishibinskoye, Azerbaijan\",\n  \"Kerbakhiar, Azerbaijan\",\n  \"Vank, Azerbaijan\",\n  \"Xaçmaz, Azerbaijan\",\n  \"Xudat, Azerbaijan\",\n  \"Altıağac, Azerbaijan\",\n  \"Khyzy, Azerbaijan\",\n  \"Kilyazi, Azerbaijan\",\n  \"Şuraabad, Azerbaijan\",\n  \"Askyaran, Azerbaijan\",\n  \"Xocalı, Azerbaijan\",\n  \"Kyurdarmir, Azerbaijan\",\n  \"Laçın, Azerbaijan\",\n  \"Haftoni, Azerbaijan\",\n  \"Lankaran, Azerbaijan\",\n  \"Lerik, Azerbaijan\",\n  \"Hadrut, Azerbaijan\",\n  \"Novyy Karanlug, Azerbaijan\",\n  \"Qırmızı Bazar, Azerbaijan\",\n  \"Boradigah, Azerbaijan\",\n  \"Masally, Azerbaijan\",\n  \"Mingelchaur, Azerbaijan\",\n  \"Cahri, Azerbaijan\",\n  \"Çalxanqala, Azerbaijan\",\n  \"Culfa, Azerbaijan\",\n  \"Deste, Azerbaijan\",\n  \"Heydarabad, Azerbaijan\",\n  \"Julfa Rayon, Azerbaijan\",\n  \"Nakhchivan, Azerbaijan\",\n  \"Oğlanqala, Azerbaijan\",\n  \"Ordubad, Azerbaijan\",\n  \"Ordubad Rayon, Azerbaijan\",\n  \"Qıvraq, Azerbaijan\",\n  \"Şahbuz, Azerbaijan\",\n  \"Sedarak, Azerbaijan\",\n  \"Shahbuz Rayon, Azerbaijan\",\n  \"Sharur City, Azerbaijan\",\n  \"Sumbatan-diza, Azerbaijan\",\n  \"Tazakend, Azerbaijan\",\n  \"Yaycı, Azerbaijan\",\n  \"Neftçala, Azerbaijan\",\n  \"Severo-Vostotchnyi Bank, Azerbaijan\",\n  \"Sovetabad, Azerbaijan\",\n  \"Xıllı, Azerbaijan\",\n  \"Oğuz, Azerbaijan\",\n  \"Qutqashen, Azerbaijan\",\n  \"Çinarlı, Azerbaijan\",\n  \"Qax, Azerbaijan\",\n  \"Qax İngiloy, Azerbaijan\",\n  \"Qaxbaş, Azerbaijan\",\n  \"Qazax, Azerbaijan\",\n  \"Hacıhüseynli, Azerbaijan\",\n  \"Quba, Azerbaijan\",\n  \"Qubadlı, Azerbaijan\",\n  \"Qusar, Azerbaijan\",\n  \"Samur, Azerbaijan\",\n  \"Əhmədbəyli, Azerbaijan\",\n  \"Saatlı, Azerbaijan\",\n  \"Sabirabad, Azerbaijan\",\n  \"Qaraçala, Azerbaijan\",\n  \"Salyan, Azerbaijan\",\n  \"Qarayeri, Azerbaijan\",\n  \"Qırmızı Samux, Azerbaijan\",\n  \"Samux, Azerbaijan\",\n  \"Divichibazar, Azerbaijan\",\n  \"Sheki, Azerbaijan\",\n  \"Baş Göynük, Azerbaijan\",\n  \"Shamakhi, Azerbaijan\",\n  \"Dolyar, Azerbaijan\",\n  \"Dzagam, Azerbaijan\",\n  \"Qasım İsmayılov, Azerbaijan\",\n  \"Shamkhor, Azerbaijan\",\n  \"Şirvan, Azerbaijan\",\n  \"Shushi, Azerbaijan\",\n  \"Gilgilçay, Azerbaijan\",\n  \"Kyzyl-Burun, Azerbaijan\",\n  \"Corat, Azerbaijan\",\n  \"Hacı Zeynalabdin, Azerbaijan\",\n  \"Sumqayıt, Azerbaijan\",\n  \"Martakert, Azerbaijan\",\n  \"Terter, Azerbaijan\",\n  \"Çatax, Azerbaijan\",\n  \"Çobansığnaq, Azerbaijan\",\n  \"Dondar Quşçu, Azerbaijan\",\n  \"Qaraxanlı, Azerbaijan\",\n  \"Tovuz, Azerbaijan\",\n  \"Yanıqlı, Azerbaijan\",\n  \"Ujar, Azerbaijan\",\n  \"Yardımlı, Azerbaijan\",\n  \"Yevlakh, Azerbaijan\",\n  \"Aran, Azerbaijan\",\n  \"Qaramanlı, Azerbaijan\",\n  \"Mincivan, Azerbaijan\",\n  \"Zangilan, Azerbaijan\",\n  \"Aliabad, Azerbaijan\",\n  \"Faldarlı, Azerbaijan\",\n  \"Mamrux, Azerbaijan\",\n  \"Qandax, Azerbaijan\",\n  \"Zaqatala, Azerbaijan\",\n  \"Zardob, Azerbaijan\",\n  \"Jidd Ḩafş, Bahrain\",\n  \"Manama, Bahrain\",\n  \"Sitrah, Bahrain\",\n  \"Madīnat Ḩamad, Bahrain\",\n  \"Al Ḩadd, Bahrain\",\n  \"Al Muharraq, Bahrain\",\n  \"Ar Rifā‘, Bahrain\",\n  \"Dār Kulayb, Bahrain\",\n  \"Madīnat ‘Īsá, Bahrain\",\n  \"Barguna, Bangladesh\",\n  \"Barisal, Bangladesh\",\n  \"Bhola, Bangladesh\",\n  \"Jhalokati, Bangladesh\",\n  \"Patuakhali, Bangladesh\",\n  \"Pirojpur, Bangladesh\",\n  \"Bandarban, Bangladesh\",\n  \"Brahmanbaria, Bangladesh\",\n  \"Chandpur, Bangladesh\",\n  \"Chittagong, Bangladesh\",\n  \"Comilla, Bangladesh\",\n  \"Cox's Bazar, Bangladesh\",\n  \"Feni, Bangladesh\",\n  \"Khagrachhari, Bangladesh\",\n  \"Lakshmipur, Bangladesh\",\n  \"Noakhali, Bangladesh\",\n  \"Rangamati, Bangladesh\",\n  \"Dhaka, Bangladesh\",\n  \"Faridpur, Bangladesh\",\n  \"Gazipur, Bangladesh\",\n  \"Gopalganj, Bangladesh\",\n  \"Kishoreganj, Bangladesh\",\n  \"Madaripur, Bangladesh\",\n  \"Manikganj, Bangladesh\",\n  \"Munshiganj, Bangladesh\",\n  \"Narayanganj, Bangladesh\",\n  \"Narsingdi, Bangladesh\",\n  \"Rajbari, Bangladesh\",\n  \"Shariatpur, Bangladesh\",\n  \"Tangail, Bangladesh\",\n  \"Bagerhat, Bangladesh\",\n  \"Chuadanga, Bangladesh\",\n  \"Jessore, Bangladesh\",\n  \"Jhenaidah, Bangladesh\",\n  \"Khulna, Bangladesh\",\n  \"Kushtia, Bangladesh\",\n  \"Magura, Bangladesh\",\n  \"Meherpur, Bangladesh\",\n  \"Narail, Bangladesh\",\n  \"Satkhira, Bangladesh\",\n  \"Jamalpur, Bangladesh\",\n  \"Mymensingh, Bangladesh\",\n  \"Netrokona, Bangladesh\",\n  \"Sherpur, Bangladesh\",\n  \"Bogra, Bangladesh\",\n  \"Chapai Nawabganj, Bangladesh\",\n  \"Joypurhat, Bangladesh\",\n  \"Naogaon, Bangladesh\",\n  \"Natore, Bangladesh\",\n  \"Pabna, Bangladesh\",\n  \"Rajshahi, Bangladesh\",\n  \"Sirajganj, Bangladesh\",\n  \"Dinajpur, Bangladesh\",\n  \"Gaibandha, Bangladesh\",\n  \"Kurigram, Bangladesh\",\n  \"Lalmonirhat, Bangladesh\",\n  \"Nilphamari, Bangladesh\",\n  \"Panchagarh, Bangladesh\",\n  \"Rangpur, Bangladesh\",\n  \"Thakurgaon, Bangladesh\",\n  \"Habiganj, Bangladesh\",\n  \"Moulvibazar, Bangladesh\",\n  \"Sunamganj, Bangladesh\",\n  \"Sylhet, Bangladesh\",\n  \"Oistins, Barbados\",\n  \"Greenland, Barbados\",\n  \"Holetown, Barbados\",\n  \"Bathsheba, Barbados\",\n  \"Bridgetown, Barbados\",\n  \"Speightstown, Barbados\",\n  \"Crane, Barbados\",\n  \"Antopal’, Belarus\",\n  \"Asnyezhytsy, Belarus\",\n  \"Baranovichi, Belarus\",\n  \"Baranovichskiy Rayon, Belarus\",\n  \"Brest, Belarus\",\n  \"Brestski Rayon, Belarus\",\n  \"Byaroza, Belarus\",\n  \"Byarozawski Rayon, Belarus\",\n  \"Byelaazyorsk, Belarus\",\n  \"Charnawchytsy, Belarus\",\n  \"Damachava, Belarus\",\n  \"Davyd-Haradok, Belarus\",\n  \"Drahichyn, Belarus\",\n  \"Drahichynski Rayon, Belarus\",\n  \"Hantsavichy, Belarus\",\n  \"Hantsavitski Rayon, Belarus\",\n  \"Haradzishcha, Belarus\",\n  \"Horad Baranavichy, Belarus\",\n  \"Horad Brest, Belarus\",\n  \"Ivanava, Belarus\",\n  \"Ivanawski Rayon, Belarus\",\n  \"Ivatsevichy, Belarus\",\n  \"Kamyanyets, Belarus\",\n  \"Kamyanyetski Rayon, Belarus\",\n  \"Kamyanyuki, Belarus\",\n  \"Kobryn, Belarus\",\n  \"Kosava, Belarus\",\n  \"Lahishyn, Belarus\",\n  \"Luninyets, Belarus\",\n  \"Lyakhavichy, Belarus\",\n  \"Malaryta, Belarus\",\n  \"Mikashevichy, Belarus\",\n  \"Motal’, Belarus\",\n  \"Nyakhachava, Belarus\",\n  \"Pinsk, Belarus\",\n  \"Pruzhanski Rayon, Belarus\",\n  \"Pruzhany, Belarus\",\n  \"Ruzhany, Belarus\",\n  \"Stolin, Belarus\",\n  \"Stolinski Rayon, Belarus\",\n  \"Tsyelyakhany, Belarus\",\n  \"Vysokaye, Belarus\",\n  \"Zhabinka, Belarus\",\n  \"Zhabinkawski Rayon, Belarus\",\n  \"Znamenka, Belarus\",\n  \"Aktsyabrski, Belarus\",\n  \"Brahin, Belarus\",\n  \"Brahinski Rayon, Belarus\",\n  \"Buda-Kashalyova, Belarus\",\n  \"Chachersk, Belarus\",\n  \"Chacherski Rayon, Belarus\",\n  \"Dobrush, Belarus\",\n  \"Dowsk, Belarus\",\n  \"Homyel', Belarus\",\n  \"Homyel’ski Rayon, Belarus\",\n  \"Kalinkavichy, Belarus\",\n  \"Karanyowka, Belarus\",\n  \"Karma, Belarus\",\n  \"Kastsyukowka, Belarus\",\n  \"Khal’ch, Belarus\",\n  \"Khoyniki, Belarus\",\n  \"Loyew, Belarus\",\n  \"Lyel’chytski Rayon, Belarus\",\n  \"Lyel’chytsy, Belarus\",\n  \"Mazyr, Belarus\",\n  \"Mazyrski Rayon, Belarus\",\n  \"Narowlya, Belarus\",\n  \"Novaya Huta, Belarus\",\n  \"Parychy, Belarus\",\n  \"Peramoga, Belarus\",\n  \"Pyetrykaw, Belarus\",\n  \"Rahachow, Belarus\",\n  \"Rahachowski Rayon, Belarus\",\n  \"Rechytsa, Belarus\",\n  \"Sasnovy Bor, Belarus\",\n  \"Svyetlahorsk, Belarus\",\n  \"Turaw, Belarus\",\n  \"Vasilyevichy, Belarus\",\n  \"Vyetka, Belarus\",\n  \"Vyetkawski Rayon, Belarus\",\n  \"Yel’sk, Belarus\",\n  \"Zhlobin, Belarus\",\n  \"Zhlobinski Rayon, Belarus\",\n  \"Zhytkavichy, Belarus\",\n  \"Ashmyanski Rayon, Belarus\",\n  \"Ashmyany, Belarus\",\n  \"Astravyets, Belarus\",\n  \"Astravyetski Rayon, Belarus\",\n  \"Baruny, Belarus\",\n  \"Byarozawka, Belarus\",\n  \"Dyatlovo, Belarus\",\n  \"Grodnenskiy Rayon, Belarus\",\n  \"Hal’shany, Belarus\",\n  \"Horad Hrodna, Belarus\",\n  \"Hrodna, Belarus\",\n  \"Hyeranyony, Belarus\",\n  \"Indura, Belarus\",\n  \"Iwye, Belarus\",\n  \"Karelichy, Belarus\",\n  \"Karelitski Rayon, Belarus\",\n  \"Krasnosel’skiy, Belarus\",\n  \"Kreva, Belarus\",\n  \"Lida, Belarus\",\n  \"Lidski Rayon, Belarus\",\n  \"Lyubcha, Belarus\",\n  \"Mir, Belarus\",\n  \"Mosty, Belarus\",\n  \"Novogrudok, Belarus\",\n  \"Ross’, Belarus\",\n  \"Sapotskin, Belarus\",\n  \"Shchuchyn, Belarus\",\n  \"Shchuchynski Rayon, Belarus\",\n  \"Skidel’, Belarus\",\n  \"Slonim, Belarus\",\n  \"Smarhon’, Belarus\",\n  \"Soly, Belarus\",\n  \"Svislach, Belarus\",\n  \"Vishnyeva, Belarus\",\n  \"Volkovysk, Belarus\",\n  \"Voranava, Belarus\",\n  \"Vyalikaya Byerastavitsa, Belarus\",\n  \"Zel’va, Belarus\",\n  \"Zhaludok, Belarus\",\n  \"Zhirovichi, Belarus\",\n  \"Astrashytski Haradok, Belarus\",\n  \"Atolina, Belarus\",\n  \"Azyartso, Belarus\",\n  \"Bal’shavik, Belarus\",\n  \"Barysaw, Belarus\",\n  \"Barysawski Rayon, Belarus\",\n  \"Blon’, Belarus\",\n  \"Bobr, Belarus\",\n  \"Borovlyany, Belarus\",\n  \"Byarezinski Rayon, Belarus\",\n  \"Byerazino, Belarus\",\n  \"Chervyen’, Belarus\",\n  \"Chervyen’ski Rayon, Belarus\",\n  \"Chyrvonaya Slabada, Belarus\",\n  \"Chyst’, Belarus\",\n  \"Druzhny, Belarus\",\n  \"Dukora, Belarus\",\n  \"Dzyarzhynsk, Belarus\",\n  \"Enyerhyetykaw, Belarus\",\n  \"Fanipol, Belarus\",\n  \"Haradzyeya, Belarus\",\n  \"Hatava, Belarus\",\n  \"Horad Smalyavichy, Belarus\",\n  \"Horad Zhodzina, Belarus\",\n  \"Hotsk, Belarus\",\n  \"Il’ya, Belarus\",\n  \"Ivyanyets, Belarus\",\n  \"Kalodzishchy, Belarus\",\n  \"Kapyl’, Belarus\",\n  \"Kapyl’ski Rayon, Belarus\",\n  \"Khatsyezhyna, Belarus\",\n  \"Kholopenichi, Belarus\",\n  \"Klyetsk, Belarus\",\n  \"Klyetski Rayon, Belarus\",\n  \"Korolëv Stan, Belarus\",\n  \"Krasnaye, Belarus\",\n  \"Krupki, Belarus\",\n  \"Kryvichy, Belarus\",\n  \"Lahoysk, Belarus\",\n  \"Loshnitsa, Belarus\",\n  \"Luhavaya Slabada, Belarus\",\n  \"Lyasny, Belarus\",\n  \"Lyeskawka, Belarus\",\n  \"Lyuban’, Belarus\",\n  \"Machulishchy, Belarus\",\n  \"Maladzyechna, Belarus\",\n  \"Mar’’ina Horka, Belarus\",\n  \"Michanovichi, Belarus\",\n  \"Myadzyel, Belarus\",\n  \"Myadzyel’ski Rayon, Belarus\",\n  \"Narach, Belarus\",\n  \"Nasilava, Belarus\",\n  \"Novosel’ye, Belarus\",\n  \"Novy Svyerzhan’, Belarus\",\n  \"Nyasvizh, Belarus\",\n  \"Nyasvizhski Rayon, Belarus\",\n  \"Plyeshchanitsy, Belarus\",\n  \"Prawdzinski, Belarus\",\n  \"Pryvol’ny, Belarus\",\n  \"Pukhavichy, Belarus\",\n  \"Pukhavichy Raion, Belarus\",\n  \"Pyatryshki, Belarus\",\n  \"Radashkovichy, Belarus\",\n  \"Rakaw, Belarus\",\n  \"Rudzyensk, Belarus\",\n  \"Salihorsk, Belarus\",\n  \"Samakhvalavichy, Belarus\",\n  \"Sarachy, Belarus\",\n  \"Schomyslitsa, Belarus\",\n  \"Slabada, Belarus\",\n  \"Slutsk, Belarus\",\n  \"Slutski Rayon, Belarus\",\n  \"Smalyavitski Rayon, Belarus\",\n  \"Smilavichy, Belarus\",\n  \"Snow, Belarus\",\n  \"Stan’kava, Belarus\",\n  \"Staradarozhski Rayon, Belarus\",\n  \"Starobin, Belarus\",\n  \"Staryya Darohi, Belarus\",\n  \"Stawbtsowski Rayon, Belarus\",\n  \"Stowbtsy, Belarus\",\n  \"Svir, Belarus\",\n  \"Svislach, Belarus\",\n  \"Syenitsa, Belarus\",\n  \"Syomkava, Belarus\",\n  \"Tsimkavichy, Belarus\",\n  \"Turets-Bayary, Belarus\",\n  \"Urechcha, Belarus\",\n  \"Usiazh, Belarus\",\n  \"Uzda, Belarus\",\n  \"Uzdzyenski Rayon, Belarus\",\n  \"Valozhyn, Belarus\",\n  \"Vilyeyka, Belarus\",\n  \"Vilyeyski Rayon, Belarus\",\n  \"Vyaliki Trastsyanets, Belarus\",\n  \"Yubilyeyny, Belarus\",\n  \"Zamostochye, Belarus\",\n  \"Zaslawye, Belarus\",\n  \"Zhdanovichy, Belarus\",\n  \"Zyembin, Belarus\",\n  \"Октябрьский, Belarus\",\n  \"Frunzyenski Rayon, Belarus\",\n  \"Kastrychnitski Rayon, Belarus\",\n  \"Lyeninski Rayon, Belarus\",\n  \"Maskowski Rayon, Belarus\",\n  \"Minsk, Belarus\",\n  \"Partyzanski Rayon, Belarus\",\n  \"Savyetski Rayon, Belarus\",\n  \"Tsentral’ny Rayon, Belarus\",\n  \"Zavodski Rayon, Belarus\",\n  \"Asipovichy, Belarus\",\n  \"Asipovitski Rayon, Belarus\",\n  \"Babruysk, Belarus\",\n  \"Babruyski Rayon, Belarus\",\n  \"Buynichy, Belarus\",\n  \"Byalynichy, Belarus\",\n  \"Byalynitski Rayon, Belarus\",\n  \"Bykhaw, Belarus\",\n  \"Chavuski Rayon, Belarus\",\n  \"Chavusy, Belarus\",\n  \"Cherykaw, Belarus\",\n  \"Cherykawski Rayon, Belarus\",\n  \"Dashkawka, Belarus\",\n  \"Drybin, Belarus\",\n  \"Drybinski Rayon, Belarus\",\n  \"Hlusha, Belarus\",\n  \"Hlusk, Belarus\",\n  \"Horatski Rayon, Belarus\",\n  \"Horki, Belarus\",\n  \"Kadino, Belarus\",\n  \"Kamyennyya Lavy, Belarus\",\n  \"Kastsyukovichy, Belarus\",\n  \"Khodasy, Belarus\",\n  \"Khotsimsk, Belarus\",\n  \"Khotsimski Rayon, Belarus\",\n  \"Kirawsk, Belarus\",\n  \"Klichaw, Belarus\",\n  \"Klimavichy, Belarus\",\n  \"Krasnapol’ski Rayon, Belarus\",\n  \"Krasnapollye, Belarus\",\n  \"Krasnyy Bereg, Belarus\",\n  \"Kruhlaye, Belarus\",\n  \"Krychaw, Belarus\",\n  \"Mahilyow, Belarus\",\n  \"Mahilyowski Rayon, Belarus\",\n  \"Mstsislaw, Belarus\",\n  \"Myazhysyatki, Belarus\",\n  \"Myshkavichy, Belarus\",\n  \"Palykavichy Pyershyya, Belarus\",\n  \"Posëlok Voskhod, Belarus\",\n  \"Ramanavichy, Belarus\",\n  \"Shklow, Belarus\",\n  \"Shklowski Rayon, Belarus\",\n  \"Slawharad, Belarus\",\n  \"Veyno, Belarus\",\n  \"Vishow, Belarus\",\n  \"Yalizava, Belarus\",\n  \"Balbasava, Belarus\",\n  \"Baran’, Belarus\",\n  \"Braslaw, Belarus\",\n  \"Braslawski Rayon, Belarus\",\n  \"Byahoml’, Belarus\",\n  \"Byeshankovitski Rayon, Belarus\",\n  \"Chashniki, Belarus\",\n  \"Chashnitski Rayon, Belarus\",\n  \"Dokshytski Rayon, Belarus\",\n  \"Dokshytsy, Belarus\",\n  \"Druya, Belarus\",\n  \"Dubrowna, Belarus\",\n  \"Dzisna, Belarus\",\n  \"Haradok, Belarus\",\n  \"Haradotski Rayon, Belarus\",\n  \"Hlybokaye, Belarus\",\n  \"Hlybotski Rayon, Belarus\",\n  \"Kokhanava, Belarus\",\n  \"Konstantinovo, Belarus\",\n  \"Lyepyel’, Belarus\",\n  \"Lyepyel’ski Rayon, Belarus\",\n  \"Lyntupy, Belarus\",\n  \"Lyozna, Belarus\",\n  \"Lyoznyenski Rayon, Belarus\",\n  \"Mosar, Belarus\",\n  \"Myorski Rayon, Belarus\",\n  \"Myory, Belarus\",\n  \"Navapolatsk, Belarus\",\n  \"Novolukoml’, Belarus\",\n  \"Orsha, Belarus\",\n  \"Osveya, Belarus\",\n  \"Pastavy, Belarus\",\n  \"Pastawski Rayon, Belarus\",\n  \"Polatsk, Belarus\",\n  \"Polatski Rayon, Belarus\",\n  \"Rasonski Rayon, Belarus\",\n  \"Rasony, Belarus\",\n  \"Sharkawshchyna, Belarus\",\n  \"Sharkawshchynski Rayon, Belarus\",\n  \"Shumilinski Rayon, Belarus\",\n  \"Syanno, Belarus\",\n  \"Syennyenski Rayon, Belarus\",\n  \"Talachyn, Belarus\",\n  \"Ushachy, Belarus\",\n  \"Vidzy, Belarus\",\n  \"Vitebsk, Belarus\",\n  \"Vyerkhnyadzvinsk, Belarus\",\n  \"Vyerkhnyadzvinski Rayon, Belarus\",\n  \"Brussels, Belgium\",\n  \"Aalst, Belgium\",\n  \"Aalter, Belgium\",\n  \"Aarschot, Belgium\",\n  \"Aartselaar, Belgium\",\n  \"Alken, Belgium\",\n  \"Alveringem, Belgium\",\n  \"Antwerpen, Belgium\",\n  \"Anzegem, Belgium\",\n  \"Ardooie, Belgium\",\n  \"Arendonk, Belgium\",\n  \"As, Belgium\",\n  \"Asse, Belgium\",\n  \"Assenede, Belgium\",\n  \"Avelgem, Belgium\",\n  \"Baarle-Hertog, Belgium\",\n  \"Balen, Belgium\",\n  \"Beernem, Belgium\",\n  \"Beerse, Belgium\",\n  \"Beersel, Belgium\",\n  \"Begijnendijk, Belgium\",\n  \"Bekkevoort, Belgium\",\n  \"Beringen, Belgium\",\n  \"Berlaar, Belgium\",\n  \"Berlare, Belgium\",\n  \"Bertem, Belgium\",\n  \"Bever, Belgium\",\n  \"Beveren, Belgium\",\n  \"Bierbeek, Belgium\",\n  \"Bilzen, Belgium\",\n  \"Blankenberge, Belgium\",\n  \"Bocholt, Belgium\",\n  \"Boechout, Belgium\",\n  \"Bonheiden, Belgium\",\n  \"Boom, Belgium\",\n  \"Boortmeerbeek, Belgium\",\n  \"Borgloon, Belgium\",\n  \"Bornem, Belgium\",\n  \"Borsbeek, Belgium\",\n  \"Boutersem, Belgium\",\n  \"Brasschaat, Belgium\",\n  \"Brecht, Belgium\",\n  \"Bredene, Belgium\",\n  \"Bree, Belgium\",\n  \"Brugge, Belgium\",\n  \"Buggenhout, Belgium\",\n  \"Damme, Belgium\",\n  \"De Haan, Belgium\",\n  \"De Panne, Belgium\",\n  \"De Pinte, Belgium\",\n  \"Deerlijk, Belgium\",\n  \"Deinze, Belgium\",\n  \"Denderleeuw, Belgium\",\n  \"Dendermonde, Belgium\",\n  \"Dentergem, Belgium\",\n  \"Dessel, Belgium\",\n  \"Destelbergen, Belgium\",\n  \"Deurne, Belgium\",\n  \"Diegem, Belgium\",\n  \"Diepenbeek, Belgium\",\n  \"Diest, Belgium\",\n  \"Diksmuide, Belgium\",\n  \"Dilbeek, Belgium\",\n  \"Drogenbos, Belgium\",\n  \"Duffel, Belgium\",\n  \"Edegem, Belgium\",\n  \"Eeklo, Belgium\",\n  \"Essen, Belgium\",\n  \"Evergem, Belgium\",\n  \"Galmaarden, Belgium\",\n  \"Gavere, Belgium\",\n  \"Geel, Belgium\",\n  \"Geetbets, Belgium\",\n  \"Genk, Belgium\",\n  \"Gent, Belgium\",\n  \"Geraardsbergen, Belgium\",\n  \"Gingelom, Belgium\",\n  \"Gistel, Belgium\",\n  \"Glabbeek, Belgium\",\n  \"Gooik, Belgium\",\n  \"Grimbergen, Belgium\",\n  \"Grobbendonk, Belgium\",\n  \"Haacht, Belgium\",\n  \"Haaltert, Belgium\",\n  \"Halen, Belgium\",\n  \"Halle, Belgium\",\n  \"Hamme, Belgium\",\n  \"Harelbeke, Belgium\",\n  \"Hasselt, Belgium\",\n  \"Heers, Belgium\",\n  \"Heist-op-den-Berg, Belgium\",\n  \"Helchteren, Belgium\",\n  \"Hemiksem, Belgium\",\n  \"Herent, Belgium\",\n  \"Herentals, Belgium\",\n  \"Herenthout, Belgium\",\n  \"Herk-de-Stad, Belgium\",\n  \"Herne, Belgium\",\n  \"Herselt, Belgium\",\n  \"Herzele, Belgium\",\n  \"Heusden, Belgium\",\n  \"Hoboken, Belgium\",\n  \"Hoegaarden, Belgium\",\n  \"Hoeilaart, Belgium\",\n  \"Hoeselt, Belgium\",\n  \"Holsbeek, Belgium\",\n  \"Hooglede, Belgium\",\n  \"Hoogstraten, Belgium\",\n  \"Houthalen, Belgium\",\n  \"Houthulst, Belgium\",\n  \"Hove, Belgium\",\n  \"Huldenberg, Belgium\",\n  \"Hulshout, Belgium\",\n  \"Ichtegem, Belgium\",\n  \"Ieper, Belgium\",\n  \"Ingelmunster, Belgium\",\n  \"Izegem, Belgium\",\n  \"Jabbeke, Belgium\",\n  \"Kalmthout, Belgium\",\n  \"Kampenhout, Belgium\",\n  \"Kapelle-op-den-Bos, Belgium\",\n  \"Kapellen, Belgium\",\n  \"Kaprijke, Belgium\",\n  \"Kasterlee, Belgium\",\n  \"Keerbergen, Belgium\",\n  \"Kinrooi, Belgium\",\n  \"Knesselare, Belgium\",\n  \"Knokke-Heist, Belgium\",\n  \"Koekelare, Belgium\",\n  \"Koksijde, Belgium\",\n  \"Kontich, Belgium\",\n  \"Kortemark, Belgium\",\n  \"Kortenaken, Belgium\",\n  \"Kortenberg, Belgium\",\n  \"Kortessem, Belgium\",\n  \"Kortrijk, Belgium\",\n  \"Kraainem, Belgium\",\n  \"Kruibeke, Belgium\",\n  \"Kruishoutem, Belgium\",\n  \"Kuurne, Belgium\",\n  \"Laarne, Belgium\",\n  \"Lanaken, Belgium\",\n  \"Landen, Belgium\",\n  \"Lebbeke, Belgium\",\n  \"Lede, Belgium\",\n  \"Ledeberg, Belgium\",\n  \"Ledegem, Belgium\",\n  \"Lendelede, Belgium\",\n  \"Leopoldsburg, Belgium\",\n  \"Leuven, Belgium\",\n  \"Lichtervelde, Belgium\",\n  \"Liedekerke, Belgium\",\n  \"Lier, Belgium\",\n  \"Lille, Belgium\",\n  \"Linkebeek, Belgium\",\n  \"Lint, Belgium\",\n  \"Lochristi, Belgium\",\n  \"Lokeren, Belgium\",\n  \"Lommel, Belgium\",\n  \"Londerzeel, Belgium\",\n  \"Lovendegem, Belgium\",\n  \"Lubbeek, Belgium\",\n  \"Lummen, Belgium\",\n  \"Maaseik, Belgium\",\n  \"Maasmechelen, Belgium\",\n  \"Machelen, Belgium\",\n  \"Maldegem, Belgium\",\n  \"Mechelen, Belgium\",\n  \"Meerhout, Belgium\",\n  \"Meise, Belgium\",\n  \"Melle, Belgium\",\n  \"Menen, Belgium\",\n  \"Merchtem, Belgium\",\n  \"Merelbeke, Belgium\",\n  \"Merksplas, Belgium\",\n  \"Meulebeke, Belgium\",\n  \"Middelkerke, Belgium\",\n  \"Moerbeke, Belgium\",\n  \"Mol, Belgium\",\n  \"Moorslede, Belgium\",\n  \"Mortsel, Belgium\",\n  \"Nazareth, Belgium\",\n  \"Neerpelt, Belgium\",\n  \"Nevele, Belgium\",\n  \"Niel, Belgium\",\n  \"Nieuwerkerken, Belgium\",\n  \"Nieuwpoort, Belgium\",\n  \"Nijlen, Belgium\",\n  \"Ninove, Belgium\",\n  \"Olen, Belgium\",\n  \"Oostduinkerke, Belgium\",\n  \"Oosterzele, Belgium\",\n  \"Oostkamp, Belgium\",\n  \"Oostmalle, Belgium\",\n  \"Oostrozebeke, Belgium\",\n  \"Opglabbeek, Belgium\",\n  \"Opwijk, Belgium\",\n  \"Ostend, Belgium\",\n  \"Oud-Heverlee, Belgium\",\n  \"Oud-Turnhout, Belgium\",\n  \"Oudenaarde, Belgium\",\n  \"Oudenburg, Belgium\",\n  \"Overijse, Belgium\",\n  \"Overpelt, Belgium\",\n  \"Peer, Belgium\",\n  \"Pepingen, Belgium\",\n  \"Perre, Belgium\",\n  \"Pittem, Belgium\",\n  \"Poperinge, Belgium\",\n  \"Provincie Antwerpen, Belgium\",\n  \"Provincie Limburg, Belgium\",\n  \"Provincie Oost-Vlaanderen, Belgium\",\n  \"Provincie Vlaams-Brabant, Belgium\",\n  \"Provincie West-Vlaanderen, Belgium\",\n  \"Putte, Belgium\",\n  \"Puurs, Belgium\",\n  \"Ranst, Belgium\",\n  \"Ravels, Belgium\",\n  \"Retie, Belgium\",\n  \"Riemst, Belgium\",\n  \"Rijkevorsel, Belgium\",\n  \"Roeselare, Belgium\",\n  \"Ronse, Belgium\",\n  \"Rotselaar, Belgium\",\n  \"Ruiselede, Belgium\",\n  \"Rumst, Belgium\",\n  \"Schelle, Belgium\",\n  \"Schilde, Belgium\",\n  \"Schoten, Belgium\",\n  \"Sint-Amands, Belgium\",\n  \"Sint-Genesius-Rode, Belgium\",\n  \"Sint-Gillis-Waas, Belgium\",\n  \"Sint-Joris, Belgium\",\n  \"Sint-Katelijne-Waver, Belgium\",\n  \"Sint-Kruis, Belgium\",\n  \"Sint-Laureins, Belgium\",\n  \"Sint-Lievens-Houtem, Belgium\",\n  \"Sint-Maria-Lierde, Belgium\",\n  \"Sint-Martens-Latem, Belgium\",\n  \"Sint-Martens-Lennik, Belgium\",\n  \"Sint-Niklaas, Belgium\",\n  \"Sint-Pieters-Leeuw, Belgium\",\n  \"Sint-Pieters-Voeren, Belgium\",\n  \"Sint-Truiden, Belgium\",\n  \"Stabroek, Belgium\",\n  \"Staden, Belgium\",\n  \"Steenokkerzeel, Belgium\",\n  \"Stekene, Belgium\",\n  \"Temse, Belgium\",\n  \"Terkoest, Belgium\",\n  \"Ternat, Belgium\",\n  \"Tervuren, Belgium\",\n  \"Tessenderlo, Belgium\",\n  \"Tielt, Belgium\",\n  \"Tienen, Belgium\",\n  \"Tongeren, Belgium\",\n  \"Torhout, Belgium\",\n  \"Tremelo, Belgium\",\n  \"Turnhout, Belgium\",\n  \"Veurne, Belgium\",\n  \"Vilvoorde, Belgium\",\n  \"Vorselaar, Belgium\",\n  \"Vosselaar, Belgium\",\n  \"Waarschoot, Belgium\",\n  \"Waasmunster, Belgium\",\n  \"Wachtebeke, Belgium\",\n  \"Waregem, Belgium\",\n  \"Wellen, Belgium\",\n  \"Wemmel, Belgium\",\n  \"Wenduine, Belgium\",\n  \"Wervik, Belgium\",\n  \"Westerlo, Belgium\",\n  \"Wetteren, Belgium\",\n  \"Wevelgem, Belgium\",\n  \"Wezembeek-Oppem, Belgium\",\n  \"Wichelen, Belgium\",\n  \"Wielsbeke, Belgium\",\n  \"Wijnegem, Belgium\",\n  \"Willebroek, Belgium\",\n  \"Wingene, Belgium\",\n  \"Wommelgem, Belgium\",\n  \"Wuustwezel, Belgium\",\n  \"Zandhoven, Belgium\",\n  \"Zaventem, Belgium\",\n  \"Zedelgem, Belgium\",\n  \"Zeebrugge, Belgium\",\n  \"Zele, Belgium\",\n  \"Zelzate, Belgium\",\n  \"Zemst, Belgium\",\n  \"Zingem, Belgium\",\n  \"Zoersel, Belgium\",\n  \"Zomergem, Belgium\",\n  \"Zonhoven, Belgium\",\n  \"Zonnebeke, Belgium\",\n  \"Zottegem, Belgium\",\n  \"Zoutleeuw, Belgium\",\n  \"Zuienkerke, Belgium\",\n  \"Zulte, Belgium\",\n  \"Zutendaal, Belgium\",\n  \"Zwevegem, Belgium\",\n  \"Zwijndrecht, Belgium\",\n  \"Aiseau, Belgium\",\n  \"Amay, Belgium\",\n  \"Amblève, Belgium\",\n  \"Andenne, Belgium\",\n  \"Anderlues, Belgium\",\n  \"Anhée, Belgium\",\n  \"Ans, Belgium\",\n  \"Anthisnes, Belgium\",\n  \"Antoing, Belgium\",\n  \"Arlon, Belgium\",\n  \"Assesse, Belgium\",\n  \"Ath, Belgium\",\n  \"Attert, Belgium\",\n  \"Aubange, Belgium\",\n  \"Aubel, Belgium\",\n  \"Awans, Belgium\",\n  \"Aywaille, Belgium\",\n  \"Baelen, Belgium\",\n  \"Basse Lasne, Belgium\",\n  \"Bassenge, Belgium\",\n  \"Bastogne, Belgium\",\n  \"Beaumont, Belgium\",\n  \"Beauraing, Belgium\",\n  \"Beauvechain, Belgium\",\n  \"Beloeil, Belgium\",\n  \"Berloz, Belgium\",\n  \"Bernissart, Belgium\",\n  \"Bertogne, Belgium\",\n  \"Bertrix, Belgium\",\n  \"Beyne-Heusay, Belgium\",\n  \"Bièvre, Belgium\",\n  \"Binche, Belgium\",\n  \"Blégny, Belgium\",\n  \"Bouillon, Belgium\",\n  \"Boussu, Belgium\",\n  \"Braine-l'Alleud, Belgium\",\n  \"Braine-le-Château, Belgium\",\n  \"Braine-le-Comte, Belgium\",\n  \"Braives, Belgium\",\n  \"Brugelette, Belgium\",\n  \"Brunehault, Belgium\",\n  \"Bullange, Belgium\",\n  \"Burdinne, Belgium\",\n  \"Butgenbach, Belgium\",\n  \"Celles, Belgium\",\n  \"Cerfontaine, Belgium\",\n  \"Chapelle-lez-Herlaimont, Belgium\",\n  \"Charleroi, Belgium\",\n  \"Chastre-Villeroux-Blanmont, Belgium\",\n  \"Châtelet, Belgium\",\n  \"Chaudfontaine, Belgium\",\n  \"Chaumont-Gistoux, Belgium\",\n  \"Chièvres, Belgium\",\n  \"Chimay, Belgium\",\n  \"Chiny, Belgium\",\n  \"Ciney, Belgium\",\n  \"Clavier, Belgium\",\n  \"Colfontaine, Belgium\",\n  \"Comblain-au-Pont, Belgium\",\n  \"Courcelles, Belgium\",\n  \"Court-Saint-Étienne, Belgium\",\n  \"Couvin, Belgium\",\n  \"Crisnée, Belgium\",\n  \"Dalhem, Belgium\",\n  \"Daverdisse, Belgium\",\n  \"Dinant, Belgium\",\n  \"Dison, Belgium\",\n  \"Doische, Belgium\",\n  \"Donceel, Belgium\",\n  \"Dour, Belgium\",\n  \"Durbuy, Belgium\",\n  \"Écaussinnes-d’Enghien, Belgium\",\n  \"Éghezée, Belgium\",\n  \"Ellezelles, Belgium\",\n  \"Enghien, Belgium\",\n  \"Engis, Belgium\",\n  \"Érezée, Belgium\",\n  \"Erquelinnes, Belgium\",\n  \"Esneux, Belgium\",\n  \"Estaimpuis, Belgium\",\n  \"Estinnes-au-Val, Belgium\",\n  \"Étalle, Belgium\",\n  \"Eupen, Belgium\",\n  \"Faimes, Belgium\",\n  \"Farciennes, Belgium\",\n  \"Fauvillers, Belgium\",\n  \"Ferrières, Belgium\",\n  \"Fexhe-le-Haut-Clocher, Belgium\",\n  \"Flémalle-Haute, Belgium\",\n  \"Fléron, Belgium\",\n  \"Fleurus, Belgium\",\n  \"Flobecq, Belgium\",\n  \"Floreffe, Belgium\",\n  \"Florennes, Belgium\",\n  \"Florenville, Belgium\",\n  \"Forville, Belgium\",\n  \"Fosses-la-Ville, Belgium\",\n  \"Frameries, Belgium\",\n  \"Frasnes-lez-Buissenal, Belgium\",\n  \"Froidchapelle, Belgium\",\n  \"Gedinne, Belgium\",\n  \"Geer, Belgium\",\n  \"Gembloux, Belgium\",\n  \"Genappe, Belgium\",\n  \"Gerpinnes, Belgium\",\n  \"Gesves, Belgium\",\n  \"Gouvy, Belgium\",\n  \"Grez-Doiceau, Belgium\",\n  \"Habay-la-Vieille, Belgium\",\n  \"Hamoir, Belgium\",\n  \"Hamois, Belgium\",\n  \"Hannut, Belgium\",\n  \"Hastière-Lavaux, Belgium\",\n  \"Havelange, Belgium\",\n  \"Hensies, Belgium\",\n  \"Herbeumont, Belgium\",\n  \"Héron, Belgium\",\n  \"Herstal, Belgium\",\n  \"Herve, Belgium\",\n  \"Hotton, Belgium\",\n  \"Houffalize, Belgium\",\n  \"Houyet, Belgium\",\n  \"Huy, Belgium\",\n  \"Incourt, Belgium\",\n  \"Ittre, Belgium\",\n  \"Jalhay, Belgium\",\n  \"Jodoigne, Belgium\",\n  \"Juprelle, Belgium\",\n  \"Jurbise, Belgium\",\n  \"La Bruyère, Belgium\",\n  \"La Calamine, Belgium\",\n  \"La Hulpe, Belgium\",\n  \"La Louvière, Belgium\",\n  \"La Roche-en-Ardenne, Belgium\",\n  \"Léglise, Belgium\",\n  \"Lens, Belgium\",\n  \"Lessines, Belgium\",\n  \"Libin, Belgium\",\n  \"Liège, Belgium\",\n  \"Lierneux, Belgium\",\n  \"Limbourg, Belgium\",\n  \"Lincent, Belgium\",\n  \"Lobbes, Belgium\",\n  \"Lontzen, Belgium\",\n  \"Louvain-la-Neuve, Belgium\",\n  \"Malmédy, Belgium\",\n  \"Manage, Belgium\",\n  \"Manhay, Belgium\",\n  \"Marche-en-Famenne, Belgium\",\n  \"Marchin, Belgium\",\n  \"Martelange, Belgium\",\n  \"Meix-devant-Virton, Belgium\",\n  \"Merbes-le-Château, Belgium\",\n  \"Messancy, Belgium\",\n  \"Mettet, Belgium\",\n  \"Modave, Belgium\",\n  \"Momignies, Belgium\",\n  \"Mons, Belgium\",\n  \"Mons-lez-Liège, Belgium\",\n  \"Mont-Saint-Guibert, Belgium\",\n  \"Morlanwelz-Mariemont, Belgium\",\n  \"Mouscron, Belgium\",\n  \"Musson, Belgium\",\n  \"Namur, Belgium\",\n  \"Nandrin, Belgium\",\n  \"Nassogne, Belgium\",\n  \"Neufchâteau, Belgium\",\n  \"Nivelles, Belgium\",\n  \"Noville-les-Bois, Belgium\",\n  \"Ohey, Belgium\",\n  \"Olne, Belgium\",\n  \"Onhaye, Belgium\",\n  \"Oreye, Belgium\",\n  \"Ottignies, Belgium\",\n  \"Ouffet, Belgium\",\n  \"Oupeye, Belgium\",\n  \"Paliseul, Belgium\",\n  \"Pecq, Belgium\",\n  \"Pepinster, Belgium\",\n  \"Péruwelz, Belgium\",\n  \"Perwez, Belgium\",\n  \"Philippeville, Belgium\",\n  \"Plombières, Belgium\",\n  \"Pont-à-Celles, Belgium\",\n  \"Profondeville, Belgium\",\n  \"Province de Liège, Belgium\",\n  \"Province de Namur, Belgium\",\n  \"Province du Brabant Wallon, Belgium\",\n  \"Province du Hainaut, Belgium\",\n  \"Quaregnon, Belgium\",\n  \"Quévy-le-Petit, Belgium\",\n  \"Quiévrain, Belgium\",\n  \"Raeren, Belgium\",\n  \"Ramillies, Belgium\",\n  \"Rebecq-Rognon, Belgium\",\n  \"Remicourt, Belgium\",\n  \"Rendeux, Belgium\",\n  \"Rixensart, Belgium\",\n  \"Rochefort, Belgium\",\n  \"Roeulx, Belgium\",\n  \"Rouvroy, Belgium\",\n  \"Rumes, Belgium\",\n  \"Saint-Ghislain, Belgium\",\n  \"Saint-Hubert, Belgium\",\n  \"Saint-Léger, Belgium\",\n  \"Saint-Nicolas, Belgium\",\n  \"Saint-Vith, Belgium\",\n  \"Sainte-Ode, Belgium\",\n  \"Seneffe, Belgium\",\n  \"Seraing, Belgium\",\n  \"Silly, Belgium\",\n  \"Soignies, Belgium\",\n  \"Sombreffe, Belgium\",\n  \"Somme-Leuze, Belgium\",\n  \"Soumagne, Belgium\",\n  \"Spa, Belgium\",\n  \"Sprimont, Belgium\",\n  \"Stavelot, Belgium\",\n  \"Stoumont, Belgium\",\n  \"Tellin, Belgium\",\n  \"Tenneville, Belgium\",\n  \"Theux, Belgium\",\n  \"Thuin, Belgium\",\n  \"Tinlot, Belgium\",\n  \"Tintigny, Belgium\",\n  \"Tournai, Belgium\",\n  \"Trois-Ponts, Belgium\",\n  \"Trooz, Belgium\",\n  \"Tubize, Belgium\",\n  \"Vaux-sur-Sûre, Belgium\",\n  \"Verlaine, Belgium\",\n  \"Verviers, Belgium\",\n  \"Vielsalm, Belgium\",\n  \"Villers-la-Ville, Belgium\",\n  \"Villers-le-Bouillet, Belgium\",\n  \"Virton, Belgium\",\n  \"Visé, Belgium\",\n  \"Waimes, Belgium\",\n  \"Walcourt, Belgium\",\n  \"Walhain-Saint-Paul, Belgium\",\n  \"Wanze, Belgium\",\n  \"Waremme, Belgium\",\n  \"Wasseiges, Belgium\",\n  \"Waterloo, Belgium\",\n  \"Wavre, Belgium\",\n  \"Welkenraedt, Belgium\",\n  \"Wellin, Belgium\",\n  \"Yvoir, Belgium\",\n  \"Belize City, Belize\",\n  \"San Pedro, Belize\",\n  \"Belmopan, Belize\",\n  \"Benque Viejo el Carmen, Belize\",\n  \"San Ignacio, Belize\",\n  \"Valley of Peace, Belize\",\n  \"Corozal, Belize\",\n  \"Hopelchén, Belize\",\n  \"Orange Walk, Belize\",\n  \"Shipyard, Belize\",\n  \"Dangriga, Belize\",\n  \"Placencia, Belize\",\n  \"Punta Gorda, Belize\",\n  \"Banikoara, Benin\",\n  \"Kandi, Benin\",\n  \"Malanville, Benin\",\n  \"Guilmaro, Benin\",\n  \"Natitingou, Benin\",\n  \"Tanguieta, Benin\",\n  \"Abomey-Calavi, Benin\",\n  \"Allada, Benin\",\n  \"Hévié, Benin\",\n  \"Hinvi, Benin\",\n  \"Ouidah, Benin\",\n  \"Bembèrèkè, Benin\",\n  \"Bétérou, Benin\",\n  \"Nikki, Benin\",\n  \"Parakou, Benin\",\n  \"Tchaourou, Benin\",\n  \"Comé, Benin\",\n  \"Dassa-Zoumé, Benin\",\n  \"Savalou, Benin\",\n  \"Savé, Benin\",\n  \"Bassila, Benin\",\n  \"Commune of Djougou, Benin\",\n  \"Djougou, Benin\",\n  \"Djakotomey, Benin\",\n  \"Dogbo, Benin\",\n  \"Cotonou, Benin\",\n  \"Commune of Athieme, Benin\",\n  \"Lokossa, Benin\",\n  \"Porto-Novo, Benin\",\n  \"Kétou, Benin\",\n  \"Pobé, Benin\",\n  \"Sakété, Benin\",\n  \"Abomey, Benin\",\n  \"Bohicon, Benin\",\n  \"Commune of Agbangnizoun, Benin\",\n  \"Cové, Benin\",\n  \"Devonshire, Bermuda\",\n  \"Hamilton, Bermuda\",\n  \"Paget, Bermuda\",\n  \"St. George's, Bermuda\",\n  \"Tucker’s Town, Bermuda\",\n  \"Somerset, Bermuda\",\n  \"Flatts, Bermuda\",\n  \"Southampton, Bermuda\",\n  \"Warwick, Bermuda\",\n  \"Jakar, Bhutan\",\n  \"Tang Valley, Bhutan\",\n  \"Chapchha, Bhutan\",\n  \"Daphu, Bhutan\",\n  \"Khitokha, Bhutan\",\n  \"Lobnig, Bhutan\",\n  \"Pachu, Bhutan\",\n  \"Phuntsholing, Bhutan\",\n  \"Daga, Bhutan\",\n  \"Sibsu, Bhutan\",\n  \"Thumgaon, Bhutan\",\n  \"Gasa, Bhutan\",\n  \"Ha, Bhutan\",\n  \"Naktsang, Bhutan\",\n  \"Sangkari, Bhutan\",\n  \"Lhuentse, Bhutan\",\n  \"Kengkhar, Bhutan\",\n  \"Mongar, Bhutan\",\n  \"Thebong, Bhutan\",\n  \"Paro, Bhutan\",\n  \"Suchha, Bhutan\",\n  \"Tshalunang, Bhutan\",\n  \"Nganglam, Bhutan\",\n  \"Pemagatshel, Bhutan\",\n  \"Pajo, Bhutan\",\n  \"Punākha, Bhutan\",\n  \"Samdrup Jongkhar, Bhutan\",\n  \"Denchukha, Bhutan\",\n  \"Dorokha, Bhutan\",\n  \"Samtse, Bhutan\",\n  \"Tendu, Bhutan\",\n  \"Bhurgaon, Bhutan\",\n  \"Galechugaon, Bhutan\",\n  \"Geylegphug, Bhutan\",\n  \"Sarpang, Bhutan\",\n  \"Thimphu, Bhutan\",\n  \"Shali, Bhutan\",\n  \"Trashi Yangtse, Bhutan\",\n  \"Yalang, Bhutan\",\n  \"Balfai, Bhutan\",\n  \"Ghunkarah, Bhutan\",\n  \"Ngalangkang, Bhutan\",\n  \"Rungzyung, Bhutan\",\n  \"Sassi, Bhutan\",\n  \"Thrimshing, Bhutan\",\n  \"Trashigang, Bhutan\",\n  \"Wamrong, Bhutan\",\n  \"Trongsa, Bhutan\",\n  \"Beteni, Bhutan\",\n  \"Dagapela, Bhutan\",\n  \"Damphu, Bhutan\",\n  \"Tsirang, Bhutan\",\n  \"Manikyangsa, Bhutan\",\n  \"Ritang, Bhutan\",\n  \"Wangdue Phodrang, Bhutan\",\n  \"Panbang, Bhutan\",\n  \"Zhemgang, Bhutan\",\n  \"Guayaramerín, Bolivia\",\n  \"Provincia Cercado, Bolivia\",\n  \"Provincia General José Ballivián, Bolivia\",\n  \"Provincia Iténez, Bolivia\",\n  \"Provincia Mamoré, Bolivia\",\n  \"Provincia Marbán, Bolivia\",\n  \"Provincia Moxos, Bolivia\",\n  \"Provincia Vaca Diez, Bolivia\",\n  \"Provincia Yacuma, Bolivia\",\n  \"Reyes, Bolivia\",\n  \"Riberalta, Bolivia\",\n  \"Rurrenabaque, Bolivia\",\n  \"San Borja, Bolivia\",\n  \"San Ramón, Bolivia\",\n  \"Santa Ana de Yacuma, Bolivia\",\n  \"Santa Rosa, Bolivia\",\n  \"Trinidad, Bolivia\",\n  \"Camargo, Bolivia\",\n  \"Monteagudo, Bolivia\",\n  \"Padilla, Bolivia\",\n  \"Provincia Azurduy, Bolivia\",\n  \"Provincia Belisario Boeto, Bolivia\",\n  \"Provincia Hernando Siles, Bolivia\",\n  \"Provincia Luis Calvo, Bolivia\",\n  \"Provincia Nor Cinti, Bolivia\",\n  \"Provincia Oropeza, Bolivia\",\n  \"Provincia Sud Cinti, Bolivia\",\n  \"Provincia Tomina, Bolivia\",\n  \"Provincia Yamparáez, Bolivia\",\n  \"Provincia Zudáñez, Bolivia\",\n  \"Sucre, Bolivia\",\n  \"Tarabuco, Bolivia\",\n  \"Aiquile, Bolivia\",\n  \"Arani, Bolivia\",\n  \"Bolivar, Bolivia\",\n  \"Capinota, Bolivia\",\n  \"Chimoré, Bolivia\",\n  \"Cliza, Bolivia\",\n  \"Cochabamba, Bolivia\",\n  \"Colchani, Bolivia\",\n  \"Colomi, Bolivia\",\n  \"Independencia, Bolivia\",\n  \"Irpa Irpa, Bolivia\",\n  \"Mizque, Bolivia\",\n  \"Provincia Arani, Bolivia\",\n  \"Provincia Arque, Bolivia\",\n  \"Provincia Ayopaya, Bolivia\",\n  \"Provincia Campero, Bolivia\",\n  \"Provincia Capinota, Bolivia\",\n  \"Provincia Carrasco, Bolivia\",\n  \"Provincia Cercado, Bolivia\",\n  \"Provincia Chaparé, Bolivia\",\n  \"Provincia Esteban Arce, Bolivia\",\n  \"Provincia Germán Jordán, Bolivia\",\n  \"Provincia Mizque, Bolivia\",\n  \"Provincia Punata, Bolivia\",\n  \"Provincia Quillacollo, Bolivia\",\n  \"Provincia Tapacarí, Bolivia\",\n  \"Punata, Bolivia\",\n  \"Quillacollo, Bolivia\",\n  \"Sacaba, Bolivia\",\n  \"Sipe Sipe, Bolivia\",\n  \"Tarata, Bolivia\",\n  \"Tiquipaya, Bolivia\",\n  \"Tiraque Province, Bolivia\",\n  \"Totora, Bolivia\",\n  \"Achacachi, Bolivia\",\n  \"Amarete, Bolivia\",\n  \"Batallas, Bolivia\",\n  \"Caranavi, Bolivia\",\n  \"Chulumani, Bolivia\",\n  \"Colquiri, Bolivia\",\n  \"Coripata, Bolivia\",\n  \"Coroico, Bolivia\",\n  \"Curahuara de Carangas, Bolivia\",\n  \"Eucaliptus, Bolivia\",\n  \"Guanay, Bolivia\",\n  \"Huarina, Bolivia\",\n  \"Huatajata, Bolivia\",\n  \"José Manuel Pando, Bolivia\",\n  \"La Paz, Bolivia\",\n  \"Lahuachaca, Bolivia\",\n  \"Mapiri, Bolivia\",\n  \"Patacamaya, Bolivia\",\n  \"Provincia Aroma, Bolivia\",\n  \"Provincia Bautista Saavedra, Bolivia\",\n  \"Provincia Camacho, Bolivia\",\n  \"Provincia Franz Tamayo, Bolivia\",\n  \"Provincia Gualberto Villarroel, Bolivia\",\n  \"Provincia Ingavi, Bolivia\",\n  \"Provincia Inquisivi, Bolivia\",\n  \"Provincia Iturralde, Bolivia\",\n  \"Provincia Larecaja, Bolivia\",\n  \"Provincia Loayza, Bolivia\",\n  \"Provincia Los Andes, Bolivia\",\n  \"Provincia Manco Kapac, Bolivia\",\n  \"Provincia Muñecas, Bolivia\",\n  \"Provincia Murillo, Bolivia\",\n  \"Provincia Nor Yungas, Bolivia\",\n  \"Provincia Omasuyos, Bolivia\",\n  \"Provincia Pacajes, Bolivia\",\n  \"Provincia Sud Yungas, Bolivia\",\n  \"Quime, Bolivia\",\n  \"San Pablo, Bolivia\",\n  \"San Pedro, Bolivia\",\n  \"Sorata, Bolivia\",\n  \"Tiahuanaco, Bolivia\",\n  \"Viloco, Bolivia\",\n  \"Yumani, Bolivia\",\n  \"Challapata, Bolivia\",\n  \"Huanuni, Bolivia\",\n  \"Litoral de Atacama, Bolivia\",\n  \"Machacamarca, Bolivia\",\n  \"Nor Carangas Province, Bolivia\",\n  \"Oruro, Bolivia\",\n  \"Poopó, Bolivia\",\n  \"Provincia Avaroa, Bolivia\",\n  \"Provincia Carangas, Bolivia\",\n  \"Provincia Cercado, Bolivia\",\n  \"Provincia Ladislao Cabrera, Bolivia\",\n  \"Provincia Pantaleón Dalence, Bolivia\",\n  \"Provincia Poopó, Bolivia\",\n  \"Provincia Sabaya, Bolivia\",\n  \"Provincia Sajama, Bolivia\",\n  \"Provincia San Pedro de Totora, Bolivia\",\n  \"Provincia Saucari, Bolivia\",\n  \"Provincia Tomás Barron, Bolivia\",\n  \"Puerto de Mejillones, Bolivia\",\n  \"Sebastian Pagador Province, Bolivia\",\n  \"Sud Carangas Province, Bolivia\",\n  \"Totoral, Bolivia\",\n  \"Cobija, Bolivia\",\n  \"Provincia Abuná, Bolivia\",\n  \"Provincia General Federico Román, Bolivia\",\n  \"Provincia Madre de Dios, Bolivia\",\n  \"Provincia Manuripi, Bolivia\",\n  \"Provincia Nicolás Suárez, Bolivia\",\n  \"Atocha, Bolivia\",\n  \"Betanzos, Bolivia\",\n  \"Colchani, Bolivia\",\n  \"Colquechaca, Bolivia\",\n  \"Enrique Baldivieso, Bolivia\",\n  \"Llallagua, Bolivia\",\n  \"Potosí, Bolivia\",\n  \"Provincia Alonzo de Ibáñez, Bolivia\",\n  \"Provincia Charcas, Bolivia\",\n  \"Provincia Chayanta, Bolivia\",\n  \"Provincia Daniel Campos, Bolivia\",\n  \"Provincia General Bilbao, Bolivia\",\n  \"Provincia Linares, Bolivia\",\n  \"Provincia Modesto Omiste, Bolivia\",\n  \"Provincia Nor Chichas, Bolivia\",\n  \"Provincia Nor Lípez, Bolivia\",\n  \"Provincia Quijarro, Bolivia\",\n  \"Provincia Rafael Bustillo, Bolivia\",\n  \"Provincia Saavedra, Bolivia\",\n  \"Provincia Sud Chichas, Bolivia\",\n  \"Provincia Sud Lípez, Bolivia\",\n  \"Provincia Tomás Frías, Bolivia\",\n  \"Santa Bárbara, Bolivia\",\n  \"Tupiza, Bolivia\",\n  \"Uyuni, Bolivia\",\n  \"Villazón, Bolivia\",\n  \"Abapó, Bolivia\",\n  \"Ascención de Guarayos, Bolivia\",\n  \"Ascensión, Bolivia\",\n  \"Boyuibe, Bolivia\",\n  \"Buena Vista, Bolivia\",\n  \"Camiri, Bolivia\",\n  \"Charagua, Bolivia\",\n  \"Comarapa, Bolivia\",\n  \"Concepción, Bolivia\",\n  \"Cotoca, Bolivia\",\n  \"German Busch, Bolivia\",\n  \"Guarayos, Bolivia\",\n  \"Jorochito, Bolivia\",\n  \"La Bélgica, Bolivia\",\n  \"Limoncito, Bolivia\",\n  \"Los Negros, Bolivia\",\n  \"Mairana, Bolivia\",\n  \"Mineros, Bolivia\",\n  \"Montero, Bolivia\",\n  \"Okinawa Número Uno, Bolivia\",\n  \"Pailón, Bolivia\",\n  \"Paurito, Bolivia\",\n  \"Portachuelo, Bolivia\",\n  \"Provincia Andrés Ibáñez, Bolivia\",\n  \"Provincia Ángel Sandoval, Bolivia\",\n  \"Provincia Chiquitos, Bolivia\",\n  \"Provincia Cordillera, Bolivia\",\n  \"Provincia Florida, Bolivia\",\n  \"Provincia Ichilo, Bolivia\",\n  \"Provincia Manuel María Caballero, Bolivia\",\n  \"Provincia Ñuflo de Chávez, Bolivia\",\n  \"Provincia Santiesteban, Bolivia\",\n  \"Provincia Sara, Bolivia\",\n  \"Provincia Vallegrande, Bolivia\",\n  \"Provincia Velasco, Bolivia\",\n  \"Provincia Warnes, Bolivia\",\n  \"Puerto Quijarro, Bolivia\",\n  \"Puesto de Pailas, Bolivia\",\n  \"Roboré, Bolivia\",\n  \"Samaipata, Bolivia\",\n  \"San Carlos, Bolivia\",\n  \"San Ignacio de Velasco, Bolivia\",\n  \"San Juan del Surutú, Bolivia\",\n  \"San Julian, Bolivia\",\n  \"San Matías, Bolivia\",\n  \"San Pedro, Bolivia\",\n  \"Santa Cruz de la Sierra, Bolivia\",\n  \"Santa Rita, Bolivia\",\n  \"Santa Rosa del Sara, Bolivia\",\n  \"Santiago del Torno, Bolivia\",\n  \"Urubichá, Bolivia\",\n  \"Vallegrande, Bolivia\",\n  \"Villa Yapacaní, Bolivia\",\n  \"Warnes, Bolivia\",\n  \"Bermejo, Bolivia\",\n  \"Entre Ríos, Bolivia\",\n  \"Provincia Arce, Bolivia\",\n  \"Provincia Avilez, Bolivia\",\n  \"Provincia Cercado, Bolivia\",\n  \"Provincia Gran Chaco, Bolivia\",\n  \"Provincia Méndez, Bolivia\",\n  \"Provincia O’Connor, Bolivia\",\n  \"Tarija, Bolivia\",\n  \"Villamontes, Bolivia\",\n  \"Yacuiba, Bolivia\",\n  \"Brčko, Bosnia and Herzegovina\",\n  \"Brka, Bosnia and Herzegovina\",\n  \"Banovići, Bosnia and Herzegovina\",\n  \"Barice, Bosnia and Herzegovina\",\n  \"Bihać, Bosnia and Herzegovina\",\n  \"Bijela, Bosnia and Herzegovina\",\n  \"Bila, Bosnia and Herzegovina\",\n  \"Blagaj, Bosnia and Herzegovina\",\n  \"Bosanska Krupa, Bosnia and Herzegovina\",\n  \"Bosanski Petrovac, Bosnia and Herzegovina\",\n  \"Bosansko Grahovo, Bosnia and Herzegovina\",\n  \"Breza, Bosnia and Herzegovina\",\n  \"Bugojno, Bosnia and Herzegovina\",\n  \"Busovača, Bosnia and Herzegovina\",\n  \"Bužim, Bosnia and Herzegovina\",\n  \"Čapljina, Bosnia and Herzegovina\",\n  \"Cazin, Bosnia and Herzegovina\",\n  \"Čelić, Bosnia and Herzegovina\",\n  \"Cim, Bosnia and Herzegovina\",\n  \"Čitluk, Bosnia and Herzegovina\",\n  \"Ćoralići, Bosnia and Herzegovina\",\n  \"Crnići, Bosnia and Herzegovina\",\n  \"Divičani, Bosnia and Herzegovina\",\n  \"Dobrinje, Bosnia and Herzegovina\",\n  \"Domaljevac, Bosnia and Herzegovina\",\n  \"Donja Dubica, Bosnia and Herzegovina\",\n  \"Donja Mahala, Bosnia and Herzegovina\",\n  \"Donja Međiđa, Bosnia and Herzegovina\",\n  \"Donji Vakuf, Bosnia and Herzegovina\",\n  \"Drežnica, Bosnia and Herzegovina\",\n  \"Drinovci, Bosnia and Herzegovina\",\n  \"Drvar, Bosnia and Herzegovina\",\n  \"Dubrave Donje, Bosnia and Herzegovina\",\n  \"Dubrave Gornje, Bosnia and Herzegovina\",\n  \"Dubravica, Bosnia and Herzegovina\",\n  \"Fojnica, Bosnia and Herzegovina\",\n  \"Glamoč, Bosnia and Herzegovina\",\n  \"Gnojnica, Bosnia and Herzegovina\",\n  \"Goražde, Bosnia and Herzegovina\",\n  \"Gorica, Bosnia and Herzegovina\",\n  \"Gornja Breza, Bosnia and Herzegovina\",\n  \"Gornja Koprivna, Bosnia and Herzegovina\",\n  \"Gornja Tuzla, Bosnia and Herzegovina\",\n  \"Gornje Moštre, Bosnia and Herzegovina\",\n  \"Gornje Živinice, Bosnia and Herzegovina\",\n  \"Gornji Vakuf, Bosnia and Herzegovina\",\n  \"Gostovići, Bosnia and Herzegovina\",\n  \"Gračanica, Bosnia and Herzegovina\",\n  \"Gradačac, Bosnia and Herzegovina\",\n  \"Gromiljak, Bosnia and Herzegovina\",\n  \"Grude, Bosnia and Herzegovina\",\n  \"Hadžići, Bosnia and Herzegovina\",\n  \"Hercegovačko-Neretvanski Kanton, Bosnia and Herzegovina\",\n  \"Hotonj, Bosnia and Herzegovina\",\n  \"Ilići, Bosnia and Herzegovina\",\n  \"Ilijaš, Bosnia and Herzegovina\",\n  \"Izačić, Bosnia and Herzegovina\",\n  \"Jablanica, Bosnia and Herzegovina\",\n  \"Jajce, Bosnia and Herzegovina\",\n  \"Jelah, Bosnia and Herzegovina\",\n  \"Jezerski, Bosnia and Herzegovina\",\n  \"Kačuni, Bosnia and Herzegovina\",\n  \"Kakanj, Bosnia and Herzegovina\",\n  \"Kanton Sarajevo, Bosnia and Herzegovina\",\n  \"Karadaglije, Bosnia and Herzegovina\",\n  \"Kiseljak, Bosnia and Herzegovina\",\n  \"Kladanj, Bosnia and Herzegovina\",\n  \"Ključ, Bosnia and Herzegovina\",\n  \"Kobilja Glava, Bosnia and Herzegovina\",\n  \"Kočerin, Bosnia and Herzegovina\",\n  \"Konjic, Bosnia and Herzegovina\",\n  \"Kovači, Bosnia and Herzegovina\",\n  \"Liješnica, Bosnia and Herzegovina\",\n  \"Livno, Bosnia and Herzegovina\",\n  \"Ljubuški, Bosnia and Herzegovina\",\n  \"Lokvine, Bosnia and Herzegovina\",\n  \"Lukavac, Bosnia and Herzegovina\",\n  \"Lukavica, Bosnia and Herzegovina\",\n  \"Maglaj, Bosnia and Herzegovina\",\n  \"Mahala, Bosnia and Herzegovina\",\n  \"Mala Kladuša, Bosnia and Herzegovina\",\n  \"Malešići, Bosnia and Herzegovina\",\n  \"Mionica, Bosnia and Herzegovina\",\n  \"Mostar, Bosnia and Herzegovina\",\n  \"Mramor, Bosnia and Herzegovina\",\n  \"Neum, Bosnia and Herzegovina\",\n  \"Novi Šeher, Bosnia and Herzegovina\",\n  \"Novi Travnik, Bosnia and Herzegovina\",\n  \"Odžak, Bosnia and Herzegovina\",\n  \"Olovo, Bosnia and Herzegovina\",\n  \"Omanjska, Bosnia and Herzegovina\",\n  \"Orahovica Donja, Bosnia and Herzegovina\",\n  \"Orašac, Bosnia and Herzegovina\",\n  \"Orašje, Bosnia and Herzegovina\",\n  \"Orguz, Bosnia and Herzegovina\",\n  \"Ostrožac, Bosnia and Herzegovina\",\n  \"Otoka, Bosnia and Herzegovina\",\n  \"Pajić Polje, Bosnia and Herzegovina\",\n  \"Pazarić, Bosnia and Herzegovina\",\n  \"Peći, Bosnia and Herzegovina\",\n  \"Pećigrad, Bosnia and Herzegovina\",\n  \"Pjanići, Bosnia and Herzegovina\",\n  \"Podhum, Bosnia and Herzegovina\",\n  \"Podzvizd, Bosnia and Herzegovina\",\n  \"Polje, Bosnia and Herzegovina\",\n  \"Polje-Bijela, Bosnia and Herzegovina\",\n  \"Potoci, Bosnia and Herzegovina\",\n  \"Prozor, Bosnia and Herzegovina\",\n  \"Puračić, Bosnia and Herzegovina\",\n  \"Radišići, Bosnia and Herzegovina\",\n  \"Rodoč, Bosnia and Herzegovina\",\n  \"Rumboci, Bosnia and Herzegovina\",\n  \"Sanica, Bosnia and Herzegovina\",\n  \"Sanski Most, Bosnia and Herzegovina\",\n  \"Sapna, Bosnia and Herzegovina\",\n  \"Sarajevo, Bosnia and Herzegovina\",\n  \"Šerići, Bosnia and Herzegovina\",\n  \"Široki Brijeg, Bosnia and Herzegovina\",\n  \"Skokovi, Bosnia and Herzegovina\",\n  \"Sladna, Bosnia and Herzegovina\",\n  \"Solina, Bosnia and Herzegovina\",\n  \"Srebrenik, Bosnia and Herzegovina\",\n  \"Stijena, Bosnia and Herzegovina\",\n  \"Stjepan-Polje, Bosnia and Herzegovina\",\n  \"Stolac, Bosnia and Herzegovina\",\n  \"Šturlić, Bosnia and Herzegovina\",\n  \"Šumatac, Bosnia and Herzegovina\",\n  \"Tasovčići, Bosnia and Herzegovina\",\n  \"Tešanj, Bosnia and Herzegovina\",\n  \"Tešanjka, Bosnia and Herzegovina\",\n  \"Todorovo, Bosnia and Herzegovina\",\n  \"Tojšići, Bosnia and Herzegovina\",\n  \"Tomislavgrad, Bosnia and Herzegovina\",\n  \"Travnik, Bosnia and Herzegovina\",\n  \"Tržačka Raštela, Bosnia and Herzegovina\",\n  \"Turbe, Bosnia and Herzegovina\",\n  \"Tuzla, Bosnia and Herzegovina\",\n  \"Ustikolina, Bosnia and Herzegovina\",\n  \"Vareš, Bosnia and Herzegovina\",\n  \"Varoška Rijeka, Bosnia and Herzegovina\",\n  \"Velagići, Bosnia and Herzegovina\",\n  \"Velika Kladuša, Bosnia and Herzegovina\",\n  \"Vidoši, Bosnia and Herzegovina\",\n  \"Visoko, Bosnia and Herzegovina\",\n  \"Vitez, Bosnia and Herzegovina\",\n  \"Vitina, Bosnia and Herzegovina\",\n  \"Vogošća, Bosnia and Herzegovina\",\n  \"Voljevac, Bosnia and Herzegovina\",\n  \"Vrnograč, Bosnia and Herzegovina\",\n  \"Vukovije Donje, Bosnia and Herzegovina\",\n  \"Zabrišće, Bosnia and Herzegovina\",\n  \"Zavidovići, Bosnia and Herzegovina\",\n  \"Zborište, Bosnia and Herzegovina\",\n  \"Željezno Polje, Bosnia and Herzegovina\",\n  \"Zenica, Bosnia and Herzegovina\",\n  \"Žepče, Bosnia and Herzegovina\",\n  \"Živinice, Bosnia and Herzegovina\",\n  \"Balatun, Bosnia and Herzegovina\",\n  \"Banja Luka, Bosnia and Herzegovina\",\n  \"Bijeljina, Bosnia and Herzegovina\",\n  \"Bileća, Bosnia and Herzegovina\",\n  \"Blatnica, Bosnia and Herzegovina\",\n  \"Brod, Bosnia and Herzegovina\",\n  \"Bronzani Majdan, Bosnia and Herzegovina\",\n  \"Čajniče, Bosnia and Herzegovina\",\n  \"Čečava, Bosnia and Herzegovina\",\n  \"Čelinac, Bosnia and Herzegovina\",\n  \"Derventa, Bosnia and Herzegovina\",\n  \"Doboj, Bosnia and Herzegovina\",\n  \"Dobrljin, Bosnia and Herzegovina\",\n  \"Dvorovi, Bosnia and Herzegovina\",\n  \"Foča, Bosnia and Herzegovina\",\n  \"Gacko, Bosnia and Herzegovina\",\n  \"Gradiška, Bosnia and Herzegovina\",\n  \"Hiseti, Bosnia and Herzegovina\",\n  \"Istočni Mostar, Bosnia and Herzegovina\",\n  \"Janja, Bosnia and Herzegovina\",\n  \"Kalenderovci Donji, Bosnia and Herzegovina\",\n  \"Kneževo, Bosnia and Herzegovina\",\n  \"Knežica, Bosnia and Herzegovina\",\n  \"Koran, Bosnia and Herzegovina\",\n  \"Kostajnica, Bosnia and Herzegovina\",\n  \"Kotor Varoš, Bosnia and Herzegovina\",\n  \"Kozarska Dubica, Bosnia and Herzegovina\",\n  \"Krupa na Vrbasu, Bosnia and Herzegovina\",\n  \"Laktaši, Bosnia and Herzegovina\",\n  \"Lamovita, Bosnia and Herzegovina\",\n  \"Ljubinje, Bosnia and Herzegovina\",\n  \"Lopare, Bosnia and Herzegovina\",\n  \"Maglajani, Bosnia and Herzegovina\",\n  \"Marićka, Bosnia and Herzegovina\",\n  \"Maslovare, Bosnia and Herzegovina\",\n  \"Mejdan - Obilićevo, Bosnia and Herzegovina\",\n  \"Milići, Bosnia and Herzegovina\",\n  \"Modriča, Bosnia and Herzegovina\",\n  \"Mrkonjić Grad, Bosnia and Herzegovina\",\n  \"Nevesinje, Bosnia and Herzegovina\",\n  \"Novi Grad, Bosnia and Herzegovina\",\n  \"Obudovac, Bosnia and Herzegovina\",\n  \"Omarska, Bosnia and Herzegovina\",\n  \"Opština Oštra Luka, Bosnia and Herzegovina\",\n  \"Opština Višegrad, Bosnia and Herzegovina\",\n  \"Oštra Luka, Bosnia and Herzegovina\",\n  \"Pale, Bosnia and Herzegovina\",\n  \"Pelagićevo, Bosnia and Herzegovina\",\n  \"Petkovci, Bosnia and Herzegovina\",\n  \"Piskavica, Bosnia and Herzegovina\",\n  \"Podbrdo, Bosnia and Herzegovina\",\n  \"Popovi, Bosnia and Herzegovina\",\n  \"Pribinić, Bosnia and Herzegovina\",\n  \"Priboj, Bosnia and Herzegovina\",\n  \"Prijedor, Bosnia and Herzegovina\",\n  \"Rogatica, Bosnia and Herzegovina\",\n  \"Rudo, Bosnia and Herzegovina\",\n  \"Šamac, Bosnia and Herzegovina\",\n  \"Šekovići, Bosnia and Herzegovina\",\n  \"Šipovo, Bosnia and Herzegovina\",\n  \"Sokolac, Bosnia and Herzegovina\",\n  \"Srbac, Bosnia and Herzegovina\",\n  \"Srebrenica, Bosnia and Herzegovina\",\n  \"Stanari, Bosnia and Herzegovina\",\n  \"Starcevica, Bosnia and Herzegovina\",\n  \"Svodna, Bosnia and Herzegovina\",\n  \"Teslić, Bosnia and Herzegovina\",\n  \"Trebinje, Bosnia and Herzegovina\",\n  \"Trn, Bosnia and Herzegovina\",\n  \"Ugljevik, Bosnia and Herzegovina\",\n  \"Velika Obarska, Bosnia and Herzegovina\",\n  \"Višegrad, Bosnia and Herzegovina\",\n  \"Vlasenica, Bosnia and Herzegovina\",\n  \"Živinice, Bosnia and Herzegovina\",\n  \"Zvornik, Bosnia and Herzegovina\",\n  \"Gobojango, Botswana\",\n  \"Gweta, Botswana\",\n  \"Kalamare, Botswana\",\n  \"Letlhakane, Botswana\",\n  \"Letsheng, Botswana\",\n  \"Maapi, Botswana\",\n  \"Machaneng, Botswana\",\n  \"Mahalapye, Botswana\",\n  \"Makobeng, Botswana\",\n  \"Makwata, Botswana\",\n  \"Mathakola, Botswana\",\n  \"Mathambgwane, Botswana\",\n  \"Mathathane, Botswana\",\n  \"Maunatlala, Botswana\",\n  \"Mogapi, Botswana\",\n  \"Moijabana, Botswana\",\n  \"Mookane, Botswana\",\n  \"Mopipi, Botswana\",\n  \"Mosetse, Botswana\",\n  \"Nata, Botswana\",\n  \"Orapa, Botswana\",\n  \"Palapye, Botswana\",\n  \"Pilikwe, Botswana\",\n  \"Rakops, Botswana\",\n  \"Ramokgonami, Botswana\",\n  \"Ratholo, Botswana\",\n  \"Sefophe, Botswana\",\n  \"Serowe, Botswana\",\n  \"Sua, Botswana\",\n  \"Tamasane, Botswana\",\n  \"Tobane, Botswana\",\n  \"Tonota, Botswana\",\n  \"Dekar, Botswana\",\n  \"Ghanzi, Botswana\",\n  \"Hukuntsi, Botswana\",\n  \"Kang, Botswana\",\n  \"Lehututu, Botswana\",\n  \"Manyana, Botswana\",\n  \"Tshabong, Botswana\",\n  \"Werda, Botswana\",\n  \"Bokaa, Botswana\",\n  \"Mmathubudukwane, Botswana\",\n  \"Mochudi, Botswana\",\n  \"Pilane, Botswana\",\n  \"Botlhapatlou, Botswana\",\n  \"Dutlwe, Botswana\",\n  \"Gabane, Botswana\",\n  \"Gaphatshwe, Botswana\",\n  \"Khudumelapye, Botswana\",\n  \"Lenchwe Le Tau, Botswana\",\n  \"Letlhakeng, Botswana\",\n  \"Metsemotlhaba, Botswana\",\n  \"Mmopone, Botswana\",\n  \"Mogoditshane, Botswana\",\n  \"Molepolole, Botswana\",\n  \"Nkoyaphiri, Botswana\",\n  \"Thamaga, Botswana\",\n  \"Dukwe, Botswana\",\n  \"Makaleng, Botswana\",\n  \"Masunga, Botswana\",\n  \"Sebina, Botswana\",\n  \"Maun, Botswana\",\n  \"Nokaneng, Botswana\",\n  \"Pandamatenga, Botswana\",\n  \"Sehithwa, Botswana\",\n  \"Shakawe, Botswana\",\n  \"Gaborone, Botswana\",\n  \"Janeng, Botswana\",\n  \"Kopong, Botswana\",\n  \"Otse, Botswana\",\n  \"Ramotswa, Botswana\",\n  \"Kanye, Botswana\",\n  \"Khakhea, Botswana\",\n  \"Mosopa, Botswana\",\n  \"Sekoma, Botswana\",\n  \"Acrelândia, Brazil\",\n  \"Assis Brasil, Brazil\",\n  \"Brasiléia, Brazil\",\n  \"Bujari, Brazil\",\n  \"Capixaba, Brazil\",\n  \"Cruzeiro do Sul, Brazil\",\n  \"Epitaciolândia, Brazil\",\n  \"Feijó, Brazil\",\n  \"Jordão, Brazil\",\n  \"Mâncio Lima, Brazil\",\n  \"Manoel Urbano, Brazil\",\n  \"Marechal Thaumaturgo, Brazil\",\n  \"Plácido de Castro, Brazil\",\n  \"Porto Acre, Brazil\",\n  \"Porto Walter, Brazil\",\n  \"Rio Branco, Brazil\",\n  \"Rodrigues Alves, Brazil\",\n  \"Santa Rosa do Purus, Brazil\",\n  \"Sena Madureira, Brazil\",\n  \"Senador Guiomard, Brazil\",\n  \"Tarauacá, Brazil\",\n  \"Xapuri, Brazil\",\n  \"Água Branca, Brazil\",\n  \"Anadia, Brazil\",\n  \"Arapiraca, Brazil\",\n  \"Atalaia, Brazil\",\n  \"Barra de Santo Antônio, Brazil\",\n  \"Barra de São Miguel, Brazil\",\n  \"Batalha, Brazil\",\n  \"Belém, Brazil\",\n  \"Belo Monte, Brazil\",\n  \"Boca da Mata, Brazil\",\n  \"Branquinha, Brazil\",\n  \"Cacimbinhas, Brazil\",\n  \"Cajueiro, Brazil\",\n  \"Campestre, Brazil\",\n  \"Campo Alegre, Brazil\",\n  \"Campo Grande, Brazil\",\n  \"Canapi, Brazil\",\n  \"Capela, Brazil\",\n  \"Carneiros, Brazil\",\n  \"Chã Preta, Brazil\",\n  \"Coité do Nóia, Brazil\",\n  \"Colônia Leopoldina, Brazil\",\n  \"Coqueiro Seco, Brazil\",\n  \"Coruripe, Brazil\",\n  \"Craíbas, Brazil\",\n  \"Delmiro Gouveia, Brazil\",\n  \"Dois Riachos, Brazil\",\n  \"Estrela de Alagoas, Brazil\",\n  \"Feira Grande, Brazil\",\n  \"Feliz Deserto, Brazil\",\n  \"Flexeiras, Brazil\",\n  \"Girau do Ponciano, Brazil\",\n  \"Ibateguara, Brazil\",\n  \"Igaci, Brazil\",\n  \"Igreja Nova, Brazil\",\n  \"Inhapi, Brazil\",\n  \"Jacaré dos Homens, Brazil\",\n  \"Jacuípe, Brazil\",\n  \"Japaratinga, Brazil\",\n  \"Jaramataia, Brazil\",\n  \"Jequiá da Praia, Brazil\",\n  \"Joaquim Gomes, Brazil\",\n  \"Jundiá, Brazil\",\n  \"Junqueiro, Brazil\",\n  \"Lagoa da Canoa, Brazil\",\n  \"Limoeiro de Anadia, Brazil\",\n  \"Maceió, Brazil\",\n  \"Major Isidoro, Brazil\",\n  \"Mar Vermelho, Brazil\",\n  \"Maragogi, Brazil\",\n  \"Maravilha, Brazil\",\n  \"Marechal Deodoro, Brazil\",\n  \"Maribondo, Brazil\",\n  \"Mata Grande, Brazil\",\n  \"Matriz de Camaragibe, Brazil\",\n  \"Messias, Brazil\",\n  \"Minador do Negrão, Brazil\",\n  \"Monteirópolis, Brazil\",\n  \"Murici, Brazil\",\n  \"Novo Lino, Brazil\",\n  \"Olho d'Água das Flores, Brazil\",\n  \"Olho d'Água do Casado, Brazil\",\n  \"Olho d'Água Grande, Brazil\",\n  \"Olivença, Brazil\",\n  \"Ouro Branco, Brazil\",\n  \"Palestina, Brazil\",\n  \"Palmeira dos Índios, Brazil\",\n  \"Pão de Açúcar, Brazil\",\n  \"Pariconha, Brazil\",\n  \"Paripueira, Brazil\",\n  \"Passo de Camaragibe, Brazil\",\n  \"Paulo Jacinto, Brazil\",\n  \"Penedo, Brazil\",\n  \"Piaçabuçu, Brazil\",\n  \"Pilar, Brazil\",\n  \"Pindoba, Brazil\",\n  \"Piranhas, Brazil\",\n  \"Poço das Trincheiras, Brazil\",\n  \"Porto Calvo, Brazil\",\n  \"Porto de Pedras, Brazil\",\n  \"Porto Real do Colégio, Brazil\",\n  \"Quebrangulo, Brazil\",\n  \"Rio Largo, Brazil\",\n  \"Roteiro, Brazil\",\n  \"Santa Luzia do Norte, Brazil\",\n  \"Santana do Ipanema, Brazil\",\n  \"Santana do Mundaú, Brazil\",\n  \"São Brás, Brazil\",\n  \"São José da Laje, Brazil\",\n  \"São José da Tapera, Brazil\",\n  \"São Luís do Quitunde, Brazil\",\n  \"São Miguel dos Campos, Brazil\",\n  \"São Miguel dos Milagres, Brazil\",\n  \"São Sebastião, Brazil\",\n  \"Satuba, Brazil\",\n  \"Senador Rui Palmeira, Brazil\",\n  \"Tanque d'Arca, Brazil\",\n  \"Taquarana, Brazil\",\n  \"Teotônio Vilela, Brazil\",\n  \"Traipu, Brazil\",\n  \"União dos Palmares, Brazil\",\n  \"Viçosa, Brazil\",\n  \"Amapá, Brazil\",\n  \"Calçoene, Brazil\",\n  \"Cutias, Brazil\",\n  \"Ferreira Gomes, Brazil\",\n  \"Itaubal, Brazil\",\n  \"Laranjal do Jari, Brazil\",\n  \"Macapá, Brazil\",\n  \"Mazagão, Brazil\",\n  \"Oiapoque, Brazil\",\n  \"Pedra Branca do Amapari, Brazil\",\n  \"Porto Grande, Brazil\",\n  \"Pracuúba, Brazil\",\n  \"Santana, Brazil\",\n  \"Serra do Navio, Brazil\",\n  \"Tartarugalzinho, Brazil\",\n  \"Vitória do Jari, Brazil\",\n  \"Alvarães, Brazil\",\n  \"Amaturá, Brazil\",\n  \"Anamã, Brazil\",\n  \"Anori, Brazil\",\n  \"Apuí, Brazil\",\n  \"Atalaia do Norte, Brazil\",\n  \"Autazes, Brazil\",\n  \"Barcelos, Brazil\",\n  \"Barreirinha, Brazil\",\n  \"Benjamin Constant, Brazil\",\n  \"Beruri, Brazil\",\n  \"Boa Vista do Ramos, Brazil\",\n  \"Boca do Acre, Brazil\",\n  \"Borba, Brazil\",\n  \"Caapiranga, Brazil\",\n  \"Canutama, Brazil\",\n  \"Carauari, Brazil\",\n  \"Careiro, Brazil\",\n  \"Careiro da Várzea, Brazil\",\n  \"Coari, Brazil\",\n  \"Codajás, Brazil\",\n  \"Eirunepé, Brazil\",\n  \"Envira, Brazil\",\n  \"Fonte Boa, Brazil\",\n  \"Guajará, Brazil\",\n  \"Humaitá, Brazil\",\n  \"Ipixuna, Brazil\",\n  \"Iranduba, Brazil\",\n  \"Itacoatiara, Brazil\",\n  \"Itamarati, Brazil\",\n  \"Itapiranga, Brazil\",\n  \"Japurá, Brazil\",\n  \"Juruá, Brazil\",\n  \"Jutaí, Brazil\",\n  \"Lábrea, Brazil\",\n  \"Manacapuru, Brazil\",\n  \"Manaquiri, Brazil\",\n  \"Manaus, Brazil\",\n  \"Manicoré, Brazil\",\n  \"Maraã, Brazil\",\n  \"Maués, Brazil\",\n  \"Nhamundá, Brazil\",\n  \"Nova Olinda do Norte, Brazil\",\n  \"Novo Airão, Brazil\",\n  \"Novo Aripuanã, Brazil\",\n  \"Parintins, Brazil\",\n  \"Pauini, Brazil\",\n  \"Presidente Figueiredo, Brazil\",\n  \"Rio Preto da Eva, Brazil\",\n  \"Santa Isabel do Rio Negro, Brazil\",\n  \"Santo Antônio do Içá, Brazil\",\n  \"São Gabriel da Cachoeira, Brazil\",\n  \"São Paulo de Olivença, Brazil\",\n  \"São Sebastião do Uatumã, Brazil\",\n  \"Silves, Brazil\",\n  \"Tabatinga, Brazil\",\n  \"Tapauá, Brazil\",\n  \"Tefé, Brazil\",\n  \"Tonantins, Brazil\",\n  \"Uarini, Brazil\",\n  \"Urucará, Brazil\",\n  \"Urucurituba, Brazil\",\n  \"Abaíra, Brazil\",\n  \"Abaré, Brazil\",\n  \"Acajutiba, Brazil\",\n  \"Adustina, Brazil\",\n  \"Água Fria, Brazil\",\n  \"Aiquara, Brazil\",\n  \"Alagoinhas, Brazil\",\n  \"Alcobaça, Brazil\",\n  \"Almadina, Brazil\",\n  \"Amargosa, Brazil\",\n  \"Amélia Rodrigues, Brazil\",\n  \"América Dourada, Brazil\",\n  \"Anagé, Brazil\",\n  \"Andaraí, Brazil\",\n  \"Andorinha, Brazil\",\n  \"Angical, Brazil\",\n  \"Anguera, Brazil\",\n  \"Antas, Brazil\",\n  \"Antônio Cardoso, Brazil\",\n  \"Antônio Gonçalves, Brazil\",\n  \"Aporá, Brazil\",\n  \"Apuarema, Brazil\",\n  \"Araçás, Brazil\",\n  \"Aracatu, Brazil\",\n  \"Araci, Brazil\",\n  \"Aramari, Brazil\",\n  \"Arataca, Brazil\",\n  \"Aratuípe, Brazil\",\n  \"Aurelino Leal, Brazil\",\n  \"Baianópolis, Brazil\",\n  \"Baixa Grande, Brazil\",\n  \"Banzaê, Brazil\",\n  \"Barra, Brazil\",\n  \"Barra da Estiva, Brazil\",\n  \"Barra do Choça, Brazil\",\n  \"Barra do Mendes, Brazil\",\n  \"Barra do Rocha, Brazil\",\n  \"Barreiras, Brazil\",\n  \"Barro Alto, Brazil\",\n  \"Barro Preto, Brazil\",\n  \"Barrocas, Brazil\",\n  \"Beira Rio, Brazil\",\n  \"Belmonte, Brazil\",\n  \"Belo Campo, Brazil\",\n  \"Biritinga, Brazil\",\n  \"Boa Nova, Brazil\",\n  \"Boa Vista do Tupim, Brazil\",\n  \"Bom Jesus da Lapa, Brazil\",\n  \"Bom Jesus da Serra, Brazil\",\n  \"Boninal, Brazil\",\n  \"Bonito, Brazil\",\n  \"Boquira, Brazil\",\n  \"Botuporã, Brazil\",\n  \"Brejões, Brazil\",\n  \"Brejolândia, Brazil\",\n  \"Brotas de Macaúbas, Brazil\",\n  \"Brumado, Brazil\",\n  \"Buerarema, Brazil\",\n  \"Buritirama, Brazil\",\n  \"Caatiba, Brazil\",\n  \"Cabaceiras do Paraguaçu, Brazil\",\n  \"Cachoeira, Brazil\",\n  \"Caculé, Brazil\",\n  \"Caém, Brazil\",\n  \"Caetanos, Brazil\",\n  \"Caetité, Brazil\",\n  \"Cafarnaum, Brazil\",\n  \"Cairu, Brazil\",\n  \"Caldeirão Grande, Brazil\",\n  \"Camacan, Brazil\",\n  \"Camaçari, Brazil\",\n  \"Camamu, Brazil\",\n  \"Campo Alegre de Lourdes, Brazil\",\n  \"Campo Formoso, Brazil\",\n  \"Canápolis, Brazil\",\n  \"Canarana, Brazil\",\n  \"Canavieiras, Brazil\",\n  \"Candeal, Brazil\",\n  \"Candeias, Brazil\",\n  \"Candiba, Brazil\",\n  \"Cândido Sales, Brazil\",\n  \"Cansanção, Brazil\",\n  \"Canudos, Brazil\",\n  \"Capela do Alto Alegre, Brazil\",\n  \"Capim Grosso, Brazil\",\n  \"Caraíbas, Brazil\",\n  \"Caravelas, Brazil\",\n  \"Cardeal da Silva, Brazil\",\n  \"Carinhanha, Brazil\",\n  \"Casa Nova, Brazil\",\n  \"Castro Alves, Brazil\",\n  \"Catolândia, Brazil\",\n  \"Catu, Brazil\",\n  \"Caturama, Brazil\",\n  \"Central, Brazil\",\n  \"Chorrochó, Brazil\",\n  \"Cícero Dantas, Brazil\",\n  \"Cipó, Brazil\",\n  \"Coaraci, Brazil\",\n  \"Cocos, Brazil\",\n  \"Conceição da Feira, Brazil\",\n  \"Conceição do Almeida, Brazil\",\n  \"Conceição do Coité, Brazil\",\n  \"Conceição do Jacuípe, Brazil\",\n  \"Conde, Brazil\",\n  \"Condeúba, Brazil\",\n  \"Contendas do Sincorá, Brazil\",\n  \"Coração de Maria, Brazil\",\n  \"Cordeiros, Brazil\",\n  \"Coribe, Brazil\",\n  \"Coronel João Sá, Brazil\",\n  \"Correntina, Brazil\",\n  \"Cotegipe, Brazil\",\n  \"Cravolândia, Brazil\",\n  \"Crisópolis, Brazil\",\n  \"Cristópolis, Brazil\",\n  \"Cruz das Almas, Brazil\",\n  \"Curaçá, Brazil\",\n  \"Dário Meira, Brazil\",\n  \"Dias d'Ávila, Brazil\",\n  \"Dom Basílio, Brazil\",\n  \"Dom Macedo Costa, Brazil\",\n  \"Elísio Medrado, Brazil\",\n  \"Encruzilhada, Brazil\",\n  \"Entre Rios, Brazil\",\n  \"Érico Cardoso, Brazil\",\n  \"Esplanada, Brazil\",\n  \"Euclides da Cunha, Brazil\",\n  \"Eunápolis, Brazil\",\n  \"Fátima, Brazil\",\n  \"Feira da Mata, Brazil\",\n  \"Feira de Santana, Brazil\",\n  \"Filadélfia, Brazil\",\n  \"Firmino Alves, Brazil\",\n  \"Floresta Azul, Brazil\",\n  \"Formosa do Rio Preto, Brazil\",\n  \"Gandu, Brazil\",\n  \"Gavião, Brazil\",\n  \"Gentio do Ouro, Brazil\",\n  \"Glória, Brazil\",\n  \"Gongogi, Brazil\",\n  \"Governador Mangabeira, Brazil\",\n  \"Guajeru, Brazil\",\n  \"Guanambi, Brazil\",\n  \"Guaratinga, Brazil\",\n  \"Heliópolis, Brazil\",\n  \"Iaçu, Brazil\",\n  \"Ibiassucê, Brazil\",\n  \"Ibicaraí, Brazil\",\n  \"Ibicoara, Brazil\",\n  \"Ibicuí, Brazil\",\n  \"Ibipeba, Brazil\",\n  \"Ibipitanga, Brazil\",\n  \"Ibiquera, Brazil\",\n  \"Ibirapitanga, Brazil\",\n  \"Ibirapuã, Brazil\",\n  \"Ibirataia, Brazil\",\n  \"Ibitiara, Brazil\",\n  \"Ibititá, Brazil\",\n  \"Ibotirama, Brazil\",\n  \"Ichu, Brazil\",\n  \"Igaporã, Brazil\",\n  \"Igrapiúna, Brazil\",\n  \"Iguaí, Brazil\",\n  \"Ilhéus, Brazil\",\n  \"Inhambupe, Brazil\",\n  \"Ipecaetá, Brazil\",\n  \"Ipiaú, Brazil\",\n  \"Ipirá, Brazil\",\n  \"Ipupiara, Brazil\",\n  \"Irajuba, Brazil\",\n  \"Iramaia, Brazil\",\n  \"Iraquara, Brazil\",\n  \"Irará, Brazil\",\n  \"Irecê, Brazil\",\n  \"Itabela, Brazil\",\n  \"Itaberaba, Brazil\",\n  \"Itabuna, Brazil\",\n  \"Itacaré, Brazil\",\n  \"Itaeté, Brazil\",\n  \"Itagi, Brazil\",\n  \"Itagibá, Brazil\",\n  \"Itagimirim, Brazil\",\n  \"Itaguaçu da Bahia, Brazil\",\n  \"Itaju do Colônia, Brazil\",\n  \"Itajuípe, Brazil\",\n  \"Itamaraju, Brazil\",\n  \"Itamari, Brazil\",\n  \"Itambé, Brazil\",\n  \"Itanagra, Brazil\",\n  \"Itanhém, Brazil\",\n  \"Itaparica, Brazil\",\n  \"Itapé, Brazil\",\n  \"Itapebi, Brazil\",\n  \"Itapetinga, Brazil\",\n  \"Itapicuru, Brazil\",\n  \"Itapitanga, Brazil\",\n  \"Itaquara, Brazil\",\n  \"Itarantim, Brazil\",\n  \"Itatim, Brazil\",\n  \"Itiruçu, Brazil\",\n  \"Itiúba, Brazil\",\n  \"Itororó, Brazil\",\n  \"Ituaçu, Brazil\",\n  \"Ituberá, Brazil\",\n  \"Iuiu, Brazil\",\n  \"Jaborandi, Brazil\",\n  \"Jacaraci, Brazil\",\n  \"Jacobina, Brazil\",\n  \"Jaguaquara, Brazil\",\n  \"Jaguarari, Brazil\",\n  \"Jaguaripe, Brazil\",\n  \"Jandaíra, Brazil\",\n  \"Jequié, Brazil\",\n  \"Jeremoabo, Brazil\",\n  \"Jiquiriçá, Brazil\",\n  \"Jitaúna, Brazil\",\n  \"João Dourado, Brazil\",\n  \"Juazeiro, Brazil\",\n  \"Jucuruçu, Brazil\",\n  \"Jussara, Brazil\",\n  \"Jussari, Brazil\",\n  \"Jussiape, Brazil\",\n  \"Lafaiete Coutinho, Brazil\",\n  \"Lagoa Real, Brazil\",\n  \"Laje, Brazil\",\n  \"Lajedão, Brazil\",\n  \"Lajedinho, Brazil\",\n  \"Lajedo do Tabocal, Brazil\",\n  \"Lamarão, Brazil\",\n  \"Lapão, Brazil\",\n  \"Lauro de Freitas, Brazil\",\n  \"Lençóis, Brazil\",\n  \"Licínio de Almeida, Brazil\",\n  \"Livramento de Nossa Senhora, Brazil\",\n  \"Livramento do Brumado, Brazil\",\n  \"Luís Eduardo Magalhães, Brazil\",\n  \"Macajuba, Brazil\",\n  \"Macarani, Brazil\",\n  \"Macaúbas, Brazil\",\n  \"Macururé, Brazil\",\n  \"Madre de Deus, Brazil\",\n  \"Maetinga, Brazil\",\n  \"Maiquinique, Brazil\",\n  \"Mairi, Brazil\",\n  \"Malhada, Brazil\",\n  \"Malhada de Pedras, Brazil\",\n  \"Manoel Vitorino, Brazil\",\n  \"Mansidão, Brazil\",\n  \"Maracás, Brazil\",\n  \"Maragogipe, Brazil\",\n  \"Maraú, Brazil\",\n  \"Marcionílio Souza, Brazil\",\n  \"Mascote, Brazil\",\n  \"Mata de São João, Brazil\",\n  \"Matina, Brazil\",\n  \"Medeiros Neto, Brazil\",\n  \"Miguel Calmon, Brazil\",\n  \"Milagres, Brazil\",\n  \"Mirangaba, Brazil\",\n  \"Mirante, Brazil\",\n  \"Monte Santo, Brazil\",\n  \"Morpará, Brazil\",\n  \"Morro do Chapéu, Brazil\",\n  \"Mortugaba, Brazil\",\n  \"Mucugê, Brazil\",\n  \"Mucuri, Brazil\",\n  \"Mulungu do Morro, Brazil\",\n  \"Mundo Novo, Brazil\",\n  \"Muniz Ferreira, Brazil\",\n  \"Muquém de São Francisco, Brazil\",\n  \"Muritiba, Brazil\",\n  \"Mutuípe, Brazil\",\n  \"Nazaré, Brazil\",\n  \"Nilo Peçanha, Brazil\",\n  \"Nordestina, Brazil\",\n  \"Nova Canaã, Brazil\",\n  \"Nova Fátima, Brazil\",\n  \"Nova Ibiá, Brazil\",\n  \"Nova Itarana, Brazil\",\n  \"Nova Redenção, Brazil\",\n  \"Nova Soure, Brazil\",\n  \"Nova Viçosa, Brazil\",\n  \"Novo Horizonte, Brazil\",\n  \"Novo Triunfo, Brazil\",\n  \"Olindina, Brazil\",\n  \"Oliveira dos Brejinhos, Brazil\",\n  \"Ouriçangas, Brazil\",\n  \"Ourolândia, Brazil\",\n  \"Palmas de Monte Alto, Brazil\",\n  \"Palmeiras, Brazil\",\n  \"Paramirim, Brazil\",\n  \"Paratinga, Brazil\",\n  \"Paripiranga, Brazil\",\n  \"Pau Brasil, Brazil\",\n  \"Paulo Afonso, Brazil\",\n  \"Pé de Serra, Brazil\",\n  \"Pedrão, Brazil\",\n  \"Pedro Alexandre, Brazil\",\n  \"Piatã, Brazil\",\n  \"Pilão Arcado, Brazil\",\n  \"Pindaí, Brazil\",\n  \"Pindobaçu, Brazil\",\n  \"Pintadas, Brazil\",\n  \"Piraí do Norte, Brazil\",\n  \"Piripá, Brazil\",\n  \"Piritiba, Brazil\",\n  \"Planaltino, Brazil\",\n  \"Planalto, Brazil\",\n  \"Poções, Brazil\",\n  \"Pojuca, Brazil\",\n  \"Ponto Novo, Brazil\",\n  \"Porto Seguro, Brazil\",\n  \"Posto da Mata, Brazil\",\n  \"Potiraguá, Brazil\",\n  \"Prado, Brazil\",\n  \"Presidente Dutra, Brazil\",\n  \"Presidente Jânio Quadros, Brazil\",\n  \"Presidente Tancredo Neves, Brazil\",\n  \"Queimadas, Brazil\",\n  \"Quijingue, Brazil\",\n  \"Quixabeira, Brazil\",\n  \"Rafael Jambeiro, Brazil\",\n  \"Remanso, Brazil\",\n  \"Retirolândia, Brazil\",\n  \"Riachão das Neves, Brazil\",\n  \"Riachão do Jacuípe, Brazil\",\n  \"Riacho de Santana, Brazil\",\n  \"Ribeira do Amparo, Brazil\",\n  \"Ribeira do Pombal, Brazil\",\n  \"Ribeirão do Largo, Brazil\",\n  \"Rio de Contas, Brazil\",\n  \"Rio do Antônio, Brazil\",\n  \"Rio do Pires, Brazil\",\n  \"Rio Real, Brazil\",\n  \"Rodelas, Brazil\",\n  \"Ruy Barbosa, Brazil\",\n  \"Salinas da Margarida, Brazil\",\n  \"Salvador, Brazil\",\n  \"Santa Bárbara, Brazil\",\n  \"Santa Brígida, Brazil\",\n  \"Santa Cruz Cabrália, Brazil\",\n  \"Santa Cruz da Vitória, Brazil\",\n  \"Santa Inês, Brazil\",\n  \"Santa Luzia, Brazil\",\n  \"Santa Maria da Vitória, Brazil\",\n  \"Santa Rita de Cássia, Brazil\",\n  \"Santa Teresinha, Brazil\",\n  \"Santa Terezinha, Brazil\",\n  \"Santaluz, Brazil\",\n  \"Santana, Brazil\",\n  \"Santanópolis, Brazil\",\n  \"Santo Amaro, Brazil\",\n  \"Santo Antônio de Jesus, Brazil\",\n  \"Santo Estêvão, Brazil\",\n  \"São Desidério, Brazil\",\n  \"São Domingos, Brazil\",\n  \"São Felipe, Brazil\",\n  \"São Félix, Brazil\",\n  \"São Félix do Coribe, Brazil\",\n  \"São Francisco do Conde, Brazil\",\n  \"São Gabriel, Brazil\",\n  \"São Gonçalo dos Campos, Brazil\",\n  \"São José da Vitória, Brazil\",\n  \"São José do Jacuípe, Brazil\",\n  \"São Miguel das Matas, Brazil\",\n  \"São Sebastião do Passé, Brazil\",\n  \"Sapeaçu, Brazil\",\n  \"Sátiro Dias, Brazil\",\n  \"Saubara, Brazil\",\n  \"Saúde, Brazil\",\n  \"Seabra, Brazil\",\n  \"Sebastião Laranjeiras, Brazil\",\n  \"Senhor do Bonfim, Brazil\",\n  \"Sento Sé, Brazil\",\n  \"Serra do Ramalho, Brazil\",\n  \"Serra Dourada, Brazil\",\n  \"Serra Preta, Brazil\",\n  \"Serrinha, Brazil\",\n  \"Serrolândia, Brazil\",\n  \"Simões Filho, Brazil\",\n  \"Sítio do Mato, Brazil\",\n  \"Sítio do Quinto, Brazil\",\n  \"Sobradinho, Brazil\",\n  \"Souto Soares, Brazil\",\n  \"Tabocas do Brejo Velho, Brazil\",\n  \"Tanhaçu, Brazil\",\n  \"Tanque Novo, Brazil\",\n  \"Tanquinho, Brazil\",\n  \"Taperoá, Brazil\",\n  \"Tapiramutá, Brazil\",\n  \"Teixeira de Freitas, Brazil\",\n  \"Teodoro Sampaio, Brazil\",\n  \"Teofilândia, Brazil\",\n  \"Teolândia, Brazil\",\n  \"Terra Nova, Brazil\",\n  \"Tremedal, Brazil\",\n  \"Tucano, Brazil\",\n  \"Uauá, Brazil\",\n  \"Ubaíra, Brazil\",\n  \"Ubaitaba, Brazil\",\n  \"Ubatã, Brazil\",\n  \"Uibaí, Brazil\",\n  \"Umburanas, Brazil\",\n  \"Una, Brazil\",\n  \"Urandi, Brazil\",\n  \"Uruçuca, Brazil\",\n  \"Utinga, Brazil\",\n  \"Valença, Brazil\",\n  \"Valente, Brazil\",\n  \"Várzea da Roça, Brazil\",\n  \"Várzea do Poço, Brazil\",\n  \"Várzea Nova, Brazil\",\n  \"Varzedo, Brazil\",\n  \"Vera Cruz, Brazil\",\n  \"Vereda, Brazil\",\n  \"Vitória da Conquista, Brazil\",\n  \"Wagner, Brazil\",\n  \"Wanderley, Brazil\",\n  \"Wenceslau Guimarães, Brazil\",\n  \"Xique Xique, Brazil\",\n  \"Xique-Xique, Brazil\",\n  \"Abaiara, Brazil\",\n  \"Acarape, Brazil\",\n  \"Acaraú, Brazil\",\n  \"Acopiara, Brazil\",\n  \"Aiuaba, Brazil\",\n  \"Alcântaras, Brazil\",\n  \"Altaneira, Brazil\",\n  \"Alto Santo, Brazil\",\n  \"Amontada, Brazil\",\n  \"Antonina do Norte, Brazil\",\n  \"Apuiarés, Brazil\",\n  \"Aquiraz, Brazil\",\n  \"Aracati, Brazil\",\n  \"Aracoiaba, Brazil\",\n  \"Ararendá, Brazil\",\n  \"Araripe, Brazil\",\n  \"Aratuba, Brazil\",\n  \"Arneiroz, Brazil\",\n  \"Assaré, Brazil\",\n  \"Aurora, Brazil\",\n  \"Baixio, Brazil\",\n  \"Banabuiú, Brazil\",\n  \"Barbalha, Brazil\",\n  \"Barreira, Brazil\",\n  \"Barro, Brazil\",\n  \"Barroquinha, Brazil\",\n  \"Baturité, Brazil\",\n  \"Beberibe, Brazil\",\n  \"Bela Cruz, Brazil\",\n  \"Boa Viagem, Brazil\",\n  \"Brejo Santo, Brazil\",\n  \"Camocim, Brazil\",\n  \"Campos Sales, Brazil\",\n  \"Canindé, Brazil\",\n  \"Capistrano, Brazil\",\n  \"Caridade, Brazil\",\n  \"Cariré, Brazil\",\n  \"Caririaçu, Brazil\",\n  \"Cariús, Brazil\",\n  \"Carnaubal, Brazil\",\n  \"Cascavel, Brazil\",\n  \"Catarina, Brazil\",\n  \"Catunda, Brazil\",\n  \"Caucaia, Brazil\",\n  \"Cedro, Brazil\",\n  \"Chaval, Brazil\",\n  \"Choró, Brazil\",\n  \"Chorozinho, Brazil\",\n  \"Coreaú, Brazil\",\n  \"Crateús, Brazil\",\n  \"Crato, Brazil\",\n  \"Croatá, Brazil\",\n  \"Cruz, Brazil\",\n  \"Deputado Irapuan Pinheiro, Brazil\",\n  \"Ererê, Brazil\",\n  \"Eusébio, Brazil\",\n  \"Farias Brito, Brazil\",\n  \"Forquilha, Brazil\",\n  \"Fortaleza, Brazil\",\n  \"Fortim, Brazil\",\n  \"Frecheirinha, Brazil\",\n  \"General Sampaio, Brazil\",\n  \"Graça, Brazil\",\n  \"Granja, Brazil\",\n  \"Granjeiro, Brazil\",\n  \"Groaíras, Brazil\",\n  \"Guaiúba, Brazil\",\n  \"Guaraciaba do Norte, Brazil\",\n  \"Guaramiranga, Brazil\",\n  \"Hidrolândia, Brazil\",\n  \"Horizonte, Brazil\",\n  \"Ibaretama, Brazil\",\n  \"Ibiapina, Brazil\",\n  \"Ibicuitinga, Brazil\",\n  \"Icapuí, Brazil\",\n  \"Icó, Brazil\",\n  \"Iguatu, Brazil\",\n  \"Independência, Brazil\",\n  \"Ipaporanga, Brazil\",\n  \"Ipaumirim, Brazil\",\n  \"Ipu, Brazil\",\n  \"Ipueiras, Brazil\",\n  \"Iracema, Brazil\",\n  \"Irauçuba, Brazil\",\n  \"Itaiçaba, Brazil\",\n  \"Itaitinga, Brazil\",\n  \"Itapagé, Brazil\",\n  \"Itapajé, Brazil\",\n  \"Itapipoca, Brazil\",\n  \"Itapiúna, Brazil\",\n  \"Itarema, Brazil\",\n  \"Itatira, Brazil\",\n  \"Jaguaretama, Brazil\",\n  \"Jaguaribara, Brazil\",\n  \"Jaguaribe, Brazil\",\n  \"Jaguaruana, Brazil\",\n  \"Jardim, Brazil\",\n  \"Jati, Brazil\",\n  \"Jijoca de Jericoacoara, Brazil\",\n  \"Juá dos Vieiras, Brazil\",\n  \"Juazeiro do Norte, Brazil\",\n  \"Jucás, Brazil\",\n  \"Lavras da Mangabeira, Brazil\",\n  \"Limoeiro do Norte, Brazil\",\n  \"Madalena, Brazil\",\n  \"Maracanaú, Brazil\",\n  \"Maranguape, Brazil\",\n  \"Marco, Brazil\",\n  \"Martinópole, Brazil\",\n  \"Massapê, Brazil\",\n  \"Mauriti, Brazil\",\n  \"Meruoca, Brazil\",\n  \"Milagres, Brazil\",\n  \"Milhã, Brazil\",\n  \"Miraíma, Brazil\",\n  \"Missão Velha, Brazil\",\n  \"Mombaça, Brazil\",\n  \"Monsenhor Tabosa, Brazil\",\n  \"Morada Nova, Brazil\",\n  \"Moraújo, Brazil\",\n  \"Morrinhos, Brazil\",\n  \"Mucambo, Brazil\",\n  \"Mulungu, Brazil\",\n  \"Nova Olinda, Brazil\",\n  \"Nova Russas, Brazil\",\n  \"Novo Oriente, Brazil\",\n  \"Ocara, Brazil\",\n  \"Orós, Brazil\",\n  \"Pacajus, Brazil\",\n  \"Pacatuba, Brazil\",\n  \"Pacoti, Brazil\",\n  \"Pacujá, Brazil\",\n  \"Palhano, Brazil\",\n  \"Palmácia, Brazil\",\n  \"Paracuru, Brazil\",\n  \"Paraipaba, Brazil\",\n  \"Parambu, Brazil\",\n  \"Paramoti, Brazil\",\n  \"Pedra Branca, Brazil\",\n  \"Penaforte, Brazil\",\n  \"Pentecoste, Brazil\",\n  \"Pereiro, Brazil\",\n  \"Pindoretama, Brazil\",\n  \"Piquet Carneiro, Brazil\",\n  \"Pires Ferreira, Brazil\",\n  \"Poranga, Brazil\",\n  \"Porteiras, Brazil\",\n  \"Potengi, Brazil\",\n  \"Potiretama, Brazil\",\n  \"Quiterianópolis, Brazil\",\n  \"Quixadá, Brazil\",\n  \"Quixelô, Brazil\",\n  \"Quixeramobim, Brazil\",\n  \"Quixeré, Brazil\",\n  \"Redenção, Brazil\",\n  \"Reriutaba, Brazil\",\n  \"Russas, Brazil\",\n  \"Saboeiro, Brazil\",\n  \"Salitre, Brazil\",\n  \"Santa Quitéria, Brazil\",\n  \"Santana do Acaraú, Brazil\",\n  \"Santana do Cariri, Brazil\",\n  \"São Benedito, Brazil\",\n  \"São Gonçalo do Amarante, Brazil\",\n  \"São João do Jaguaribe, Brazil\",\n  \"São João dos Inhamuns, Brazil\",\n  \"São Luís do Curu, Brazil\",\n  \"Senador Pompeu, Brazil\",\n  \"Senador Sá, Brazil\",\n  \"Sobral, Brazil\",\n  \"Solonópole, Brazil\",\n  \"Tabuleiro do Norte, Brazil\",\n  \"Tamboril, Brazil\",\n  \"Tarrafas, Brazil\",\n  \"Tauá, Brazil\",\n  \"Tejuçuoca, Brazil\",\n  \"Tianguá, Brazil\",\n  \"Trairi, Brazil\",\n  \"Tururu, Brazil\",\n  \"Ubajara, Brazil\",\n  \"Umari, Brazil\",\n  \"Umirim, Brazil\",\n  \"Uruburetama, Brazil\",\n  \"Uruoca, Brazil\",\n  \"Varjota, Brazil\",\n  \"Várzea Alegre, Brazil\",\n  \"Viçosa do Ceará, Brazil\",\n  \"Brasília, Brazil\",\n  \"Planaltina, Brazil\",\n  \"Afonso Cláudio, Brazil\",\n  \"Água Doce do Norte, Brazil\",\n  \"Águia Branca, Brazil\",\n  \"Alegre, Brazil\",\n  \"Alfredo Chaves, Brazil\",\n  \"Alto Rio Novo, Brazil\",\n  \"Anchieta, Brazil\",\n  \"Apiacá, Brazil\",\n  \"Aracruz, Brazil\",\n  \"Atílio Vivacqua, Brazil\",\n  \"Baixo Guandu, Brazil\",\n  \"Barra de São Francisco, Brazil\",\n  \"Boa Esperança, Brazil\",\n  \"Bom Jesus do Norte, Brazil\",\n  \"Brejetuba, Brazil\",\n  \"Cachoeiro de Itapemirim, Brazil\",\n  \"Cariacica, Brazil\",\n  \"Castelo, Brazil\",\n  \"Colatina, Brazil\",\n  \"Conceição da Barra, Brazil\",\n  \"Conceição do Castelo, Brazil\",\n  \"Divino de São Lourenço, Brazil\",\n  \"Domingos Martins, Brazil\",\n  \"Dores do Rio Preto, Brazil\",\n  \"Ecoporanga, Brazil\",\n  \"Fundão, Brazil\",\n  \"Governador Lindenberg, Brazil\",\n  \"Guaçuí, Brazil\",\n  \"Guarapari, Brazil\",\n  \"Ibatiba, Brazil\",\n  \"Ibiraçu, Brazil\",\n  \"Ibitirama, Brazil\",\n  \"Iconha, Brazil\",\n  \"Irupi, Brazil\",\n  \"Itaguaçu, Brazil\",\n  \"Itapemirim, Brazil\",\n  \"Itarana, Brazil\",\n  \"Iúna, Brazil\",\n  \"Jaguaré, Brazil\",\n  \"Jerônimo Monteiro, Brazil\",\n  \"Jetibá, Brazil\",\n  \"João Neiva, Brazil\",\n  \"Laranja da Terra, Brazil\",\n  \"Linhares, Brazil\",\n  \"Mantenópolis, Brazil\",\n  \"Marataizes, Brazil\",\n  \"Marechal Floriano, Brazil\",\n  \"Marilândia, Brazil\",\n  \"Mimoso do Sul, Brazil\",\n  \"Montanha, Brazil\",\n  \"Mucurici, Brazil\",\n  \"Muniz Freire, Brazil\",\n  \"Muqui, Brazil\",\n  \"Nova Venécia, Brazil\",\n  \"Pancas, Brazil\",\n  \"Pedro Canário, Brazil\",\n  \"Pinheiros, Brazil\",\n  \"Piúma, Brazil\",\n  \"Ponto Belo, Brazil\",\n  \"Presidente Kennedy, Brazil\",\n  \"Rio Bananal, Brazil\",\n  \"Rio Novo do Sul, Brazil\",\n  \"Santa Leopoldina, Brazil\",\n  \"Santa Maria de Jetibá, Brazil\",\n  \"Santa Teresa, Brazil\",\n  \"São Domingos do Norte, Brazil\",\n  \"São Gabriel da Palha, Brazil\",\n  \"São José do Calçado, Brazil\",\n  \"São Mateus, Brazil\",\n  \"São Roque do Canaã, Brazil\",\n  \"Serra, Brazil\",\n  \"Sooretama, Brazil\",\n  \"Vargem Alta, Brazil\",\n  \"Venda Nova do Imigrante, Brazil\",\n  \"Viana, Brazil\",\n  \"Vila Pavão, Brazil\",\n  \"Vila Valério, Brazil\",\n  \"Vila Velha, Brazil\",\n  \"Vitória, Brazil\",\n  \"Abadia de Goiás, Brazil\",\n  \"Abadiânia, Brazil\",\n  \"Acreúna, Brazil\",\n  \"Adelândia, Brazil\",\n  \"Água Fria de Goiás, Brazil\",\n  \"Água Limpa, Brazil\",\n  \"Águas Lindas de Goiás, Brazil\",\n  \"Alexânia, Brazil\",\n  \"Aloândia, Brazil\",\n  \"Alto Horizonte, Brazil\",\n  \"Alto Paraíso de Goiás, Brazil\",\n  \"Alvorada do Norte, Brazil\",\n  \"Amaralina, Brazil\",\n  \"Americano do Brasil, Brazil\",\n  \"Amorinópolis, Brazil\",\n  \"Anápolis, Brazil\",\n  \"Anhanguera, Brazil\",\n  \"Anicuns, Brazil\",\n  \"Aparecida de Goiânia, Brazil\",\n  \"Aparecida do Rio Doce, Brazil\",\n  \"Aporé, Brazil\",\n  \"Araçu, Brazil\",\n  \"Aragarças, Brazil\",\n  \"Aragoiânia, Brazil\",\n  \"Araguapaz, Brazil\",\n  \"Arenópolis, Brazil\",\n  \"Aruanã, Brazil\",\n  \"Aurilândia, Brazil\",\n  \"Avelinópolis, Brazil\",\n  \"Baliza, Brazil\",\n  \"Barro Alto, Brazil\",\n  \"Bela Vista de Goiás, Brazil\",\n  \"Bom Jardim de Goiás, Brazil\",\n  \"Bom Jesus de Goiás, Brazil\",\n  \"Bonfinópolis, Brazil\",\n  \"Bonópolis, Brazil\",\n  \"Brazabrantes, Brazil\",\n  \"Britânia, Brazil\",\n  \"Buriti Alegre, Brazil\",\n  \"Buriti de Goiás, Brazil\",\n  \"Buritinópolis, Brazil\",\n  \"Cabeceiras, Brazil\",\n  \"Cachoeira Alta, Brazil\",\n  \"Cachoeira de Goiás, Brazil\",\n  \"Cachoeira Dourada, Brazil\",\n  \"Caçu, Brazil\",\n  \"Caiapônia, Brazil\",\n  \"Caldas Novas, Brazil\",\n  \"Caldazinha, Brazil\",\n  \"Campestre de Goiás, Brazil\",\n  \"Campinaçu, Brazil\",\n  \"Campinorte, Brazil\",\n  \"Campo Alegre de Goiás, Brazil\",\n  \"Campo Limpo de Goiás, Brazil\",\n  \"Campos Belos, Brazil\",\n  \"Campos Verdes, Brazil\",\n  \"Carmo do Rio Verde, Brazil\",\n  \"Castelândia, Brazil\",\n  \"Catalão, Brazil\",\n  \"Caturaí, Brazil\",\n  \"Cavalcante, Brazil\",\n  \"Ceres, Brazil\",\n  \"Cezarina, Brazil\",\n  \"Chapadão do Céu, Brazil\",\n  \"Cidade Ocidental, Brazil\",\n  \"Cocalzinho de Goiás, Brazil\",\n  \"Colinas do Sul, Brazil\",\n  \"Córrego do Ouro, Brazil\",\n  \"Corumbá de Goiás, Brazil\",\n  \"Corumbaíba, Brazil\",\n  \"Cristalina, Brazil\",\n  \"Cristianópolis, Brazil\",\n  \"Crixás, Brazil\",\n  \"Cromínia, Brazil\",\n  \"Cumari, Brazil\",\n  \"Damianópolis, Brazil\",\n  \"Damolândia, Brazil\",\n  \"Davinópolis, Brazil\",\n  \"Diorama, Brazil\",\n  \"Divinópolis de Goiás, Brazil\",\n  \"Doverlândia, Brazil\",\n  \"Edealina, Brazil\",\n  \"Edéia, Brazil\",\n  \"Estrela do Norte, Brazil\",\n  \"Faina, Brazil\",\n  \"Fazenda Nova, Brazil\",\n  \"Firminópolis, Brazil\",\n  \"Flores de Goiás, Brazil\",\n  \"Formosa, Brazil\",\n  \"Formoso, Brazil\",\n  \"Gameleira de Goiás, Brazil\",\n  \"Goianápolis, Brazil\",\n  \"Goiandira, Brazil\",\n  \"Goianésia, Brazil\",\n  \"Goiânia, Brazil\",\n  \"Goianira, Brazil\",\n  \"Goiás, Brazil\",\n  \"Goiatuba, Brazil\",\n  \"Gouvelândia, Brazil\",\n  \"Guapó, Brazil\",\n  \"Guaraíta, Brazil\",\n  \"Guarani de Goiás, Brazil\",\n  \"Guarinos, Brazil\",\n  \"Heitoraí, Brazil\",\n  \"Hidrolândia, Brazil\",\n  \"Hidrolina, Brazil\",\n  \"Iaciara, Brazil\",\n  \"Inaciolândia, Brazil\",\n  \"Indiara, Brazil\",\n  \"Inhumas, Brazil\",\n  \"Ipameri, Brazil\",\n  \"Ipiranga de Goiás, Brazil\",\n  \"Iporá, Brazil\",\n  \"Israelândia, Brazil\",\n  \"Itaberaí, Brazil\",\n  \"Itaguari, Brazil\",\n  \"Itaguaru, Brazil\",\n  \"Itajá, Brazil\",\n  \"Itapaci, Brazil\",\n  \"Itapirapuã, Brazil\",\n  \"Itapuranga, Brazil\",\n  \"Itarumã, Brazil\",\n  \"Itauçu, Brazil\",\n  \"Itumbiara, Brazil\",\n  \"Ivolândia, Brazil\",\n  \"Jandaia, Brazil\",\n  \"Jaraguá, Brazil\",\n  \"Jataí, Brazil\",\n  \"Jaupaci, Brazil\",\n  \"Jesúpolis, Brazil\",\n  \"Joviânia, Brazil\",\n  \"Jussara, Brazil\",\n  \"Lagoa Santa, Brazil\",\n  \"Leopoldo de Bulhões, Brazil\",\n  \"Luziânia, Brazil\",\n  \"Mairipotaba, Brazil\",\n  \"Mambaí, Brazil\",\n  \"Mara Rosa, Brazil\",\n  \"Marzagão, Brazil\",\n  \"Matrinchã, Brazil\",\n  \"Maurilândia, Brazil\",\n  \"Mimoso de Goiás, Brazil\",\n  \"Minaçu, Brazil\",\n  \"Mineiros, Brazil\",\n  \"Moiporá, Brazil\",\n  \"Monte Alegre de Goiás, Brazil\",\n  \"Montes Claros de Goiás, Brazil\",\n  \"Montividiu, Brazil\",\n  \"Montividiu do Norte, Brazil\",\n  \"Morrinhos, Brazil\",\n  \"Morro Agudo de Goiás, Brazil\",\n  \"Mossâmedes, Brazil\",\n  \"Mozarlândia, Brazil\",\n  \"Mundo Novo, Brazil\",\n  \"Mutunópolis, Brazil\",\n  \"Nazário, Brazil\",\n  \"Nerópolis, Brazil\",\n  \"Niquelândia, Brazil\",\n  \"Nova América, Brazil\",\n  \"Nova Aurora, Brazil\",\n  \"Nova Crixás, Brazil\",\n  \"Nova Glória, Brazil\",\n  \"Nova Iguaçu de Goiás, Brazil\",\n  \"Nova Roma, Brazil\",\n  \"Nova Veneza, Brazil\",\n  \"Novo Brasil, Brazil\",\n  \"Novo Gama, Brazil\",\n  \"Novo Planalto, Brazil\",\n  \"Orizona, Brazil\",\n  \"Ouro Verde de Goiás, Brazil\",\n  \"Ouvidor, Brazil\",\n  \"Padre Bernardo, Brazil\",\n  \"Palestina de Goiás, Brazil\",\n  \"Palmeiras de Goiás, Brazil\",\n  \"Palmelo, Brazil\",\n  \"Palminópolis, Brazil\",\n  \"Panamá, Brazil\",\n  \"Paranaiguara, Brazil\",\n  \"Paraúna, Brazil\",\n  \"Perolândia, Brazil\",\n  \"Petrolina de Goiás, Brazil\",\n  \"Pilar de Goiás, Brazil\",\n  \"Piracanjuba, Brazil\",\n  \"Piranhas, Brazil\",\n  \"Pirenópolis, Brazil\",\n  \"Pires do Rio, Brazil\",\n  \"Planaltina, Brazil\",\n  \"Pontalina, Brazil\",\n  \"Porangatu, Brazil\",\n  \"Porteirão, Brazil\",\n  \"Portelândia, Brazil\",\n  \"Posse, Brazil\",\n  \"Professor Jamil, Brazil\",\n  \"Quirinópolis, Brazil\",\n  \"Rialma, Brazil\",\n  \"Rianápolis, Brazil\",\n  \"Rio Quente, Brazil\",\n  \"Rio Verde, Brazil\",\n  \"Rubiataba, Brazil\",\n  \"Sanclerlândia, Brazil\",\n  \"Santa Bárbara de Goiás, Brazil\",\n  \"Santa Cruz de Goiás, Brazil\",\n  \"Santa Fé de Goiás, Brazil\",\n  \"Santa Helena de Goiás, Brazil\",\n  \"Santa Isabel, Brazil\",\n  \"Santa Rita do Araguaia, Brazil\",\n  \"Santa Rita do Novo Destino, Brazil\",\n  \"Santa Rosa de Goiás, Brazil\",\n  \"Santa Tereza de Goiás, Brazil\",\n  \"Santa Terezinha de Goiás, Brazil\",\n  \"Santo Antônio da Barra, Brazil\",\n  \"Santo Antônio de Goiás, Brazil\",\n  \"Santo Antônio do Descoberto, Brazil\",\n  \"São Domingos, Brazil\",\n  \"São Francisco de Goiás, Brazil\",\n  \"São João d'Aliança, Brazil\",\n  \"São João da Paraúna, Brazil\",\n  \"São Luís de Montes Belos, Brazil\",\n  \"São Luiz do Norte, Brazil\",\n  \"São Miguel do Araguaia, Brazil\",\n  \"São Miguel do Passa Quatro, Brazil\",\n  \"São Patrício, Brazil\",\n  \"São Simão, Brazil\",\n  \"Senador Canedo, Brazil\",\n  \"Serranópolis, Brazil\",\n  \"Silvânia, Brazil\",\n  \"Simolândia, Brazil\",\n  \"Sítio d'Abadia, Brazil\",\n  \"Taquaral de Goiás, Brazil\",\n  \"Teresina de Goiás, Brazil\",\n  \"Terezópolis de Goiás, Brazil\",\n  \"Três Ranchos, Brazil\",\n  \"Trindade, Brazil\",\n  \"Trombas, Brazil\",\n  \"Turvânia, Brazil\",\n  \"Turvelândia, Brazil\",\n  \"Uirapuru, Brazil\",\n  \"Uruaçu, Brazil\",\n  \"Uruana, Brazil\",\n  \"Urutaí, Brazil\",\n  \"Valparaíso de Goiás, Brazil\",\n  \"Varjão, Brazil\",\n  \"Vianópolis, Brazil\",\n  \"Vicentinópolis, Brazil\",\n  \"Vila Boa, Brazil\",\n  \"Vila Propício, Brazil\",\n  \"Açailândia, Brazil\",\n  \"Afonso Cunha, Brazil\",\n  \"Água Doce do Maranhão, Brazil\",\n  \"Alcântara, Brazil\",\n  \"Aldeias Altas, Brazil\",\n  \"Altamira do Maranhão, Brazil\",\n  \"Alto Alegre do Maranhão, Brazil\",\n  \"Alto Alegre do Pindaré, Brazil\",\n  \"Alto Parnaíba, Brazil\",\n  \"Amapá do Maranhão, Brazil\",\n  \"Amarante do Maranhão, Brazil\",\n  \"Anajatuba, Brazil\",\n  \"Anapurus, Brazil\",\n  \"Apicum-Açu, Brazil\",\n  \"Araguanã, Brazil\",\n  \"Araioses, Brazil\",\n  \"Arame, Brazil\",\n  \"Arari, Brazil\",\n  \"Atins, Brazil\",\n  \"Axixá, Brazil\",\n  \"Bacabal, Brazil\",\n  \"Bacabeira, Brazil\",\n  \"Bacuri, Brazil\",\n  \"Bacurituba, Brazil\",\n  \"Balsas, Brazil\",\n  \"Barão de Grajaú, Brazil\",\n  \"Barra do Corda, Brazil\",\n  \"Barreirinhas, Brazil\",\n  \"Bela Vista do Maranhão, Brazil\",\n  \"Belágua, Brazil\",\n  \"Benedito Leite, Brazil\",\n  \"Bequimão, Brazil\",\n  \"Bernardo do Mearim, Brazil\",\n  \"Boa Vista do Gurupi, Brazil\",\n  \"Bom Jardim, Brazil\",\n  \"Bom Jesus das Selvas, Brazil\",\n  \"Bom Lugar, Brazil\",\n  \"Brejo, Brazil\",\n  \"Brejo de Areia, Brazil\",\n  \"Buriti, Brazil\",\n  \"Buriti Bravo, Brazil\",\n  \"Buriticupu, Brazil\",\n  \"Buritirana, Brazil\",\n  \"Cachoeira Grande, Brazil\",\n  \"Cajapió, Brazil\",\n  \"Cajari, Brazil\",\n  \"Campestre do Maranhão, Brazil\",\n  \"Cândido Mendes, Brazil\",\n  \"Cantanhede, Brazil\",\n  \"Capinzal do Norte, Brazil\",\n  \"Carolina, Brazil\",\n  \"Carutapera, Brazil\",\n  \"Caxias, Brazil\",\n  \"Cedral, Brazil\",\n  \"Central do Maranhão, Brazil\",\n  \"Centro do Guilherme, Brazil\",\n  \"Centro Novo do Maranhão, Brazil\",\n  \"Chapadinha, Brazil\",\n  \"Cidelândia, Brazil\",\n  \"Codó, Brazil\",\n  \"Coelho Neto, Brazil\",\n  \"Colinas, Brazil\",\n  \"Conceição do Lago-Açu, Brazil\",\n  \"Coroatá, Brazil\",\n  \"Cururupu, Brazil\",\n  \"Davinópolis, Brazil\",\n  \"Dom Pedro, Brazil\",\n  \"Duque Bacelar, Brazil\",\n  \"Esperantinópolis, Brazil\",\n  \"Estreito, Brazil\",\n  \"Feira Nova do Maranhão, Brazil\",\n  \"Fernando Falcão, Brazil\",\n  \"Formosa da Serra Negra, Brazil\",\n  \"Fortaleza dos Nogueiras, Brazil\",\n  \"Fortuna, Brazil\",\n  \"Godofredo Viana, Brazil\",\n  \"Gonçalves Dias, Brazil\",\n  \"Governador Archer, Brazil\",\n  \"Governador Edison Lobão, Brazil\",\n  \"Governador Eugênio Barros, Brazil\",\n  \"Governador Luiz Rocha, Brazil\",\n  \"Governador Newton Bello, Brazil\",\n  \"Governador Nunes Freire, Brazil\",\n  \"Graça Aranha, Brazil\",\n  \"Grajaú, Brazil\",\n  \"Guimarães, Brazil\",\n  \"Humberto de Campos, Brazil\",\n  \"Icatu, Brazil\",\n  \"Igarapé do Meio, Brazil\",\n  \"Igarapé Grande, Brazil\",\n  \"Imperatriz, Brazil\",\n  \"Itaipava do Grajaú, Brazil\",\n  \"Itapecuru Mirim, Brazil\",\n  \"Itinga do Maranhão, Brazil\",\n  \"Jatobá, Brazil\",\n  \"Jenipapo dos Vieiras, Brazil\",\n  \"João Lisboa, Brazil\",\n  \"Joselândia, Brazil\",\n  \"Junco do Maranhão, Brazil\",\n  \"Lago da Pedra, Brazil\",\n  \"Lago do Junco, Brazil\",\n  \"Lago dos Rodrigues, Brazil\",\n  \"Lago Verde, Brazil\",\n  \"Lagoa do Mato, Brazil\",\n  \"Lagoa Grande do Maranhão, Brazil\",\n  \"Lajeado Novo, Brazil\",\n  \"Lima Campos, Brazil\",\n  \"Loreto, Brazil\",\n  \"Luís Domingues, Brazil\",\n  \"Magalhães de Almeida, Brazil\",\n  \"Maracaçumé, Brazil\",\n  \"Marajá do Sena, Brazil\",\n  \"Maranhãozinho, Brazil\",\n  \"Mata Roma, Brazil\",\n  \"Matinha, Brazil\",\n  \"Matões, Brazil\",\n  \"Matões do Norte, Brazil\",\n  \"Milagres do Maranhão, Brazil\",\n  \"Mirador, Brazil\",\n  \"Miranda do Norte, Brazil\",\n  \"Mirinzal, Brazil\",\n  \"Monção, Brazil\",\n  \"Montes Altos, Brazil\",\n  \"Morros, Brazil\",\n  \"Nina Rodrigues, Brazil\",\n  \"Nova Colinas, Brazil\",\n  \"Nova Iorque, Brazil\",\n  \"Nova Olinda do Maranhão, Brazil\",\n  \"Olho d'Água das Cunhãs, Brazil\",\n  \"Olinda Nova do Maranhão, Brazil\",\n  \"Paço do Lumiar, Brazil\",\n  \"Palmeirândia, Brazil\",\n  \"Paraibano, Brazil\",\n  \"Parnarama, Brazil\",\n  \"Passagem Franca, Brazil\",\n  \"Pastos Bons, Brazil\",\n  \"Paulino Neves, Brazil\",\n  \"Paulo Ramos, Brazil\",\n  \"Pedreiras, Brazil\",\n  \"Pedro do Rosário, Brazil\",\n  \"Penalva, Brazil\",\n  \"Peri Mirim, Brazil\",\n  \"Peritoró, Brazil\",\n  \"Pindaré Mirim, Brazil\",\n  \"Pindaré-Mirim, Brazil\",\n  \"Pinheiro, Brazil\",\n  \"Pio XII, Brazil\",\n  \"Pirapemas, Brazil\",\n  \"Poção de Pedras, Brazil\",\n  \"Porto Franco, Brazil\",\n  \"Porto Rico do Maranhão, Brazil\",\n  \"Presidente Dutra, Brazil\",\n  \"Presidente Juscelino, Brazil\",\n  \"Presidente Médici, Brazil\",\n  \"Presidente Sarney, Brazil\",\n  \"Presidente Vargas, Brazil\",\n  \"Primeira Cruz, Brazil\",\n  \"Raposa, Brazil\",\n  \"Riachão, Brazil\",\n  \"Ribamar Fiquene, Brazil\",\n  \"Rosário, Brazil\",\n  \"Sambaíba, Brazil\",\n  \"Santa Filomena do Maranhão, Brazil\",\n  \"Santa Helena, Brazil\",\n  \"Santa Inês, Brazil\",\n  \"Santa Luzia, Brazil\",\n  \"Santa Luzia do Paruá, Brazil\",\n  \"Santa Quitéria do Maranhão, Brazil\",\n  \"Santa Rita, Brazil\",\n  \"Santana do Maranhão, Brazil\",\n  \"Santo Amaro do Maranhão, Brazil\",\n  \"Santo Antônio dos Lopes, Brazil\",\n  \"São Benedito do Rio Preto, Brazil\",\n  \"São Bento, Brazil\",\n  \"São Bernardo, Brazil\",\n  \"São Domingos do Azeitão, Brazil\",\n  \"São Domingos do Maranhão, Brazil\",\n  \"São Félix de Balsas, Brazil\",\n  \"São Francisco do Brejão, Brazil\",\n  \"São Francisco do Maranhão, Brazil\",\n  \"São João Batista, Brazil\",\n  \"São João do Carú, Brazil\",\n  \"São João do Paraíso, Brazil\",\n  \"São João do Soter, Brazil\",\n  \"São João dos Patos, Brazil\",\n  \"São José de Ribamar, Brazil\",\n  \"São José dos Basílios, Brazil\",\n  \"São Luís, Brazil\",\n  \"São Luís Gonzaga do Maranhão, Brazil\",\n  \"São Mateus do Maranhão, Brazil\",\n  \"São Pedro da Água Branca, Brazil\",\n  \"São Pedro dos Crentes, Brazil\",\n  \"São Raimundo das Mangabeiras, Brazil\",\n  \"São Raimundo do Doca Bezerra, Brazil\",\n  \"São Roberto, Brazil\",\n  \"São Vicente Ferrer, Brazil\",\n  \"Satubinha, Brazil\",\n  \"Senador Alexandre Costa, Brazil\",\n  \"Senador La Rocque, Brazil\",\n  \"Serrano do Maranhão, Brazil\",\n  \"Sítio Novo, Brazil\",\n  \"Sucupira do Norte, Brazil\",\n  \"Sucupira do Riachão, Brazil\",\n  \"Tasso Fragoso, Brazil\",\n  \"Timbiras, Brazil\",\n  \"Timon, Brazil\",\n  \"Trizidela do Vale, Brazil\",\n  \"Tufilândia, Brazil\",\n  \"Tuntum, Brazil\",\n  \"Turiaçu, Brazil\",\n  \"Turilândia, Brazil\",\n  \"Tutóia, Brazil\",\n  \"Urbano Santos, Brazil\",\n  \"Vargem Grande, Brazil\",\n  \"Viana, Brazil\",\n  \"Vila Nova dos Martírios, Brazil\",\n  \"Vitória do Mearim, Brazil\",\n  \"Vitorino Freire, Brazil\",\n  \"Zé Doca, Brazil\",\n  \"Acorizal, Brazil\",\n  \"Água Boa, Brazil\",\n  \"Alta Floresta, Brazil\",\n  \"Alto Araguaia, Brazil\",\n  \"Alto Boa Vista, Brazil\",\n  \"Alto Garças, Brazil\",\n  \"Alto Paraguai, Brazil\",\n  \"Alto Taquari, Brazil\",\n  \"Apiacás, Brazil\",\n  \"Araguaiana, Brazil\",\n  \"Araguainha, Brazil\",\n  \"Araputanga, Brazil\",\n  \"Arenápolis, Brazil\",\n  \"Aripuanã, Brazil\",\n  \"Barão de Melgaço, Brazil\",\n  \"Barra do Bugres, Brazil\",\n  \"Barra do Garças, Brazil\",\n  \"Bom Jesus do Araguaia, Brazil\",\n  \"Brasnorte, Brazil\",\n  \"Cáceres, Brazil\",\n  \"Campinápolis, Brazil\",\n  \"Campo Novo do Parecis, Brazil\",\n  \"Campo Verde, Brazil\",\n  \"Campos de Júlio, Brazil\",\n  \"CanaBrava do Norte, Brazil\",\n  \"Canarana, Brazil\",\n  \"Carlinda, Brazil\",\n  \"Castanheira, Brazil\",\n  \"Chapada dos Guimarães, Brazil\",\n  \"Cláudia, Brazil\",\n  \"Cocalinho, Brazil\",\n  \"Colíder, Brazil\",\n  \"Colniza, Brazil\",\n  \"Comodoro, Brazil\",\n  \"Confresa, Brazil\",\n  \"Conquista D'oeste, Brazil\",\n  \"Cotriguaçu, Brazil\",\n  \"Cuiabá, Brazil\",\n  \"Curvelândia, Brazil\",\n  \"Denise, Brazil\",\n  \"Diamantino, Brazil\",\n  \"Dom Aquino, Brazil\",\n  \"Feliz Natal, Brazil\",\n  \"Figueirópolis d'Oeste, Brazil\",\n  \"Gaúcha do Norte, Brazil\",\n  \"General Carneiro, Brazil\",\n  \"Glória d'Oeste, Brazil\",\n  \"Guarantã do Norte, Brazil\",\n  \"Guiratinga, Brazil\",\n  \"Indiavaí, Brazil\",\n  \"Ipiranga do Norte, Brazil\",\n  \"Itanhangá, Brazil\",\n  \"Itaúba, Brazil\",\n  \"Itiquira, Brazil\",\n  \"Jaciara, Brazil\",\n  \"Jangada, Brazil\",\n  \"Jauru, Brazil\",\n  \"Juara, Brazil\",\n  \"Juína, Brazil\",\n  \"Juruena, Brazil\",\n  \"Juscimeira, Brazil\",\n  \"Lambari d'Oeste, Brazil\",\n  \"Lucas, Brazil\",\n  \"Lucas do Rio Verde, Brazil\",\n  \"Luciara, Brazil\",\n  \"Marcelândia, Brazil\",\n  \"Matupá, Brazil\",\n  \"Mirassol d'Oeste, Brazil\",\n  \"Nobres, Brazil\",\n  \"Nortelândia, Brazil\",\n  \"Nossa Senhora do Livramento, Brazil\",\n  \"Nova Bandeirantes, Brazil\",\n  \"Nova Brasilândia, Brazil\",\n  \"Nova Canaã do Norte, Brazil\",\n  \"Nova Guarita, Brazil\",\n  \"Nova Lacerda, Brazil\",\n  \"Nova Marilândia, Brazil\",\n  \"Nova Maringá, Brazil\",\n  \"Nova Monte Verde, Brazil\",\n  \"Nova Mutum, Brazil\",\n  \"Nova Nazaré, Brazil\",\n  \"Nova Olímpia, Brazil\",\n  \"Nova Santa Helena, Brazil\",\n  \"Nova Ubiratã, Brazil\",\n  \"Nova Xavantina, Brazil\",\n  \"Novo Horizonte do Norte, Brazil\",\n  \"Novo Mundo, Brazil\",\n  \"Novo Santo Antônio, Brazil\",\n  \"Novo São Joaquim, Brazil\",\n  \"Paranaíta, Brazil\",\n  \"Paranatinga, Brazil\",\n  \"Pedra Preta, Brazil\",\n  \"Peixoto de Azevedo, Brazil\",\n  \"Planalto da Serra, Brazil\",\n  \"Poconé, Brazil\",\n  \"Pontal do Araguaia, Brazil\",\n  \"Ponte Branca, Brazil\",\n  \"Pontes e Lacerda, Brazil\",\n  \"Porto Alegre do Norte, Brazil\",\n  \"Porto dos Gaúchos, Brazil\",\n  \"Porto Esperidião, Brazil\",\n  \"Porto Estrela, Brazil\",\n  \"Poxoréo, Brazil\",\n  \"Poxoréu, Brazil\",\n  \"Primavera do Leste, Brazil\",\n  \"Querência, Brazil\",\n  \"Reserva do Cabaçal, Brazil\",\n  \"Ribeirão Cascalheira, Brazil\",\n  \"Ribeirãozinho, Brazil\",\n  \"Rio Branco, Brazil\",\n  \"Rondolândia, Brazil\",\n  \"Rondonópolis, Brazil\",\n  \"Rosário Oeste, Brazil\",\n  \"Salto do Céu, Brazil\",\n  \"Santa Carmem, Brazil\",\n  \"Santa Cruz do Xingu, Brazil\",\n  \"Santa Rita do Trivelato, Brazil\",\n  \"Santa Terezinha, Brazil\",\n  \"Santo Afonso, Brazil\",\n  \"Santo Antônio do Leste, Brazil\",\n  \"Santo Antônio do Leverger, Brazil\",\n  \"São Félix do Araguaia, Brazil\",\n  \"São José do Povo, Brazil\",\n  \"São José do Rio Claro, Brazil\",\n  \"São José do Xingu, Brazil\",\n  \"São José dos Quatro Marcos, Brazil\",\n  \"São Pedro da Cipa, Brazil\",\n  \"Sapezal, Brazil\",\n  \"Serra Nova Dourada, Brazil\",\n  \"Sinop, Brazil\",\n  \"Sorriso, Brazil\",\n  \"Tabaporã, Brazil\",\n  \"Tangará da Serra, Brazil\",\n  \"Tapurah, Brazil\",\n  \"Terra Nova do Norte, Brazil\",\n  \"Tesouro, Brazil\",\n  \"Torixoréu, Brazil\",\n  \"União do Sul, Brazil\",\n  \"Vale de São Domingos, Brazil\",\n  \"Várzea Grande, Brazil\",\n  \"Vera, Brazil\",\n  \"Vila Bela da Santíssima Trindade, Brazil\",\n  \"Vila Rica, Brazil\",\n  \"Água Clara, Brazil\",\n  \"Alcinópolis, Brazil\",\n  \"Amambai, Brazil\",\n  \"Anastácio, Brazil\",\n  \"Anaurilândia, Brazil\",\n  \"Angélica, Brazil\",\n  \"Antônio João, Brazil\",\n  \"Aparecida do Taboado, Brazil\",\n  \"Aquidauana, Brazil\",\n  \"Aral Moreira, Brazil\",\n  \"Bandeirantes, Brazil\",\n  \"Bataguassu, Brazil\",\n  \"Bataiporã, Brazil\",\n  \"Batayporã, Brazil\",\n  \"Bela Vista, Brazil\",\n  \"Bodoquena, Brazil\",\n  \"Bonito, Brazil\",\n  \"Brasilândia, Brazil\",\n  \"Caarapó, Brazil\",\n  \"Camapuã, Brazil\",\n  \"Campo Grande, Brazil\",\n  \"Campo Verde, Brazil\",\n  \"Caracol, Brazil\",\n  \"Cassilândia, Brazil\",\n  \"Chapadão do Sul, Brazil\",\n  \"Corguinho, Brazil\",\n  \"Coronel Sapucaia, Brazil\",\n  \"Corumbá, Brazil\",\n  \"Costa Rica, Brazil\",\n  \"Coxim, Brazil\",\n  \"Deodápolis, Brazil\",\n  \"Dois Irmãos do Buriti, Brazil\",\n  \"Douradina, Brazil\",\n  \"Dourados, Brazil\",\n  \"Eldorado, Brazil\",\n  \"Fátima do Sul, Brazil\",\n  \"Figueirão, Brazil\",\n  \"Glória de Dourados, Brazil\",\n  \"Guia Lopes da Laguna, Brazil\",\n  \"Iguatemi, Brazil\",\n  \"Inocência, Brazil\",\n  \"Itaporã, Brazil\",\n  \"Itaquiraí, Brazil\",\n  \"Ivinhema, Brazil\",\n  \"Japorã, Brazil\",\n  \"Jaraguari, Brazil\",\n  \"Jardim, Brazil\",\n  \"Jateí, Brazil\",\n  \"Juti, Brazil\",\n  \"Ladário, Brazil\",\n  \"Laguna Carapã, Brazil\",\n  \"Maracaju, Brazil\",\n  \"Miranda, Brazil\",\n  \"Mundo Novo, Brazil\",\n  \"Naviraí, Brazil\",\n  \"Nioaque, Brazil\",\n  \"Nova Alvorada do Sul, Brazil\",\n  \"Nova Andradina, Brazil\",\n  \"Novo Horizonte do Sul, Brazil\",\n  \"Paraíso das Águas, Brazil\",\n  \"Paranaíba, Brazil\",\n  \"Paranhos, Brazil\",\n  \"Pedro Gomes, Brazil\",\n  \"Ponta Porã, Brazil\",\n  \"Pôrto Barra do Ivinheima, Brazil\",\n  \"Porto Murtinho, Brazil\",\n  \"Ribas do Rio Pardo, Brazil\",\n  \"Rio Brilhante, Brazil\",\n  \"Rio Negro, Brazil\",\n  \"Rio Verde de Mato Grosso, Brazil\",\n  \"Rochedo, Brazil\",\n  \"Santa Rita do Pardo, Brazil\",\n  \"São Gabriel do Oeste, Brazil\",\n  \"Selvíria, Brazil\",\n  \"Sete Quedas, Brazil\",\n  \"Sidrolândia, Brazil\",\n  \"Sonora, Brazil\",\n  \"Tacuru, Brazil\",\n  \"Taquarussu, Brazil\",\n  \"Terenos, Brazil\",\n  \"Três Lagoas, Brazil\",\n  \"Vicentina, Brazil\",\n  \"Abadia dos Dourados, Brazil\",\n  \"Abaeté, Brazil\",\n  \"Abre Campo, Brazil\",\n  \"Acaiaca, Brazil\",\n  \"Açucena, Brazil\",\n  \"Água Boa, Brazil\",\n  \"Água Comprida, Brazil\",\n  \"Aguanil, Brazil\",\n  \"Águas Formosas, Brazil\",\n  \"Águas Vermelhas, Brazil\",\n  \"Aimorés, Brazil\",\n  \"Aiuruoca, Brazil\",\n  \"Alagoa, Brazil\",\n  \"Albertina, Brazil\",\n  \"Além Paraíba, Brazil\",\n  \"Alfenas, Brazil\",\n  \"Alfredo Vasconcelos, Brazil\",\n  \"Almenara, Brazil\",\n  \"Alpercata, Brazil\",\n  \"Alpinópolis, Brazil\",\n  \"Alterosa, Brazil\",\n  \"Alto Caparaó, Brazil\",\n  \"Alto Jequitibá, Brazil\",\n  \"Alto Rio Doce, Brazil\",\n  \"Alvarenga, Brazil\",\n  \"Alvinópolis, Brazil\",\n  \"Alvorada de Minas, Brazil\",\n  \"Amparo da Serra, Brazil\",\n  \"Andradas, Brazil\",\n  \"Andrelândia, Brazil\",\n  \"Angelândia, Brazil\",\n  \"Antônio Carlos, Brazil\",\n  \"Antônio Dias, Brazil\",\n  \"Antônio Prado de Minas, Brazil\",\n  \"Araçaí, Brazil\",\n  \"Aracitaba, Brazil\",\n  \"Araçuaí, Brazil\",\n  \"Araguari, Brazil\",\n  \"Arantina, Brazil\",\n  \"Araponga, Brazil\",\n  \"Araporã, Brazil\",\n  \"Arapuá, Brazil\",\n  \"Araújos, Brazil\",\n  \"Araxá, Brazil\",\n  \"Arceburgo, Brazil\",\n  \"Arcos, Brazil\",\n  \"Areado, Brazil\",\n  \"Argirita, Brazil\",\n  \"Aricanduva, Brazil\",\n  \"Arinos, Brazil\",\n  \"Astolfo Dutra, Brazil\",\n  \"Ataléia, Brazil\",\n  \"Augusto de Lima, Brazil\",\n  \"Baependi, Brazil\",\n  \"Baldim, Brazil\",\n  \"Bambuí, Brazil\",\n  \"Bandeira, Brazil\",\n  \"Bandeira do Sul, Brazil\",\n  \"Barão de Cocais, Brazil\",\n  \"Barão de Monte Alto, Brazil\",\n  \"Barbacena, Brazil\",\n  \"Barra Longa, Brazil\",\n  \"Barreiro do Jaíba, Brazil\",\n  \"Barroso, Brazil\",\n  \"Bela Vista de Minas, Brazil\",\n  \"Belmiro Braga, Brazil\",\n  \"Belo Horizonte, Brazil\",\n  \"Belo Oriente, Brazil\",\n  \"Belo Vale, Brazil\",\n  \"Berilo, Brazil\",\n  \"Berizal, Brazil\",\n  \"Bertópolis, Brazil\",\n  \"Betim, Brazil\",\n  \"Bias Fortes, Brazil\",\n  \"Bicas, Brazil\",\n  \"Biquinhas, Brazil\",\n  \"Boa Esperança, Brazil\",\n  \"Bocaina de Minas, Brazil\",\n  \"Bocaiúva, Brazil\",\n  \"Bom Despacho, Brazil\",\n  \"Bom Jardim de Minas, Brazil\",\n  \"Bom Jesus da Penha, Brazil\",\n  \"Bom Jesus do Amparo, Brazil\",\n  \"Bom Jesus do Galho, Brazil\",\n  \"Bom Repouso, Brazil\",\n  \"Bom Sucesso, Brazil\",\n  \"Bonfim, Brazil\",\n  \"Bonfinópolis de Minas, Brazil\",\n  \"Bonito de Minas, Brazil\",\n  \"Borda da Mata, Brazil\",\n  \"Botelhos, Brazil\",\n  \"Botumirim, Brazil\",\n  \"Brás Pires, Brazil\",\n  \"Brasilândia de Minas, Brazil\",\n  \"Brasília de Minas, Brazil\",\n  \"Braúnas, Brazil\",\n  \"Brazópolis, Brazil\",\n  \"Brumadinho, Brazil\",\n  \"Bueno Brandão, Brazil\",\n  \"Buenópolis, Brazil\",\n  \"Bugre, Brazil\",\n  \"Buritis, Brazil\",\n  \"Buritizeiro, Brazil\",\n  \"Cabeceira Grande, Brazil\",\n  \"Cabo Verde, Brazil\",\n  \"Cachoeira da Prata, Brazil\",\n  \"Cachoeira de Minas, Brazil\",\n  \"Cachoeira de Pajeú, Brazil\",\n  \"Cachoeira Dourada, Brazil\",\n  \"Caetanópolis, Brazil\",\n  \"Caeté, Brazil\",\n  \"Caiana, Brazil\",\n  \"Cajuri, Brazil\",\n  \"Caldas, Brazil\",\n  \"Camacho, Brazil\",\n  \"Camanducaia, Brazil\",\n  \"Cambuí, Brazil\",\n  \"Cambuquira, Brazil\",\n  \"Campanário, Brazil\",\n  \"Campanha, Brazil\",\n  \"Campestre, Brazil\",\n  \"Campina Verde, Brazil\",\n  \"Campo Azul, Brazil\",\n  \"Campo Belo, Brazil\",\n  \"Campo do Meio, Brazil\",\n  \"Campo Florido, Brazil\",\n  \"Campos Altos, Brazil\",\n  \"Campos Gerais, Brazil\",\n  \"Cana Verde, Brazil\",\n  \"Canaã, Brazil\",\n  \"Canápolis, Brazil\",\n  \"Candeias, Brazil\",\n  \"Cantagalo, Brazil\",\n  \"Caparaó, Brazil\",\n  \"Capela Nova, Brazil\",\n  \"Capelinha, Brazil\",\n  \"Capetinga, Brazil\",\n  \"Capim Branco, Brazil\",\n  \"Capinópolis, Brazil\",\n  \"Capitão Andrade, Brazil\",\n  \"Capitão Enéas, Brazil\",\n  \"Capitólio, Brazil\",\n  \"Caputira, Brazil\",\n  \"Caraí, Brazil\",\n  \"Caranaíba, Brazil\",\n  \"Carandaí, Brazil\",\n  \"Carangola, Brazil\",\n  \"Caratinga, Brazil\",\n  \"Carbonita, Brazil\",\n  \"Careaçu, Brazil\",\n  \"Carlos Chagas, Brazil\",\n  \"Carmésia, Brazil\",\n  \"Carmo da Cachoeira, Brazil\",\n  \"Carmo da Mata, Brazil\",\n  \"Carmo de Minas, Brazil\",\n  \"Carmo do Cajuru, Brazil\",\n  \"Carmo do Paranaíba, Brazil\",\n  \"Carmo do Rio Claro, Brazil\",\n  \"Carmópolis de Minas, Brazil\",\n  \"Carneirinho, Brazil\",\n  \"Carrancas, Brazil\",\n  \"Carvalhópolis, Brazil\",\n  \"Carvalhos, Brazil\",\n  \"Casa Grande, Brazil\",\n  \"Cascalho Rico, Brazil\",\n  \"Cássia, Brazil\",\n  \"Cataguases, Brazil\",\n  \"Catas Altas, Brazil\",\n  \"Catas Altas da Noruega, Brazil\",\n  \"Catuji, Brazil\",\n  \"Catuti, Brazil\",\n  \"Caxambu, Brazil\",\n  \"Cedro do Abaeté, Brazil\",\n  \"Central de Minas, Brazil\",\n  \"Centralina, Brazil\",\n  \"Chácara, Brazil\",\n  \"Chalé, Brazil\",\n  \"Chapada do Norte, Brazil\",\n  \"Chapada Gaúcha, Brazil\",\n  \"Chiador, Brazil\",\n  \"Cipotânea, Brazil\",\n  \"Claraval, Brazil\",\n  \"Claro dos Poções, Brazil\",\n  \"Cláudio, Brazil\",\n  \"Coimbra, Brazil\",\n  \"Coluna, Brazil\",\n  \"Comendador Gomes, Brazil\",\n  \"Comercinho, Brazil\",\n  \"Conceição da Aparecida, Brazil\",\n  \"Conceição da Barra de Minas, Brazil\",\n  \"Conceição das Alagoas, Brazil\",\n  \"Conceição das Pedras, Brazil\",\n  \"Conceição de Ipanema, Brazil\",\n  \"Conceição do Mato Dentro, Brazil\",\n  \"Conceição do Pará, Brazil\",\n  \"Conceição do Rio Verde, Brazil\",\n  \"Conceição dos Ouros, Brazil\",\n  \"Cônego Marinho, Brazil\",\n  \"Confins, Brazil\",\n  \"Congonhal, Brazil\",\n  \"Congonhas, Brazil\",\n  \"Congonhas do Norte, Brazil\",\n  \"Conquista, Brazil\",\n  \"Conselheiro Lafaiete, Brazil\",\n  \"Conselheiro Pena, Brazil\",\n  \"Consolação, Brazil\",\n  \"Contagem, Brazil\",\n  \"Coqueiral, Brazil\",\n  \"Coração de Jesus, Brazil\",\n  \"Cordisburgo, Brazil\",\n  \"Cordislândia, Brazil\",\n  \"Corinto, Brazil\",\n  \"Coroaci, Brazil\",\n  \"Coromandel, Brazil\",\n  \"Coronel Fabriciano, Brazil\",\n  \"Coronel Murta, Brazil\",\n  \"Coronel Pacheco, Brazil\",\n  \"Coronel Xavier Chaves, Brazil\",\n  \"Córrego Danta, Brazil\",\n  \"Córrego do Bom Jesus, Brazil\",\n  \"Córrego Fundo, Brazil\",\n  \"Córrego Novo, Brazil\",\n  \"Couto de Magalhães de Minas, Brazil\",\n  \"Crisólita, Brazil\",\n  \"Cristais, Brazil\",\n  \"Cristália, Brazil\",\n  \"Cristiano Otoni, Brazil\",\n  \"Cristina, Brazil\",\n  \"Crucilândia, Brazil\",\n  \"Cruzeiro da Fortaleza, Brazil\",\n  \"Cruzília, Brazil\",\n  \"Cuparaque, Brazil\",\n  \"Curral de Dentro, Brazil\",\n  \"Curvelo, Brazil\",\n  \"Datas, Brazil\",\n  \"Delfim Moreira, Brazil\",\n  \"Delfinópolis, Brazil\",\n  \"Delta, Brazil\",\n  \"Descoberto, Brazil\",\n  \"Desterro de Entre Rios, Brazil\",\n  \"Desterro do Melo, Brazil\",\n  \"Diamantina, Brazil\",\n  \"Diogo de Vasconcelos, Brazil\",\n  \"Dionísio, Brazil\",\n  \"Divinésia, Brazil\",\n  \"Divino, Brazil\",\n  \"Divino das Laranjeiras, Brazil\",\n  \"Divinolândia de Minas, Brazil\",\n  \"Divinópolis, Brazil\",\n  \"Divisa Alegre, Brazil\",\n  \"Divisa Nova, Brazil\",\n  \"Divisópolis, Brazil\",\n  \"Dom Bosco, Brazil\",\n  \"Dom Cavati, Brazil\",\n  \"Dom Joaquim, Brazil\",\n  \"Dom Silvério, Brazil\",\n  \"Dom Viçoso, Brazil\",\n  \"Dona Eusébia, Brazil\",\n  \"Dores de Campos, Brazil\",\n  \"Dores de Guanhães, Brazil\",\n  \"Dores do Indaiá, Brazil\",\n  \"Dores do Turvo, Brazil\",\n  \"Doresópolis, Brazil\",\n  \"Douradoquara, Brazil\",\n  \"Durandé, Brazil\",\n  \"Elói Mendes, Brazil\",\n  \"Engenheiro Caldas, Brazil\",\n  \"Engenheiro Navarro, Brazil\",\n  \"Entre Folhas, Brazil\",\n  \"Entre Rios de Minas, Brazil\",\n  \"Ervália, Brazil\",\n  \"Esmeraldas, Brazil\",\n  \"Espera Feliz, Brazil\",\n  \"Espinosa, Brazil\",\n  \"Espírito Santo do Dourado, Brazil\",\n  \"Estiva, Brazil\",\n  \"Estrela Dalva, Brazil\",\n  \"Estrela do Indaiá, Brazil\",\n  \"Estrela do Sul, Brazil\",\n  \"Eugenópolis, Brazil\",\n  \"Ewbank da Câmara, Brazil\",\n  \"Extrema, Brazil\",\n  \"Fama, Brazil\",\n  \"Faria Lemos, Brazil\",\n  \"Felício dos Santos, Brazil\",\n  \"Felisburgo, Brazil\",\n  \"Felixlândia, Brazil\",\n  \"Fernandes Tourinho, Brazil\",\n  \"Ferros, Brazil\",\n  \"Fervedouro, Brazil\",\n  \"Florestal, Brazil\",\n  \"Formiga, Brazil\",\n  \"Formoso, Brazil\",\n  \"Fortaleza de Minas, Brazil\",\n  \"Fortuna de Minas, Brazil\",\n  \"Francisco Badaró, Brazil\",\n  \"Francisco Dumont, Brazil\",\n  \"Francisco Sá, Brazil\",\n  \"Franciscópolis, Brazil\",\n  \"Frei Gaspar, Brazil\",\n  \"Frei Inocêncio, Brazil\",\n  \"Frei Lagonegro, Brazil\",\n  \"Fronteira, Brazil\",\n  \"Fronteira dos Vales, Brazil\",\n  \"Fruta de Leite, Brazil\",\n  \"Frutal, Brazil\",\n  \"Funilândia, Brazil\",\n  \"Galiléia, Brazil\",\n  \"Gameleiras, Brazil\",\n  \"Glaucilândia, Brazil\",\n  \"Goiabeira, Brazil\",\n  \"Goianá, Brazil\",\n  \"Gonçalves, Brazil\",\n  \"Gonzaga, Brazil\",\n  \"Gouveia, Brazil\",\n  \"Governador Valadares, Brazil\",\n  \"Grão Mogol, Brazil\",\n  \"Grupiara, Brazil\",\n  \"Guanhães, Brazil\",\n  \"Guapé, Brazil\",\n  \"Guaraciaba, Brazil\",\n  \"Guaraciama, Brazil\",\n  \"Guaranésia, Brazil\",\n  \"Guarani, Brazil\",\n  \"Guarará, Brazil\",\n  \"Guarda-Mor, Brazil\",\n  \"Guaxupé, Brazil\",\n  \"Guidoval, Brazil\",\n  \"Guimarânia, Brazil\",\n  \"Guiricema, Brazil\",\n  \"Gurinhatã, Brazil\",\n  \"Heliodora, Brazil\",\n  \"Iapu, Brazil\",\n  \"Ibertioga, Brazil\",\n  \"Ibiá, Brazil\",\n  \"Ibiaí, Brazil\",\n  \"Ibiracatu, Brazil\",\n  \"Ibiraci, Brazil\",\n  \"Ibirité, Brazil\",\n  \"Ibitiúra de Minas, Brazil\",\n  \"Ibituruna, Brazil\",\n  \"Icaraí de Minas, Brazil\",\n  \"Igarapé, Brazil\",\n  \"Igaratinga, Brazil\",\n  \"Iguatama, Brazil\",\n  \"Ijaci, Brazil\",\n  \"Ilicínea, Brazil\",\n  \"Imbé de Minas, Brazil\",\n  \"Inconfidentes, Brazil\",\n  \"Indaiabira, Brazil\",\n  \"Indianópolis, Brazil\",\n  \"Ingaí, Brazil\",\n  \"Inhapim, Brazil\",\n  \"Inhaúma, Brazil\",\n  \"Inimutaba, Brazil\",\n  \"Ipaba, Brazil\",\n  \"Ipanema, Brazil\",\n  \"Ipatinga, Brazil\",\n  \"Ipiaçu, Brazil\",\n  \"Ipuiúna, Brazil\",\n  \"Iraí de Minas, Brazil\",\n  \"Itabira, Brazil\",\n  \"Itabirinha, Brazil\",\n  \"Itabirito, Brazil\",\n  \"Itacambira, Brazil\",\n  \"Itacarambi, Brazil\",\n  \"Itaguara, Brazil\",\n  \"Itaipé, Brazil\",\n  \"Itajubá, Brazil\",\n  \"Itamarandiba, Brazil\",\n  \"Itamarati de Minas, Brazil\",\n  \"Itambacuri, Brazil\",\n  \"Itambé do Mato Dentro, Brazil\",\n  \"Itamogi, Brazil\",\n  \"Itamonte, Brazil\",\n  \"Itanhandu, Brazil\",\n  \"Itanhomi, Brazil\",\n  \"Itaobim, Brazil\",\n  \"Itapagipe, Brazil\",\n  \"Itapecerica, Brazil\",\n  \"Itapeva, Brazil\",\n  \"Itatiaiuçu, Brazil\",\n  \"Itaú de Minas, Brazil\",\n  \"Itaúna, Brazil\",\n  \"Itaverava, Brazil\",\n  \"Itinga, Brazil\",\n  \"Itueta, Brazil\",\n  \"Ituiutaba, Brazil\",\n  \"Itumirim, Brazil\",\n  \"Iturama, Brazil\",\n  \"Itutinga, Brazil\",\n  \"Jaboticatubas, Brazil\",\n  \"Jacinto, Brazil\",\n  \"Jacuí, Brazil\",\n  \"Jacutinga, Brazil\",\n  \"Jaguaraçu, Brazil\",\n  \"Jaíba, Brazil\",\n  \"Jampruca, Brazil\",\n  \"Janaúba, Brazil\",\n  \"Januária, Brazil\",\n  \"Japaraíba, Brazil\",\n  \"Japonvar, Brazil\",\n  \"Jeceaba, Brazil\",\n  \"Jenipapo de Minas, Brazil\",\n  \"Jequeri, Brazil\",\n  \"Jequitaí, Brazil\",\n  \"Jequitibá, Brazil\",\n  \"Jequitinhonha, Brazil\",\n  \"Jesuânia, Brazil\",\n  \"Joaíma, Brazil\",\n  \"Joanésia, Brazil\",\n  \"João Monlevade, Brazil\",\n  \"João Pinheiro, Brazil\",\n  \"Joaquim Felício, Brazil\",\n  \"Jordânia, Brazil\",\n  \"José Gonçalves de Minas, Brazil\",\n  \"José Raydan, Brazil\",\n  \"Josenópolis, Brazil\",\n  \"Juatuba, Brazil\",\n  \"Juiz de Fora, Brazil\",\n  \"Juramento, Brazil\",\n  \"Juruaia, Brazil\",\n  \"Juvenília, Brazil\",\n  \"Ladainha, Brazil\",\n  \"Lagamar, Brazil\",\n  \"Lagoa da Prata, Brazil\",\n  \"Lagoa dos Patos, Brazil\",\n  \"Lagoa Dourada, Brazil\",\n  \"Lagoa Formosa, Brazil\",\n  \"Lagoa Grande, Brazil\",\n  \"Lagoa Santa, Brazil\",\n  \"Lajinha, Brazil\",\n  \"Lambari, Brazil\",\n  \"Lamim, Brazil\",\n  \"Laranjal, Brazil\",\n  \"Lassance, Brazil\",\n  \"Lavras, Brazil\",\n  \"Leandro Ferreira, Brazil\",\n  \"Leme do Prado, Brazil\",\n  \"Leopoldina, Brazil\",\n  \"Liberdade, Brazil\",\n  \"Lima Duarte, Brazil\",\n  \"Limeira do Oeste, Brazil\",\n  \"Lontra, Brazil\",\n  \"Luisburgo, Brazil\",\n  \"Luislândia, Brazil\",\n  \"Luminárias, Brazil\",\n  \"Luz, Brazil\",\n  \"Machacalis, Brazil\",\n  \"Machado, Brazil\",\n  \"Madre de Deus de Minas, Brazil\",\n  \"Malacacheta, Brazil\",\n  \"Mamonas, Brazil\",\n  \"Manga, Brazil\",\n  \"Manhuaçu, Brazil\",\n  \"Manhumirim, Brazil\",\n  \"Mantena, Brazil\",\n  \"Mar de Espanha, Brazil\",\n  \"Maravilhas, Brazil\",\n  \"Maria da Fé, Brazil\",\n  \"Mariana, Brazil\",\n  \"Marilac, Brazil\",\n  \"Mário Campos, Brazil\",\n  \"Maripá de Minas, Brazil\",\n  \"Marliéria, Brazil\",\n  \"Marmelópolis, Brazil\",\n  \"Martinho Campos, Brazil\",\n  \"Martins Soares, Brazil\",\n  \"Mata Verde, Brazil\",\n  \"Materlândia, Brazil\",\n  \"Mateus Leme, Brazil\",\n  \"Mathias Lobato, Brazil\",\n  \"Matias Barbosa, Brazil\",\n  \"Matias Cardoso, Brazil\",\n  \"Matipó, Brazil\",\n  \"Mato Verde, Brazil\",\n  \"Matozinhos, Brazil\",\n  \"Matutina, Brazil\",\n  \"Medeiros, Brazil\",\n  \"Medina, Brazil\",\n  \"Mendes Pimentel, Brazil\",\n  \"Mercês, Brazil\",\n  \"Mesquita, Brazil\",\n  \"Minas Novas, Brazil\",\n  \"Minduri, Brazil\",\n  \"Mirabela, Brazil\",\n  \"Miradouro, Brazil\",\n  \"Miraí, Brazil\",\n  \"Miravânia, Brazil\",\n  \"Moeda, Brazil\",\n  \"Moema, Brazil\",\n  \"Monjolos, Brazil\",\n  \"Monsenhor Paulo, Brazil\",\n  \"Montalvânia, Brazil\",\n  \"Monte Alegre de Minas, Brazil\",\n  \"Monte Azul, Brazil\",\n  \"Monte Belo, Brazil\",\n  \"Monte Carmelo, Brazil\",\n  \"Monte Formoso, Brazil\",\n  \"Monte Santo de Minas, Brazil\",\n  \"Monte Sião, Brazil\",\n  \"Monte Verde, Brazil\",\n  \"Montes Claros, Brazil\",\n  \"Montezuma, Brazil\",\n  \"Morada Nova de Minas, Brazil\",\n  \"Morro da Garça, Brazil\",\n  \"Morro do Pilar, Brazil\",\n  \"Munhoz, Brazil\",\n  \"Muriaé, Brazil\",\n  \"Mutum, Brazil\",\n  \"Muzambinho, Brazil\",\n  \"Nacip Raydan, Brazil\",\n  \"Nanuque, Brazil\",\n  \"Naque, Brazil\",\n  \"Natalândia, Brazil\",\n  \"Natércia, Brazil\",\n  \"Nazareno, Brazil\",\n  \"Nepomuceno, Brazil\",\n  \"Ninheira, Brazil\",\n  \"Nova Belém, Brazil\",\n  \"Nova Era, Brazil\",\n  \"Nova Lima, Brazil\",\n  \"Nova Módica, Brazil\",\n  \"Nova Ponte, Brazil\",\n  \"Nova Porteirinha, Brazil\",\n  \"Nova Resende, Brazil\",\n  \"Nova Serrana, Brazil\",\n  \"Nova União, Brazil\",\n  \"Novo Cruzeiro, Brazil\",\n  \"Novo Oriente de Minas, Brazil\",\n  \"Novorizonte, Brazil\",\n  \"Olaria, Brazil\",\n  \"Olhos-d'Água, Brazil\",\n  \"Olímpio Noronha, Brazil\",\n  \"Oliveira, Brazil\",\n  \"Oliveira Fortes, Brazil\",\n  \"Onça de Pitangui, Brazil\",\n  \"Oratórios, Brazil\",\n  \"Orizânia, Brazil\",\n  \"Ouro Branco, Brazil\",\n  \"Ouro Fino, Brazil\",\n  \"Ouro Preto, Brazil\",\n  \"Ouro Verde de Minas, Brazil\",\n  \"Padre Carvalho, Brazil\",\n  \"Padre Paraíso, Brazil\",\n  \"Pai Pedro, Brazil\",\n  \"Paineiras, Brazil\",\n  \"Pains, Brazil\",\n  \"Paiva, Brazil\",\n  \"Palma, Brazil\",\n  \"Palmópolis, Brazil\",\n  \"Papagaios, Brazil\",\n  \"Pará de Minas, Brazil\",\n  \"Paracatu, Brazil\",\n  \"Paraguaçu, Brazil\",\n  \"Paraisópolis, Brazil\",\n  \"Paraopeba, Brazil\",\n  \"Passa Quatro, Brazil\",\n  \"Passa Tempo, Brazil\",\n  \"Passa-Vinte, Brazil\",\n  \"Passabém, Brazil\",\n  \"Passos, Brazil\",\n  \"Patis, Brazil\",\n  \"Patos de Minas, Brazil\",\n  \"Patrocínio, Brazil\",\n  \"Patrocínio do Muriaé, Brazil\",\n  \"Paula Cândido, Brazil\",\n  \"Paulistas, Brazil\",\n  \"Pavão, Brazil\",\n  \"Peçanha, Brazil\",\n  \"Pedra Azul, Brazil\",\n  \"Pedra Bonita, Brazil\",\n  \"Pedra do Anta, Brazil\",\n  \"Pedra do Indaiá, Brazil\",\n  \"Pedra Dourada, Brazil\",\n  \"Pedralva, Brazil\",\n  \"Pedras de Maria da Cruz, Brazil\",\n  \"Pedrinópolis, Brazil\",\n  \"Pedro Leopoldo, Brazil\",\n  \"Pedro Teixeira, Brazil\",\n  \"Pequeri, Brazil\",\n  \"Pequi, Brazil\",\n  \"Perdigão, Brazil\",\n  \"Perdizes, Brazil\",\n  \"Perdões, Brazil\",\n  \"Periquito, Brazil\",\n  \"Pescador, Brazil\",\n  \"Piau, Brazil\",\n  \"Piedade de Caratinga, Brazil\",\n  \"Piedade de Ponte Nova, Brazil\",\n  \"Piedade do Rio Grande, Brazil\",\n  \"Piedade dos Gerais, Brazil\",\n  \"Pimenta, Brazil\",\n  \"Pingo-d'Água, Brazil\",\n  \"Pintópolis, Brazil\",\n  \"Piracema, Brazil\",\n  \"Pirajuba, Brazil\",\n  \"Piranga, Brazil\",\n  \"Piranguçu, Brazil\",\n  \"Piranguinho, Brazil\",\n  \"Pirapetinga, Brazil\",\n  \"Pirapora, Brazil\",\n  \"Piraúba, Brazil\",\n  \"Pitangui, Brazil\",\n  \"Piuí, Brazil\",\n  \"Piumhi, Brazil\",\n  \"Planura, Brazil\",\n  \"Poço Fundo, Brazil\",\n  \"Poços de Caldas, Brazil\",\n  \"Pocrane, Brazil\",\n  \"Pompéu, Brazil\",\n  \"Ponte Nova, Brazil\",\n  \"Ponto Chique, Brazil\",\n  \"Ponto dos Volantes, Brazil\",\n  \"Porteirinha, Brazil\",\n  \"Porto Firme, Brazil\",\n  \"Poté, Brazil\",\n  \"Pouso Alegre, Brazil\",\n  \"Pouso Alto, Brazil\",\n  \"Prados, Brazil\",\n  \"Prata, Brazil\",\n  \"Pratápolis, Brazil\",\n  \"Pratinha, Brazil\",\n  \"Presidente Bernardes, Brazil\",\n  \"Presidente Juscelino, Brazil\",\n  \"Presidente Kubitschek, Brazil\",\n  \"Presidente Olegário, Brazil\",\n  \"Prudente de Morais, Brazil\",\n  \"Quartel Geral, Brazil\",\n  \"Queluzito, Brazil\",\n  \"Raposos, Brazil\",\n  \"Raul Soares, Brazil\",\n  \"Recreio, Brazil\",\n  \"Reduto, Brazil\",\n  \"Resende Costa, Brazil\",\n  \"Resplendor, Brazil\",\n  \"Ressaquinha, Brazil\",\n  \"Riachinho, Brazil\",\n  \"Riacho dos Machados, Brazil\",\n  \"Ribeirão das Neves, Brazil\",\n  \"Ribeirão Vermelho, Brazil\",\n  \"Rio Acima, Brazil\",\n  \"Rio Casca, Brazil\",\n  \"Rio do Prado, Brazil\",\n  \"Rio Doce, Brazil\",\n  \"Rio Espera, Brazil\",\n  \"Rio Manso, Brazil\",\n  \"Rio Novo, Brazil\",\n  \"Rio Paranaíba, Brazil\",\n  \"Rio Pardo de Minas, Brazil\",\n  \"Rio Piracicaba, Brazil\",\n  \"Rio Pomba, Brazil\",\n  \"Rio Preto, Brazil\",\n  \"Rio Vermelho, Brazil\",\n  \"Ritápolis, Brazil\",\n  \"Rochedo de Minas, Brazil\",\n  \"Rodeiro, Brazil\",\n  \"Romaria, Brazil\",\n  \"Rosário da Limeira, Brazil\",\n  \"Rubelita, Brazil\",\n  \"Rubim, Brazil\",\n  \"Sabará, Brazil\",\n  \"Sabinópolis, Brazil\",\n  \"Sacramento, Brazil\",\n  \"Salinas, Brazil\",\n  \"Salto da Divisa, Brazil\",\n  \"Santa Bárbara, Brazil\",\n  \"Santa Bárbara do Leste, Brazil\",\n  \"Santa Bárbara do Monte Verde, Brazil\",\n  \"Santa Bárbara do Tugúrio, Brazil\",\n  \"Santa Cruz de Minas, Brazil\",\n  \"Santa Cruz de Salinas, Brazil\",\n  \"Santa Cruz do Escalvado, Brazil\",\n  \"Santa Efigênia de Minas, Brazil\",\n  \"Santa Fé de Minas, Brazil\",\n  \"Santa Helena de Minas, Brazil\",\n  \"Santa Juliana, Brazil\",\n  \"Santa Luzia, Brazil\",\n  \"Santa Margarida, Brazil\",\n  \"Santa Maria de Itabira, Brazil\",\n  \"Santa Maria do Salto, Brazil\",\n  \"Santa Maria do Suaçuí, Brazil\",\n  \"Santa Rita de Caldas, Brazil\",\n  \"Santa Rita de Ibitipoca, Brazil\",\n  \"Santa Rita de Jacutinga, Brazil\",\n  \"Santa Rita de Minas, Brazil\",\n  \"Santa Rita do Itueto, Brazil\",\n  \"Santa Rita do Sapucaí, Brazil\",\n  \"Santa Rosa da Serra, Brazil\",\n  \"Santa Vitória, Brazil\",\n  \"Santana da Vargem, Brazil\",\n  \"Santana de Cataguases, Brazil\",\n  \"Santana de Pirapama, Brazil\",\n  \"Santana do Deserto, Brazil\",\n  \"Santana do Garambéu, Brazil\",\n  \"Santana do Jacaré, Brazil\",\n  \"Santana do Manhuaçu, Brazil\",\n  \"Santana do Paraíso, Brazil\",\n  \"Santana do Riacho, Brazil\",\n  \"Santana dos Montes, Brazil\",\n  \"Santo Antônio do Amparo, Brazil\",\n  \"Santo Antônio do Aventureiro, Brazil\",\n  \"Santo Antônio do Grama, Brazil\",\n  \"Santo Antônio do Itambé, Brazil\",\n  \"Santo Antônio do Jacinto, Brazil\",\n  \"Santo Antônio do Monte, Brazil\",\n  \"Santo Antônio do Retiro, Brazil\",\n  \"Santo Antônio do Rio Abaixo, Brazil\",\n  \"Santo Hipólito, Brazil\",\n  \"Santos Dumont, Brazil\",\n  \"São Bento Abade, Brazil\",\n  \"São Brás do Suaçuí, Brazil\",\n  \"São Domingos das Dores, Brazil\",\n  \"São Domingos do Prata, Brazil\",\n  \"São Félix de Minas, Brazil\",\n  \"São Francisco, Brazil\",\n  \"São Francisco de Paula, Brazil\",\n  \"São Francisco de Sales, Brazil\",\n  \"São Francisco do Glória, Brazil\",\n  \"São Geraldo, Brazil\",\n  \"São Geraldo da Piedade, Brazil\",\n  \"São Geraldo do Baixio, Brazil\",\n  \"São Gonçalo do Abaeté, Brazil\",\n  \"São Gonçalo do Pará, Brazil\",\n  \"São Gonçalo do Rio Abaixo, Brazil\",\n  \"São Gonçalo do Rio Preto, Brazil\",\n  \"São Gonçalo do Sapucaí, Brazil\",\n  \"São Gotardo, Brazil\",\n  \"São João Batista do Glória, Brazil\",\n  \"São João da Lagoa, Brazil\",\n  \"São João da Mata, Brazil\",\n  \"São João da Ponte, Brazil\",\n  \"São João das Missões, Brazil\",\n  \"São João del Rei, Brazil\",\n  \"São João do Manhuaçu, Brazil\",\n  \"São João do Manteninha, Brazil\",\n  \"São João do Oriente, Brazil\",\n  \"São João do Pacuí, Brazil\",\n  \"São João do Paraíso, Brazil\",\n  \"São João Evangelista, Brazil\",\n  \"São João Nepomuceno, Brazil\",\n  \"São Joaquim de Bicas, Brazil\",\n  \"São José da Barra, Brazil\",\n  \"São José da Lapa, Brazil\",\n  \"São José da Safira, Brazil\",\n  \"São José da Varginha, Brazil\",\n  \"São José do Alegre, Brazil\",\n  \"São José do Divino, Brazil\",\n  \"São José do Goiabal, Brazil\",\n  \"São José do Jacuri, Brazil\",\n  \"São José do Mantimento, Brazil\",\n  \"São Lourenço, Brazil\",\n  \"São Miguel do Anta, Brazil\",\n  \"São Pedro da União, Brazil\",\n  \"São Pedro do Suaçuí, Brazil\",\n  \"São Pedro dos Ferros, Brazil\",\n  \"São Romão, Brazil\",\n  \"São Roque de Minas, Brazil\",\n  \"São Sebastião da Bela Vista, Brazil\",\n  \"São Sebastião da Vargem Alegre, Brazil\",\n  \"São Sebastião do Anta, Brazil\",\n  \"São Sebastião do Maranhão, Brazil\",\n  \"São Sebastião do Oeste, Brazil\",\n  \"São Sebastião do Paraíso, Brazil\",\n  \"São Sebastião do Rio Preto, Brazil\",\n  \"São Sebastião do Rio Verde, Brazil\",\n  \"São Thomé das Letras, Brazil\",\n  \"São Tiago, Brazil\",\n  \"São Tomás de Aquino, Brazil\",\n  \"São Vicente de Minas, Brazil\",\n  \"Sapucaí-Mirim, Brazil\",\n  \"Sardoá, Brazil\",\n  \"Sarzedo, Brazil\",\n  \"Sem-Peixe, Brazil\",\n  \"Senador Amaral, Brazil\",\n  \"Senador Cortes, Brazil\",\n  \"Senador Firmino, Brazil\",\n  \"Senador José Bento, Brazil\",\n  \"Senador Modestino Gonçalves, Brazil\",\n  \"Senhora de Oliveira, Brazil\",\n  \"Senhora do Porto, Brazil\",\n  \"Senhora dos Remédios, Brazil\",\n  \"Sericita, Brazil\",\n  \"Seritinga, Brazil\",\n  \"Serra Azul de Minas, Brazil\",\n  \"Serra da Saudade, Brazil\",\n  \"Serra do Salitre, Brazil\",\n  \"Serra dos Aimorés, Brazil\",\n  \"Serrania, Brazil\",\n  \"Serranópolis de Minas, Brazil\",\n  \"Serranos, Brazil\",\n  \"Serro, Brazil\",\n  \"Sete Lagoas, Brazil\",\n  \"Setubinha, Brazil\",\n  \"Silveirânia, Brazil\",\n  \"Silvianópolis, Brazil\",\n  \"Simão Pereira, Brazil\",\n  \"Simonésia, Brazil\",\n  \"Sobrália, Brazil\",\n  \"Soledade de Minas, Brazil\",\n  \"Tabuleiro, Brazil\",\n  \"Taiobeiras, Brazil\",\n  \"Taparuba, Brazil\",\n  \"Tapira, Brazil\",\n  \"Tapiraí, Brazil\",\n  \"Taquaraçu de Minas, Brazil\",\n  \"Tarumirim, Brazil\",\n  \"Teixeiras, Brazil\",\n  \"Teófilo Otoni, Brazil\",\n  \"Timóteo, Brazil\",\n  \"Tiradentes, Brazil\",\n  \"Tiros, Brazil\",\n  \"Tocantins, Brazil\",\n  \"Tocos do Moji, Brazil\",\n  \"Toledo, Brazil\",\n  \"Tombos, Brazil\",\n  \"Três Corações, Brazil\",\n  \"Três Marias, Brazil\",\n  \"Três Pontas, Brazil\",\n  \"Tumiritinga, Brazil\",\n  \"Tupaciguara, Brazil\",\n  \"Turmalina, Brazil\",\n  \"Turvolândia, Brazil\",\n  \"Ubá, Brazil\",\n  \"Ubaí, Brazil\",\n  \"Ubaporanga, Brazil\",\n  \"Uberaba, Brazil\",\n  \"Uberlândia, Brazil\",\n  \"Umburatiba, Brazil\",\n  \"Unaí, Brazil\",\n  \"União de Minas, Brazil\",\n  \"Uruana de Minas, Brazil\",\n  \"Urucânia, Brazil\",\n  \"Urucuia, Brazil\",\n  \"Vargem Alegre, Brazil\",\n  \"Vargem Bonita, Brazil\",\n  \"Vargem Grande do Rio Pardo, Brazil\",\n  \"Varginha, Brazil\",\n  \"Varjão de MInas, Brazil\",\n  \"Várzea da Palma, Brazil\",\n  \"Varzelândia, Brazil\",\n  \"Vazante, Brazil\",\n  \"Verdelândia, Brazil\",\n  \"Veredinha, Brazil\",\n  \"Veríssimo, Brazil\",\n  \"Vermelho Novo, Brazil\",\n  \"Vespasiano, Brazil\",\n  \"Viçosa, Brazil\",\n  \"Vieiras, Brazil\",\n  \"Virgem da Lapa, Brazil\",\n  \"Virgínia, Brazil\",\n  \"Virginópolis, Brazil\",\n  \"Virgolândia, Brazil\",\n  \"Visconde do Rio Branco, Brazil\",\n  \"Volta Grande, Brazil\",\n  \"Wenceslau Braz, Brazil\",\n  \"Abaetetuba, Brazil\",\n  \"Abel Figueiredo, Brazil\",\n  \"Acará, Brazil\",\n  \"Afuá, Brazil\",\n  \"Água Azul do Norte, Brazil\",\n  \"Alenquer, Brazil\",\n  \"Almeirim, Brazil\",\n  \"Altamira, Brazil\",\n  \"Anajás, Brazil\",\n  \"Ananindeua, Brazil\",\n  \"Anapu, Brazil\",\n  \"Augusto Corrêa, Brazil\",\n  \"Aurora do Pará, Brazil\",\n  \"Aveiro, Brazil\",\n  \"Bagre, Brazil\",\n  \"Baião, Brazil\",\n  \"Bannach, Brazil\",\n  \"Barcarena, Brazil\",\n  \"Belém, Brazil\",\n  \"Belterra, Brazil\",\n  \"Benevides, Brazil\",\n  \"Bom Jesus do Tocantins, Brazil\",\n  \"Bonito, Brazil\",\n  \"Bragança, Brazil\",\n  \"Brasil Novo, Brazil\",\n  \"Brejo Grande do Araguaia, Brazil\",\n  \"Breu Branco, Brazil\",\n  \"Breves, Brazil\",\n  \"Bujaru, Brazil\",\n  \"Cachoeira do Arari, Brazil\",\n  \"Cachoeira do Piriá, Brazil\",\n  \"Cametá, Brazil\",\n  \"Canaã dos Carajás, Brazil\",\n  \"Capanema, Brazil\",\n  \"Capitão Poço, Brazil\",\n  \"Castanhal, Brazil\",\n  \"Chaves, Brazil\",\n  \"Colares, Brazil\",\n  \"Conceição do Araguaia, Brazil\",\n  \"Concórdia do Pará, Brazil\",\n  \"Cumaru do Norte, Brazil\",\n  \"Curionópolis, Brazil\",\n  \"Curralinho, Brazil\",\n  \"Curuá, Brazil\",\n  \"Curuçá, Brazil\",\n  \"Dom Eliseu, Brazil\",\n  \"Eldorado do Carajás, Brazil\",\n  \"Faro, Brazil\",\n  \"Floresta do Araguaia, Brazil\",\n  \"Garrafão do Norte, Brazil\",\n  \"Goianésia do Pará, Brazil\",\n  \"Gurupá, Brazil\",\n  \"Igarapé Açu, Brazil\",\n  \"Igarapé Miri, Brazil\",\n  \"Igarapé-Açu, Brazil\",\n  \"Igarapé-Miri, Brazil\",\n  \"Inhangapi, Brazil\",\n  \"Ipixuna do Pará, Brazil\",\n  \"Irituia, Brazil\",\n  \"Itaituba, Brazil\",\n  \"Itupiranga, Brazil\",\n  \"Jacareacanga, Brazil\",\n  \"Jacundá, Brazil\",\n  \"Juruti, Brazil\",\n  \"Limoeiro do Ajuru, Brazil\",\n  \"Mãe do Rio, Brazil\",\n  \"Magalhães Barata, Brazil\",\n  \"Marabá, Brazil\",\n  \"Maracanã, Brazil\",\n  \"Marapanim, Brazil\",\n  \"Marituba, Brazil\",\n  \"Medicilândia, Brazil\",\n  \"Melgaço, Brazil\",\n  \"Mocajuba, Brazil\",\n  \"Moju, Brazil\",\n  \"Mojuí Dos Campos, Brazil\",\n  \"Monte Alegre, Brazil\",\n  \"Muaná, Brazil\",\n  \"Nova Esperança do Piriá, Brazil\",\n  \"Nova Ipixuna, Brazil\",\n  \"Nova Timboteua, Brazil\",\n  \"Novo Progresso, Brazil\",\n  \"Novo Repartimento, Brazil\",\n  \"Óbidos, Brazil\",\n  \"Oeiras do Pará, Brazil\",\n  \"Oriximiná, Brazil\",\n  \"Ourém, Brazil\",\n  \"Ourilândia do Norte, Brazil\",\n  \"Pacajá, Brazil\",\n  \"Palestina do Pará, Brazil\",\n  \"Paragominas, Brazil\",\n  \"Parauapebas, Brazil\",\n  \"Pau d'Arco, Brazil\",\n  \"Peixe-Boi, Brazil\",\n  \"Piçarra, Brazil\",\n  \"Placas, Brazil\",\n  \"Ponta de Pedras, Brazil\",\n  \"Portel, Brazil\",\n  \"Porto de Moz, Brazil\",\n  \"Prainha, Brazil\",\n  \"Primavera, Brazil\",\n  \"Quatipuru, Brazil\",\n  \"Redenção, Brazil\",\n  \"Rio Maria, Brazil\",\n  \"Rondon do Pará, Brazil\",\n  \"Rurópolis, Brazil\",\n  \"Salinópolis, Brazil\",\n  \"Salvaterra, Brazil\",\n  \"Santa Bárbara do Pará, Brazil\",\n  \"Santa Cruz do Arari, Brazil\",\n  \"Santa Isabel do Pará, Brazil\",\n  \"Santa Luzia do Pará, Brazil\",\n  \"Santa Maria das Barreiras, Brazil\",\n  \"Santa Maria do Pará, Brazil\",\n  \"Santana do Araguaia, Brazil\",\n  \"Santarém, Brazil\",\n  \"Santarém Novo, Brazil\",\n  \"Santo Antônio do Tauá, Brazil\",\n  \"São Caetano de Odivelas, Brazil\",\n  \"São Domingos do Araguaia, Brazil\",\n  \"São Domingos do Capim, Brazil\",\n  \"São Félix do Xingu, Brazil\",\n  \"São Francisco do Pará, Brazil\",\n  \"São Geraldo do Araguaia, Brazil\",\n  \"São João da Ponta, Brazil\",\n  \"São João de Pirabas, Brazil\",\n  \"São João do Araguaia, Brazil\",\n  \"São Miguel do Guamá, Brazil\",\n  \"São Sebastião da Boa Vista, Brazil\",\n  \"Sapucaia, Brazil\",\n  \"Senador José Porfírio, Brazil\",\n  \"Soure, Brazil\",\n  \"Tailândia, Brazil\",\n  \"Terra Alta, Brazil\",\n  \"Terra Santa, Brazil\",\n  \"Tomé Açu, Brazil\",\n  \"Tomé-Açu, Brazil\",\n  \"Tracuateua, Brazil\",\n  \"Trairão, Brazil\",\n  \"Tucumã, Brazil\",\n  \"Tucuruí, Brazil\",\n  \"Ulianópolis, Brazil\",\n  \"Uruará, Brazil\",\n  \"Vigia, Brazil\",\n  \"Viseu, Brazil\",\n  \"Vitória do Xingu, Brazil\",\n  \"Xinguara, Brazil\",\n  \"Água Branca, Brazil\",\n  \"Aguiar, Brazil\",\n  \"Alagoa Grande, Brazil\",\n  \"Alagoa Nova, Brazil\",\n  \"Alagoinha, Brazil\",\n  \"Alcantil, Brazil\",\n  \"Algodão de Jandaíra, Brazil\",\n  \"Alhandra, Brazil\",\n  \"Amparo, Brazil\",\n  \"Aparecida, Brazil\",\n  \"Araçagi, Brazil\",\n  \"Arara, Brazil\",\n  \"Araruna, Brazil\",\n  \"Areia, Brazil\",\n  \"Areia de Baraúnas, Brazil\",\n  \"Areial, Brazil\",\n  \"Aroeiras, Brazil\",\n  \"Assunção, Brazil\",\n  \"Baía da Traição, Brazil\",\n  \"Bananeiras, Brazil\",\n  \"Baraúna, Brazil\",\n  \"Barra de Santa Rosa, Brazil\",\n  \"Barra de Santana, Brazil\",\n  \"Barra de São Miguel, Brazil\",\n  \"Bayeux, Brazil\",\n  \"Belém, Brazil\",\n  \"Belém do Brejo do Cruz, Braz","size_bytes":360000},"shared/currencies.ts":{"content":"// Currency data from ISO 4217 standard\nexport interface Currency {\n  code: string;\n  name: string;\n  symbol?: string;\n}\n\nexport const currencies: Currency[] = [\n  { code: \"AED\", name: \"United Arab Emirates Dirham\", symbol: \"د.إ\" },\n  { code: \"AFN\", name: \"Afghani\", symbol: \"؋\" },\n  { code: \"ALL\", name: \"Albanian Lek\", symbol: \"L\" },\n  { code: \"AMD\", name: \"Armenian Dram\", symbol: \"֏\" },\n  { code: \"ANG\", name: \"Netherlands Antillean Guilder\", symbol: \"ƒ\" },\n  { code: \"AOA\", name: \"Angolan Kwanza\", symbol: \"Kz\" },\n  { code: \"ARS\", name: \"Argentine Peso\", symbol: \"$\" },\n  { code: \"AUD\", name: \"Australian Dollar\", symbol: \"A$\" },\n  { code: \"AWG\", name: \"Aruban Florin\", symbol: \"ƒ\" },\n  { code: \"AZN\", name: \"Azerbaijan Manat\", symbol: \"₼\" },\n  { code: \"BAM\", name: \"Bosnia‑Herzegovina Convertible Mark\", symbol: \"KM\" },\n  { code: \"BBD\", name: \"Barbados Dollar\", symbol: \"$\" },\n  { code: \"BDT\", name: \"Bangladeshi Taka\", symbol: \"৳\" },\n  { code: \"BGN\", name: \"Bulgarian Lev\", symbol: \"лв\" },\n  { code: \"BHD\", name: \"Bahraini Dinar\", symbol: \".د.ب\" },\n  { code: \"BIF\", name: \"Burundi Franc\", symbol: \"Fr\" },\n  { code: \"BMD\", name: \"Bermudian Dollar\", symbol: \"$\" },\n  { code: \"BND\", name: \"Brunei Dollar\", symbol: \"$\" },\n  { code: \"BOB\", name: \"Boliviano\", symbol: \"Bs.\" },\n  { code: \"BRL\", name: \"Brazilian Real\", symbol: \"R$\" },\n  { code: \"BSD\", name: \"Bahamian Dollar\", symbol: \"$\" },\n  { code: \"BTN\", name: \"Bhutan Ngultrum\", symbol: \"Nu.\" },\n  { code: \"BWP\", name: \"Botswana Pula\", symbol: \"P\" },\n  { code: \"BYN\", name: \"Belarusian Ruble\", symbol: \"Br\" },\n  { code: \"BZD\", name: \"Belize Dollar\", symbol: \"$\" },\n  { code: \"CAD\", name: \"Canadian Dollar\", symbol: \"C$\" },\n  { code: \"CDF\", name: \"Congolese Franc\", symbol: \"Fr\" },\n  { code: \"CHF\", name: \"Swiss Franc\", symbol: \"CHF\" },\n  { code: \"CLP\", name: \"Chilean Peso\", symbol: \"$\" },\n  { code: \"CNY\", name: \"Chinese Yuan (Renminbi)\", symbol: \"¥\" },\n  { code: \"COP\", name: \"Colombian Peso\", symbol: \"$\" },\n  { code: \"CRC\", name: \"Costa Rican Colón\", symbol: \"₡\" },\n  { code: \"CUP\", name: \"Cuban Peso\", symbol: \"$\" },\n  { code: \"CVE\", name: \"Cabo Verde Escudo\", symbol: \"$\" },\n  { code: \"CZK\", name: \"Czech Koruna\", symbol: \"Kč\" },\n  { code: \"DJF\", name: \"Djibouti Franc\", symbol: \"Fr\" },\n  { code: \"DKK\", name: \"Danish Krone\", symbol: \"kr\" },\n  { code: \"DOP\", name: \"Dominican Peso\", symbol: \"$\" },\n  { code: \"DZD\", name: \"Algerian Dinar\", symbol: \"د.ج\" },\n  { code: \"EGP\", name: \"Egyptian Pound\", symbol: \"£\" },\n  { code: \"ERN\", name: \"Eritrean Nakfa\", symbol: \"Nfk\" },\n  { code: \"ETB\", name: \"Ethiopian Birr\", symbol: \"Br\" },\n  { code: \"EUR\", name: \"Euro\", symbol: \"€\" },\n  { code: \"FJD\", name: \"Fiji Dollar\", symbol: \"$\" },\n  { code: \"FKP\", name: \"Falkland Islands Pound\", symbol: \"£\" },\n  { code: \"GBP\", name: \"Pound Sterling\", symbol: \"£\" },\n  { code: \"GEL\", name: \"Georgian Lari\", symbol: \"₾\" },\n  { code: \"GHS\", name: \"Ghana Cedi\", symbol: \"₵\" },\n  { code: \"GIP\", name: \"Gibraltar Pound\", symbol: \"£\" },\n  { code: \"GMD\", name: \"Gambian Dalasi\", symbol: \"D\" },\n  { code: \"GNF\", name: \"Guinea Franc\", symbol: \"Fr\" },\n  { code: \"GTQ\", name: \"Guatemalan Quetzal\", symbol: \"Q\" },\n  { code: \"GYD\", name: \"Guyana Dollar\", symbol: \"$\" },\n  { code: \"HKD\", name: \"Hong Kong Dollar\", symbol: \"HK$\" },\n  { code: \"HNL\", name: \"Honduran Lempira\", symbol: \"L\" },\n  { code: \"HRK\", name: \"Croatian Kuna\", symbol: \"kn\" },\n  { code: \"HTG\", name: \"Haitian Gourde\", symbol: \"G\" },\n  { code: \"HUF\", name: \"Hungarian Forint\", symbol: \"Ft\" },\n  { code: \"IDR\", name: \"Indonesian Rupiah\", symbol: \"Rp\" },\n  { code: \"ILS\", name: \"Israeli New Sheqel\", symbol: \"₪\" },\n  { code: \"INR\", name: \"Indian Rupee\", symbol: \"₹\" },\n  { code: \"IQD\", name: \"Iraqi Dinar\", symbol: \"ع.د\" },\n  { code: \"IRR\", name: \"Iranian Rial\", symbol: \"﷼\" },\n  { code: \"ISK\", name: \"Iceland Krona\", symbol: \"kr\" },\n  { code: \"JMD\", name: \"Jamaican Dollar\", symbol: \"$\" },\n  { code: \"JOD\", name: \"Jordanian Dinar\", symbol: \"د.ا\" },\n  { code: \"JPY\", name: \"Japanese Yen\", symbol: \"¥\" },\n  { code: \"KES\", name: \"Kenyan Shilling\", symbol: \"Sh\" },\n  { code: \"KGS\", name: \"Kyrgyzstani Som\", symbol: \"с\" },\n  { code: \"KHR\", name: \"Cambodian Riel\", symbol: \"៛\" },\n  { code: \"KMF\", name: \"Comorian Franc\", symbol: \"Fr\" },\n  { code: \"KPW\", name: \"North Korean Won\", symbol: \"₩\" },\n  { code: \"KRW\", name: \"South Korean Won\", symbol: \"₩\" },\n  { code: \"KWD\", name: \"Kuwaiti Dinar\", symbol: \"د.ك\" },\n  { code: \"KYD\", name: \"Cayman Islands Dollar\", symbol: \"$\" },\n  { code: \"KZT\", name: \"Kazakhstani Tenge\", symbol: \"₸\" },\n  { code: \"LAK\", name: \"Lao Kip\", symbol: \"₭\" },\n  { code: \"LBP\", name: \"Lebanese Pound\", symbol: \"ل.ل\" },\n  { code: \"LKR\", name: \"Sri Lankan Rupee\", symbol: \"Rs\" },\n  { code: \"LRD\", name: \"Liberian Dollar\", symbol: \"$\" },\n  { code: \"LSL\", name: \"Lesotho Loti\", symbol: \"L\" },\n  { code: \"LYD\", name: \"Libyan Dinar\", symbol: \"ل.د\" },\n  { code: \"MAD\", name: \"Moroccan Dirham\", symbol: \"د.م.\" },\n  { code: \"MDL\", name: \"Moldovan Leu\", symbol: \"L\" },\n  { code: \"MGA\", name: \"Malagasy Ariary\", symbol: \"Ar\" },\n  { code: \"MKD\", name: \"Macedonian Denar\", symbol: \"ден\" },\n  { code: \"MMK\", name: \"Myanmar Kyat\", symbol: \"Ks\" },\n  { code: \"MNT\", name: \"Mongolian Tugrik\", symbol: \"₮\" },\n  { code: \"MOP\", name: \"Macanese Pataca\", symbol: \"P\" },\n  { code: \"MRU\", name: \"Mauritanian Ouguiya\", symbol: \"UM\" },\n  { code: \"MUR\", name: \"Mauritius Rupee\", symbol: \"Rs\" },\n  { code: \"MVR\", name: \"Maldivian Rufiyaa\", symbol: \"ރ.\" },\n  { code: \"MWK\", name: \"Malawi Kwacha\", symbol: \"MK\" },\n  { code: \"MXN\", name: \"Mexican Peso\", symbol: \"$\" },\n  { code: \"MYR\", name: \"Malaysian Ringgit\", symbol: \"RM\" },\n  { code: \"MZN\", name: \"Mozambican Metical\", symbol: \"MT\" },\n  { code: \"NAD\", name: \"Namibian Dollar\", symbol: \"$\" },\n  { code: \"NGN\", name: \"Nigerian Naira\", symbol: \"₦\" },\n  { code: \"NIO\", name: \"Nicaraguan Córdoba\", symbol: \"C$\" },\n  { code: \"NOK\", name: \"Norwegian Krone\", symbol: \"kr\" },\n  { code: \"NPR\", name: \"Nepalese Rupee\", symbol: \"Rs\" },\n  { code: \"NZD\", name: \"New Zealand Dollar\", symbol: \"NZ$\" },\n  { code: \"OMR\", name: \"Omani Rial\", symbol: \"ر.ع.\" },\n  { code: \"PAB\", name: \"Panamanian Balboa\", symbol: \"B/.\" },\n  { code: \"PEN\", name: \"Peruvian Sol\", symbol: \"S/\" },\n  { code: \"PGK\", name: \"Papua New Guinea Kina\", symbol: \"K\" },\n  { code: \"PHP\", name: \"Philippine Peso\", symbol: \"₱\" },\n  { code: \"PKR\", name: \"Pakistani Rupee\", symbol: \"Rs\" },\n  { code: \"PLN\", name: \"Polish Zloty\", symbol: \"zł\" },\n  { code: \"PYG\", name: \"Paraguayan Guaraní\", symbol: \"₲\" },\n  { code: \"QAR\", name: \"Qatari Riyal\", symbol: \"ر.ق\" },\n  { code: \"RON\", name: \"Romanian Leu\", symbol: \"lei\" },\n  { code: \"RSD\", name: \"Serbian Dinar\", symbol: \"дин\" },\n  { code: \"RUB\", name: \"Russian Ruble\", symbol: \"₽\" },\n  { code: \"RWF\", name: \"Rwandan Franc\", symbol: \"Fr\" },\n  { code: \"SAR\", name: \"Saudi Riyal\", symbol: \"ر.س\" },\n  { code: \"SBD\", name: \"Solomon Islands Dollar\", symbol: \"$\" },\n  { code: \"SCR\", name: \"Seychelles Rupee\", symbol: \"Rs\" },\n  { code: \"SDG\", name: \"Sudanese Pound\", symbol: \"ج.س.\" },\n  { code: \"SEK\", name: \"Swedish Krona\", symbol: \"kr\" },\n  { code: \"SGD\", name: \"Singapore Dollar\", symbol: \"S$\" },\n  { code: \"SHP\", name: \"Saint Helena Pound\", symbol: \"£\" },\n  { code: \"SLL\", name: \"Sierra Leone Leone\", symbol: \"Le\" },\n  { code: \"SOS\", name: \"Somali Shilling\", symbol: \"Sh\" },\n  { code: \"SRD\", name: \"Surinamese Dollar\", symbol: \"$\" },\n  { code: \"SSP\", name: \"South Sudanese Pound\", symbol: \"£\" },\n  { code: \"STN\", name: \"São Tomé and Príncipe Dobra\", symbol: \"Db\" },\n  { code: \"SYP\", name: \"Syrian Pound\", symbol: \"ل.س\" },\n  { code: \"SZL\", name: \"Swazi Lilangeni\", symbol: \"L\" },\n  { code: \"THB\", name: \"Thai Baht\", symbol: \"฿\" },\n  { code: \"TJS\", name: \"Tajikistani Somoni\", symbol: \"ЅМ\" },\n  { code: \"TMT\", name: \"Turkmenistani Manat\", symbol: \"m\" },\n  { code: \"TND\", name: \"Tunisian Dinar\", symbol: \"د.ت\" },\n  { code: \"TOP\", name: \"Tongan Paʻanga\", symbol: \"T$\" },\n  { code: \"TRY\", name: \"Turkish Lira\", symbol: \"₺\" },\n  { code: \"TTD\", name: \"Trinidad & Tobago Dollar\", symbol: \"$\" },\n  { code: \"TWD\", name: \"New Taiwan Dollar\", symbol: \"NT$\" },\n  { code: \"TZS\", name: \"Tanzanian Shilling\", symbol: \"Sh\" },\n  { code: \"UAH\", name: \"Ukrainian Hryvnia\", symbol: \"₴\" },\n  { code: \"UGX\", name: \"Uganda Shilling\", symbol: \"Sh\" },\n  { code: \"USD\", name: \"United States Dollar\", symbol: \"$\" },\n  { code: \"UYU\", name: \"Uruguayan Peso\", symbol: \"$\" },\n  { code: \"UZS\", name: \"Uzbekistan Som\", symbol: \"so'm\" },\n  { code: \"VND\", name: \"Vietnam Dong\", symbol: \"₫\" },\n  { code: \"VUV\", name: \"Vanuatu Vatu\", symbol: \"Vt\" },\n  { code: \"WST\", name: \"Samoan Tala\", symbol: \"T\" },\n  { code: \"XAF\", name: \"Central African CFA Franc\", symbol: \"Fr\" },\n  { code: \"XCD\", name: \"Eastern Caribbean Dollar\", symbol: \"$\" },\n  { code: \"XOF\", name: \"West African CFA Franc\", symbol: \"Fr\" },\n  { code: \"XPF\", name: \"CFP Franc\", symbol: \"Fr\" },\n  { code: \"XDR\", name: \"Special Drawing Rights\", symbol: \"SDR\" },\n  { code: \"ZAR\", name: \"South African Rand\", symbol: \"R\" },\n  { code: \"ZMW\", name: \"Zambian Kwacha\", symbol: \"ZK\" },\n  { code: \"ZWL\", name: \"Zimbabwean Dollar\", symbol: \"$\" }\n];\n\n// Helper function to get currency symbol\nexport const getCurrencySymbol = (currencyCode: string | null | undefined): string => {\n  if (!currencyCode) return \"$\";\n  \n  const currency = currencies.find(c => c.code === currencyCode);\n  return currency?.symbol || currencyCode;\n};\n\n// Helper function to get currency name\nexport const getCurrencyName = (currencyCode: string | null | undefined): string => {\n  if (!currencyCode) return \"United States Dollar\";\n  \n  const currency = currencies.find(c => c.code === currencyCode);\n  return currency?.name || currencyCode;\n};\n\n// Most commonly used currencies for quick access\nexport const popularCurrencies = [\n  \"USD\", \"EUR\", \"GBP\", \"JPY\", \"AUD\", \"CAD\", \"CHF\", \"CNY\", \n  \"SEK\", \"NZD\", \"MXN\", \"SGD\", \"HKD\", \"NOK\", \"TRY\", \"ZAR\",\n  \"BRL\", \"INR\", \"KRW\", \"TWD\", \"PLN\", \"THB\", \"ILS\", \"CZK\"\n];","size_bytes":10019},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  profileImageUrl: text(\"profile_image_url\"),\n  passwordHash: text(\"password_hash\"), // For email/password auth\n  googleId: text(\"google_id\"), // For Google OAuth\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  provider: text(\"provider\").default(\"email\"), // \"email\" or \"google\"\n  role: text(\"role\").default(\"user\"), // \"user\", \"moderator\", or \"admin\"\n  isActive: boolean(\"is_active\").default(true), // for banning users\n  coins: integer(\"coins\").default(20).notNull(), // User's available coins\n  lastCoinReset: timestamp(\"last_coin_reset\").defaultNow(), // Last monthly reset\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  activeSubscriptionId: varchar(\"active_subscription_id\"),\n  passwordResetToken: text(\"password_reset_token\"), // Token for password reset\n  passwordResetExpires: timestamp(\"password_reset_expires\"), // Token expiration\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  location: text(\"location\").notNull(),\n  specificArea: text(\"specific_area\"), // Detailed area/neighborhood information\n  minBudget: integer(\"min_budget\"),\n  maxBudget: integer(\"max_budget\"),\n  budgetType: text(\"budget_type\").default(\"fixed\"), // \"fixed\" or \"hourly\"\n  currency: text(\"currency\").default(\"USD\"), // USD, EUR, GBP, etc.\n  experienceLevel: text(\"experience_level\").default(\"any\"), // any, beginner, intermediate, expert\n  duration: text(\"duration\"), // a couple hours, a day, a couple of days, a week, less than a month, 1-3 months, 3+ months, custom\n  customDuration: text(\"custom_duration\"), // custom duration description when duration is \"custom\"\n  freelancersNeeded: integer(\"freelancers_needed\").default(1).notNull(), // Number of freelancers needed for this job\n  status: text(\"status\").notNull().default(\"open\"), // open, in_progress, completed\n  approvalStatus: text(\"approval_status\").default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\"), // admin user ID who approved\n  approvedAt: timestamp(\"approved_at\"),\n  userId: varchar(\"user_id\").notNull(),\n  images: text(\"images\").array().default([]),\n  expiresAt: timestamp(\"expires_at\").notNull(), // Job expires 30 days after creation/extension\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Performance indexes for high-scale search\n  titleIdx: index(\"jobs_title_idx\").on(table.title),\n  categoryIdx: index(\"jobs_category_idx\").on(table.category),\n  locationIdx: index(\"jobs_location_idx\").on(table.location),\n  statusIdx: index(\"jobs_status_idx\").on(table.status),\n  approvalStatusIdx: index(\"jobs_approval_status_idx\").on(table.approvalStatus),\n  experienceLevelIdx: index(\"jobs_experience_level_idx\").on(table.experienceLevel),\n  budgetIdx: index(\"jobs_budget_idx\").on(table.minBudget, table.maxBudget),\n  createdAtIdx: index(\"jobs_created_at_idx\").on(table.createdAt),\n  userIdIdx: index(\"jobs_user_id_idx\").on(table.userId),\n  // Composite indexes for common query patterns\n  statusApprovalIdx: index(\"jobs_status_approval_idx\").on(table.status, table.approvalStatus),\n  locationCategoryIdx: index(\"jobs_location_category_idx\").on(table.location, table.category),\n  expiresAtIdx: index(\"jobs_expires_at_idx\").on(table.expiresAt),\n}));\n\nexport const applications = pgTable(\"applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  bidAmount: integer(\"bid_amount\").notNull(),\n  coinsBid: integer(\"coins_bid\").default(0), // Coins bid for ranking\n  message: text(\"message\").notNull(),\n  experience: text(\"experience\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected\n  isCompleted: boolean(\"is_completed\").default(false), // Whether client marked work as completed\n  completedAt: timestamp(\"completed_at\"), // When work was marked complete\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Index for efficient bidding queries\n  jobIdCoinsBidIdx: index(\"applications_job_id_coins_bid_idx\").on(table.jobId, table.coinsBid),\n  jobIdCreatedAtIdx: index(\"applications_job_id_created_at_idx\").on(table.jobId, table.createdAt),\n}));\n\nexport const emailVerificationTokens = pgTable(\"email_verification_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  emailIdx: index(\"email_verification_tokens_email_idx\").on(table.email),\n  tokenIdx: index(\"email_verification_tokens_token_idx\").on(table.token),\n  expiresAtIdx: index(\"email_verification_tokens_expires_at_idx\").on(table.expiresAt),\n}));\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull(),\n  reviewerId: varchar(\"reviewer_id\").notNull(), // User giving the review\n  revieweeId: varchar(\"reviewee_id\").notNull(), // User receiving the review\n  rating: integer(\"rating\").notNull(), // Overall 1-5 stars\n  comment: text(\"comment\"),\n  reviewType: text(\"review_type\").notNull(), // \"client_to_worker\" or \"worker_to_client\"\n  // Detailed ratings for client-to-freelancer reviews\n  qualityOfWorkRating: integer(\"quality_of_work_rating\"), // 1-5 stars for work quality\n  communicationRating: integer(\"communication_rating\"), // 1-5 stars for communication & professionalism\n  timelinessRating: integer(\"timeliness_rating\"), // 1-5 stars for timeliness & reliability\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\"),\n  applicationId: varchar(\"application_id\"),\n  serviceId: varchar(\"service_id\"), // For service conversations\n  serviceRequestId: varchar(\"service_request_id\"), // For service conversations\n  jobPosterId: varchar(\"job_poster_id\"), // Job poster who initiated\n  applicantId: varchar(\"applicant_id\"), // Job applicant\n  serviceProviderId: varchar(\"service_provider_id\"), // Service provider\n  serviceRequesterId: varchar(\"service_requester_id\"), // Service requester\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull(),\n  senderId: varchar(\"sender_id\").notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  jobId: varchar(\"job_id\"),\n  applicationId: varchar(\"application_id\"),\n  serviceId: varchar(\"service_id\"),\n  serviceRequestId: varchar(\"service_request_id\"),\n  type: text(\"type\").notNull(), // \"application_accepted\", \"application_rejected\", \"job_completed\", \"service_request\", etc.\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobReports = pgTable(\"job_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull(),\n  reporterId: varchar(\"reporter_id\").notNull(), // User who reported the job\n  category: text(\"category\").notNull(), // \"spam\", \"inappropriate\", \"fake\", \"discriminatory\", \"unsafe\", \"other\"\n  reason: text(\"reason\").notNull(), // Detailed reason for the report\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"reviewed\", \"resolved\", \"dismissed\"\n  adminNotes: text(\"admin_notes\"), // Notes from admin review\n  reviewedBy: varchar(\"reviewed_by\"), // Admin who reviewed the report\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  jobIdIdx: index(\"job_reports_job_id_idx\").on(table.jobId),\n  reporterIdIdx: index(\"job_reports_reporter_id_idx\").on(table.reporterId),\n  statusIdx: index(\"job_reports_status_idx\").on(table.status),\n  createdAtIdx: index(\"job_reports_created_at_idx\").on(table.createdAt),\n}));\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  location: text(\"location\").notNull(),\n  specificArea: text(\"specific_area\"), // Detailed area/neighborhood information\n  priceFrom: integer(\"price_from\").notNull(), // Starting price\n  priceTo: integer(\"price_to\"), // Optional ending price for range\n  priceType: text(\"price_type\").default(\"fixed\"), // \"fixed\", \"hourly\", \"per_project\"\n  currency: text(\"currency\").default(\"USD\"), // USD, EUR, GBP, etc.\n  experienceLevel: text(\"experience_level\").default(\"intermediate\"), // beginner, intermediate, expert\n  deliveryTime: text(\"delivery_time\"), // \"1-2 days\", \"3-5 days\", \"1 week\", \"2 weeks\", \"1 month\", \"custom\"\n  customDeliveryTime: text(\"custom_delivery_time\"), // custom delivery description\n  duration: text(\"duration\"), // Service duration (e.g. \"2 hours\", \"1 day\")\n  availableSlots: integer(\"available_slots\").default(5).notNull(), // How many clients they can take\n  status: text(\"status\").notNull().default(\"active\"), // active, paused, inactive\n  approvalStatus: text(\"approval_status\").default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\"), // admin user ID who approved\n  approvedAt: timestamp(\"approved_at\"),\n  userId: varchar(\"user_id\").notNull(),\n  images: text(\"images\").array().default([]),\n  tags: text(\"tags\").array().default([]), // Service tags/skills\n  // Contact information\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  website: text(\"website\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\").notNull().default(sql`now() + interval '30 days'`),\n}, (table) => ({\n  // Performance indexes for search\n  titleIdx: index(\"services_title_idx\").on(table.title),\n  categoryIdx: index(\"services_category_idx\").on(table.category),\n  locationIdx: index(\"services_location_idx\").on(table.location),\n  statusIdx: index(\"services_status_idx\").on(table.status),\n  approvalStatusIdx: index(\"services_approval_status_idx\").on(table.approvalStatus),\n  experienceLevelIdx: index(\"services_experience_level_idx\").on(table.experienceLevel),\n  priceIdx: index(\"services_price_idx\").on(table.priceFrom, table.priceTo),\n  createdAtIdx: index(\"services_created_at_idx\").on(table.createdAt),\n  userIdIdx: index(\"services_user_id_idx\").on(table.userId),\n  // Composite indexes\n  statusApprovalIdx: index(\"services_status_approval_idx\").on(table.status, table.approvalStatus),\n  locationCategoryIdx: index(\"services_location_category_idx\").on(table.location, table.category),\n  expiresAtIdx: index(\"services_expires_at_idx\").on(table.expiresAt),\n}));\n\nexport const serviceRequests = pgTable(\"service_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  serviceId: varchar(\"service_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(), // User requesting the service\n  message: text(\"message\").notNull(),\n  budget: integer(\"budget\").notNull(),\n  coinsBid: integer(\"coins_bid\").default(0), // Coins bid for priority\n  timeline: text(\"timeline\"), // When they need it done\n  requirements: text(\"requirements\"), // Specific requirements\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected, completed\n  acceptedAt: timestamp(\"accepted_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  serviceIdIdx: index(\"service_requests_service_id_idx\").on(table.serviceId),\n  userIdIdx: index(\"service_requests_user_id_idx\").on(table.userId),\n  statusIdx: index(\"service_requests_status_idx\").on(table.status),\n  serviceIdCoinsBidIdx: index(\"service_requests_service_id_coins_bid_idx\").on(table.serviceId, table.coinsBid),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertEmailVerificationTokenSchema = createInsertSchema(emailVerificationTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  approvalStatus: true,\n  approvedBy: true,\n  approvedAt: true,\n  expiresAt: true, // Auto-generated by backend\n}).extend({\n  maxBudget: z.number().min(1, \"Max budget must be at least $1\"),\n  specificArea: z.string().optional(),\n  freelancersNeeded: z.number().min(1, \"Must need at least 1 freelancer\").max(50, \"Cannot exceed 50 freelancers\"),\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  // For client-to-freelancer reviews, detailed ratings are required\n  qualityOfWorkRating: z.number().min(1).max(5).optional(),\n  communicationRating: z.number().min(1).max(5).optional(),\n  timelinessRating: z.number().min(1).max(5).optional(),\n}).refine((data) => {\n  // If it's a client-to-worker review, detailed ratings are required\n  if (data.reviewType === \"client_to_worker\") {\n    return data.qualityOfWorkRating && data.communicationRating && data.timelinessRating;\n  }\n  return true;\n}, {\n  message: \"Detailed ratings are required for client-to-freelancer reviews\",\n  path: [\"qualityOfWorkRating\", \"communicationRating\", \"timelinessRating\"],\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastMessageAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n  approvalStatus: true,\n  approvedBy: true,\n  approvedAt: true,\n}).extend({\n  title: z.string().min(1, \"Title is required\").max(100, \"Title cannot exceed 100 characters\"),\n  description: z.string().min(1, \"Description is required\").max(1500, \"Description cannot exceed 1500 characters\"),\n  priceFrom: z.number().min(1, \"Starting price must be at least $1\"),\n  priceTo: z.number().min(1).optional(),\n  availableSlots: z.number().min(1, \"Must have at least 1 available slot\").max(100, \"Cannot exceed 100 slots\"),\n  tags: z.array(z.string()).optional(),\n  images: z.array(z.string()).optional(),\n});\n\nexport const insertServiceRequestSchema = createInsertSchema(serviceRequests).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  acceptedAt: true,\n  completedAt: true,\n}).extend({\n  budget: z.number().min(1, \"Budget must be at least $1\"),\n  coinsBid: z.number().min(0).max(100).optional(),\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Application = typeof applications.$inferSelect;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type ServiceRequest = typeof serviceRequests.$inferSelect;\nexport type InsertServiceRequest = z.infer<typeof insertServiceRequestSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type InsertEmailVerificationToken = z.infer<typeof insertEmailVerificationTokenSchema>;\n\n// Composite types\nexport interface ServiceWithRequests extends Service {\n  requestCount: number;\n  requests?: ServiceRequestWithUser[];\n  averageRating?: number;\n  reviewCount?: number;\n  user?: User;\n}\n\nexport interface ServiceRequestWithUser extends ServiceRequest {\n  user: User;\n}\n\nexport const insertJobReportSchema = createInsertSchema(jobReports).omit({\n  id: true,\n  reporterId: true,\n  createdAt: true,\n  status: true,\n  adminNotes: true,\n  reviewedBy: true,\n  reviewedAt: true,\n}).extend({\n  category: z.enum([\"spam\", \"inappropriate\", \"fake\", \"discriminatory\", \"unsafe\", \"other\"]),\n  reason: z.string().min(10, \"Please provide a detailed reason (minimum 10 characters)\"),\n});\n\n// Password reset schemas\nexport const passwordResetRequestSchema = z.object({\n  email: z.string().email(),\n});\n\nexport const passwordResetSchema = z.object({\n  token: z.string(),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\nexport type PasswordResetRequest = z.infer<typeof passwordResetRequestSchema>;\nexport type PasswordReset = z.infer<typeof passwordResetSchema>;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertJobReport = z.infer<typeof insertJobReportSchema>;\nexport type JobReport = typeof jobReports.$inferSelect;\n\n// Search-related types\nexport interface SearchParams {\n  query?: string;\n  category?: string;\n  location?: string;\n  experienceLevel?: string;\n  minBudget?: number;\n  maxBudget?: number;\n  currency?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'relevance' | 'date' | 'budget_low' | 'budget_high';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface SearchResult {\n  jobs: JobWithApplications[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n  searchMeta: {\n    query?: string;\n    filters: Record<string, any>;\n    executionTime: number;\n    fromCache: boolean;\n  };\n}\n\n// Extended types for API responses\nexport type JobWithApplications = Job & {\n  applicationCount: number;\n  applications?: ApplicationWithUser[];\n  posterRating?: number;\n  posterReviewCount?: number;\n};\n\nexport type ApplicationWithUser = Application & {\n  user: User;\n};\n\nexport type ApplicationWithJob = Application & {\n  job: Job;\n};\n\nexport type ConversationWithDetails = Conversation & {\n  otherUser: User;\n  job?: Job;\n  service?: Service;\n  lastMessage?: Message;\n  unreadCount: number;\n};\n\nexport type MessageWithSender = Message & {\n  sender: User;\n};\n\nexport type ReviewWithUser = Review & {\n  reviewer: User;\n  reviewee: User;\n};\n\nexport type UserWithStats = User & {\n  averageRating: number;\n  totalReviews: number;\n  completedJobs: number;\n  completedServices: number;\n  totalJobsPosted: number;\n  totalServicesPosted: number;\n  totalApplicationsSubmitted: number;\n  totalInquiriesReceived: number;\n  joinedDate: string;\n};\n\n// Job report related types\nexport type JobReportWithDetails = JobReport & {\n  job: Job;\n  reporter: User;\n  reviewer?: User;\n};\n\n// Coin subscription table for monthly plans\nexport const coinSubscriptions = pgTable(\"coin_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  stripeSubscriptionId: text(\"stripe_subscription_id\").unique(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  planType: text(\"plan_type\").notNull(), // starter, popular, pro, ultimate\n  coinAllocation: integer(\"coin_allocation\").notNull(),\n  monthlyPrice: integer(\"monthly_price\").notNull(), // in cents\n  status: text(\"status\").notNull().default(\"active\"), // active, canceled, past_due, incomplete\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  canceledAt: timestamp(\"canceled_at\"),\n}, (table) => ({\n  userIdIdx: index(\"coin_subscriptions_user_id_idx\").on(table.userId),\n  statusIdx: index(\"coin_subscriptions_status_idx\").on(table.status),\n  stripeSubscriptionIdx: index(\"coin_subscriptions_stripe_subscription_idx\").on(table.stripeSubscriptionId),\n}));\n\nexport const insertCoinSubscriptionSchema = createInsertSchema(coinSubscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCoinSubscription = z.infer<typeof insertCoinSubscriptionSchema>;\nexport type CoinSubscription = typeof coinSubscriptions.$inferSelect;\n\n// Subscription plan configuration\nexport const SUBSCRIPTION_PLANS = {\n  freelancer: { \n    name: \"Freelancer\", \n    coins: 100, \n    price: 499, \n    color: \"bg-blue-100 text-blue-800 border-blue-200\",\n    icon: \"⭐\",\n    hasUnlimitedCoinCap: false\n  },\n  professional: { \n    name: \"Professional\", \n    coins: 400, \n    price: 999, \n    color: \"bg-purple-100 text-purple-800 border-purple-200\",\n    icon: \"💼\",\n    hasUnlimitedCoinCap: false\n  },\n  expert: { \n    name: \"Expert\", \n    coins: 1000, \n    price: 1999, \n    color: \"bg-orange-100 text-orange-800 border-orange-200\",\n    icon: \"🚀\",\n    hasUnlimitedCoinCap: false\n  },\n  elite: { \n    name: \"Elite\", \n    coins: 5000, \n    price: 3699, \n    color: \"bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-900 border-yellow-300\",\n    icon: \"👑\",\n    hasUnlimitedCoinCap: false\n  },\n} as const;\n\nexport type SubscriptionPlanType = keyof typeof SUBSCRIPTION_PLANS;\n\n// Keep coin purchase table for legacy one-time purchases and subscription tracking\nexport const coinPurchases = pgTable(\"coin_purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"),\n  subscriptionId: varchar(\"subscription_id\").references(() => coinSubscriptions.id),\n  amount: integer(\"amount\").notNull(), // Amount in cents\n  coins: integer(\"coins\").notNull(), // Number of coins purchased\n  type: text(\"type\").notNull().default(\"subscription\"), // one_time, subscription\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n}, (table) => ({\n  userIdIdx: index(\"coin_purchases_user_id_idx\").on(table.userId),\n  statusIdx: index(\"coin_purchases_status_idx\").on(table.status),\n  createdAtIdx: index(\"coin_purchases_created_at_idx\").on(table.createdAt),\n  subscriptionIdx: index(\"coin_purchases_subscription_idx\").on(table.subscriptionId),\n}));\n\nexport const insertCoinPurchaseSchema = createInsertSchema(coinPurchases).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport type InsertCoinPurchase = z.infer<typeof insertCoinPurchaseSchema>;\nexport type CoinPurchase = typeof coinPurchases.$inferSelect;\n\n// Skill endorsements table\nexport const skillEndorsements = pgTable(\"skill_endorsements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  endorserId: varchar(\"endorser_id\").notNull(),\n  endorseeId: varchar(\"endorsee_id\").notNull(),\n  jobId: varchar(\"job_id\").notNull(),\n  skill: text(\"skill\").notNull(), // The specific skill being endorsed\n  message: text(\"message\"), // Optional endorsement message\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  endorserIdIdx: index(\"skill_endorsements_endorser_id_idx\").on(table.endorserId),\n  endorseeIdIdx: index(\"skill_endorsements_endorsee_id_idx\").on(table.endorseeId),\n  jobIdIdx: index(\"skill_endorsements_job_id_idx\").on(table.jobId),\n  skillIdx: index(\"skill_endorsements_skill_idx\").on(table.skill),\n}));\n\nexport const insertSkillEndorsementSchema = createInsertSchema(skillEndorsements).omit({\n  id: true,\n  endorserId: true, // Don't require endorserId in request body - set automatically from auth\n  createdAt: true,\n});\n\nexport type InsertSkillEndorsement = z.infer<typeof insertSkillEndorsementSchema>;\nexport type SkillEndorsement = typeof skillEndorsements.$inferSelect;\n\nexport type SkillEndorsementWithUser = SkillEndorsement & {\n  endorser: User;\n  job: Job;\n};\n","size_bytes":25185},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/header\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport Home from \"@/pages/home\";\nimport Services from \"@/pages/services\";\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\nimport VerifyEmailPage from \"@/pages/verify-email\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ProfilePage from \"@/pages/profile\";\nimport MessagesPage from \"@/pages/messages\";\nimport NotificationsPage from \"@/pages/notifications\";\nimport JobDetailsPage from \"@/pages/job-details\";\nimport ServiceDetailsPage from \"@/pages/service-details\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Settings from \"@/pages/settings\";\nimport BuyCoinsPage from \"@/pages/buy-coins\";\nimport HelpCenter from \"@/pages/help-center\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/verify-email\" component={VerifyEmailPage} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/messages\" component={MessagesPage} />\n      <Route path=\"/notifications\" component={NotificationsPage} />\n      <Route path=\"/profile/:userId?\" component={ProfilePage} />\n      <Route path=\"/job/:jobId\" component={JobDetailsPage} />\n      <Route path=\"/service/:serviceId\" component={ServiceDetailsPage} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/buy-coins\" component={BuyCoinsPage} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/help-center\" component={HelpCenter} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <HelmetProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <TooltipProvider>\n            <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n              <Header />\n              <div className=\"flex-1\">\n                <Router />\n              </div>\n              <footer className=\"bg-white border-t border-gray-200 py-6 mt-auto\">\n                <div className=\"container mx-auto px-4 text-center\">\n                  <p className=\"text-sm text-gray-500\">\n                    Jigz - Copyright © 2025 Xpo8 Limited - All rights reserved\n                  </p>\n                </div>\n              </footer>\n            </div>\n            <Toaster />\n          </TooltipProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3218},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .bg-gray-150 {\n    background-color: rgb(249 250 251);\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Fix dropdown z-index and scrolling in modals */\n[data-radix-popper-content-wrapper] {\n  z-index: 99999 !important;\n}\n\n[data-radix-popover-content] {\n  z-index: 99999 !important;\n}\n\n[data-radix-popper-content-wrapper] [role=\"listbox\"],\n[data-radix-popper-content-wrapper] [cmdk-list],\n[cmdk-list] {\n  max-height: 200px !important;\n  overflow-y: auto !important;\n  overflow-x: hidden !important;\n  scrollbar-width: thin;\n}\n\n/* Ensure popover content is above modals */\n.popover-content {\n  z-index: 99999 !important;\n}\n\n/* Force scrollbar visibility */\n[cmdk-list]::-webkit-scrollbar {\n  width: 6px;\n}\n\n[cmdk-list]::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n[cmdk-list]::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n[cmdk-list]::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n","size_bytes":3071},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/application-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertApplicationSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport type { JobWithApplications } from \"@shared/schema\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { CoinWarning } from \"@/components/coin-display\";\nimport { useState } from \"react\";\nimport { Coins, CheckCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst applicationFormSchema = insertApplicationSchema.extend({\n  bidAmount: z.number().min(1, \"Bid amount must be greater than 0\"),\n  coinsBid: z.number().min(0, \"Coins bid must be 0 or higher\").optional(),\n  message: z.string().max(1500, \"Message must be 1500 characters or less\"),\n  experience: z.string().max(500, \"Experience must be 500 characters or less\").optional(),\n});\n\ntype ApplicationFormData = z.infer<typeof applicationFormSchema>;\n\ninterface ApplicationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  job: JobWithApplications | null;\n}\n\nexport default function ApplicationModal({ isOpen, onClose, job }: ApplicationModalProps) {\n  const [coinError, setCoinError] = useState<{ coinsNeeded: number; coinsAvailable: number } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated } = useAuth();\n\n  // Check if user has already applied to this job\n  const { data: applicationStatus, isLoading: checkingStatus } = useQuery({\n    queryKey: [\"/api/jobs\", job?.id, \"application-status\"],\n    enabled: isAuthenticated && isOpen && !!job?.id\n  });\n\n  // Fetch top bidders for this job\n  const { data: topBidders = [] } = useQuery<Array<{ name: string; coinsBid: number }>>({\n    queryKey: [\"/api/jobs\", job?.id, \"top-bidders\"],\n    enabled: isAuthenticated && isOpen && !!job?.id\n  });\n\n  const form = useForm<ApplicationFormData>({\n    resolver: zodResolver(applicationFormSchema),\n    defaultValues: {\n      jobId: \"\",\n      bidAmount: undefined,\n      coinsBid: 0,\n      message: \"\",\n      experience: \"\",\n      status: \"pending\",\n    },\n  });\n\n  const createApplicationMutation = useMutation({\n    mutationFn: async (data: ApplicationFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/applications\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      setCoinError(null);\n      const coinsBid = form.getValues(\"coinsBid\") || 0;\n      const totalCoins = 1 + coinsBid;\n      const bidMessage = coinsBid > 0 ? ` + ${coinsBid} for priority bidding` : '';\n      toast({\n        title: \"Success\",\n        description: `Application submitted successfully! ${totalCoins} coin${totalCoins > 1 ? 's' : ''} deducted (1 for application${bidMessage}).`,\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      console.error(\"Error submitting application:\", error);\n      \n      // Check if it's a coin-related error\n      if (error.coinsNeeded && error.coinsAvailable !== undefined) {\n        setCoinError({\n          coinsNeeded: error.coinsNeeded,\n          coinsAvailable: error.coinsAvailable\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ApplicationFormData) => {\n    if (!job) return;\n    \n    createApplicationMutation.mutate({\n      ...data,\n      jobId: job.id,\n    });\n  };\n\n  const currencySymbol = getCurrencySymbol(job?.currency);\n  const budgetText = (() => {\n    if (!job) return \"Budget negotiable\";\n    \n    const isHourly = job.budgetType === \"hourly\";\n    const suffix = isHourly ? \"/hr\" : \"\";\n    \n    if (job.minBudget && job.maxBudget) {\n      return `${currencySymbol}${job.minBudget} - ${currencySymbol}${job.maxBudget}${suffix}`;\n    } else if (job.minBudget) {\n      return `${currencySymbol}${job.minBudget}+${suffix}`;\n    } else if (job.maxBudget) {\n      return `Up to ${currencySymbol}${job.maxBudget}${suffix}`;\n    } else {\n      return isHourly ? \"Rate negotiable\" : \"Budget negotiable\";\n    }\n  })();\n\n  const hasAlreadyApplied = (applicationStatus as { hasApplied?: boolean })?.hasApplied;\n\n  // Show \"Already Applied\" state if user has already applied\n  if (hasAlreadyApplied && isOpen) {\n    return (\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n        {/* Backdrop */}\n        <div \n          className=\"absolute inset-0 bg-black/50\" \n          onClick={onClose}\n        />\n        \n        {/* Modal Content */}\n        <div \n          className=\"relative w-full h-full sm:w-auto sm:h-auto sm:max-w-lg bg-white sm:rounded-lg overflow-hidden flex flex-col sm:m-4\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Mobile Header */}\n          <div className=\"sticky top-0 z-10 bg-white border-b border-gray-200 p-4 flex items-center justify-between sm:hidden\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <h2 className=\"text-lg font-semibold\">Already Applied</h2>\n            </div>\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-100 rounded-full\"\n            >\n              <X className=\"h-6 w-6\" />\n            </button>\n          </div>\n          \n          {/* Desktop Header */}\n          <div className=\"pb-4 hidden sm:block p-6 border-b border-gray-200 relative\">\n            <button\n              onClick={onClose}\n              className=\"absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full transition-colors\"\n              type=\"button\"\n            >\n              <X className=\"h-5 w-5 text-gray-500\" />\n            </button>\n            <h2 className=\"text-xl font-semibold pr-12 flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              Already Applied\n            </h2>\n            <p className=\"text-gray-600 mt-1\">\n              You have already submitted an application for \"{job?.title}\"\n            </p>\n          </div>\n          \n          {/* Content */}\n          <div className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <p className=\"text-sm text-green-800\">\n                  Your application has been submitted successfully. The job poster will review it and contact you if they're interested.\n                </p>\n              </div>\n              <div className=\"flex justify-end\">\n                <Button onClick={onClose} variant=\"outline\">\n                  Close\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Create a full-page modal for mobile, dialog-style for desktop\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/50\" \n        onClick={onClose}\n      />\n      \n      {/* Modal Content */}\n      <div \n        className=\"relative w-full h-full sm:w-auto sm:h-auto sm:max-w-lg sm:max-h-[90vh] bg-white sm:rounded-lg overflow-hidden flex flex-col sm:m-4\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Mobile Header with Close Button */}\n        <div className=\"sticky top-0 z-10 bg-white border-b border-gray-200 p-4 flex items-center justify-between sm:hidden\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Apply for Job</h2>\n            <p className=\"text-sm text-gray-600\">Applying costs 1 coin + priority bidding</p>\n          </div>\n          <button\n            type=\"button\"\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-full\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n        \n        {/* Desktop Header */}\n        <div className=\"pb-4 hidden sm:block p-6 border-b border-gray-200 relative\">\n          <button\n            onClick={onClose}\n            className=\"absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            type=\"button\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n          <h2 className=\"text-xl font-semibold pr-12\">Apply for Job</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Submit your application with a competitive bid and message. Applying costs 1 coin, plus additional coins for priority bidding.\n          </p>\n        </div>\n        \n        {/* Content Container */}\n        <div className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n        \n        {coinError && (\n          <CoinWarning \n            coinsNeeded={coinError.coinsNeeded} \n            coinsAvailable={coinError.coinsAvailable} \n          />\n        )}\n        \n        {job && (\n          <>\n            {/* Job Summary */}\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n              <h3 className=\"font-medium text-gray-900 mb-2\">{job.title}</h3>\n              <p className=\"text-sm text-gray-600\">{job.location} • {budgetText}</p>\n            </div>\n\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {/* Your Bid */}\n              <div>\n                <Label htmlFor=\"bidAmount\">Your Bid Amount ({currencySymbol}) *</Label>\n                <Input\n                  id=\"bidAmount\"\n                  type=\"number\"\n                  placeholder=\"30\"\n                  min=\"1\"\n                  step=\"0.01\"\n                  {...form.register(\"bidAmount\", { valueAsNumber: true })}\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Suggest a fair price for this job</p>\n                {form.formState.errors.bidAmount && (\n                  <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.bidAmount.message}</p>\n                )}\n              </div>\n\n              {/* Message */}\n              <div>\n                <div className=\"flex justify-between items-center\">\n                  <Label htmlFor=\"message\">Message to Client *</Label>\n                  <span className=\"text-xs text-gray-500\">\n                    {form.watch(\"message\")?.length || 0}/1500\n                  </span>\n                </div>\n                <Textarea\n                  id=\"message\"\n                  rows={3}\n                  placeholder=\"Hi! I'd love to help with your picture hanging. I have experience with...\"\n                  {...form.register(\"message\")}\n                  className=\"mt-1 resize-none\"\n                  maxLength={1500}\n                />\n                {form.formState.errors.message && (\n                  <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.message.message}</p>\n                )}\n              </div>\n\n              {/* Experience */}\n              <div>\n                <div className=\"flex justify-between items-center\">\n                  <Label htmlFor=\"experience\">Relevant Experience</Label>\n                  <span className=\"text-xs text-gray-500\">\n                    {form.watch(\"experience\")?.length || 0}/500\n                  </span>\n                </div>\n                <Textarea\n                  id=\"experience\"\n                  rows={2}\n                  placeholder=\"Tell them about your relevant experience...\"\n                  {...form.register(\"experience\")}\n                  className=\"mt-1 resize-none\"\n                  maxLength={500}\n                />\n              </div>\n\n              {/* Priority Bidding */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Coins className=\"h-4 w-4 text-blue-600\" />\n                  <Label htmlFor=\"coinsBid\" className=\"text-blue-900 font-medium\">\n                    Priority Bidding (Optional)\n                  </Label>\n                </div>\n                <Input\n                  id=\"coinsBid\"\n                  type=\"number\"\n                  placeholder=\"0\"\n                  min=\"0\"\n                  {...form.register(\"coinsBid\", { valueAsNumber: true })}\n                  className=\"mb-2\"\n                />\n                <div className=\"text-xs text-blue-700 space-y-1\">\n                  <p>• Bid coins to rank higher in the applicant list</p>\n                  <p>•  The highest bidders appear at the top for clients to see first</p>\n                  <p>• Cost: 1 coin (application) + coins you bid for priority</p>\n                  <p className=\"font-medium\">\n                    Total cost: {1 + (form.watch(\"coinsBid\") || 0)} coin{(1 + (form.watch(\"coinsBid\") || 0)) !== 1 ? 's' : ''}\n                  </p>\n                </div>\n\n                {/* Top Bidders */}\n                {topBidders.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-blue-200\">\n                    <p className=\"text-xs text-blue-800 font-medium mb-2\">Current Top Bidders:</p>\n                    <div className=\"space-y-1\">\n                      {topBidders.slice(0, 4).map((bidder, index) => (\n                        <div key={index} className=\"flex justify-between items-center text-xs text-blue-700\">\n                          <span>{bidder.name}</span>\n                          <span className=\"font-medium\">{bidder.coinsBid} coins</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {form.formState.errors.coinsBid && (\n                  <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.coinsBid.message}</p>\n                )}\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex space-x-4 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={onClose}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createApplicationMutation.isPending}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                >\n                  {createApplicationMutation.isPending ? \"Submitting...\" : (\n                    <span className=\"flex items-center gap-1\">\n                      Submit Application ({1 + (form.watch(\"coinsBid\") || 0)} <Coins className=\"h-4 w-4 text-yellow-500\" />)\n                    </span>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15498},"client/src/components/category-search.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\nimport { jobCategories, categoriesWithoutAll } from \"@shared/categories\";\n\ninterface CategorySearchProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n  includeAllCategories?: boolean;\n}\n\nexport function CategorySearch({ \n  value, \n  onValueChange, \n  placeholder = \"Select category...\", \n  includeAllCategories = false \n}: CategorySearchProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Use all categories with \"All Categories\" or without based on prop\n  const baseCategories = includeAllCategories ? jobCategories : categoriesWithoutAll;\n\n  // Lazy filtering - only filter when search query changes\n  const filteredCategories = useMemo(() => {\n    if (!searchQuery) {\n      return baseCategories;\n    }\n\n    const query = searchQuery.toLowerCase();\n    return baseCategories.filter(category =>\n      category.toLowerCase().includes(query)\n    );\n  }, [searchQuery, baseCategories]);\n\n  const handleSelect = (category: string) => {\n    onValueChange(category);\n    setIsOpen(false);\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full flex items-center justify-between px-3 py-2 border border-gray-300 rounded-md bg-white text-left focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n      >\n        <span className=\"text-sm text-gray-900\">\n          {value || placeholder}\n        </span>\n        <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n      </button>\n\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 z-[100000]\" \n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Dropdown */}\n          <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-[100001] max-h-64 overflow-hidden\">\n            {/* Search Input */}\n            <div className=\"p-2 border-b border-gray-200\">\n              <input\n                type=\"text\"\n                placeholder=\"Search categories...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                autoFocus\n              />\n            </div>\n            \n            {/* Scrollable List */}\n            <div className=\"overflow-y-auto max-h-48\" style={{ scrollbarWidth: 'thin' }}>\n              {filteredCategories.length === 0 ? (\n                <div className=\"px-3 py-2 text-sm text-gray-500\">\n                  No category found.\n                </div>\n              ) : (\n                filteredCategories.map((category) => (\n                  <button\n                    key={category}\n                    type=\"button\"\n                    onClick={() => handleSelect(category)}\n                    className=\"w-full px-3 py-2 text-left text-sm hover:bg-gray-100 focus:bg-gray-100 focus:outline-none\"\n                  >\n                    {category}\n                  </button>\n                ))\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":3427},"client/src/components/city-search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronDown, MapPin } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { topCities } from \"@shared/cities\";\n\ninterface CitySearchProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function CitySearch({ value, onValueChange, placeholder = \"Select city...\", className }: CitySearchProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [availableCities, setAvailableCities] = useState<string[]>(topCities.slice(0, 20));\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Search cities via API when user types\n  useEffect(() => {\n    const searchCities = async () => {\n      if (searchTerm.length < 2) {\n        setAvailableCities(topCities.slice(0, 20));\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        const response = await fetch(`/api/cities/search?q=${encodeURIComponent(searchTerm)}&limit=100`);\n        if (response.ok) {\n          const cities = await response.json();\n          setAvailableCities(cities);\n        } else {\n          console.error('Failed to search cities');\n          setAvailableCities(topCities.slice(0, 20));\n        }\n      } catch (error) {\n        console.error('City search error:', error);\n        setAvailableCities(topCities.slice(0, 20));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const debounceTimer = setTimeout(searchCities, 300);\n    return () => clearTimeout(debounceTimer);\n  }, [searchTerm]);\n\n  const handleSelect = (city: string) => {\n    onValueChange(city);\n    setIsOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full flex items-center justify-between px-3 py-2 border border-gray-300 rounded-md bg-white text-left focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n      >\n        <div className=\"flex items-center\">\n          <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n          <span className=\"text-sm text-gray-900 truncate\">\n            {value || placeholder}\n          </span>\n        </div>\n        <ChevronDown className=\"h-4 w-4 text-gray-400 ml-2 flex-shrink-0\" />\n      </button>\n\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 z-[100000]\" \n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Dropdown */}\n          <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-[100001] max-h-64 overflow-hidden w-full\">\n            {/* Search Input */}\n            <div className=\"p-2 border-b border-gray-200\">\n              <input\n                type=\"text\"\n                placeholder=\"Search from 48,000+ cities worldwide...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                autoFocus\n              />\n            </div>\n            \n            {/* Scrollable List */}\n            <div className=\"overflow-y-auto max-h-48\" style={{ scrollbarWidth: 'thin' }}>\n              {isLoading ? (\n                <div className=\"px-3 py-6 text-center text-sm text-gray-500\">\n                  Searching cities...\n                </div>\n              ) : availableCities.length === 0 ? (\n                <div className=\"px-3 py-2 text-sm text-gray-500\">\n                  No city found. Try a different search term.\n                </div>\n              ) : (\n                availableCities.map((city) => (\n                  <button\n                    key={`${city}-${Math.random()}`}\n                    type=\"button\"\n                    onClick={() => handleSelect(city)}\n                    className=\"w-full px-3 py-2 text-left text-sm hover:bg-gray-100 focus:bg-gray-100 focus:outline-none flex items-center\"\n                  >\n                    <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                    <span>{city}</span>\n                  </button>\n                ))\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":4422},"client/src/components/coin-display.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Coins, InfoIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\n\ninterface CoinBalance {\n  coins: number;\n  lastReset: string;\n  daysUntilReset: number;\n}\n\nexport function CoinDisplay() {\n  const [, setLocation] = useLocation();\n  const { data: coinData, isLoading } = useQuery<CoinBalance>({\n    queryKey: [\"/api/user/coins\"],\n  });\n\n  if (isLoading || !coinData) {\n    return (\n      <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n        <Coins className=\"h-4 w-4\" />\n        <span>Loading...</span>\n      </div>\n    );\n  }\n\n  const isLowCoins = coinData.coins < 3;\n\n  const handleClick = () => {\n    setLocation(\"/buy-coins\");\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div \n            className={`flex items-center space-x-2 text-sm font-medium cursor-pointer hover:opacity-80 transition-opacity ${\n              isLowCoins ? 'text-red-600' : 'text-gray-700'\n            }`}\n            onClick={handleClick}\n          >\n            <Coins className={`h-4 w-4 ${isLowCoins ? 'text-red-500' : 'text-yellow-500'}`} />\n            <span>\n              <span className=\"md:hidden\">{coinData.coins}</span>\n              <span className=\"hidden md:inline\">{coinData.coins} coins</span>\n            </span>\n            <InfoIcon className=\"h-3 w-3 text-gray-400\" />\n          </div>\n        </TooltipTrigger>\n        <TooltipContent>\n          <div className=\"space-y-2 text-sm\">\n            <p><strong>Coin System:</strong></p>\n            <p>• Job posting: 3 coins</p>\n            <p>• Job application: 1 coin</p>\n            <p>• Monthly coins: 20 coins</p>\n            <p>• Days until reset: {coinData.daysUntilReset}</p>\n            {isLowCoins && (\n              <Badge variant=\"destructive\" className=\"mt-2\">\n                Low coins - earn more by completing jobs!\n              </Badge>\n            )}\n            <p className=\"text-xs text-gray-500 mt-2\">Click to buy more coins</p>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nexport function CoinWarning({ coinsNeeded, coinsAvailable }: { coinsNeeded: number; coinsAvailable: number }) {\n  return (\n    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n      <div className=\"flex items-center space-x-2 text-red-800 mb-2\">\n        <Coins className=\"h-5 w-5\" />\n        <span className=\"font-semibold\">Insufficient Coins</span>\n      </div>\n      <p className=\"text-red-700 text-sm mb-3\">\n        You need {coinsNeeded} coins but only have {coinsAvailable} coins available.\n      </p>\n      <div className=\"text-sm text-red-600 space-y-1\">\n        <p>• Monthly coins: 20 coins for users, 100 for admins</p>\n        <p>• Complete jobs to earn more coins</p>\n        <p>• Job posting costs 3 coins</p>\n        <p>• Service posting costs 20 coins</p>\n        <p>• Job application costs 1 coin</p>\n      </div>\n    </div>\n  );\n}","size_bytes":3224},"client/src/components/currency-search.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { currencies, popularCurrencies } from \"@shared/currencies\";\n\ninterface CurrencySearchProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  placeholder?: string;\n}\n\nexport function CurrencySearch({ value, onValueChange, placeholder = \"Select currency...\" }: CurrencySearchProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Lazy filtering - only filter when search query changes\n  const filteredCurrencies = useMemo(() => {\n    if (!searchQuery) {\n      // Show popular currencies first when no search\n      const popular = currencies.filter(c => popularCurrencies.includes(c.code));\n      const others = currencies.filter(c => !popularCurrencies.includes(c.code));\n      return { popular, others };\n    }\n\n    // Filter based on search query\n    const query = searchQuery.toLowerCase();\n    const filtered = currencies.filter(\n      currency =>\n        currency.code.toLowerCase().includes(query) ||\n        currency.name.toLowerCase().includes(query)\n    );\n\n    return { popular: [], others: filtered };\n  }, [searchQuery]);\n\n  const selectedCurrency = currencies.find(c => c.code === value);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full h-10 justify-between text-xs\"\n        >\n          {selectedCurrency ? selectedCurrency.code : placeholder}\n          <ChevronsUpDown className=\"ml-1 h-3 w-3 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\">\n        <Command>\n          <CommandInput \n            placeholder=\"Search currencies...\" \n            value={searchQuery}\n            onValueChange={setSearchQuery}\n          />\n          <CommandList className=\"max-h-60\">\n            <CommandEmpty>No currency found.</CommandEmpty>\n            \n            {filteredCurrencies.popular.length > 0 && (\n              <CommandGroup heading=\"Popular\">\n                {filteredCurrencies.popular.map((currency) => (\n                  <CommandItem\n                    key={currency.code}\n                    value={currency.code}\n                    onSelect={(currentValue) => {\n                      onValueChange(currentValue === value ? \"\" : currentValue);\n                      setOpen(false);\n                      setSearchQuery(\"\");\n                    }}\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === currency.code ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <span className=\"font-medium\">{currency.code}</span>\n                    <span className=\"ml-2 text-sm text-gray-500\">{currency.name}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {filteredCurrencies.others.length > 0 && (\n              <CommandGroup heading={filteredCurrencies.popular.length > 0 ? \"All Currencies\" : \"Currencies\"}>\n                {filteredCurrencies.others.map((currency) => (\n                  <CommandItem\n                    key={currency.code}\n                    value={currency.code}\n                    onSelect={(currentValue) => {\n                      onValueChange(currentValue === value ? \"\" : currentValue);\n                      setOpen(false);\n                      setSearchQuery(\"\");\n                    }}\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === currency.code ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <span className=\"font-medium\">{currency.code}</span>\n                    <span className=\"ml-2 text-sm text-gray-500\">{currency.name}</span>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":4543},"client/src/components/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { MessageCircle, User, Briefcase, Home, LogIn, UserPlus, LogOut, ChevronDown, Settings, Coins, Bell, HelpCircle, LayoutDashboard } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { CoinDisplay } from \"@/components/coin-display\";\nimport { SubscriptionBadge } from \"@/components/subscription-badge\";\n\nimport JIGZ_LOGO_01__1_ from \"@assets/JIGZ LOGO-01 (1).jpg\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, logout } = useAuth();\n\n  // Get unread message count - only for authenticated users\n  const { data: unreadData } = useQuery({\n    queryKey: [\"/api/user/unread-messages\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n    enabled: isAuthenticated,\n  });\n\n  // Get unread notification count - only for authenticated users\n  const { data: notificationData } = useQuery({\n    queryKey: [\"/api/notifications/unread-count\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n    enabled: isAuthenticated,\n  });\n\n  const unreadCount = (unreadData as { count: number })?.count || 0;\n  const unreadNotificationCount = (notificationData as { count: number })?.count || 0;\n  \n  // Debug logging for unread count\n  console.log(\"Unread message count:\", unreadCount, \"Raw data:\", unreadData);\n\n  // Navigation items for authenticated users (excluding Profile which will be in dropdown)\n  const authenticatedNavItems = [\n    { href: \"/\", label: \"Jobs\", icon: Home },\n    { href: \"/services\", label: \"Services\", icon: Briefcase },\n    { href: \"/dashboard\", label: \"Dashboard\", icon: LayoutDashboard },\n    { href: \"/messages\", label: \"Messages\", icon: MessageCircle, badge: unreadCount },\n    ...(user?.role === \"admin\" || user?.role === \"moderator\" ? [{ href: \"/admin\", label: \"Admin\", icon: Settings }] : []),\n  ];\n\n  // Navigation items for non-authenticated users\n  const publicNavItems = [\n    { href: \"/\", label: \"Browse Jobs\", icon: Home },\n    { href: \"/services\", label: \"Browse Services\", icon: Briefcase },\n  ];\n\n  return (\n    <header className=\"border-b bg-white shadow-sm\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\">\n              <img \n                src={JIGZ_LOGO_01__1_} \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto mt-[-5px] mb-[-5px] pt-[1px] pb-[1px] pl-[0px] pr-[0px] ml-[4px] mr-[4px] hidden sm:block\"\n              />\n\n            </div>\n          </Link>\n\n          <nav className=\"flex items-center space-x-4\">\n            {isAuthenticated && <CoinDisplay />}\n            \n            <div className=\"flex items-center space-x-2\">\n            {isAuthenticated ? (\n              // Authenticated user navigation\n              (<>\n                {authenticatedNavItems.map((item) => {\n                  const isActive = location === item.href;\n                  const Icon = item.icon;\n                  \n                  return (\n                    <Link key={item.href} href={item.href}>\n                      <Button\n                        variant={isActive ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        className=\"relative flex items-center gap-2\"\n                      >\n                        <Icon className=\"h-4 w-4\" />\n                        <span className=\"hidden sm:inline\">{item.label}</span>\n                        {item.badge !== undefined && item.badge > 0 && (\n                          <Badge \n                            variant=\"destructive\" \n                            className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                          >\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </Button>\n                    </Link>\n                  );\n                })}\n                {/* Profile Dropdown */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant={location.startsWith(`/profile/${user?.id}`) ? \"default\" : \"ghost\"}\n                      size=\"sm\"\n                      className=\"relative flex items-center gap-2\"\n                    >\n                      <User className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Profile</span>\n                      {unreadNotificationCount > 0 && (\n                        <Badge \n                          variant=\"destructive\" \n                          className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                        >\n                          {unreadNotificationCount}\n                        </Badge>\n                      )}\n                      <ChevronDown className=\"h-3 w-3 ml-1\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <div className=\"px-3 py-2 text-sm\">\n                      <p className=\"font-medium\">{user?.name}</p>\n                      <p className=\"text-muted-foreground\">{user?.email}</p>\n                      <div className=\"mt-2\">\n                        <SubscriptionBadge userId={user?.id || ''} size=\"sm\" />\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <Link href={`/profile/${user?.id}`}>\n                      <DropdownMenuItem className=\"cursor-pointer\">\n                        <User className=\"h-4 w-4 mr-2\" />\n                        View Profile\n                      </DropdownMenuItem>\n                    </Link>\n                    <Link href=\"/notifications\">\n                      <DropdownMenuItem className=\"cursor-pointer\">\n                        <Bell className=\"h-4 w-4 mr-2\" />\n                        Notifications\n                        {unreadNotificationCount > 0 && (\n                          <Badge variant=\"destructive\" className=\"ml-auto h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\">\n                            {unreadNotificationCount}\n                          </Badge>\n                        )}\n                      </DropdownMenuItem>\n                    </Link>\n                    <Link href=\"/buy-coins\">\n                      <DropdownMenuItem className=\"cursor-pointer\">\n                        <Coins className=\"h-4 w-4 mr-2\" />\n                        Buy Coins\n                      </DropdownMenuItem>\n                    </Link>\n                    <Link href=\"/help-center\">\n                      <DropdownMenuItem className=\"cursor-pointer\">\n                        <HelpCircle className=\"h-4 w-4 mr-2\" />\n                        Help Center\n                      </DropdownMenuItem>\n                    </Link>\n                    <Link href=\"/settings\">\n                      <DropdownMenuItem className=\"cursor-pointer\">\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Settings\n                      </DropdownMenuItem>\n                    </Link>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                      onClick={() => logout()}\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>)\n            ) : (\n              // Non-authenticated user navigation\n              (<>\n                {publicNavItems.map((item) => {\n                  const isActive = location === item.href;\n                  const Icon = item.icon;\n                  \n                  return (\n                    <Link key={item.href} href={item.href}>\n                      <Button\n                        variant={isActive ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        className=\"flex items-center gap-2\"\n                      >\n                        <Icon className=\"h-4 w-4\" />\n                        <span className=\"hidden sm:inline\">{item.label}</span>\n                      </Button>\n                    </Link>\n                  );\n                })}\n                <Link href=\"/login\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"flex items-center gap-2\"\n                  >\n                    <LogIn className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">Login</span>\n                  </Button>\n                </Link>\n                <Link href=\"/signup\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    className=\"flex items-center gap-2\"\n                  >\n                    <UserPlus className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">Sign Up</span>\n                  </Button>\n                </Link>\n              </>)\n            )}\n            </div>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":9677},"client/src/components/job-card.tsx":{"content":"import { MapPin, Clock, Users, LogIn, CheckCircle, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RatingDisplay } from \"@/components/rating-display\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { JobWithApplications } from \"@shared/schema\";\n\ninterface JobCardProps {\n  job: JobWithApplications;\n  onApply: (job: JobWithApplications) => void;\n}\n\nconst getCategoryColor = (category: string) => {\n  const colors = {\n    \"Home Improvement\": \"bg-blue-100 text-blue-800\",\n    \"Cleaning\": \"bg-green-100 text-green-800\",\n    \"Delivery\": \"bg-orange-100 text-orange-800\",\n    \"Moving\": \"bg-orange-100 text-orange-800\",\n    \"Gardening\": \"bg-green-100 text-green-800\",\n    \"Other\": \"bg-gray-100 text-gray-800\"\n  };\n  return colors[category as keyof typeof colors] || colors[\"Other\"];\n};\n\nconst getStatusColor = (status: string) => {\n  const colors = {\n    \"open\": \"bg-green-500 text-white\",\n    \"in_progress\": \"bg-orange-500 text-white\",\n    \"completed\": \"bg-gray-500 text-white\"\n  };\n  return colors[status as keyof typeof colors] || colors[\"open\"];\n};\n\nconst formatTimeAgo = (date: Date | string | null) => {\n  if (!date) return \"Recently\";\n  \n  const now = new Date();\n  const past = new Date(date);\n  const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n  \n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minutes ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hours ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  return `${diffInDays} days ago`;\n};\n\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { format } from \"date-fns\";\n\nexport default function JobCard({ job, onApply }: JobCardProps) {\n  const { isAuthenticated } = useAuth();\n  const currencySymbol = getCurrencySymbol(job.currency);\n  \n  const budgetText = (() => {\n    const isHourly = job.budgetType === \"hourly\";\n    const suffix = isHourly ? \"/hr\" : \"\";\n    \n    if (job.minBudget && job.maxBudget) {\n      return `${currencySymbol}${job.minBudget} - ${currencySymbol}${job.maxBudget}${suffix}`;\n    } else if (job.minBudget) {\n      return `${currencySymbol}${job.minBudget}+${suffix}`;\n    } else if (job.maxBudget) {\n      return `Up to ${currencySymbol}${job.maxBudget}${suffix}`;\n    } else {\n      return isHourly ? \"Rate negotiable\" : \"Budget negotiable\";\n    }\n  })();\n\n  // Check if user has already applied to this job\n  const { data: applicationStatus } = useQuery({\n    queryKey: [\"/api/jobs\", job.id, \"application-status\"],\n    enabled: isAuthenticated\n  });\n\n  const hasAlreadyApplied = (applicationStatus as { hasApplied?: boolean })?.hasApplied;\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200\">\n      <Link href={`/job/${job.id}`}>\n        <div className=\"p-6 cursor-pointer\">\n          <div className=\"flex items-start justify-between mb-3\">\n          <h3 className=\"text-lg font-semibold text-neutral-900\">{job.title}</h3>\n          <Badge className={getStatusColor(job.status)}>\n            {job.status === \"open\" ? \"Open\" : job.status === \"in_progress\" ? \"Closed\" : \"Completed\"}\n          </Badge>\n        </div>\n        \n        <p className=\"text-neutral-600 text-sm mb-4 line-clamp-2\">\n          {job.description}\n        </p>\n        \n        <div className=\"flex items-center text-sm text-neutral-500 mb-4\">\n          <MapPin className=\"h-4 w-4 mr-2\" />\n          <span>{job.location}</span>\n          {job.duration && (\n            <>\n              <span className=\"mx-2\">•</span>\n              <span>\n                {job.duration === \"custom\" ? job.customDuration : job.duration}\n              </span>\n            </>\n          )}\n        </div>\n        \n        {/* Poster Rating */}\n        {job.posterRating !== undefined && job.posterRating > 0 && (\n          <div className=\"mb-4\">\n            <RatingDisplay \n              rating={job.posterRating} \n              totalReviews={job.posterReviewCount}\n              size=\"sm\"\n              showNumber={false}\n              className=\"text-xs\"\n            />\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"text-lg font-semibold text-neutral-900\">{budgetText}</span>\n            <span className=\"text-sm text-neutral-500 ml-1\">\n              {job.budgetType === \"hourly\" ? \"rate\" : \"budget\"}\n            </span>\n          </div>\n          {isAuthenticated ? (\n            hasAlreadyApplied ? (\n              <Button \n                disabled\n                className=\"bg-green-600 text-white cursor-not-allowed gap-2\"\n              >\n                <CheckCircle className=\"h-4 w-4\" />\n                Applied\n              </Button>\n            ) : (\n              <Button \n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  onApply(job);\n                }}\n                className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                disabled={job.status !== \"open\"}\n              >\n                Apply Now\n              </Button>\n            )\n          ) : (\n            <Button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                window.location.href = \"/login\";\n              }}\n              className=\"bg-gray-600 text-white hover:bg-gray-700 gap-2\"\n            >\n              <LogIn className=\"h-4 w-4\" />\n              Login to Apply\n            </Button>\n          )}\n        </div>\n        \n          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center text-neutral-500\">\n                <Users className=\"h-4 w-4 mr-1\" />\n                <span className=\"hidden sm:inline\">{job.applicationCount || 0} applicants</span>\n                <span className=\"sm:hidden\">{job.applicationCount || 0}</span>\n                {job.freelancersNeeded && job.freelancersNeeded > 1 && (\n                  <>\n                    <span className=\"mx-2\">•</span>\n                    <span className=\"text-blue-600 font-medium\">Need {job.freelancersNeeded}</span>\n                  </>\n                )}\n                <span className=\"mx-2\">•</span>\n                <Clock className=\"h-4 w-4 mr-1\" />\n                <span className=\"hidden sm:inline\">{formatTimeAgo(job.createdAt)}</span>\n                <span className=\"sm:hidden\">{formatTimeAgo(job.createdAt).replace(/\\s+ago$/i, '')}</span>\n\n              </div>\n              <Badge variant=\"secondary\" className={getCategoryColor(job.category)}>\n                {job.category}\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n}\n","size_bytes":7082},"client/src/components/messaging-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Send, User, X, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ConversationWithDetails, MessageWithSender } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface MessagingInterfaceProps {\n  conversation: ConversationWithDetails;\n  onClose?: () => void;\n}\n\nexport function MessagingInterface({ conversation, onClose }: MessagingInterfaceProps) {\n  const [messageText, setMessageText] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Fetch messages for this conversation\n  const { data: messages = [], isLoading } = useQuery<MessageWithSender[]>({\n    queryKey: [\"/api/conversations\", conversation.id, \"messages\"],\n    refetchInterval: 5000, // Refetch every 5 seconds for real-time feel\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", `/api/conversations/${conversation.id}/messages`, { content });\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageText(\"\");\n      // Invalidate messages to refresh\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/conversations\", conversation.id, \"messages\"],\n      });\n      // Invalidate conversations list to update last message\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      // Invalidate unread count\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/unread-messages\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark messages as read when conversation is opened\n  const markAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"PATCH\", `/api/conversations/${conversation.id}/mark-read`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/unread-messages\"] });\n    },\n  });\n\n  // Mark as read when conversation opens\n  useEffect(() => {\n    if (conversation.unreadCount > 0) {\n      markAsReadMutation.mutate();\n    }\n  }, [conversation.id]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (messageText.trim() && !sendMessageMutation.isPending) {\n      sendMessageMutation.mutate(messageText.trim());\n    }\n  };\n\n  return (\n    <>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <User className=\"h-5 w-5\" />\n              {conversation.otherUser?.name || 'Unknown User'}\n              {conversation.otherUser?.isEmailVerified && (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              )}\n            </CardTitle>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Re: {conversation.service?.title || conversation.job?.title || 'Unknown Service'}\n            </p>\n          </div>\n          {onClose && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <Separator />\n\n      <CardContent className=\"p-0 flex flex-col h-[calc(100vh-14rem)]\">\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 py-4 bg-gray-50\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <p className=\"text-gray-500\">Loading messages...</p>\n            </div>\n          ) : messages.length === 0 ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"text-center\">\n                <p className=\"text-gray-500 mb-2\">No messages yet</p>\n                <p className=\"text-sm text-gray-400 mb-3\">Start the conversation!</p>\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-2 max-w-sm mx-auto\">\n                  <p className=\"text-sm text-yellow-800 font-medium\">\n                    ⚠️ Please keep conversations professional and safe\n                  </p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3 px-2\">\n              {messages.map((message) => {\n                const isCurrentUser = message.senderId === user?.id;\n                \n                return (\n                  <div\n                    key={message.id}\n                    className={`flex ${isCurrentUser ? \"justify-end\" : \"justify-start\"}`}\n                  >\n                    <div\n                      className={`max-w-[80%] p-3 rounded-2xl shadow-sm ${\n                        isCurrentUser\n                          ? \"bg-blue-500 text-white rounded-br-md\"\n                          : \"bg-white border border-gray-200 text-gray-900 rounded-bl-md\"\n                      }`}\n                    >\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"text-xs font-medium\">\n                          {isCurrentUser ? \"You\" : message.sender.name}\n                        </span>\n                        <span className={`text-xs ${isCurrentUser ? \"text-blue-100\" : \"text-gray-500\"}`}>\n                          {format(new Date(message.createdAt || 0), \"MMM d, h:mm a\")}\n                        </span>\n                      </div>\n                      <p className=\"text-sm leading-relaxed\">{message.content}</p>\n                    </div>\n                  </div>\n                );\n              })}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </ScrollArea>\n\n        {/* Message Input */}\n        <div className=\"border-t p-2\">\n          {messages.length <= 2 && (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-2 mb-2\">\n              <p className=\"text-xs text-yellow-800 text-center\">\n                ⚠️ Please keep conversations professional and safe\n              </p>\n            </div>\n          )}\n          <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n            <Input\n              value={messageText}\n              onChange={(e) => setMessageText(e.target.value)}\n              placeholder=\"Type your message...\"\n              className=\"flex-1\"\n              disabled={sendMessageMutation.isPending}\n            />\n            <Button\n              type=\"submit\"\n              disabled={!messageText.trim() || sendMessageMutation.isPending}\n              size=\"sm\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </form>\n        </div>\n      </CardContent>\n    </>\n  );\n}","size_bytes":7666},"client/src/components/post-job-modal.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { X, Upload, Coins } from \"lucide-react\";\n// Removed Dialog imports - using custom modal instead\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertJobSchema, type JobWithApplications } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { CitySearch } from \"@/components/city-search\";\nimport { CurrencySearch } from \"@/components/currency-search\";\nimport { CategorySearch } from \"@/components/category-search\";\nimport { CoinWarning } from \"@/components/coin-display\";\n\nconst jobFormSchema = insertJobSchema.extend({\n  images: z.any().optional(),\n  specificArea: z.string().optional(),\n  duration: z.string().optional(),\n  customDuration: z.string().optional(),\n  budgetType: z.string().default(\"fixed\"),\n  title: z.string().min(1, \"Title is required\").max(150, \"Title must be 150 characters or less\"),\n  description: z.string().min(1, \"Description is required\").max(2500, \"Description must be 2500 characters or less\"),\n});\n\ntype JobFormData = z.infer<typeof jobFormSchema>;\n\ninterface PostJobModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingJob?: JobWithApplications | null;\n  isEditing?: boolean;\n}\n\n// Categories are now handled by CategorySearch component\n\nexport default function PostJobModal({ isOpen, onClose, editingJob, isEditing = false }: PostJobModalProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [coinError, setCoinError] = useState<{ coinsNeeded: number; coinsAvailable: number } | null>(null);\n  const [isSpecificAreaEditing, setIsSpecificAreaEditing] = useState(false);\n  const [showCustomDuration, setShowCustomDuration] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Debug logging\n\n\n  const form = useForm<JobFormData>({\n    resolver: zodResolver(jobFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      location: \"\",\n      maxBudget: undefined,\n      budgetType: \"fixed\",\n      currency: \"USD\",\n      experienceLevel: \"any\",\n      status: \"open\",\n      images: [],\n      specificArea: \"\",\n      duration: \"\",\n      customDuration: \"\",\n      freelancersNeeded: 1,\n    },\n  });\n\n  // Reset form when modal opens/closes or when editing job changes\n  React.useEffect(() => {\n    if (isOpen && isEditing && editingJob) {\n      form.reset({\n        title: editingJob.title || \"\",\n        description: editingJob.description || \"\",\n        category: editingJob.category || \"\",\n        location: editingJob.location || \"\",\n        specificArea: editingJob.specificArea || \"\",\n        maxBudget: editingJob.maxBudget || undefined,\n        minBudget: editingJob.minBudget || undefined,\n        budgetType: editingJob.budgetType || \"fixed\",\n        currency: editingJob.currency || \"USD\",\n        experienceLevel: editingJob.experienceLevel || \"any\",\n        duration: editingJob.duration || \"\",\n        customDuration: editingJob.customDuration || \"\",\n        status: editingJob.status || \"open\",\n        images: [],\n        freelancersNeeded: editingJob.freelancersNeeded || 1,\n      });\n      setShowCustomDuration(editingJob.duration === \"custom\");\n    } else if (isOpen && !isEditing) {\n      form.reset({\n        title: \"\",\n        description: \"\",\n        category: \"\",\n        location: \"\",\n        specificArea: \"\",\n        maxBudget: undefined,\n        budgetType: \"fixed\",\n        currency: \"USD\",\n        experienceLevel: \"any\",\n        status: \"open\",\n        images: [],\n        duration: \"\",\n        customDuration: \"\",\n        freelancersNeeded: 1,\n      });\n      setShowCustomDuration(false);\n    }\n    if (!isOpen) {\n      setSelectedFiles([]);\n    }\n  }, [isOpen, isEditing, editingJob, form]);\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      const formData = new FormData();\n      \n      // Append job data\n      Object.entries(data).forEach(([key, value]) => {\n        if (key !== \"images\" && value !== undefined && value !== null) {\n          formData.append(key, value.toString());\n        }\n      });\n      \n      // Append images\n      selectedFiles.forEach((file) => {\n        formData.append(\"images\", file);\n      });\n\n      const method = isEditing ? \"PUT\" : \"POST\";\n      const url = isEditing ? `/api/jobs/${editingJob?.id}` : \"/api/jobs\";\n\n      const res = await fetch(url, {\n        method,\n        body: formData,\n      });\n\n      if (!res.ok) {\n        throw new Error(isEditing ? \"Failed to update job\" : \"Failed to create job\");\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      setCoinError(null);\n      toast({\n        title: \"Success\",\n        description: isEditing \n          ? \"Job updated successfully! Your updated job is now under review by our team and will be approved within 30 minutes. 1 coin has been deducted.\" \n          : \"Job posted successfully! Your posting is now under review by our team. Most jobs are approved within 30 minutes and we're working tirelessly to get it live! 3 coins have been deducted.\",\n      });\n      onClose();\n      form.reset();\n      setSelectedFiles([]);\n    },\n    onError: (error: any) => {\n      console.error(\"Error posting job:\", error);\n      \n      // Check if it's a coin-related error\n      if (error.coinsNeeded && error.coinsAvailable !== undefined) {\n        setCoinError({\n          coinsNeeded: error.coinsNeeded,\n          coinsAvailable: error.coinsAvailable\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post job. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files].slice(0, 5)); // Max 5 images\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const onSubmit = (data: JobFormData) => {\n    createJobMutation.mutate(data);\n  };\n\n\n\n  // Create a simple modal without Dialog component complications\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/50\" \n        onClick={onClose}\n      />\n      \n      {/* Modal Content */}\n      <div \n        className=\"relative w-full h-full sm:w-auto sm:h-auto sm:max-w-4xl sm:max-h-[90vh] bg-white sm:rounded-lg overflow-hidden flex flex-col sm:m-4\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Mobile Header with Close Button */}\n        <div className=\"sticky top-0 z-10 bg-white border-b border-gray-200 p-4 flex items-center justify-between sm:hidden\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">{isEditing ? \"Edit Job\" : \"Post Job\"}</h2>\n            <p className=\"text-sm text-gray-600\">{isEditing ? \"Editing costs 1 coin\" : \"Posting costs 3 coins\"}</p>\n          </div>\n          <button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n\n              onClose();\n            }}\n            className=\"p-2 hover:bg-gray-100 rounded-full\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n        \n        {/* Desktop Header */}\n        <div className=\"pb-4 hidden sm:block p-6 border-b border-gray-200 relative\">\n          <button\n            onClick={onClose}\n            className=\"absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            type=\"button\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n          <h2 className=\"text-xl font-semibold pr-12\">{isEditing ? \"Edit Job\" : \"Post a New Job\"}</h2>\n          <p className=\"text-gray-600 mt-1\">\n            {isEditing ? \"Update the details below to modify your job posting. Editing costs 1 coin and requires admin re-approval.\" : \"Fill out the details below to post your job and start receiving applications. Posting costs 3 coins.\"}\n          </p>\n        </div>\n        \n        {/* Content Container */}\n        <div className=\"flex-1 overflow-y-auto p-4 sm:p-6\">\n        \n          {coinError && (\n            <CoinWarning \n              coinsNeeded={coinError.coinsNeeded} \n              coinsAvailable={coinError.coinsAvailable} \n            />\n          )}\n          \n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 sm:space-y-6 w-full pb-20 sm:pb-0 sm:grid sm:gap-6 sm:grid-cols-1\">\n          {/* Job Title */}\n          <div>\n            <div className=\"flex justify-between items-center\">\n              <Label htmlFor=\"title\">Job Title *</Label>\n              <span className=\"text-xs text-gray-500\">\n                {form.watch(\"title\")?.length || 0}/150\n              </span>\n            </div>\n            <Input\n              id=\"title\"\n              placeholder=\"e.g., Help hang picture frames\"\n              {...form.register(\"title\")}\n              className=\"mt-1 text-sm sm:text-base w-full\"\n              maxLength={150}\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          {/* Description */}\n          <div>\n            <div className=\"flex justify-between items-center\">\n              <Label htmlFor=\"description\">Description *</Label>\n              <span className=\"text-xs text-gray-500\">\n                {form.watch(\"description\")?.length || 0}/2500\n              </span>\n            </div>\n            <Textarea\n              id=\"description\"\n              rows={3}\n              placeholder=\"Describe what you need help with...\"\n              {...form.register(\"description\")}\n              className=\"mt-1 resize-none text-sm sm:text-base w-full\"\n              maxLength={2500}\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          {/* Job Duration */}\n          <div>\n            <Label>How long will this job take?</Label>\n            <Select \n              value={form.watch(\"duration\") || \"\"}\n              onValueChange={(value) => {\n                form.setValue(\"duration\", value);\n                setShowCustomDuration(value === \"custom\");\n                if (value !== \"custom\") {\n                  form.setValue(\"customDuration\", \"\");\n                }\n              }}\n            >\n              <SelectTrigger className=\"mt-1 w-full\">\n                <SelectValue placeholder=\"Select expected duration\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"a couple hours\">A couple hours</SelectItem>\n                <SelectItem value=\"a day\">A day</SelectItem>\n                <SelectItem value=\"a couple of days\">A couple of days</SelectItem>\n                <SelectItem value=\"a week\">A week</SelectItem>\n                <SelectItem value=\"less than a month\">Less than a month</SelectItem>\n                <SelectItem value=\"1-3 months\">1-3 months</SelectItem>\n                <SelectItem value=\"3+ months\">3+ months</SelectItem>\n                <SelectItem value=\"custom\">Custom length</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Custom Duration Input */}\n            {showCustomDuration && (\n              <div className=\"mt-2\">\n                <Input\n                  placeholder=\"Describe the expected duration...\"\n                  {...form.register(\"customDuration\")}\n                  className=\"mt-1\"\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Category and Location - Desktop Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n            {/* Category */}\n            <div>\n              <Label>Category *</Label>\n              <div className=\"mt-1 w-full\">\n                <CategorySearch\n                  value={form.watch(\"category\") || \"\"}\n                  onValueChange={(value) => form.setValue(\"category\", value)}\n                  placeholder=\"Search and select category...\"\n                />\n              </div>\n              {form.formState.errors.category && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.category.message}</p>\n              )}\n            </div>\n\n            {/* Location */}\n            <div>\n              <Label>City *</Label>\n              <div className=\"mt-1 w-full\">\n                <CitySearch\n                  value={form.watch(\"location\") || \"\"}\n                  onValueChange={(value) => form.setValue(\"location\", value)}\n                  placeholder=\"Search and select your city...\"\n                />\n              </div>\n              {form.formState.errors.location && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.location.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Specific Area */}\n          <div>\n            <Label htmlFor=\"specificArea\">Specific Area (Optional)</Label>\n            {isSpecificAreaEditing ? (\n              <div className=\"flex flex-col sm:flex-row gap-2 mt-1\">\n                <Input\n                  id=\"specificArea\"\n                  placeholder=\"e.g., Downtown, Upper East Side, Financial District\"\n                  {...form.register(\"specificArea\")}\n                  className=\"flex-1\"\n                  autoFocus\n                  onBlur={() => setIsSpecificAreaEditing(false)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      setIsSpecificAreaEditing(false);\n                    }\n                    if (e.key === 'Escape') {\n                      setIsSpecificAreaEditing(false);\n                    }\n                  }}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsSpecificAreaEditing(false)}\n                  className=\"w-full sm:w-auto\"\n                >\n                  Done\n                </Button>\n              </div>\n            ) : (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full justify-start text-left h-auto p-3 mt-1\"\n                onClick={() => setIsSpecificAreaEditing(true)}\n              >\n                <div className=\"flex flex-col items-start text-left\">\n                  <span className=\"text-sm font-medium\">\n                    {form.watch(\"specificArea\") ? \"Edit Specific Area\" : \"Add Specific Area\"}\n                  </span>\n                  <span className=\"text-xs text-gray-500 mt-1 break-words\">\n                    {form.watch(\"specificArea\") \n                      ? `Area: ${form.watch(\"specificArea\")}` \n                      : \"Click to add neighborhood, district, or specific location details\"}\n                  </span>\n                </div>\n              </Button>\n            )}\n          </div>\n\n          {/* Budget Type */}\n          <div>\n            <Label>Budget Type</Label>\n            <div className=\"flex flex-col sm:flex-row gap-2 mt-1\">\n              <Button\n                type=\"button\"\n                variant={form.watch(\"budgetType\") === \"fixed\" ? \"default\" : \"outline\"}\n                className={`flex-1 ${form.watch(\"budgetType\") === \"fixed\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                onClick={() => form.setValue(\"budgetType\", \"fixed\")}\n              >\n                Fixed Price\n              </Button>\n              <Button\n                type=\"button\"\n                variant={form.watch(\"budgetType\") === \"hourly\" ? \"default\" : \"outline\"}\n                className={`flex-1 ${form.watch(\"budgetType\") === \"hourly\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                onClick={() => form.setValue(\"budgetType\", \"hourly\")}\n              >\n                Hourly Rate\n              </Button>\n            </div>\n          </div>\n\n          {/* Budget and Currency */}\n          <div>\n            <Label htmlFor=\"maxBudget\">\n              {form.watch(\"budgetType\") === \"hourly\" ? \"Hourly Rate\" : \"Budget\"}\n            </Label>\n            <div className=\"flex gap-0 mt-1 w-full\">\n              <div className=\"w-auto min-w-[120px]\">\n                <CurrencySearch\n                  value={form.watch(\"currency\") || \"USD\"}\n                  onValueChange={(value) => form.setValue(\"currency\", value || \"USD\")}\n                />\n              </div>\n              <Input\n                id=\"maxBudget\"\n                type=\"number\"\n                placeholder={form.watch(\"budgetType\") === \"hourly\" ? \"25\" : \"50\"}\n                {...form.register(\"maxBudget\", { valueAsNumber: true })}\n                className=\"flex-1 rounded-l-none border-l-0\"\n              />\n            </div>\n            {form.watch(\"budgetType\") === \"hourly\" && (\n              <p className=\"text-xs text-gray-500 mt-1\">Enter your hourly rate</p>\n            )}\n          </div>\n\n          {/* Experience Level and Freelancers Needed - Desktop Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n            {/* Experience Level */}\n            <div>\n              <Label>Experience Level</Label>\n              <Select onValueChange={(value) => form.setValue(\"experienceLevel\", value)} defaultValue=\"any\">\n                <SelectTrigger className=\"mt-1 w-full\">\n                  <SelectValue placeholder=\"Select experience level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"any\">Any</SelectItem>\n                  <SelectItem value=\"beginner\">Beginner</SelectItem>\n                  <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                  <SelectItem value=\"expert\">Expert</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Number of Freelancers Needed */}\n            <div>\n              <Label htmlFor=\"freelancersNeeded\">Number of Freelancers Needed</Label>\n              <Input\n                id=\"freelancersNeeded\"\n                type=\"number\"\n                min=\"1\"\n                max=\"50\"\n                placeholder=\"1\"\n                {...form.register(\"freelancersNeeded\", { valueAsNumber: true })}\n                className=\"mt-1 w-full\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">How many freelancers do you need for this job? (Default: 1)</p>\n              {form.formState.errors.freelancersNeeded && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.freelancersNeeded.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Image Upload */}\n          <div>\n            <Label>Photos (Optional)</Label>\n            <div className=\"mt-1\">\n              <label className=\"border-2 border-dashed border-gray-300 rounded-md p-4 sm:p-6 text-center hover:border-blue-600 transition-colors cursor-pointer block\">\n                <Upload className=\"h-6 w-6 sm:h-8 sm:w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-xs sm:text-sm text-gray-600\">Click to upload photos or drag and drop</p>\n                <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG up to 10MB each (max 5 photos)</p>\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n              </label>\n            </div>\n            \n            {/* Preview selected files */}\n            {selectedFiles.length > 0 && (\n              <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 sm:gap-4\">\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"relative\">\n                    <img\n                      src={URL.createObjectURL(file)}\n                      alt={`Preview ${index + 1}`}\n                      className=\"w-full h-16 sm:h-20 object-cover rounded border\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => removeFile(index)}\n                      className=\"absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 text-white rounded-full w-5 h-5 sm:w-6 sm:h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                    >\n                      <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 pt-4 border-t border-gray-200\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"w-full flex-1 order-2 sm:order-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createJobMutation.isPending}\n              className=\"w-full flex-1 bg-blue-600 hover:bg-blue-700 order-1 sm:order-2\"\n            >\n              <span className=\"flex items-center justify-center gap-1\">\n                {createJobMutation.isPending ? (\n                  isEditing ? \"Updating...\" : \"Posting...\"\n                ) : (\n                  <>\n                    <span>\n                      {isEditing ? \"Update Job\" : \"Post Job\"}\n                    </span>\n                    <span className=\"ml-1\">\n                      ({isEditing ? \"1\" : \"3\"}<Coins className=\"h-4 w-4 inline text-yellow-500 ml-0.5\" />)\n                    </span>\n                  </>\n                )}\n              </span>\n            </Button>\n          </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22909},"client/src/components/rating-display.tsx":{"content":"import { Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RatingDisplayProps {\n  rating: number;\n  totalReviews?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  showNumber?: boolean;\n  className?: string;\n}\n\nexport function RatingDisplay({ \n  rating, \n  totalReviews, \n  size = \"md\", \n  showNumber = true,\n  className \n}: RatingDisplayProps) {\n  const sizeClasses = {\n    sm: \"h-3 w-3\",\n    md: \"h-4 w-4\",\n    lg: \"h-5 w-5\"\n  };\n\n  const textSizeClasses = {\n    sm: \"text-xs\",\n    md: \"text-sm\",\n    lg: \"text-base\"\n  };\n\n  return (\n    <div className={cn(\"flex items-center gap-1\", className)}>\n      <div className=\"flex items-center\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={cn(\n              sizeClasses[size],\n              star <= rating\n                ? \"fill-yellow-400 text-yellow-400\"\n                : \"fill-gray-200 text-gray-200\"\n            )}\n          />\n        ))}\n      </div>\n      {showNumber && (\n        <span className={cn(\"text-gray-600 font-medium\", textSizeClasses[size])}>\n          {rating.toFixed(1)}\n          {totalReviews !== undefined && (\n            <span className=\"text-gray-400 font-normal\"> ({totalReviews})</span>\n          )}\n        </span>\n      )}\n    </div>\n  );\n}","size_bytes":1290},"client/src/components/report-job-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Flag, AlertTriangle, Mail, EyeOff, Users, Shield, MoreHorizontal } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface ReportJobModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  jobId: string;\n  jobTitle: string;\n}\n\nconst reportCategories = [\n  {\n    value: \"spam\",\n    label: \"Spam or Fake Job\",\n    description: \"This job appears to be spam, fake, or misleading\",\n    icon: Mail\n  },\n  {\n    value: \"inappropriate\",\n    label: \"Inappropriate Content\",\n    description: \"Contains offensive, adult, or inappropriate content\",\n    icon: EyeOff\n  },\n  {\n    value: \"discriminatory\",\n    label: \"Discriminatory\",\n    description: \"Contains discriminatory language or requirements\",\n    icon: Users\n  },\n  {\n    value: \"unsafe\",\n    label: \"Unsafe or Illegal\",\n    description: \"Promotes unsafe practices or illegal activities\",\n    icon: Shield\n  },\n  {\n    value: \"fake\",\n    label: \"Fraudulent\",\n    description: \"This appears to be a scam or fraudulent job posting\",\n    icon: AlertTriangle\n  },\n  {\n    value: \"other\",\n    label: \"Other\",\n    description: \"Something else that violates community guidelines\",\n    icon: MoreHorizontal\n  }\n];\n\nexport function ReportJobModal({ isOpen, onClose, jobId, jobTitle }: ReportJobModalProps) {\n  const [category, setCategory] = useState<string>(\"\");\n  const [reason, setReason] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!category) {\n      toast({\n        title: \"Category Required\",\n        description: \"Please select a report category.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (reason.trim().length < 10) {\n      toast({\n        title: \"Reason Required\",\n        description: \"Please provide a detailed reason (minimum 10 characters).\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      await apiRequest(\"POST\", `/api/jobs/${jobId}/reports`, {\n        category,\n        reason: reason.trim()\n      });\n\n      toast({\n        title: \"Report Submitted\",\n        description: \"Thank you for your report. Our team will review it promptly.\"\n      });\n      \n      // Invalidate job-related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/search/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", jobId, \"reports\", \"check\"] });\n      \n      onClose();\n      setCategory(\"\");\n      setReason(\"\");\n    } catch (error: any) {\n      toast({\n        title: \"Report Failed\",\n        description: error.message || \"Failed to submit report. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      onClose();\n      setCategory(\"\");\n      setReason(\"\");\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Flag className=\"h-5 w-5 text-red-500\" />\n            Report Job\n          </DialogTitle>\n          <DialogDescription>\n            Report \"{jobTitle}\" for violating community guidelines. Your report will be reviewed by our moderation team.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label className=\"text-sm font-medium\">Why are you reporting this job?</Label>\n            <RadioGroup value={category} onValueChange={setCategory} className=\"mt-3\">\n              {reportCategories.map((cat) => {\n                const IconComponent = cat.icon;\n                return (\n                  <div key={cat.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-muted/50 transition-colors\">\n                    <RadioGroupItem value={cat.value} id={cat.value} className=\"mt-0.5\" />\n                    <div className=\"flex-1 space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <IconComponent className=\"h-4 w-4 text-muted-foreground\" />\n                        <Label htmlFor={cat.value} className=\"font-medium cursor-pointer\">\n                          {cat.label}\n                        </Label>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{cat.description}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </RadioGroup>\n          </div>\n\n          <div>\n            <Label htmlFor=\"reason\" className=\"text-sm font-medium\">\n              Additional Details\n            </Label>\n            <Textarea\n              id=\"reason\"\n              placeholder=\"Please provide specific details about why you're reporting this job (minimum 10 characters)...\"\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n              className=\"mt-2 min-h-[100px]\"\n              maxLength={500}\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {reason.length}/500 characters (minimum 10 required)\n            </p>\n          </div>\n\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"destructive\"\n              disabled={isSubmitting || !category || reason.trim().length < 10}\n              className=\"flex items-center gap-2\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent\" />\n                  Submitting...\n                </>\n              ) : (\n                <>\n                  <Flag className=\"h-4 w-4\" />\n                  Submit Report\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6724},"client/src/components/review-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Star, X, Award } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertReviewSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { z } from \"zod\";\nimport { cn } from \"@/lib/utils\";\nimport { SkillEndorsementModal } from \"@/components/skill-endorsement-modal\";\n\nconst reviewFormSchema = insertReviewSchema;\n\ntype ReviewFormData = z.infer<typeof reviewFormSchema>;\n\ninterface ReviewModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  jobId: string;\n  revieweeId: string;\n  revieweeName: string;\n  reviewType: \"client_to_worker\" | \"worker_to_client\";\n  jobTitle?: string;\n}\n\nexport default function ReviewModal({ \n  isOpen, \n  onClose, \n  jobId, \n  revieweeId, \n  revieweeName,\n  reviewType,\n  jobTitle \n}: ReviewModalProps) {\n  const [hoveredRating, setHoveredRating] = useState(0);\n  const [hoveredQualityRating, setHoveredQualityRating] = useState(0);\n  const [hoveredCommunicationRating, setHoveredCommunicationRating] = useState(0);\n  const [hoveredTimelinessRating, setHoveredTimelinessRating] = useState(0);\n  const [skillEndorsementModalOpen, setSkillEndorsementModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Check if user has already endorsed this person for this job\n  const { data: endorsementStatus } = useQuery<{ hasEndorsed: boolean }>({\n    queryKey: [`/api/jobs/${jobId}/has-endorsed/${revieweeId}`],\n    enabled: isOpen && reviewType === \"client_to_worker\" && !!user?.id && !!jobId && !!revieweeId,\n    retry: false,\n  });\n\n  const form = useForm<ReviewFormData>({\n    resolver: zodResolver(reviewFormSchema),\n    defaultValues: {\n      jobId,\n      reviewerId: user?.id || \"\",\n      revieweeId,\n      rating: reviewType === \"worker_to_client\" ? 0 : 1, // Auto-set to 1 for client-to-worker (will be calculated)\n      comment: \"\",\n      reviewType,\n      qualityOfWorkRating: reviewType === \"client_to_worker\" ? 0 : undefined,\n      communicationRating: reviewType === \"client_to_worker\" ? 0 : undefined,\n      timelinessRating: reviewType === \"client_to_worker\" ? 0 : undefined,\n    },\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: (data: ReviewFormData) => {\n      // Use different endpoint for worker-to-client reviews\n      if (data.reviewType === \"worker_to_client\") {\n        // Transform data for the rate-client endpoint - use props directly since form data may be empty\n        const clientRatingData = {\n          jobId: jobId, // Use the prop instead of form data\n          clientId: revieweeId, // Use the prop instead of form data\n          rating: data.rating,\n          comment: data.comment,\n        };\n\n        return apiRequest(\"POST\", \"/api/reviews/rate-client\", clientRatingData);\n      } else {\n        return apiRequest(\"POST\", \"/api/reviews\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review submitted\",\n        description: reviewType === \"worker_to_client\" \n          ? \"Thank you for rating the client!\" \n          : \"Thank you for your feedback!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/client-rating-eligibility\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews/rating-eligibility\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/freelancer-review-status\"] });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      console.error(\"Review submission error:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ReviewFormData) => {\n    // For worker-to-client reviews, require overall rating\n    if (data.reviewType === \"worker_to_client\" && data.rating === 0) {\n      toast({\n        title: \"Rating required\",\n        description: \"Please select a rating before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // For client-to-worker reviews, require all detailed ratings and set overall rating to average\n    if (data.reviewType === \"client_to_worker\") {\n      if (!data.qualityOfWorkRating || !data.communicationRating || !data.timelinessRating) {\n        toast({\n          title: \"Detailed ratings required\",\n          description: \"Please rate all three aspects: Quality of Work, Communication & Professionalism, and Timeliness & Reliability.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      // Calculate average rating from detailed ratings\n      const averageRating = Math.round((data.qualityOfWorkRating + data.communicationRating + data.timelinessRating) / 3);\n      data.rating = averageRating;\n    }\n\n    reviewMutation.mutate(data);\n  };\n\n  const rating = form.watch(\"rating\");\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            Rate {reviewType === \"client_to_worker\" ? \"Service Provider\" : \"Client\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Only show overall rating for worker-to-client reviews */}\n          {reviewType === \"worker_to_client\" && (\n            <div>\n              <Label className=\"text-sm font-medium\">\n                How was your experience with {revieweeName}?\n              </Label>\n              <div className=\"flex items-center gap-1 mt-2\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <button\n                    key={star}\n                    type=\"button\"\n                    className=\"p-1\"\n                    onMouseEnter={() => setHoveredRating(star)}\n                    onMouseLeave={() => setHoveredRating(0)}\n                    onClick={() => form.setValue(\"rating\", star)}\n                  >\n                    <Star\n                      className={cn(\n                        \"h-8 w-8 transition-colors\",\n                        star <= (hoveredRating || rating)\n                          ? \"fill-yellow-400 text-yellow-400\"\n                          : \"fill-gray-200 text-gray-200 hover:fill-yellow-200 hover:text-yellow-200\"\n                      )}\n                    />\n                  </button>\n                ))}\n              </div>\n              {rating > 0 && (\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {rating === 1 && \"Poor\"}\n                  {rating === 2 && \"Fair\"}\n                  {rating === 3 && \"Good\"}\n                  {rating === 4 && \"Very Good\"}\n                  {rating === 5 && \"Excellent\"}\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Detailed ratings for client-to-freelancer reviews */}\n          {reviewType === \"client_to_worker\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-medium text-sm\">Rate {revieweeName} on the following aspects:</h3>\n              \n              {/* Quality of Work Rating */}\n              <div>\n                <Label className=\"text-sm\">Quality of Work</Label>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      type=\"button\"\n                      className=\"p-1\"\n                      onMouseEnter={() => setHoveredQualityRating(star)}\n                      onMouseLeave={() => setHoveredQualityRating(0)}\n                      onClick={() => form.setValue(\"qualityOfWorkRating\", star)}\n                    >\n                      <Star\n                        className={cn(\n                          \"h-6 w-6 transition-colors\",\n                          star <= (hoveredQualityRating || form.watch(\"qualityOfWorkRating\") || 0)\n                            ? \"fill-yellow-400 text-yellow-400\"\n                            : \"fill-gray-200 text-gray-200 hover:fill-yellow-200 hover:text-yellow-200\"\n                        )}\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Communication & Professionalism Rating */}\n              <div>\n                <Label className=\"text-sm\">Communication & Professionalism</Label>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      type=\"button\"\n                      className=\"p-1\"\n                      onMouseEnter={() => setHoveredCommunicationRating(star)}\n                      onMouseLeave={() => setHoveredCommunicationRating(0)}\n                      onClick={() => form.setValue(\"communicationRating\", star)}\n                    >\n                      <Star\n                        className={cn(\n                          \"h-6 w-6 transition-colors\",\n                          star <= (hoveredCommunicationRating || form.watch(\"communicationRating\") || 0)\n                            ? \"fill-yellow-400 text-yellow-400\"\n                            : \"fill-gray-200 text-gray-200 hover:fill-yellow-200 hover:text-yellow-200\"\n                        )}\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Timeliness & Reliability Rating */}\n              <div>\n                <Label className=\"text-sm\">Timeliness & Reliability</Label>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      type=\"button\"\n                      className=\"p-1\"\n                      onMouseEnter={() => setHoveredTimelinessRating(star)}\n                      onMouseLeave={() => setHoveredTimelinessRating(0)}\n                      onClick={() => form.setValue(\"timelinessRating\", star)}\n                    >\n                      <Star\n                        className={cn(\n                          \"h-6 w-6 transition-colors\",\n                          star <= (hoveredTimelinessRating || form.watch(\"timelinessRating\") || 0)\n                            ? \"fill-yellow-400 text-yellow-400\"\n                            : \"fill-gray-200 text-gray-200 hover:fill-yellow-200 hover:text-yellow-200\"\n                        )}\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"comment\" className=\"text-sm font-medium\">\n              Leave a comment (optional)\n            </Label>\n            <Textarea\n              id=\"comment\"\n              placeholder=\"Share your experience...\"\n              className=\"mt-2\"\n              rows={4}\n              {...form.register(\"comment\")}\n            />\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={reviewMutation.isPending || \n                (reviewType === \"worker_to_client\" && rating === 0) ||\n                (reviewType === \"client_to_worker\" && \n                 (!form.watch(\"qualityOfWorkRating\") || !form.watch(\"communicationRating\") || !form.watch(\"timelinessRating\")))}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              {reviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n            </Button>\n          </div>\n\n          {/* Endorse Skills Button - only for client-to-worker reviews */}\n          {reviewType === \"client_to_worker\" && (\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-sm text-gray-600 mb-3\">\n                Want to highlight {revieweeName}'s specific skills? Endorse them for 5 coins.\n              </p>\n              {endorsementStatus?.hasEndorsed ? (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  disabled\n                  className=\"w-full bg-gray-50 text-gray-500 border-gray-200 cursor-not-allowed\"\n                >\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  Already Endorsed\n                </Button>\n              ) : (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setSkillEndorsementModalOpen(true)}\n                  className=\"w-full bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100\"\n                >\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  Endorse Skills\n                </Button>\n              )}\n            </div>\n          )}\n        </form>\n      </DialogContent>\n    </Dialog>\n\n      <SkillEndorsementModal\n        isOpen={skillEndorsementModalOpen}\n        onClose={() => setSkillEndorsementModalOpen(false)}\n        endorseeId={revieweeId}\n        endorseeName={revieweeName}\n        jobId={jobId}\n        jobTitle={jobTitle || \"\"}\n      />\n    </>\n  );\n}","size_bytes":14087},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, name: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n\n  // Check authentication status on mount\n  const { data: authUser } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  useEffect(() => {\n    if (authUser) {\n      setUser(authUser as User);\n    } else {\n      setUser(null);\n    }\n    setIsLoading(false);\n  }, [authUser]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      return apiRequest('POST', '/api/auth/login', { email, password });\n    },\n    onSuccess: (data: any) => {\n      setUser(data.user);\n      if (data.token) {\n        localStorage.setItem('auth_token', data.token);\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async ({ username, email, name, password }: { username: string; email: string; name: string; password: string }) => {\n      return apiRequest('POST', '/api/auth/register', { username, email, name, password });\n    },\n    onSuccess: (data: any) => {\n      setUser(data.user);\n      if (data.token) {\n        localStorage.setItem('auth_token', data.token);\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/auth/logout', {});\n    },\n    onSuccess: () => {\n      setUser(null);\n      localStorage.removeItem('auth_token');\n      queryClient.clear();\n    },\n  });\n\n  const login = async (email: string, password: string) => {\n    await loginMutation.mutateAsync({ email: email.toLowerCase(), password });\n  };\n\n  const register = async (username: string, email: string, name: string, password: string) => {\n    await registerMutation.mutateAsync({ username, email: email.toLowerCase(), name, password });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":3228},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message) || \n         /^403: .*Admin access required/.test(error.message) ||\n         error.message.includes(\"Authentication required\") ||\n         error.message.includes(\"Admin access required\");\n}","size_bytes":302},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, XCircle, Users, Shield, ShieldX, Clock, UserCheck, UserX, Key, BarChart3, Briefcase, User, Coins, Plus, Minus, Settings, Flag, Eye, MessageSquare, ChevronDown, Star, Trash2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { SubscriptionBadge } from \"@/components/subscription-badge\";\nimport { SUBSCRIPTION_PLANS } from \"@shared/schema\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\n\ninterface AdminStats {\n  totalUsers: string;\n  totalApprovedJobs: string;\n  openJobs: string;\n  closedJobs: string;\n  totalApplications: string;\n  totalSkillEndorsements: string;\n  activeSubscriptions: string;\n  subscriptionPercentage: string;\n  monthlyRevenue: string;\n  avgJobsPerUser: string;\n  avgApplicationsPerUser: string;\n  freelancerSubs: string;\n  freelancerPercentage: string;\n  professionalSubs: string;\n  professionalPercentage: string;\n  expertSubs: string;\n  expertPercentage: string;\n  eliteSubs: string;\n  elitePercentage: string;\n  totalServices: string;\n  avgServicesPerUser: string;\n  totalInquiries: string;\n  totalCompletedServices: string;\n}\n\ninterface JobData {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  location: string;\n  experienceLevel: string;\n  status: string;\n  minBudget?: number;\n  maxBudget?: number;\n  currency: string;\n  createdAt: string;\n  applicationCount?: number;\n  images?: string[];\n}\n\ninterface UserData {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  role: string;\n  isActive: boolean;\n  isEmailVerified?: boolean;\n  coins?: number;\n  lastCoinReset?: string;\n}\n\ninterface JobReportData {\n  id: string;\n  jobId: string;\n  reporterId: string;\n  category: string;\n  reason: string;\n  status: string;\n  adminNotes?: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  createdAt: string;\n  job: {\n    id: string;\n    title: string;\n    category: string;\n    userId: string;\n  };\n  reporter: {\n    id: string;\n    name: string;\n    username: string;\n    email: string;\n  };\n  reviewer?: {\n    id: string;\n    name: string;\n    username: string;\n  };\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const isAdmin = user?.role === \"admin\";\n  const isModerator = user?.role === \"moderator\";\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [passwordDialogOpen, setPasswordDialogOpen] = useState(false);\n  const [coinDialogOpen, setCoinDialogOpen] = useState(false);\n  const [coinAction, setCoinAction] = useState<\"add\" | \"remove\" | \"set\">(\"add\");\n  const [coinAmount, setCoinAmount] = useState<string>(\"\");\n  \n  // Subscription management state\n  const [subscriptionDialogOpen, setSubscriptionDialogOpen] = useState(false);\n  const [selectedUserForSubscription, setSelectedUserForSubscription] = useState<any>(null);\n  const [selectedPlanType, setSelectedPlanType] = useState(\"\");\n\n  // Fetch all users - only for admin users\n  const { data: users = [], isLoading: usersLoading } = useQuery<UserData[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n    enabled: isAdmin, // Only fetch for admin users\n  });\n\n  // Fetch pending jobs\n  const { data: pendingJobs = [], isLoading: pendingJobsLoading } = useQuery<JobData[]>({\n    queryKey: [\"/api/admin/jobs/pending\"],\n    retry: false,\n  });\n\n  // Fetch pending services\n  const { data: pendingServices = [], isLoading: pendingServicesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/admin/services/pending\"],\n    retry: false,\n  });\n\n  // Fetch approved services\n  const { data: approvedServices = [], isLoading: approvedServicesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/admin/services/approved\"],\n    retry: false,\n  });\n\n  // Fetch approved jobs\n  const { data: approvedJobs = [], isLoading: approvedJobsLoading } = useQuery<JobData[]>({\n    queryKey: [\"/api/admin/jobs/approved\"],\n    retry: false,\n  });\n\n  // Fetch admin statistics - only for admin users\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n    retry: false,\n    enabled: isAdmin, // Only fetch for admin users\n  });\n\n  // Fetch users with coins for coin management - only for admin users\n  const { data: usersWithCoins = [], isLoading: usersWithCoinsLoading } = useQuery<UserData[]>({\n    queryKey: [\"/api/admin/users/coins\"],\n    retry: false,\n    enabled: isAdmin, // Only fetch for admin users\n  });\n\n  // Fetch pending job reports\n  const { data: pendingReports = [], isLoading: reportsLoading } = useQuery<JobReportData[]>({\n    queryKey: [\"/api/admin/reports?status=pending\"],\n    queryFn: () => fetch(\"/api/admin/reports?status=pending\").then(res => res.json()),\n    retry: false,\n  });\n\n  // Fetch all job reports\n  const { data: allReports = [] } = useQuery<JobReportData[]>({\n    queryKey: [\"/api/admin/reports\"],\n    retry: false,\n  });\n\n  // User ban/unban mutations\n  const banUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/ban`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User banned\",\n        description: \"User has been banned successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to ban user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unbanUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/unban`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User unbanned\",\n        description: \"User has been unbanned successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to unban user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User deleted\",\n        description: \"User has been permanently deleted from the database.\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Job approval mutations\n  const approveJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/jobs/${jobId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs/pending\"] });\n      toast({\n        title: \"Job approved\",\n        description: \"Job has been approved and is now visible to users.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve job.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/jobs/${jobId}/reject`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs/pending\"] });\n      toast({\n        title: \"Job rejected\",\n        description: \"Job has been rejected and won't be visible to users.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject job.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Service approval mutations\n  const approveServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/services/${serviceId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services/pending\"] });\n      toast({\n        title: \"Service approved\",\n        description: \"Service has been approved and is now visible to users.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/services/${serviceId}/reject`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services/pending\"] });\n      toast({\n        title: \"Service rejected\",\n        description: \"Service has been rejected and won't be visible to users.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Service deletion mutation\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/services/${serviceId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services/approved\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Service deleted\",\n        description: \"Service has been permanently deleted along with all related data.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/jobs/${jobId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/jobs/approved\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Job deleted\",\n        description: \"Job has been permanently deleted along with all related data.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete job.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Job report mutations\n  const reportActionMutation = useMutation({\n    mutationFn: async ({ reportId, action, adminNotes }: { reportId: string, action: \"approve\" | \"reject\", adminNotes?: string }) => {\n      await apiRequest(\"PATCH\", `/api/admin/reports/${reportId}`, { status: action === \"approve\" ? \"reviewed\" : \"dismissed\", adminNotes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports?status=pending\"] });\n      toast({\n        title: \"Report reviewed\",\n        description: \"Job report has been reviewed successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\", \n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to review report.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Coin management mutations\n  const coinMutation = useMutation({\n    mutationFn: async ({ userId, action, amount }: { userId: string; action: \"add\" | \"remove\" | \"set\"; amount: number }) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/coins/${action}`, { amount });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/coins\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setCoinDialogOpen(false);\n      setCoinAmount(\"\");\n      toast({\n        title: \"Coins updated\",\n        description: \"User coins have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user coins.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // User role mutations\n  const promoteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/promote`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User promoted\",\n        description: \"User has been promoted to admin successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const demoteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/demote`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User demoted\",\n        description: \"User has been demoted from admin successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const promoteToModeratorMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/promote-moderator`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User promoted\",\n        description: \"User has been promoted to moderator successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to promote user to moderator.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const demoteFromModeratorMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/demote-moderator`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User demoted\",\n        description: \"User has been demoted from moderator successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to demote user from moderator.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async ({ userId, newPassword }: { userId: string; newPassword: string }) => {\n      await apiRequest(\"PATCH\", `/api/admin/users/${userId}/change-password`, { newPassword });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setPasswordDialogOpen(false);\n      setNewPassword(\"\");\n      setSelectedUserId(\"\");\n      toast({\n        title: \"Password changed\",\n        description: \"User password has been changed successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to change password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Subscription management mutation\n  const subscriptionMutation = useMutation({\n    mutationFn: async ({ userId, planType }: { userId: string; planType: string }) => {\n      await apiRequest(\"POST\", `/api/admin/users/${userId}/subscription`, { planType });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setSubscriptionDialogOpen(false);\n      setSelectedUserForSubscription(null);\n      setSelectedPlanType(\"\");\n      toast({\n        title: \"Subscription updated\",\n        description: \"User subscription plan has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update subscription.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper functions\n  const handleCoinSubmit = () => {\n    if (selectedUserId && coinAmount && parseInt(coinAmount) >= 0) {\n      coinMutation.mutate({ \n        userId: selectedUserId, \n        action: coinAction, \n        amount: parseInt(coinAmount) \n      });\n    }\n  };\n\n  const handleChangePassword = (userId: string) => {\n    setSelectedUserId(userId);\n    setPasswordDialogOpen(true);\n  };\n\n  const handlePasswordSubmit = () => {\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Invalid password\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    changePasswordMutation.mutate({ userId: selectedUserId, newPassword });\n  };\n\n  const openSubscriptionDialog = (user: any) => {\n    setSelectedUserForSubscription(user);\n    setSelectedPlanType(\"\");\n    setSubscriptionDialogOpen(true);\n  };\n\n  const handleSubscriptionSubmit = () => {\n    if (selectedUserForSubscription && selectedPlanType) {\n      subscriptionMutation.mutate({ \n        userId: selectedUserForSubscription.id, \n        planType: selectedPlanType \n      });\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    const currencySymbols: { [key: string]: string } = {\n      USD: \"$\", EUR: \"€\", GBP: \"£\", JPY: \"¥\", CAD: \"C$\", AUD: \"A$\"\n    };\n    const symbol = currencySymbols[currency] || currency;\n    return `${amount.toLocaleString()} ${symbol}`;\n  };\n\n  const formatJobBudget = (job: any) => {\n    const isHourly = job.budgetType === \"hourly\";\n    const suffix = isHourly ? \"/hr\" : \"\";\n    \n    if (job.minBudget && job.maxBudget) {\n      return `${formatCurrency(job.minBudget, job.currency)} - ${formatCurrency(job.maxBudget, job.currency)}${suffix}`;\n    } else if (job.minBudget) {\n      return `From ${formatCurrency(job.minBudget, job.currency)}${suffix}`;\n    } else {\n      return `Up to ${formatCurrency(job.maxBudget!, job.currency)}${suffix}`;\n    }\n  };\n\n  // Redirect to login if not authenticated or not admin/moderator\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== \"admin\" && user?.role !== \"moderator\"))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin or moderator access required. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Show unauthorized if not admin or moderator\n  if (!isAuthenticated || (user?.role !== \"admin\" && user?.role !== \"moderator\")) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Unauthorized</h1>\n          <p>Admin or moderator access required.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          {isAdmin \n            ? \"Manage users and approve job postings\"\n            : \"Review and approve job postings, manage job reports\"\n          }\n        </p>\n      </div>\n\n      {/* Statistics Cards - only show for admin users */}\n      {isAdmin && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {statsLoading ? \"...\" : stats?.totalUsers || 0}\n              </div>\n            </CardContent>\n          </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Job Posts</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {statsLoading ? \"...\" : stats?.totalApprovedJobs || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Approved posts only</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Open Jobs</CardTitle>\n            <Briefcase className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {statsLoading ? \"...\" : stats?.openJobs || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Available for applications</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Closed Jobs</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-gray-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-gray-600\">\n              {statsLoading ? \"...\" : stats?.closedJobs || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Completed or in progress</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Services</CardTitle>\n            <Star className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {statsLoading ? \"...\" : stats?.totalServices || \"0\"}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Approved services only</p>\n          </CardContent>\n        </Card>\n        </div>\n      )}\n\n      {/* Second row of stats for applications, endorsements, and subscriptions */}\n      {isAdmin && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Applications</CardTitle>\n              <Users className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {statsLoading ? \"...\" : stats?.totalApplications || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">All job applications</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Skill Endorsements</CardTitle>\n              <Star className=\"h-4 w-4 text-yellow-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {statsLoading ? \"...\" : stats?.totalSkillEndorsements || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Total endorsements given</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Inquiries</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-indigo-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-indigo-600\">\n                {statsLoading ? \"...\" : stats?.totalInquiries || \"0\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">All service inquiries</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Completed Services</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {statsLoading ? \"...\" : stats?.totalCompletedServices || \"0\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Finished service requests</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Subscriptions</CardTitle>\n              <Coins className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {statsLoading ? \"...\" : stats?.activeSubscriptions || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {statsLoading ? \"Loading...\" : `${stats?.subscriptionPercentage || \"0.0\"}% of total users`}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Third row of stats for averages and revenue */}\n      {isAdmin && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Jobs Per User</CardTitle>\n              <Briefcase className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {statsLoading ? \"...\" : stats?.avgJobsPerUser || \"0.0\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Average job posts per user</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Applications Per User</CardTitle>\n              <User className=\"h-4 w-4 text-teal-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-teal-600\">\n                {statsLoading ? \"...\" : stats?.avgApplicationsPerUser || \"0.0\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Average applications per user</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg Services Per User</CardTitle>\n              <Star className=\"h-4 w-4 text-teal-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-teal-600\">\n                {statsLoading ? \"...\" : stats?.avgServicesPerUser || \"0.0\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Average services per user</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                ${statsLoading ? \"...\" : stats?.monthlyRevenue || \"0.00\"}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">From active subscriptions</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Fourth row of stats for subscription plan breakdown */}\n      {isAdmin && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Freelancer Plans</CardTitle>\n              <User className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-500\">\n                {statsLoading ? \"...\" : stats?.freelancerSubs || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {statsLoading ? \"Loading...\" : `${stats?.freelancerPercentage || \"0.0\"}% of total users`}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Professional Plans</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-emerald-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-emerald-500\">\n                {statsLoading ? \"...\" : stats?.professionalSubs || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {statsLoading ? \"Loading...\" : `${stats?.professionalPercentage || \"0.0\"}% of total users`}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expert Plans</CardTitle>\n              <Shield className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-500\">\n                {statsLoading ? \"...\" : stats?.expertSubs || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {statsLoading ? \"Loading...\" : `${stats?.expertPercentage || \"0.0\"}% of total users`}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Elite Plans</CardTitle>\n              <Star className=\"h-4 w-4 text-violet-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-violet-500\">\n                {statsLoading ? \"...\" : stats?.eliteSubs || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {statsLoading ? \"Loading...\" : `${stats?.elitePercentage || \"0.0\"}% of total users`}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"jobs\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"jobs\">Pending Jobs</TabsTrigger>\n          <TabsTrigger value=\"services\">Pending Services</TabsTrigger>\n          <TabsTrigger value=\"approved\">Approved Jobs</TabsTrigger>\n          {isAdmin && <TabsTrigger value=\"users\">User Management</TabsTrigger>}\n          {isAdmin && <TabsTrigger value=\"coins\">Coin Management</TabsTrigger>}\n          <TabsTrigger value=\"reports\">Job Reports</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"jobs\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Pending Job Approvals\n              </CardTitle>\n              <CardDescription>\n                Review and approve job postings before they become visible to users\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {pendingJobsLoading ? (\n                <div className=\"text-center py-4\">Loading pending jobs...</div>\n              ) : pendingJobs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No pending jobs to review\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingJobs.map((job: any) => (\n                    <div\n                      key={job.id}\n                      className=\"border rounded-lg p-4 space-y-3\"\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{job.title}</h3>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Posted {formatDistanceToNow(new Date(job.createdAt))} ago\n                          </p>\n                          <p className=\"text-gray-600 mb-3\">{job.description}</p>\n                          \n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <Badge variant=\"secondary\">{job.category}</Badge>\n                            <Badge variant=\"outline\">{job.location}</Badge>\n                            <Badge variant=\"outline\">{job.experienceLevel}</Badge>\n                          </div>\n                          \n                          {(job.minBudget || job.maxBudget) && (\n                            <div className=\"text-sm font-medium mb-3\">\n                              Budget: {formatJobBudget(job)}\n                            </div>\n                          )}\n                          \n                          {/* Job Images */}\n                          {job.images && job.images.length > 0 && (\n                            <div className=\"mb-3\">\n                              <p className=\"text-sm font-medium mb-2\">Attached Images ({job.images.length}):</p>\n                              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\n                                {job.images.map((image: string, index: number) => (\n                                  <div key={index} className=\"relative group\">\n                                    <img\n                                      src={image}\n                                      alt={`Job image ${index + 1}`}\n                                      className=\"w-full h-20 object-cover rounded border hover:shadow-md transition-shadow cursor-pointer\"\n                                      onClick={() => window.open(image, '_blank')}\n                                    />\n                                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded cursor-pointer flex items-center justify-center\">\n                                      <Eye className=\"h-4 w-4 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex gap-2 ml-4\">\n                          <Button\n                            onClick={() => approveJobMutation.mutate(job.id)}\n                            disabled={approveJobMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            onClick={() => rejectJobMutation.mutate(job.id)}\n                            disabled={rejectJobMutation.isPending}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"services\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Star className=\"h-5 w-5\" />\n                Pending Service Approvals\n              </CardTitle>\n              <CardDescription>\n                Review and approve service offerings before they become visible to users\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {pendingServicesLoading ? (\n                <div className=\"text-center py-4\">Loading pending services...</div>\n              ) : pendingServices.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No pending services to review\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingServices.map((service: any) => (\n                    <div\n                      key={service.id}\n                      className=\"border rounded-lg p-4 space-y-3\"\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{service.title}</h3>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Posted {formatDistanceToNow(new Date(service.createdAt))} ago by {service.user?.name || service.user?.username}\n                          </p>\n                          <p className=\"text-gray-600 mb-3\">{service.description}</p>\n                          \n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <Badge variant=\"secondary\">{service.category}</Badge>\n                            <Badge variant=\"outline\">{service.location}</Badge>\n                            <Badge variant=\"outline\">{service.experienceLevel}</Badge>\n                            <Badge variant=\"outline\" className=\"bg-yellow-100 text-yellow-800\">\n                              Pending Review\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"text-sm font-medium mb-2\">\n                            Price: {getCurrencySymbol(service.currency)}{service.priceFrom}\n                            {service.priceTo && ` - ${getCurrencySymbol(service.currency)}${service.priceTo}`}\n                            {service.priceType === \"hourly\" && \"/hr\"}\n                            {service.priceType === \"per_project\" && \"/project\"}\n                            {service.priceType === \"per_day\" && \"/day\"}\n                          </div>\n                          \n                          <div className=\"text-sm text-muted-foreground\">\n                            Delivery: {service.deliveryTime}\n                            {service.duration && ` • Duration: ${service.duration}`}\n                          </div>\n                          \n                          {/* Service Website */}\n                          {service.website && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              Website: <a \n                                href={service.website.startsWith('http') ? service.website : `https://${service.website}`}\n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"text-blue-600 hover:text-blue-800 underline\"\n                              >\n                                {service.website}\n                              </a>\n                            </div>\n                          )}\n                          \n                          {service.tags && service.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mt-2\">\n                              {service.tags.map((tag: string, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  #{tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {/* Service Images */}\n                          {service.images && service.images.length > 0 && (\n                            <div className=\"mt-3\">\n                              <p className=\"text-sm font-medium mb-2\">Service Images ({service.images.length}):</p>\n                              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\n                                {service.images.map((image: string, index: number) => (\n                                  <div key={index} className=\"relative group\">\n                                    <img\n                                      src={image}\n                                      alt={`Service image ${index + 1}`}\n                                      className=\"w-full h-20 object-cover rounded border hover:shadow-md transition-shadow cursor-pointer\"\n                                      onClick={() => window.open(image, '_blank')}\n                                    />\n                                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded cursor-pointer flex items-center justify-center\">\n                                      <Eye className=\"h-4 w-4 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex gap-2 ml-4\">\n                          <Button\n                            onClick={() => approveServiceMutation.mutate(service.id)}\n                            disabled={approveServiceMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            onClick={() => rejectServiceMutation.mutate(service.id)}\n                            disabled={rejectServiceMutation.isPending}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-1\" />\n                            Reject\n                          </Button>\n                          {isAdmin && (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Delete Service Permanently</DialogTitle>\n                                  <DialogDescription>\n                                    Are you sure you want to permanently delete this service? This will:\n                                    <br />• Remove the service from the platform\n                                    <br />• Delete all service requests and conversations\n                                    <br />• Remove all messages related to this service\n                                    <br />• Delete any notifications related to this service\n                                    <br />\n                                    <br />This action cannot be undone.\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <DialogFooter>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                  <Button\n                                    variant=\"destructive\"\n                                    onClick={() => deleteServiceMutation.mutate(service.id)}\n                                    disabled={deleteServiceMutation.isPending}\n                                  >\n                                    {deleteServiceMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                                  </Button>\n                                </DialogFooter>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Approved Services Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Star className=\"h-5 w-5\" />\n                Approved Services\n              </CardTitle>\n              <CardDescription>\n                Manage all approved services - view details and delete if needed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {approvedServicesLoading ? (\n                <div className=\"text-center py-4\">Loading approved services...</div>\n              ) : approvedServices.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No approved services found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {approvedServices.map((service: any) => (\n                    <div\n                      key={service.id}\n                      className=\"border rounded-lg p-4 space-y-3\"\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{service.title}</h3>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Posted {formatDistanceToNow(new Date(service.createdAt))} ago by {service.user?.name || service.user?.username}\n                          </p>\n                          <p className=\"text-gray-600 mb-3\">{service.description}</p>\n                          \n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <Badge variant=\"secondary\">{service.category}</Badge>\n                            <Badge variant=\"outline\">{service.location}</Badge>\n                            <Badge variant=\"outline\">{service.experienceLevel}</Badge>\n                            <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                              Approved\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"text-sm font-medium mb-2\">\n                            Price: {getCurrencySymbol(service.currency)}{service.priceFrom}\n                            {service.priceTo && ` - ${getCurrencySymbol(service.currency)}${service.priceTo}`}\n                            {service.priceType === \"hourly\" && \"/hr\"}\n                            {service.priceType === \"per_project\" && \"/project\"}\n                            {service.priceType === \"per_day\" && \"/day\"}\n                          </div>\n                          \n                          <div className=\"text-sm text-muted-foreground\">\n                            Delivery: {service.deliveryTime}\n                            {service.duration && ` • Duration: ${service.duration}`}\n                          </div>\n                          \n                          {/* Service Website */}\n                          {service.website && (\n                            <div className=\"text-sm text-muted-foreground mt-1\">\n                              Website: <a \n                                href={service.website.startsWith('http') ? service.website : `https://${service.website}`}\n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"text-blue-600 hover:text-blue-800 underline\"\n                              >\n                                {service.website}\n                              </a>\n                            </div>\n                          )}\n                          \n                          {service.tags && service.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1 mt-2\">\n                              {service.tags.map((tag: string, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  #{tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {/* Service Images */}\n                          {service.images && service.images.length > 0 && (\n                            <div className=\"mt-3\">\n                              <p className=\"text-sm font-medium mb-2\">Service Images ({service.images.length}):</p>\n                              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\n                                {service.images.map((image: string, index: number) => (\n                                  <div key={index} className=\"relative group\">\n                                    <img\n                                      src={image}\n                                      alt={`Service image ${index + 1}`}\n                                      className=\"w-full h-20 object-cover rounded border hover:shadow-md transition-shadow cursor-pointer\"\n                                      onClick={() => window.open(image, '_blank')}\n                                    />\n                                    <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded cursor-pointer flex items-center justify-center\">\n                                      <Eye className=\"h-4 w-4 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex gap-2 ml-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(`/service/${service.id}`, '_blank')}\n                            className=\"text-blue-600 hover:text-blue-700\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View Service\n                          </Button>\n                          {isAdmin && (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Delete Service Permanently</DialogTitle>\n                                  <DialogDescription>\n                                    Are you sure you want to permanently delete this service? This will:\n                                    <br />• Remove the service from the platform\n                                    <br />• Delete all service requests and conversations\n                                    <br />• Remove all messages related to this service\n                                    <br />• Delete any notifications related to this service\n                                    <br />\n                                    <br />This action cannot be undone.\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <DialogFooter>\n                                  <Button variant=\"outline\">Cancel</Button>\n                                  <Button\n                                    variant=\"destructive\"\n                                    onClick={() => deleteServiceMutation.mutate(service.id)}\n                                    disabled={deleteServiceMutation.isPending}\n                                  >\n                                    {deleteServiceMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                                  </Button>\n                                </DialogFooter>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"approved\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Briefcase className=\"h-5 w-5\" />\n                Approved Jobs Management\n              </CardTitle>\n              <CardDescription>\n                Manage approved job postings - you can permanently delete jobs here\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {approvedJobsLoading ? (\n                <div className=\"text-center py-4\">Loading approved jobs...</div>\n              ) : approvedJobs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No approved jobs found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {approvedJobs.map((job: any) => (\n                    <div\n                      key={job.id}\n                      className=\"border rounded-lg p-4 space-y-3\"\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{job.title}</h3>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Posted {formatDistanceToNow(new Date(job.createdAt))} ago\n                          </p>\n                          <p className=\"text-gray-600 mb-3\">{job.description}</p>\n                          \n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            <Badge variant=\"secondary\">{job.category}</Badge>\n                            <Badge variant=\"outline\">{job.location}</Badge>\n                            <Badge variant=\"outline\">{job.experienceLevel}</Badge>\n                            <Badge variant=\"default\" className=\"bg-green-600\">\n                              {job.status}\n                            </Badge>\n                          </div>\n                          \n                          {(job.minBudget || job.maxBudget) && (\n                            <div className=\"text-sm font-medium\">\n                              Budget: {formatJobBudget(job)}\n                            </div>\n                          )}\n                          \n                          <div className=\"text-sm text-muted-foreground mt-2\">\n                            Applications: {job.applicationCount || 0}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2 ml-4\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"destructive\"\n                                disabled={deleteJobMutation.isPending}\n                              >\n                                <XCircle className=\"h-4 w-4 mr-1\" />\n                                Delete Job\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Delete Job Post</DialogTitle>\n                                <DialogDescription>\n                                  Are you sure you want to permanently delete this job post? This action will:\n                                  <br />• Remove the job from the platform\n                                  <br />• Delete all applications to this job\n                                  <br />• Remove all conversations and messages related to this job\n                                  <br />• Delete any notifications related to this job\n                                  <br />\n                                  <br />This action cannot be undone.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <DialogFooter>\n                                <Button variant=\"outline\">Cancel</Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  onClick={() => deleteJobMutation.mutate(job.id)}\n                                  disabled={deleteJobMutation.isPending}\n                                >\n                                  {deleteJobMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                                </Button>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {isAdmin && (\n          <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                User Management\n              </CardTitle>\n              <CardDescription>\n                View all users and manage user access\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div className=\"text-center py-4\">Loading users...</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {users.map((user: any) => (\n                    <div\n                      key={user.id}\n                      className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                          {user.name?.charAt(0)?.toUpperCase() || \"U\"}\n                        </div>\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{user.name}</span>\n                            {user.isEmailVerified && (\n                              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                            )}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            @{user.username} • {user.email}\n                          </div>\n                          <div className=\"flex gap-2 mt-1 flex-wrap\">\n                            <Badge variant={\n                              user.role === \"admin\" ? \"default\" : \n                              user.role === \"moderator\" ? \"secondary\" : \"outline\"\n                            }>\n                              {user.role === \"admin\" ? \"Admin\" : \n                               user.role === \"moderator\" ? \"Moderator\" : \"User\"}\n                            </Badge>\n                            <Badge variant={user.isActive ? \"default\" : \"destructive\"}>\n                              {user.isActive ? \"Active\" : \"Banned\"}\n                            </Badge>\n                            {user.isEmailVerified && (\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 border-green-200\">\n                                Verified\n                              </Badge>\n                            )}\n                            <SubscriptionBadge userId={user.id} size=\"sm\" />\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2 flex-wrap\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleChangePassword(user.id)}\n                          disabled={changePasswordMutation.isPending}\n                        >\n                          <Key className=\"h-4 w-4 mr-1\" />\n                          Change Password\n                        </Button>\n                        \n                        {/* Role Management Dropdown */}\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <UserCheck className=\"h-4 w-4 mr-1\" />\n                              Change Role\n                              <ChevronDown className=\"h-4 w-4 ml-1\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent>\n                            {user.role === \"user\" && (\n                              <>\n                                <DropdownMenuItem\n                                  onClick={() => promoteToModeratorMutation.mutate(user.id)}\n                                  disabled={promoteToModeratorMutation.isPending}\n                                >\n                                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                                  Make Moderator\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  onClick={() => promoteUserMutation.mutate(user.id)}\n                                  disabled={promoteUserMutation.isPending}\n                                >\n                                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                                  Make Admin\n                                </DropdownMenuItem>\n                              </>\n                            )}\n                            \n                            {user.role === \"moderator\" && (\n                              <>\n                                <DropdownMenuItem\n                                  onClick={() => demoteFromModeratorMutation.mutate(user.id)}\n                                  disabled={demoteFromModeratorMutation.isPending}\n                                >\n                                  <UserX className=\"h-4 w-4 mr-2\" />\n                                  Demote to User\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  onClick={() => promoteUserMutation.mutate(user.id)}\n                                  disabled={promoteUserMutation.isPending}\n                                >\n                                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                                  Promote to Admin\n                                </DropdownMenuItem>\n                              </>\n                            )}\n                            \n                            {user.role === \"admin\" && (\n                              <DropdownMenuItem\n                                onClick={() => demoteUserMutation.mutate(user.id)}\n                                disabled={demoteUserMutation.isPending}\n                              >\n                                <UserX className=\"h-4 w-4 mr-2\" />\n                                Demote to User\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                        \n                        {/* Subscription Management Button */}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => openSubscriptionDialog(user)}\n                        >\n                          <Star className=\"h-4 w-4 mr-1\" />\n                          Manage Subscription\n                        </Button>\n                        \n                        {/* Ban/Unban buttons - only for non-admin users */}\n                        {user.role !== \"admin\" && (\n                          user.isActive ? (\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => banUserMutation.mutate(user.id)}\n                              disabled={banUserMutation.isPending}\n                            >\n                              <ShieldX className=\"h-4 w-4 mr-1\" />\n                              Ban User\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => unbanUserMutation.mutate(user.id)}\n                              disabled={unbanUserMutation.isPending}\n                            >\n                              <Shield className=\"h-4 w-4 mr-1\" />\n                              Unban User\n                            </Button>\n                          )\n                        )}\n                        \n                        {/* Delete button - only for non-admin users */}\n                        {user.role !== \"admin\" && (\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                disabled={deleteUserMutation.isPending}\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-1\" />\n                                Delete User\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Delete User</DialogTitle>\n                                <DialogDescription>\n                                  Are you sure you want to permanently delete user \"{user.name}\" (@{user.username})? \n                                  This action cannot be undone and will remove all their data including jobs, applications, messages, and reviews.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <DialogFooter>\n                                <Button variant=\"outline\">Cancel</Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  onClick={() => deleteUserMutation.mutate(user.id)}\n                                  disabled={deleteUserMutation.isPending}\n                                >\n                                  {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                                </Button>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          </TabsContent>\n        )}\n\n        {isAdmin && (\n          <TabsContent value=\"coins\" className=\"space-y-6\">\n            <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Coins className=\"h-5 w-5\" />\n                User Coin Management\n              </CardTitle>\n              <CardDescription>\n                View and manage coin balances for all users\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {usersWithCoinsLoading ? (\n                <div className=\"text-center py-4\">Loading users...</div>\n              ) : usersWithCoins.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No users found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {usersWithCoins.map((user: any) => (\n                    <div\n                      key={user.id}\n                      className=\"border rounded-lg p-4 flex items-center justify-between\"\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-8 w-8 text-gray-400\" />\n                          <div>\n                            <h3 className=\"font-medium\">{user.name}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              @{user.username} • {user.email}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                            {user.role === \"admin\" ? \"Admin\" : \"User\"}\n                          </Badge>\n                          \n                          <Badge variant={user.isActive ? \"default\" : \"destructive\"}>\n                            {user.isActive ? \"Active\" : \"Banned\"}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1\">\n                            <Coins className=\"h-4 w-4 text-yellow-500\" />\n                            <span className=\"font-bold text-lg\">{user.coins || 0}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {user.lastCoinReset \n                              ? `Reset ${formatDistanceToNow(new Date(user.lastCoinReset))} ago`\n                              : \"Never reset\"\n                            }\n                          </p>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedUserId(user.id);\n                              setCoinAction(\"add\");\n                              setCoinDialogOpen(true);\n                            }}\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                            Add\n                          </Button>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedUserId(user.id);\n                              setCoinAction(\"remove\");\n                              setCoinDialogOpen(true);\n                            }}\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                            Remove\n                          </Button>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedUserId(user.id);\n                              setCoinAction(\"set\");\n                              setCoinDialogOpen(true);\n                            }}\n                          >\n                            <Settings className=\"h-4 w-4\" />\n                            Set\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n\n        <TabsContent value=\"reports\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Flag className=\"h-5 w-5\" />\n                Job Reports Management\n              </CardTitle>\n              <CardDescription>\n                Review and manage user reports about job postings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {reportsLoading ? (\n                <div className=\"text-center py-8\">Loading reports...</div>\n              ) : pendingReports.length === 0 && allReports.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No reports to review\n                </div>\n              ) : pendingReports.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No pending reports to review. Check \"Reports History\" below for all reports.\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingReports.map((report) => (\n                    <div key={report.id} className=\"border rounded-lg p-4 space-y-3\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {report.category}\n                            </Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              Reported {formatDistanceToNow(new Date(report.createdAt))} ago\n                            </span>\n                          </div>\n                          <h4 className=\"font-medium\">Job: {report.job.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Reported by: {report.reporter.name} (@{report.reporter.username})\n                          </p>\n                          <p className=\"text-sm\">{report.reason}</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open(`/job/${report.jobId}`, '_blank')}\n                            className=\"text-blue-600 hover:text-blue-700\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View Job\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => reportActionMutation.mutate({ \n                              reportId: report.id, \n                              action: \"approve\",\n                              adminNotes: \"Report approved - job will be reviewed further\" \n                            })}\n                            disabled={reportActionMutation.isPending}\n                            className=\"text-green-600 hover:text-green-700\"\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Approve Report\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => reportActionMutation.mutate({ \n                              reportId: report.id, \n                              action: \"reject\",\n                              adminNotes: \"Report rejected - no violation found\" \n                            })}\n                            disabled={reportActionMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700\"\n                          >\n                            <XCircle className=\"h-4 w-4 mr-1\" />\n                            Reject Report\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* All Reports History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Reports History</CardTitle>\n              <CardDescription>\n                All job reports with their review status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {allReports.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No reports found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {allReports.map((report) => (\n                    <div key={report.id} className=\"border rounded-lg p-4 space-y-2\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge \n                              variant={report.status === \"pending\" ? \"secondary\" : \n                                      report.status === \"reviewed\" ? \"destructive\" : \"default\"}\n                              className=\"text-xs\"\n                            >\n                              {report.category}\n                            </Badge>\n                            <Badge \n                              variant={report.status === \"pending\" ? \"outline\" : \n                                      report.status === \"reviewed\" ? \"destructive\" : \"secondary\"}\n                              className=\"text-xs\"\n                            >\n                              {report.status}\n                            </Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {formatDistanceToNow(new Date(report.createdAt))} ago\n                            </span>\n                          </div>\n                          <h4 className=\"font-medium text-sm\">Job: {report.job.title}</h4>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Reporter: {report.reporter.name} (@{report.reporter.username})\n                          </p>\n                          {report.reviewer && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              Reviewed by: {report.reviewer.name} (@{report.reviewer.username})\n                            </p>\n                          )}\n                          <p className=\"text-sm\">{report.reason}</p>\n                          {report.adminNotes && (\n                            <p className=\"text-sm italic text-blue-600\">\n                              Admin notes: {report.adminNotes}\n                            </p>\n                          )}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => window.open(`/job/${report.jobId}`, '_blank')}\n                          className=\"text-blue-600 hover:text-blue-700\"\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          View Job\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Change Password Dialog */}\n      <Dialog open={passwordDialogOpen} onOpenChange={setPasswordDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Change User Password</DialogTitle>\n            <DialogDescription>\n              Enter a new password for the selected user. Password must be at least 6 characters long.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"password\" className=\"text-right\">\n                New Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                className=\"col-span-3\"\n                placeholder=\"Enter new password\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setPasswordDialogOpen(false);\n                setNewPassword(\"\");\n                setSelectedUserId(\"\");\n              }}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handlePasswordSubmit}\n              disabled={changePasswordMutation.isPending || newPassword.length < 6}\n            >\n              {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Coin Management Dialog */}\n      <Dialog open={coinDialogOpen} onOpenChange={setCoinDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>\n              {coinAction === \"add\" ? \"Add Coins\" : coinAction === \"remove\" ? \"Remove Coins\" : \"Set Coins\"}\n            </DialogTitle>\n            <DialogDescription>\n              {coinAction === \"add\" && \"Add coins to the user's balance\"}\n              {coinAction === \"remove\" && \"Remove coins from the user's balance\"}\n              {coinAction === \"set\" && \"Set the user's total coin balance\"}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"coinAmount\" className=\"text-right\">\n                {coinAction === \"set\" ? \"Total Coins\" : \"Amount\"}\n              </Label>\n              <Input\n                id=\"coinAmount\"\n                type=\"number\"\n                min=\"0\"\n                value={coinAmount}\n                onChange={(e) => setCoinAmount(e.target.value)}\n                className=\"col-span-3\"\n                placeholder=\"Enter amount\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setCoinDialogOpen(false);\n                setCoinAmount(\"\");\n                setSelectedUserId(\"\");\n              }}\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleCoinSubmit}\n              disabled={coinMutation.isPending || !coinAmount || parseInt(coinAmount) < 0}\n            >\n              {coinMutation.isPending ? \"Processing...\" : \n                coinAction === \"add\" ? \"Add Coins\" : \n                coinAction === \"remove\" ? \"Remove Coins\" : \"Set Coins\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Subscription Management Dialog */}\n      <Dialog open={subscriptionDialogOpen} onOpenChange={setSubscriptionDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Manage User Subscription</DialogTitle>\n            <DialogDescription>\n              Change the subscription plan for {selectedUserForSubscription?.name} (@{selectedUserForSubscription?.username})\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"planType\">Subscription Plan</Label>\n              <Select value={selectedPlanType} onValueChange={setSelectedPlanType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a plan type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Remove Subscription</SelectItem>\n                  {Object.entries(SUBSCRIPTION_PLANS).map(([key, plan]) => (\n                    <SelectItem key={key} value={key}>\n                      {plan.icon} {plan.name} - {plan.coins} coins/month\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setSubscriptionDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubscriptionSubmit}\n              disabled={!selectedPlanType || subscriptionMutation.isPending}\n            >\n              {subscriptionMutation.isPending ? \"Updating...\" : \"Update Subscription\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":94749},"client/src/pages/buy-coins.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Coins, CheckCircle, Star, Briefcase, PlusCircle, Calculator, Zap } from \"lucide-react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { SUBSCRIPTION_PLANS } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\n// Load Stripe\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface CoinPackage {\n  coins: number;\n  price: number;\n  label: string;\n  description: string;\n  popular?: boolean;\n}\n\n// Tiered pricing function for custom coin purchases\nconst calculateTieredPrice = (coins: number): number => {\n  let totalPrice = 0;\n  let remainingCoins = coins;\n  \n  // First 100 coins at $0.20 each\n  if (remainingCoins > 0) {\n    const tier1Coins = Math.min(remainingCoins, 100);\n    totalPrice += tier1Coins * 0.20;\n    remainingCoins -= tier1Coins;\n  }\n  \n  // Next 200 coins (100-300) at $0.15 each\n  if (remainingCoins > 0) {\n    const tier2Coins = Math.min(remainingCoins, 200);\n    totalPrice += tier2Coins * 0.15;\n    remainingCoins -= tier2Coins;\n  }\n  \n  // Next 200 coins (300-500) at $0.10 each\n  if (remainingCoins > 0) {\n    const tier3Coins = Math.min(remainingCoins, 200);\n    totalPrice += tier3Coins * 0.10;\n    remainingCoins -= tier3Coins;\n  }\n  \n  // Remaining coins (500-1000) at $0.08 each\n  if (remainingCoins > 0) {\n    totalPrice += remainingCoins * 0.08;\n  }\n  \n  return totalPrice;\n};\n\n// Get pricing breakdown for display\nconst getPricingBreakdown = (coins: number) => {\n  const breakdown = [];\n  let remainingCoins = coins;\n  \n  if (remainingCoins > 0) {\n    const tier1Coins = Math.min(remainingCoins, 100);\n    breakdown.push({ coins: tier1Coins, rate: 0.20, total: tier1Coins * 0.20, range: \"1-100\" });\n    remainingCoins -= tier1Coins;\n  }\n  \n  if (remainingCoins > 0) {\n    const tier2Coins = Math.min(remainingCoins, 200);\n    breakdown.push({ coins: tier2Coins, rate: 0.15, total: tier2Coins * 0.15, range: \"101-300\" });\n    remainingCoins -= tier2Coins;\n  }\n  \n  if (remainingCoins > 0) {\n    const tier3Coins = Math.min(remainingCoins, 200);\n    breakdown.push({ coins: tier3Coins, rate: 0.10, total: tier3Coins * 0.10, range: \"301-500\" });\n    remainingCoins -= tier3Coins;\n  }\n  \n  if (remainingCoins > 0) {\n    breakdown.push({ coins: remainingCoins, rate: 0.08, total: remainingCoins * 0.08, range: \"501-1000\" });\n  }\n  \n  return breakdown;\n};\n\nconst CheckoutForm = ({ selectedPackage, onSuccess }: { selectedPackage: string, onSuccess: () => void }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Instead of using confirmPayment with redirect, use confirmPayment without redirect\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        redirect: 'if_required',\n        confirmParams: {\n          return_url: `${window.location.origin}/buy-coins?success=true`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n        setIsProcessing(false);\n      } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n        // Manually trigger coin addition since we don't have webhooks in development\n        try {\n          await apiRequest(\"POST\", \"/api/coins/complete-purchase\", {\n            paymentIntentId: paymentIntent.id\n          });\n          \n          toast({\n            title: isCustomPurchase ? \"Purchase Complete!\" : \"Subscription Activated!\",\n            description: isCustomPurchase ? \"Your coins have been added to your account!\" : \"Your monthly coins have been added to your account!\",\n          });\n          onSuccess();\n        } catch (err) {\n          toast({\n            title: isCustomPurchase ? \"Purchase Processed\" : \"Subscription Processed\",\n            description: isCustomPurchase ? \"Purchase successful! Your coins will be added shortly.\" : \"Subscription successful! Your coins will be added shortly.\",\n          });\n          onSuccess();\n        }\n      }\n    } catch (err: any) {\n      console.error('Payment error:', err);\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  const isCustomPurchase = selectedPackage === \"custom\";\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing} \n        className=\"w-full\"\n      >\n        {isProcessing ? \"Processing...\" : (isCustomPurchase ? \"Complete Purchase\" : \"Start Monthly Subscription\")}\n      </Button>\n    </form>\n  );\n};\n\nexport default function BuyCoins() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedPackage, setSelectedPackage] = useState<string | null>(null);\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const [customCoins, setCustomCoins] = useState([100]);\n  const [activeTab, setActiveTab] = useState(\"subscriptions\");\n\n  // Check for success parameter in URL\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('success') === 'true') {\n      toast({\n        title: \"Subscription Successful!\",\n        description: \"Your monthly coins have been added to your account.\",\n      });\n      // Clean up URL\n      window.history.replaceState({}, document.title, \"/buy-coins\");\n      // Refresh user coins and subscription data\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/coins/subscription\"] });\n    }\n  }, [toast, queryClient]);\n\n  // Get subscription plans\n  const { data: packages } = useQuery({\n    queryKey: [\"/api/coins/subscription-plans\"],\n  });\n\n  // Get user's coins\n  const { data: userCoins } = useQuery({\n    queryKey: [\"/api/user/coins\"],\n    enabled: !!user,\n  });\n\n  // Get user's active subscription\n  const { data: userSubscription } = useQuery({\n    queryKey: [\"/api/coins/subscription\"],\n    enabled: !!user,\n  });\n\n  // Create subscription mutation\n  const createSubscriptionMutation = useMutation({\n    mutationFn: async (planType: string) => {\n      const response = await apiRequest(\"POST\", \"/api/coins/create-subscription\", { planType });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n      toast({\n        title: \"Subscription Ready\",\n        description: `Ready to subscribe for ${data.coins} coins monthly at $${(data.price / 100).toFixed(2)}/month`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create one-time purchase mutation\n  const createPurchaseMutation = useMutation({\n    mutationFn: async (coins: number) => {\n      const response = await apiRequest(\"POST\", \"/api/coins/create-payment-intent\", { \n        amount: calculateTieredPrice(coins), // Use tiered pricing\n        coins: coins // Pass the coin count as well\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n      toast({\n        title: \"Payment Ready\",\n        description: `Ready to purchase ${customCoins[0]} coins for $${calculateTieredPrice(customCoins[0]).toFixed(2)}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Change subscription plan mutation\n  const changeSubscriptionMutation = useMutation({\n    mutationFn: async (newPlanType: string) => {\n      const response = await apiRequest(\"POST\", \"/api/coins/change-subscription\", { newPlanType });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.type === \"upgrade\" && data.clientSecret) {\n        setClientSecret(data.clientSecret);\n        setSelectedPackage(data.newPlan.toLowerCase());\n        toast({\n          title: \"Upgrade Ready\",\n          description: `Pay $${(data.proratedAmount / 100).toFixed(2)} to upgrade to ${data.newPlan} immediately`,\n        });\n      } else if (data.type === \"downgrade\") {\n        toast({\n          title: \"Plan Change Scheduled\",\n          description: `Your plan will change to ${data.newPlan} on ${new Date(data.effectiveDate).toLocaleDateString()}`,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/coins/subscription\"] });\n      } else if (data.type === \"upgrade\" && data.effectiveImmediately) {\n        toast({\n          title: \"Plan Upgraded!\",\n          description: data.message,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/coins/subscription\"] });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to change plan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Cancel subscription mutation\n  const cancelSubscriptionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/coins/cancel-subscription\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Subscription Canceled\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/coins/subscription\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cancel subscription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlanSelect = (planKey: string) => {\n    if (userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription && userSubscription.subscription && typeof userSubscription.subscription === 'object') {\n      // User has active subscription, change plan\n      changeSubscriptionMutation.mutate(planKey);\n    } else {\n      // No active subscription, create new one\n      setSelectedPackage(planKey);\n      setActiveTab(\"subscriptions\");\n      createSubscriptionMutation.mutate(planKey);\n    }\n  };\n\n  const handleCustomPurchase = () => {\n    setSelectedPackage(\"custom\");\n    setActiveTab(\"custom\");\n    createPurchaseMutation.mutate(customCoins[0]);\n  };\n\n  const handlePaymentSuccess = () => {\n    setSelectedPackage(null);\n    setClientSecret(null);\n    // Refresh user coins and subscription data\n    queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/coins/subscription\"] });\n    toast({\n      title: \"Coins Added!\",\n      description: \"Your new coins are now available in your account.\",\n    });\n  };\n\n  if (selectedPackage && clientSecret) {\n    const packageInfo = packages?.[selectedPackage as keyof typeof packages] as CoinPackage | undefined;\n    const isCustom = selectedPackage === \"custom\";\n    \n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold\">\n              {isCustom ? \"Complete Your Purchase\" : \"Complete Your Subscription\"}\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              {isCustom \n                ? `${customCoins[0]} coins for $${calculateTieredPrice(customCoins[0]).toFixed(2)}`\n                : `${packageInfo?.coins} coins monthly for $${((packageInfo?.price || 0) / 100).toFixed(2)}/month`\n              }\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Coins className=\"h-5 w-5\" />\n                {isCustom ? \"Custom Purchase\" : packageInfo?.label}\n              </CardTitle>\n              <CardDescription>\n                {isCustom ? \"One-time coin purchase\" : packageInfo?.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <CheckoutForm \n                  selectedPackage={selectedPackage} \n                  onSuccess={handlePaymentSuccess}\n                />\n              </Elements>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center mt-6\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSelectedPackage(null);\n                setClientSecret(null);\n              }}\n            >\n              Back to Options\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-4 md:py-8 px-4\">\n      <div className=\"text-center mb-6 md:mb-8\">\n        <h1 className=\"text-2xl md:text-4xl font-bold\">Buy Coins</h1>\n        <p className=\"text-gray-600 mt-2 text-base md:text-lg\">\n          Power your freelance career with our flexible coin options\n        </p>\n        {user && (\n          <div className=\"mt-4 inline-flex items-center gap-2 bg-blue-50 px-3 md:px-4 py-2 rounded-lg\">\n            <Coins className=\"h-4 w-4 md:h-5 md:w-5 text-blue-600\" />\n            <span className=\"text-blue-800 font-medium text-sm md:text-base\">\n              Current balance: {userCoins && typeof userCoins === 'object' && 'coins' in userCoins ? (userCoins as any).coins : 0} coins\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Coin Usage Information */}\n      <div className=\"max-w-4xl mx-auto mb-8 md:mb-12\">\n        <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200\">\n          <CardHeader className=\"pb-4 md:pb-6\">\n            <CardTitle className=\"flex items-center gap-2 text-blue-800 text-lg md:text-xl\">\n              <Calculator className=\"h-5 w-5 md:h-6 md:w-6\" />\n              What You Can Do With Coins\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8\">\n              <div className=\"text-center\">\n                <div className=\"bg-green-100 w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Briefcase className=\"h-6 w-6 md:h-8 md:w-8 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-base md:text-lg mb-2\">Job Applications</h3>\n                <p className=\"text-gray-600 text-sm mb-2\">1 coin per application</p>\n                <div className=\"text-xs text-gray-500\">\n                  <p>✓ Apply to any job</p>\n                  <p>✓ No application limits</p>\n                </div>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <PlusCircle className=\"h-6 w-6 md:h-8 md:w-8 text-orange-600\" />\n                </div>\n                <h3 className=\"font-semibold text-base md:text-lg mb-2\">Post Jobs</h3>\n                <p className=\"text-gray-600 text-sm mb-2\">3 coins per job post</p>\n                <div className=\"text-xs text-gray-500\">\n                  <p>✓ Reach qualified freelancers</p>\n                  <p>✓ Quality job posting system</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"max-w-6xl mx-auto\">\n        <div className=\"flex justify-center mb-6 md:mb-8\">\n          <TabsList className=\"inline-flex bg-gradient-to-r from-gray-100 to-gray-200 p-1 rounded-xl shadow-lg w-full max-w-md md:w-auto\">\n            <TabsTrigger \n              value=\"subscriptions\" \n              className=\"flex-1 md:flex-none px-3 md:px-9 py-2 md:py-3 rounded-lg transition-all duration-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-blue-600 data-[state=active]:text-white data-[state=active]:shadow-lg hover:bg-white/50\"\n            >\n              <div className=\"flex items-center gap-1 md:gap-2\">\n                <div className=\"w-4 h-4 md:w-6 md:h-6 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center\">\n                  <Zap className=\"h-2 w-2 md:h-4 md:w-4 text-white\" />\n                </div>\n                <span className=\"font-medium text-xs md:text-sm\">Monthly Subscriptions</span>\n              </div>\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"custom\" \n              className=\"flex-1 md:flex-none px-3 md:px-9 py-2 md:py-3 rounded-lg transition-all duration-300 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-green-600 data-[state=active]:text-white data-[state=active]:shadow-lg hover:bg-white/50\"\n            >\n              <div className=\"flex items-center gap-1 md:gap-2\">\n                <div className=\"w-4 h-4 md:w-6 md:h-6 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center\">\n                  <Coins className=\"h-2 w-2 md:h-4 md:w-4 text-white\" />\n                </div>\n                <span className=\"font-medium text-xs md:text-sm\">One-Time Purchase</span>\n              </div>\n            </TabsTrigger>\n          </TabsList>\n        </div>\n        \n        <TabsContent value=\"subscriptions\" className=\"space-y-8\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl font-bold mb-2\">Monthly Subscription Plans</h2>\n            <p className=\"text-gray-600\">Get fresh coins delivered monthly - cancel anytime</p>\n          </div>\n\n          {/* Show active subscription status if user has one */}\n          {(() => {\n            const isValidSubscription = userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription && userSubscription.subscription && typeof userSubscription.subscription === 'object';\n            if (!isValidSubscription) return null;\n            return (\n            <div className=\"max-w-2xl mx-auto mb-8\">\n              <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"flex items-center gap-2 text-green-800\">\n                      <CheckCircle className=\"h-6 w-6\" />\n                      Active Subscription\n                    </CardTitle>\n                    {(() => {\n                      const subscription = userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription ? userSubscription.subscription : null;\n                      if (!subscription || typeof subscription !== 'object' || (subscription as any).status === \"canceled\") {\n                        return null;\n                      }\n                      return (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => cancelSubscriptionMutation.mutate()}\n                          disabled={cancelSubscriptionMutation.isPending}\n                          className=\"text-red-600 border-red-300 hover:bg-red-50 hover:text-red-700 hover:border-red-400\"\n                        >\n                          {cancelSubscriptionMutation.isPending ? (\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-3 h-3 border-2 border-red-300 border-t-red-600 rounded-full animate-spin\" />\n                              Canceling...\n                            </div>\n                          ) : (\n                            \"Cancel Subscription\"\n                          )}\n                        </Button>\n                      );\n                    })()}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-sm text-green-600 mb-1\">Plan</div>\n                      <div className=\"font-semibold capitalize\">{userSubscription && 'subscription' in userSubscription && userSubscription.subscription ? (userSubscription.subscription as any).planType : ''}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-green-600 mb-1\">Monthly Coins</div>\n                      <div className=\"font-semibold\">{userSubscription && 'subscription' in userSubscription && userSubscription.subscription ? (userSubscription.subscription as any).coinAllocation : ''}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-green-600 mb-1\">Next Billing</div>\n                      <div className=\"font-semibold\">\n                        {userSubscription && 'subscription' in userSubscription && userSubscription.subscription && (userSubscription.subscription as any).currentPeriodEnd ? new Date((userSubscription.subscription as any).currentPeriodEnd).toLocaleDateString() : 'N/A'}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {userSubscription && 'subscription' in userSubscription && userSubscription.subscription && (userSubscription.subscription as any).status === \"canceled\" && (userSubscription.subscription as any).canceledAt && (\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\">\n                      <p className=\"text-red-800 font-medium mb-1\">Subscription Canceled</p>\n                      <p className=\"text-red-700 text-sm\">\n                        Canceled on {userSubscription && 'subscription' in userSubscription && userSubscription.subscription && (userSubscription.subscription as any).canceledAt ? new Date((userSubscription.subscription as any).canceledAt).toLocaleDateString() : 'N/A'}\n                      </p>\n                      <p className=\"text-red-700 text-sm\">\n                        Access continues until {userSubscription && 'subscription' in userSubscription && userSubscription.subscription && (userSubscription.subscription as any).currentPeriodEnd ? new Date((userSubscription.subscription as any).currentPeriodEnd).toLocaleDateString() : 'N/A'}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n            );\n          })()}\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6\">\n            {(() => {\n              if (!packages) return null;\n              return Object.entries(packages).map(([key, pkg]: [string, any]) => {\n              const packageInfo = pkg as CoinPackage;\n              const applicationsPerMonth = SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"∞\" : packageInfo.coins;\n              const jobPostsPerMonth = SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"∞\" : Math.floor(packageInfo.coins / 3);\n              const hasActiveSubscription = !!(userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription && userSubscription.subscription && typeof userSubscription.subscription === 'object');\n              const isCurrentPlan = userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription && userSubscription.subscription && typeof userSubscription.subscription === 'object' ? (userSubscription.subscription as any).planType === key : false;\n              const currentPlanPrice = (userSubscription && typeof userSubscription === 'object' && 'subscription' in userSubscription && userSubscription.subscription && typeof userSubscription.subscription === 'object' && (userSubscription.subscription as any).planType && packages && packages[(userSubscription.subscription as any).planType as keyof typeof packages]) ? (packages[(userSubscription.subscription as any).planType as keyof typeof packages] as CoinPackage).price : 0;\n              const isUpgrade = hasActiveSubscription && packageInfo.price > currentPlanPrice;\n              const isDowngrade = hasActiveSubscription && packageInfo.price < currentPlanPrice;\n              \n              return (\n                <Card \n                  key={key} \n                  className={`relative transition-all duration-300 group cursor-pointer ${\n                    isCurrentPlan \n                      ? 'ring-2 ring-green-500 bg-gradient-to-br from-green-50 to-emerald-50 border-green-200'\n                      : packageInfo.popular && !hasActiveSubscription\n                        ? 'ring-2 ring-blue-500 bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 hover:shadow-xl hover:scale-105' \n                        : 'hover:border-blue-300 bg-gradient-to-br from-white to-gray-50 hover:shadow-xl hover:scale-105'\n                  }`}\n                  onClick={() => handlePlanSelect(key)}\n                >\n                  {isCurrentPlan ? (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 z-10\">\n                      <Badge className=\"bg-gradient-to-r from-green-500 to-green-600 text-white px-4 py-1.5 shadow-lg whitespace-nowrap\">\n                        <CheckCircle className=\"h-3 w-3 mr-1 fill-current\" />\n                        Current Plan\n                      </Badge>\n                    </div>\n                  ) : packageInfo.popular && !hasActiveSubscription && (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 z-10\">\n                      <Badge className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white px-4 py-1.5 shadow-lg whitespace-nowrap\">\n                        <Star className=\"h-3 w-3 mr-1 fill-current\" />\n                        Most Popular\n                      </Badge>\n                    </div>\n                  )}\n                  <CardHeader className=\"text-center pb-3 md:pb-4 pt-4 md:pt-6\">\n                    <div className={`mx-auto w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center mb-2 md:mb-3 ${\n                      packageInfo.popular \n                        ? 'bg-gradient-to-br from-blue-500 to-blue-600' \n                        : 'bg-gradient-to-br from-gray-100 to-gray-200 group-hover:from-blue-100 group-hover:to-blue-200'\n                    } transition-all duration-300`}>\n                      <Coins className={`h-6 w-6 md:h-8 md:w-8 ${\n                        packageInfo.popular ? 'text-white' : 'text-gray-600 group-hover:text-blue-600'\n                      }`} />\n                    </div>\n                    <CardTitle className=\"text-lg md:text-xl font-bold mb-1\">\n                      {packageInfo.label}\n                    </CardTitle>\n                    <CardDescription className=\"text-muted-foreground md:text-sm opacity-80 text-[16px]\">\n                      {SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"Unlimited coins monthly\" : `${packageInfo.coins} coins monthly`}\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent className=\"text-center pt-0 px-3 md:px-6\">\n                    <div className=\"mb-4 md:mb-6\">\n                      <div className=\"text-2xl md:text-4xl font-bold mb-1\">\n                        ${(packageInfo.price / 100).toFixed(2)}\n                      </div>\n                      <div className=\"text-xs md:text-sm text-gray-500\">/month</div>\n                      <div className=\"text-xs text-gray-400 mt-1\">\n                        {SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"Unlimited value\" : `$${((packageInfo.price / 100) / packageInfo.coins).toFixed(3)} per coin`}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 md:space-y-3 mb-4 md:mb-6\">\n                      <div className={`p-2 md:p-3 rounded-lg ${\n                        packageInfo.popular \n                          ? 'bg-white/60' \n                          : 'bg-blue-50/80 group-hover:bg-blue-100/80'\n                      } transition-all duration-300`}>\n                        <div className=\"flex items-center justify-between text-xs md:text-sm\">\n                          <span className=\"text-gray-700 flex items-center gap-1 md:gap-2\">\n                            <Briefcase className=\"h-3 w-3 md:h-4 md:w-4\" />\n                            Applications\n                          </span>\n                          <span className=\"font-bold text-blue-600\">{applicationsPerMonth}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs md:text-sm mt-1 md:mt-2\">\n                          <span className=\"text-gray-700 flex items-center gap-1 md:gap-2\">\n                            <PlusCircle className=\"h-3 w-3 md:h-4 md:w-4\" />\n                            Job Posts\n                          </span>\n                          <span className=\"font-bold text-green-600\">{jobPostsPerMonth}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs md:text-sm mt-1 md:mt-2\">\n                          <span className=\"text-gray-700 flex items-center gap-1 md:gap-2\">\n                            <svg className=\"h-3 w-3 md:h-4 md:w-4\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                              <path d=\"M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V18C18 19.1 17.1 20 16 20H8C6.9 20 6 19.1 6 18V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2ZM16 8V18H8V8H16ZM9 10V12H11V10H9ZM13 10V12H15V10H13ZM9 14V16H11V14H9ZM13 14V16H15V14H13Z\" fill=\"currentColor\"/>\n                            </svg>\n                            Service Posts\n                          </span>\n                          <span className=\"font-bold text-orange-600\">{SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"∞\" : Math.floor(packageInfo.coins / 15)}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs md:text-sm mt-1 md:mt-2\">\n                          <span className=\"text-gray-700 flex items-center gap-1 md:gap-2\">\n                            <svg className=\"h-3 w-3 md:h-4 md:w-4\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                              <path d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\" fill=\"currentColor\"/>\n                            </svg>\n                            Profile Badge\n                          </span>\n                          <span className=\"font-bold text-purple-600\">✓</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs md:text-sm mt-1 md:mt-2\">\n                          <span className=\"text-gray-700 flex items-center gap-1 md:gap-2\">\n                            <svg className=\"h-3 w-3 md:h-4 md:w-4\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                              <path d=\"M12 2C13.1 2 14 2.9 14 4V6H16C17.1 6 18 6.9 18 8V18C18 19.1 17.1 20 16 20H8C6.9 20 6 19.1 6 18V8C6 6.9 6.9 6 8 6H10V4C10 2.9 10.9 2 12 2ZM12 4V6H12V4ZM8 8V18H16V8H8ZM11 10H13V12H15V14H13V16H11V14H9V12H11V10Z\" fill=\"currentColor\"/>\n                            </svg>\n                            Coin Cap\n                          </span>\n                          <span className=\"font-bold text-blue-600\">\n                            {SUBSCRIPTION_PLANS[key as keyof typeof SUBSCRIPTION_PLANS].hasUnlimitedCoinCap ? \"∞\" : `${\n                              key === 'freelancer' ? '100' :\n                              key === 'professional' ? '400' :\n                              key === 'expert' ? '1000' :\n                              key === 'elite' ? '5000' : '40'\n                            }`}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button \n                      className={`w-full transition-all duration-300 ${\n                        isCurrentPlan\n                          ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-lg'\n                          : isUpgrade\n                            ? 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg'\n                            : isDowngrade\n                              ? 'bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 shadow-lg'\n                              : packageInfo.popular \n                                ? 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-lg' \n                                : 'group-hover:bg-blue-500 group-hover:text-white'\n                      }`}\n                      variant={isCurrentPlan || isUpgrade || isDowngrade || packageInfo.popular ? \"default\" : \"outline\"}\n                      disabled={isCurrentPlan || createSubscriptionMutation.isPending || changeSubscriptionMutation.isPending}\n                      size=\"lg\"\n                    >\n                      {(createSubscriptionMutation.isPending || changeSubscriptionMutation.isPending) ? (\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                          Processing...\n                        </div>\n                      ) : isCurrentPlan ? (\n                        <div className=\"flex items-center gap-2\">\n                          <CheckCircle className=\"h-4 w-4\" />\n                          Active Plan\n                        </div>\n                      ) : isUpgrade ? (\n                        \"Upgrade Now\"\n                      ) : isDowngrade ? (\n                        \"Downgrade Plan\"\n                      ) : (\n                        \"Subscribe Now\"\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n              });\n            })()}\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"custom\" className=\"space-y-6 md:space-y-8\">\n          <div className=\"text-center mb-4 md:mb-6\">\n            <h2 className=\"text-xl md:text-2xl font-bold mb-2\">Custom Coin Purchase</h2>\n            <p className=\"text-gray-600 text-sm md:text-base\">Buy exactly what you need with one-time payments</p>\n          </div>\n          \n          <div className=\"max-w-3xl mx-auto\">\n            <Card className=\"bg-gradient-to-br from-white to-gray-50 border-gray-200 shadow-lg\">\n              <CardHeader className=\"text-center pb-4 md:pb-6\">\n                <div className=\"mx-auto w-16 h-16 md:w-20 md:h-20 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center mb-3 md:mb-4\">\n                  <Calculator className=\"h-8 w-8 md:h-10 md:w-10 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl md:text-2xl font-bold\">\n                  Custom Coin Purchase\n                </CardTitle>\n                <CardDescription className=\"text-sm md:text-base px-2\">\n                  Tiered pricing: $0.20 (1-100) • $0.15 (101-300) • $0.10 (301-500) • $0.08 (501-1000)\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6 md:space-y-8 px-4 md:px-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <Label htmlFor=\"coin-slider\" className=\"text-base md:text-lg font-semibold\">\n                      Coins: {customCoins[0]}\n                    </Label>\n                    <div className=\"text-2xl md:text-3xl font-bold text-blue-600 mt-2\">\n                      ${calculateTieredPrice(customCoins[0]).toFixed(2)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"px-2 md:px-4\">\n                    <Slider\n                      id=\"coin-slider\"\n                      min={10}\n                      max={1000}\n                      step={10}\n                      value={customCoins}\n                      onValueChange={setCustomCoins}\n                      className=\"mt-4\"\n                    />\n                    <div className=\"flex justify-between text-xs md:text-sm text-gray-500 mt-2\">\n                      <span>10 coins (${calculateTieredPrice(10).toFixed(2)})</span>\n                      <span>1000 coins (${calculateTieredPrice(1000).toFixed(2)})</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4\">\n                  <div className=\"bg-gradient-to-br from-green-50 to-green-100 p-4 md:p-6 rounded-xl border border-green-200\">\n                    <div className=\"flex items-center gap-2 md:gap-3 mb-2 md:mb-3\">\n                      <div className=\"w-8 h-8 md:w-10 md:h-10 rounded-full bg-green-500 flex items-center justify-center\">\n                        <Briefcase className=\"h-4 w-4 md:h-5 md:w-5 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-green-800 text-sm md:text-base\">Job Applications</h4>\n                        <p className=\"text-xs md:text-sm text-green-600\">1 coin each</p>\n                      </div>\n                    </div>\n                    <div className=\"text-xl md:text-2xl font-bold text-green-700\">\n                      {customCoins[0]} applications\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 p-4 md:p-6 rounded-xl border border-blue-200\">\n                    <div className=\"flex items-center gap-2 md:gap-3 mb-2 md:mb-3\">\n                      <div className=\"w-8 h-8 md:w-10 md:h-10 rounded-full bg-blue-500 flex items-center justify-center\">\n                        <PlusCircle className=\"h-4 w-4 md:h-5 md:w-5 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-blue-800 text-sm md:text-base\">Job Posts</h4>\n                        <p className=\"text-xs md:text-sm text-blue-600\">3 coins each</p>\n                      </div>\n                    </div>\n                    <div className=\"text-xl md:text-2xl font-bold text-blue-700\">\n                      {Math.floor(customCoins[0] / 3)} posts\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-100 p-3 md:p-4 rounded-lg\">\n                  <div className=\"text-xs md:text-sm text-gray-600 mb-2 md:mb-3 text-center font-medium\">Pricing Breakdown</div>\n                  <div className=\"space-y-1 md:space-y-2\">\n                    {getPricingBreakdown(customCoins[0]).map((tier, index) => (\n                      <div key={index} className=\"flex justify-between items-center text-xs md:text-sm\">\n                        <span className=\"text-gray-700\">\n                          Coins {tier.range}: {tier.coins} × ${tier.rate.toFixed(2)}\n                        </span>\n                        <span className=\"font-semibold\">${tier.total.toFixed(2)}</span>\n                      </div>\n                    ))}\n                    <div className=\"border-t pt-1 md:pt-2 mt-1 md:mt-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-bold text-sm md:text-base\">Total</span>\n                        <span className=\"font-bold text-base md:text-lg text-blue-600\">${calculateTieredPrice(customCoins[0]).toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button \n                  className=\"w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-lg transition-all duration-300\" \n                  onClick={handleCustomPurchase}\n                  disabled={createPurchaseMutation.isPending}\n                  size=\"lg\"\n                >\n                  {createPurchaseMutation.isPending ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                      Processing...\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-2\">\n                      <Coins className=\"h-4 w-4 md:h-5 md:w-5\" />\n                      <span className=\"text-sm md:text-base\">Buy {customCoins[0]} Coins for ${calculateTieredPrice(customCoins[0]).toFixed(2)}</span>\n                    </div>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"max-w-4xl mx-auto mt-16 text-center\">\n        <Card className=\"bg-gray-50\">\n          <CardHeader>\n            <CardTitle className=\"text-xl\">How Our Coin System Works</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 text-left\">\n              <div>\n                <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                  <Briefcase className=\"h-5 w-5 text-blue-600\" />\n                  For Freelancers\n                </h4>\n                <ul className=\"space-y-2 text-sm text-gray-600\">\n                  <li>• Apply to jobs for 1 coin each</li>\n                  <li>• Post jobs for 3 coins each</li>\n                  <li>• Monthly subscriptions include fresh coins</li>\n                  <li>• Free tier: 40 coin cap, Paid plans: 100-5000 coin caps</li>\n                  <li>• Cancel anytime with no penalties</li>\n                  <li>• Keep unused coins when you cancel</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                  <PlusCircle className=\"h-5 w-5 text-green-600\" />\n                  For Clients\n                </h4>\n                <ul className=\"space-y-2 text-sm text-gray-600\">\n                  <li>• Post jobs for 3 coins each</li>\n                  <li>• No fees for hiring freelancers</li>\n                  <li>• Access to motivated, serious freelancers</li>\n                  <li>• Free tier: 40 coin cap, Paid plans: 100-5000 coin caps</li>\n                  <li>• Built-in quality control through coin system</li>\n                  <li>• Simple application review process</li>\n                </ul>\n              </div>\n            </div>\n            <Separator className=\"my-6\" />\n            <p className=\"text-sm text-gray-500\">\n              Secure payments powered by Stripe • Cancel anytime • 24/7 customer support\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":45082},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Star, MapPin, Clock, DollarSign, User, Eye, Plus, MessageCircle, Check, X, Edit, Trash2, CheckCircle, Trophy, Medal, Award, Coins, ChevronDown, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ReviewModal from \"@/components/review-modal\";\nimport PostJobModal from \"@/components/post-job-modal\";\nimport PostServiceModal from \"@/components/post-service-modal\";\nimport { SkillEndorsementModal } from \"@/components/skill-endorsement-modal\";\n\n// Component to handle rate provider button with duplicate prevention\nfunction RateProviderButton({ \n  serviceId, \n  serviceProviderId, \n  serviceName, \n  providerName, \n  onRate \n}: {\n  serviceId: string;\n  serviceProviderId: string;\n  serviceName: string;\n  providerName: string;\n  onRate: (serviceId: string, providerId: string, providerName: string, serviceName: string) => void;\n}) {\n  const [hasRated, setHasRated] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    const checkRatingStatus = async () => {\n      if (!serviceId || !serviceProviderId) return;\n      \n      try {\n        const response = await apiRequest(\"GET\", `/api/reviews/has-client-rated-service/${serviceId}/${serviceProviderId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setHasRated(data.hasRated);\n        }\n      } catch (error) {\n        console.error(\"Error checking rating status:\", error);\n        setHasRated(false);\n      }\n    };\n\n    checkRatingStatus();\n  }, [serviceId, serviceProviderId]);\n\n  if (hasRated === null) {\n    return (\n      <Button\n        disabled\n        className=\"bg-gray-300 text-gray-500 w-full sm:w-auto\"\n      >\n        <Star className=\"h-4 w-4 mr-1\" />\n        Loading...\n      </Button>\n    );\n  }\n\n  if (hasRated) {\n    return (\n      <Button\n        disabled\n        className=\"bg-gray-300 text-gray-500 w-full sm:w-auto\"\n      >\n        <Star className=\"h-4 w-4 mr-1\" />\n        Already Rated\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      onClick={() => onRate(serviceId, serviceProviderId, providerName, serviceName)}\n      className=\"bg-yellow-600 hover:bg-yellow-700 text-white w-full sm:w-auto\"\n    >\n      <Star className=\"h-4 w-4 mr-1\" />\n      Rate Provider\n    </Button>\n  );\n}\n\nimport { BidManagement } from \"@/components/bid-management\";\nimport type { JobWithApplications, ApplicationWithJob, ApplicationWithUser, ServiceWithRequests } from \"@shared/schema\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { format } from \"date-fns\";\n\nconst formatBudgetText = (job: JobWithApplications) => {\n  const currencySymbol = getCurrencySymbol(job.currency);\n  const isHourly = job.budgetType === \"hourly\";\n  const suffix = isHourly ? \"/hr\" : \"\";\n  \n  if (job.minBudget && job.maxBudget) {\n    return `${currencySymbol}${job.minBudget} - ${currencySymbol}${job.maxBudget}${suffix}`;\n  } else if (job.minBudget) {\n    return `${currencySymbol}${job.minBudget}+${suffix}`;\n  } else if (job.maxBudget) {\n    return `Up to ${currencySymbol}${job.maxBudget}${suffix}`;\n  } else {\n    return isHourly ? \"Rate negotiable\" : \"Budget negotiable\";\n  }\n};\n\nconst formatTimeAgo = (date: Date | string | null) => {\n  if (!date) return \"Recently\";\n  \n  const now = new Date();\n  const past = new Date(date);\n  const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n  \n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minutes ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hours ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  return `${diffInDays} days ago`;\n};\n\nconst getStatusColor = (status: string) => {\n  const colors = {\n    \"open\": \"bg-green-100 text-green-800\",\n    \"in_progress\": \"bg-orange-100 text-orange-800\", \n    \"completed\": \"bg-gray-100 text-gray-800\",\n    \"closed\": \"bg-red-100 text-red-800\",\n    \"pending\": \"bg-yellow-100 text-yellow-800\",\n    \"accepted\": \"bg-green-100 text-green-800\",\n    \"rejected\": \"bg-red-100 text-red-800\"\n  };\n  return colors[status as keyof typeof colors] || colors[\"pending\"];\n};\n\nexport default function Dashboard() {\n  const [selectedJobApplications, setSelectedJobApplications] = useState<string | null>(null);\n  const [reviewModalOpen, setReviewModalOpen] = useState(false);\n  const [isPostJobModalOpen, setIsPostJobModalOpen] = useState(false);\n  const [skillEndorsementModalOpen, setSkillEndorsementModalOpen] = useState(false);\n  const [isEditJobModalOpen, setIsEditJobModalOpen] = useState(false);\n  const [editingJob, setEditingJob] = useState<JobWithApplications | null>(null);\n  const [isPostServiceModalOpen, setIsPostServiceModalOpen] = useState(false);\n  const [isEditServiceModalOpen, setIsEditServiceModalOpen] = useState(false);\n  const [editingService, setEditingService] = useState<ServiceWithRequests | null>(null);\n  const [viewApplicationModalOpen, setViewApplicationModalOpen] = useState(false);\n  const [selectedApplication, setSelectedApplication] = useState<ApplicationWithUser | null>(null);\n  const [selectedServiceRequest, setSelectedServiceRequest] = useState<any | null>(null);\n  const [viewServiceRequestModalOpen, setViewServiceRequestModalOpen] = useState(false);\n  const [currentTab, setCurrentTab] = useState(\"posted\");\n\n  const [reviewData, setReviewData] = useState<{\n    jobId: string;\n    revieweeId: string;\n    revieweeName: string;\n    reviewType: \"client_to_worker\" | \"worker_to_client\";\n    jobTitle?: string;\n  } | null>(null);\n  const [skillEndorsementData, setSkillEndorsementData] = useState<{\n    jobId: string;\n    endorseeId: string;\n    endorseeName: string;\n    jobTitle: string;\n  } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: userJobs = [], isLoading: jobsLoading } = useQuery<JobWithApplications[]>({\n    queryKey: [\"/api/user/jobs\"],\n  });\n\n  const { data: userApplications = [], isLoading: applicationsLoading } = useQuery<ApplicationWithJob[]>({\n    queryKey: [\"/api/user/applications\"],\n  });\n\n  // Query for user services\n  const { data: userServices = [], isLoading: servicesLoading, refetch: refetchServices } = useQuery<ServiceWithRequests[]>({\n    queryKey: [\"/api/user/services\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/user/services\");\n      if (!response.ok) throw new Error(\"Failed to fetch services\");\n      const data = await response.json();\n      console.log('Services query response:', data);\n      // Log details about requests for debugging\n      if (data.services && data.services.length > 0) {\n        data.services.forEach((service: any, idx: number) => {\n          console.log(`Service ${idx + 1} (${service.title}):`, {\n            requestCount: service.requests?.length || 0,\n            requests: service.requests?.map((r: any) => ({\n              status: r.status,\n              createdAt: r.createdAt,\n              userId: r.userId,\n              userName: r.user?.name || 'No name'\n            })) || []\n          });\n        });\n      }\n      return data.services || [];\n    },\n    enabled: !!user,\n    staleTime: 0, // Always refetch when the query is invalidated\n    refetchOnWindowFocus: true, // Refetch when window gains focus\n  });\n\n  // Query for user coins\n  const { data: userCoins = { coins: 0 } } = useQuery<{ coins: number; lastReset?: string; daysUntilReset?: number }>({\n    queryKey: [\"/api/user/coins\"],\n    enabled: !!user,\n  });\n\n  // Query for user's service enquiries/requests\n  const { data: userServiceRequests = [], isLoading: serviceRequestsLoading } = useQuery({\n    queryKey: [\"/api/user/service-requests\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/user/service-requests\");\n      if (!response.ok) throw new Error(\"Failed to fetch service requests\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n\n\n  // Query to check if freelancer can rate clients for their applications\n  const { data: clientRatingEligibility = {} } = useQuery({\n    queryKey: [\"/api/client-rating-eligibility\", userApplications],\n    queryFn: async () => {\n      if (!user || !userApplications.length) return {};\n      \n      const acceptedApplications = userApplications.filter(app => app.status === \"accepted\");\n      const eligibilityPromises = acceptedApplications.map(async (application) => {\n        const response = await apiRequest(\"GET\", `/api/reviews/can-rate-client/${application.job.id}/${application.job.userId}`);\n        if (!response.ok) return { applicationId: application.id, canRate: false, hasRated: false };\n        \n        const ratingData = await response.json();\n        return { \n          applicationId: application.id, \n          jobId: application.job.id,\n          clientId: application.job.userId,\n          clientName: \"Client\",\n          ...ratingData \n        };\n      });\n      \n      const results = await Promise.all(eligibilityPromises);\n      return results.reduce((acc, result) => {\n        acc[result.applicationId] = result;\n        return acc;\n      }, {} as Record<string, any>);\n    },\n    enabled: !!user && userApplications.length > 0,\n  });\n\n  // Service rating eligibility query\n  const { data: serviceRatingEligibility = {} } = useQuery({\n    queryKey: [\"/api/service-rating-eligibility\", userServices],\n    queryFn: async () => {\n      if (!user || !userServices?.length) return {};\n      \n      const servicesWithAcceptedRequests = userServices.filter((service: any) => \n        service.requests?.some((request: any) => request.status === \"accepted\")\n      );\n      \n      const eligibilityPromises: Promise<any>[] = [];\n      \n      servicesWithAcceptedRequests.forEach((service: any) => {\n        const acceptedRequests = service.requests?.filter((request: any) => request.status === \"accepted\") || [];\n        acceptedRequests.forEach((request: any) => {\n          eligibilityPromises.push(\n            apiRequest(\"GET\", `/api/reviews/can-rate-client-service/${service.id}/${request.userId}`)\n              .then(response => {\n                if (!response.ok) return { serviceId: service.id, requestId: request.id, canRate: false, hasRated: false };\n                return response.json().then(data => ({\n                  serviceId: service.id,\n                  requestId: request.id,\n                  clientId: request.userId,\n                  ...data\n                }));\n              })\n              .catch(() => ({ serviceId: service.id, requestId: request.id, canRate: false, hasRated: false }))\n          );\n        });\n      });\n      \n      const results = await Promise.all(eligibilityPromises);\n      return results.reduce((acc, result) => {\n        const key = `${result.serviceId}-${result.requestId}`;\n        acc[key] = result;\n        return acc;\n      }, {} as Record<string, any>);\n    },\n    enabled: !!user && !!userServices?.length,\n  });\n\n  // Query to check if client has already reviewed freelancers for their jobs\n  const { data: freelancerReviewStatus = {} } = useQuery({\n    queryKey: [\"/api/freelancer-review-status\", userJobs],\n    queryFn: async () => {\n      if (!user || !userJobs.length) return {};\n      \n      const reviewStatusMap: Record<string, boolean> = {};\n      \n      // For each job with accepted applications, check if we've already reviewed the freelancer\n      for (const job of userJobs) {\n        if (job.applications) {\n          for (const application of job.applications) {\n            if (application.status === \"accepted\") {\n              try {\n                const response = await apiRequest(\"GET\", `/api/reviews/job/${job.id}`);\n                if (response.ok) {\n                  const reviews = await response.json();\n                  // Check if there's already a review from this client for this freelancer on this job\n                  const hasReviewed = reviews.some((review: any) => \n                    review.reviewerId === user.id && \n                    review.revieweeId === application.userId &&\n                    review.reviewType === \"client_to_worker\"\n                  );\n                  reviewStatusMap[`${job.id}-${application.userId}`] = hasReviewed;\n                }\n              } catch (error) {\n                // If we can't check, assume not reviewed to allow the action\n                reviewStatusMap[`${job.id}-${application.userId}`] = false;\n              }\n            }\n          }\n        }\n      }\n      \n      return reviewStatusMap;\n    },\n    enabled: !!user && userJobs.length > 0,\n  });\n\n  // Query to check endorsement statuses for job-freelancer combinations\n  const { data: endorsementStatuses = {} } = useQuery({\n    queryKey: [\"/api/endorsement-statuses\", userJobs],\n    queryFn: async () => {\n      if (!user || !userJobs.length) return {};\n      \n      const endorsementStatusMap: Record<string, boolean> = {};\n      \n      // For each job with accepted applications, check if we've already endorsed the freelancer\n      for (const job of userJobs) {\n        if (job.applications) {\n          for (const application of job.applications) {\n            if (application.status === \"accepted\" && application.isCompleted) {\n              try {\n                const response = await apiRequest(\"GET\", `/api/jobs/${job.id}/has-endorsed/${application.userId}`);\n                if (response.ok) {\n                  const endorsementData = await response.json();\n                  endorsementStatusMap[`${job.id}-${application.userId}`] = endorsementData.hasEndorsed;\n                } else {\n                  endorsementStatusMap[`${job.id}-${application.userId}`] = false;\n                }\n              } catch (error) {\n                // If we can't check, assume not endorsed\n                endorsementStatusMap[`${job.id}-${application.userId}`] = false;\n              }\n            }\n          }\n        }\n      }\n      \n      return endorsementStatusMap;\n    },\n    enabled: !!user && userJobs.length > 0,\n  });\n\n  const acceptApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/applications/${applicationId}`, {\n        status: \"accepted\"\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Application accepted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\", \n        description: \"Failed to accept application.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Close job mutation - prevents new applications\n  const closeJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/jobs/${jobId}`, {\n        status: \"in_progress\"\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Job closed to new applications\",\n        description: \"This job will no longer accept new applications\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to close job. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete job mutation - permanently removes job and all related data\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(\"DELETE\", `/api/jobs/${jobId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Job deleted\",\n        description: \"Your job has been permanently deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete job. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark application as completed mutation\n  const markCompletedMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/applications/${applicationId}/complete`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      toast({\n        title: \"Work marked as completed\",\n        description: \"The freelancer has been notified that their work is completed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark work as completed. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Extend job mutation\n  const extendJobMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      const res = await apiRequest(\"POST\", `/api/jobs/${jobId}/extend`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to extend job\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Job Extended\",\n        description: \"Your job has been extended for another 30 days. 2 coins have been deducted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Extension Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const extendServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      const res = await apiRequest(\"POST\", `/api/services/${serviceId}/extend`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to extend service\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Service Extended\",\n        description: \"Your service has been extended for another 30 days. 7 coins have been deducted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Extension Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAcceptApplication = (applicationId: string) => {\n    acceptApplicationMutation.mutate(applicationId);\n  };\n\n  const handleCloseJob = (jobId: string) => {\n    closeJobMutation.mutate(jobId);\n  };\n\n  const handleDeleteJob = (jobId: string) => {\n    deleteJobMutation.mutate(jobId);\n  };\n\n  const handleMarkCompleted = (applicationId: string) => {\n    markCompletedMutation.mutate(applicationId);\n  };\n\n  const handleExtendJob = (jobId: string) => {\n    extendJobMutation.mutate(jobId);\n  };\n\n  const handleEditJob = (job: JobWithApplications) => {\n    setEditingJob(job);\n    setIsEditJobModalOpen(true);\n  };\n\n  const handleCloseEditModal = () => {\n    setIsEditJobModalOpen(false);\n    setEditingJob(null);\n  };\n\n  const handleOpenReviewModal = (jobId: string, revieweeId: string, revieweeName: string, reviewType: \"client_to_worker\" | \"worker_to_client\", jobTitle?: string) => {\n    setReviewData({ jobId, revieweeId, revieweeName, reviewType, jobTitle });\n    setReviewModalOpen(true);\n  };\n\n  const handleCloseReviewModal = () => {\n    setReviewModalOpen(false);\n    setReviewData(null);\n  };\n\n  const handleOpenSkillEndorsementModal = (jobId: string, endorseeId: string, endorseeName: string, jobTitle: string) => {\n    setSkillEndorsementData({ jobId, endorseeId, endorseeName, jobTitle });\n    setSkillEndorsementModalOpen(true);\n  };\n\n  const handleCloseSkillEndorsementModal = () => {\n    setSkillEndorsementModalOpen(false);\n    setSkillEndorsementData(null);\n  };\n\n  const handleViewApplication = (application: ApplicationWithUser) => {\n    setSelectedApplication(application);\n    setViewApplicationModalOpen(true);\n  };\n\n  const handleCloseApplicationModal = () => {\n    setViewApplicationModalOpen(false);\n    setSelectedApplication(null);\n  };\n\n  // Create conversation mutation\n  const createConversationMutation = useMutation({\n    mutationFn: async ({ jobId, applicationId, applicantId }: { jobId: string; applicationId: string; applicantId: string }) => {\n      if (!user?.id) {\n        throw new Error(\"User not authenticated\");\n      }\n      const response = await apiRequest(\"POST\", \"/api/conversations\", {\n        jobId,\n        applicationId,\n        jobPosterId: user.id,\n        applicantId\n      });\n      return response.json();\n    },\n    onSuccess: (conversation) => {\n      toast({\n        title: \"Conversation started\",\n        description: \"You can now message with the applicant\",\n      });\n      // Navigate to messages page with the conversation ID\n      window.location.href = `/messages?conversation=${conversation.id}`;\n    },\n    onError: (error) => {\n      console.error(\"Error creating conversation:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to start conversation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartConversation = async (jobId: string, applicationId: string, applicantId: string) => {\n    // Check if conversation already exists\n    try {\n      const response = await apiRequest(\"GET\", `/api/conversations/application/${applicationId}`);\n      const existingConversation = await response.json();\n      if (existingConversation && existingConversation.id) {\n        // Navigate to existing conversation with the conversation ID as URL parameter\n        window.location.href = `/messages?conversation=${existingConversation.id}`;\n        return;\n      }\n    } catch (error) {\n      // Error means no conversation exists - this is expected for 404\n\n    }\n    \n    // Create new conversation (either no existing one found, or error occurred)\n    createConversationMutation.mutate({ jobId, applicationId, applicantId });\n  };\n\n  // Service delete mutation\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (serviceId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/services/${serviceId}`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to delete service\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      toast({\n        title: \"Service deleted\",\n        description: \"Your service has been successfully deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Service edit handlers\n  const handleEditService = (service: ServiceWithRequests) => {\n    setEditingService(service);\n    setIsEditServiceModalOpen(true);\n  };\n\n  const handleCloseEditServiceModal = () => {\n    setIsEditServiceModalOpen(false);\n    setEditingService(null);\n  };\n\n  const handleDeleteService = (serviceId: string, serviceTitle: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${serviceTitle}\"? This action cannot be undone.`)) {\n      deleteServiceMutation.mutate(serviceId);\n    }\n  };\n\n  // Service request handlers\n  const handleViewServiceRequest = (request: any) => {\n    setSelectedServiceRequest(request);\n    setViewServiceRequestModalOpen(true);\n  };\n\n  const handleStartServiceConversation = async (request: any) => {\n    try {\n      // Create or get existing service conversation\n      const conversationResponse = await apiRequest(\"POST\", \"/api/service-conversations\", {\n        serviceRequestId: request.id\n      });\n\n      if (!conversationResponse.ok) {\n        const error = await conversationResponse.json();\n        throw new Error(error.message || \"Failed to create conversation\");\n      }\n\n      const conversationData = await conversationResponse.json();\n\n      toast({\n        title: \"Success\",\n        description: \"Conversation started! Redirecting to messages...\",\n      });\n\n      // Navigate to messages with the conversation ID\n      window.location.href = `/messages?conversation=${conversationData.id}`;\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCloseServiceRequestModal = () => {\n    setViewServiceRequestModalOpen(false);\n    setSelectedServiceRequest(null);\n  };\n\n  // Accept/Start service request mutation\n  const acceptServiceRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/service-requests/${requestId}/accept`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to accept service request\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Service Request Accepted\",\n        description: \"You have successfully accepted the service request. The client has been notified.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const dismissServiceRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/service-requests/${requestId}/dismiss`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to dismiss service request\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      toast({\n        title: \"Request Dismissed\",\n        description: \"The service request has been dismissed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete service request mutation\n  const completeServiceRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/service-requests/${requestId}/complete`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to complete service\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      // Invalidate all relevant queries to update the UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/service-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews/can-rate-client-service\"] });\n      toast({\n        title: \"Service Completed\",\n        description: \"The service has been marked as complete. The client will be notified and can now review your work.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartServiceJob = (requestId: string) => {\n    acceptServiceRequestMutation.mutate(requestId);\n  };\n\n  const handleDismissServiceRequest = (requestId: string) => {\n    dismissServiceRequestMutation.mutate(requestId);\n  };\n\n  const handleCompleteServiceRequest = (requestId: string) => {\n    completeServiceRequestMutation.mutate(requestId);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Dashboard</h1>\n            <p className=\"text-gray-600\">Manage your posted jobs and track applications</p>\n          </div>\n          <div className=\"flex flex-col sm:flex-row gap-2\">\n            <Button \n              onClick={() => {\n                setIsPostJobModalOpen(true);\n              }}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto\"\n              size=\"lg\"\n            >\n              <Plus className=\"h-5 w-5 mr-2\" />\n              Post a Job\n            </Button>\n            <Button \n              onClick={() => {\n                setIsPostServiceModalOpen(true);\n              }}\n              variant=\"outline\"\n              className=\"border-green-600 text-green-600 hover:bg-green-50 w-full sm:w-auto\"\n              size=\"lg\"\n            >\n              <Plus className=\"h-5 w-5 mr-2\" />\n              Post a Service\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Tabs value={currentTab} onValueChange={setCurrentTab} className=\"w-full\">\n        {/* Desktop Tabs */}\n        <TabsList className=\"hidden sm:grid w-full grid-cols-5\">\n          <TabsTrigger value=\"posted\">Active Jobs ({userJobs.filter(job => job.status === \"open\" && job.approvalStatus === \"approved\").length})</TabsTrigger>\n          <TabsTrigger value=\"archived\">Archived Jobs ({userJobs.filter(job => job.status === \"in_progress\" || job.status === \"completed\" || job.status === \"closed\").length})</TabsTrigger>\n          <TabsTrigger value=\"services\">My Services ({userServices.length})</TabsTrigger>\n          <TabsTrigger value=\"applications\">My Applications ({userApplications.length})</TabsTrigger>\n          <TabsTrigger value=\"enquiries\">Service Enquiries ({userServiceRequests.filter((request: any) => request.status !== \"declined\").length})</TabsTrigger>\n        </TabsList>\n\n        {/* Mobile Dropdown */}\n        <div className=\"sm:hidden mb-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"w-full justify-between\">\n                {(() => {\n                  switch (currentTab) {\n                    case \"posted\":\n                      return `Active Jobs (${userJobs.filter(job => job.status === \"open\" && job.approvalStatus === \"approved\").length})`;\n                    case \"archived\":\n                      return `Archived Jobs (${userJobs.filter(job => job.status === \"in_progress\" || job.status === \"completed\").length})`;\n                    case \"services\":\n                      return `My Services (${userServices.length})`;\n                    case \"applications\":\n                      return `My Applications (${userApplications.length})`;\n                    case \"enquiries\":\n                      return `Service Enquiries (${userServiceRequests.filter((request: any) => request.status !== \"declined\").length})`;\n                    default:\n                      return \"Select Tab\";\n                  }\n                })()}\n                <ChevronDown className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-full\">\n              <DropdownMenuItem onClick={() => setCurrentTab(\"posted\")}>\n                Active Jobs ({userJobs.filter(job => job.status === \"open\" && job.approvalStatus === \"approved\").length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"archived\")}>\n                Archived Jobs ({userJobs.filter(job => job.status === \"in_progress\" || job.status === \"completed\").length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"services\")}>\n                My Services ({userServices.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"applications\")}>\n                My Applications ({userApplications.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"enquiries\")}>\n                Service Enquiries ({userServiceRequests.filter((request: any) => request.status !== \"declined\").length})\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* Active Jobs Tab */}\n        <TabsContent value=\"posted\" className=\"space-y-6\">\n          {jobsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userJobs.filter(job => (job.status === \"open\" && job.approvalStatus === \"approved\") || job.approvalStatus === \"pending\").length > 0 ? (\n            userJobs.filter(job => (job.status === \"open\" && job.approvalStatus === \"approved\") || job.approvalStatus === \"pending\").map((job: JobWithApplications) => (\n              <div key={job.id} className=\"space-y-4\">\n                <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between mb-4 gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{job.title}</h3>\n                        <div className=\"flex gap-2\">\n                          {job.approvalStatus === \"pending\" && (\n                            <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n                              ⏳ Pending Review\n                            </Badge>\n                          )}\n                          {job.approvalStatus === \"approved\" && (\n                            <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                              ✅ Published\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {job.approvalStatus === \"pending\" && (\n                        <div className=\"mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                          <p className=\"text-sm text-yellow-800\">\n                            <strong>Your job is under review.</strong> Our team is reviewing your posting and most jobs are approved within 30 minutes. \n                            We're working tirelessly to get your job live as soon as possible!\n                          </p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 gap-2 sm:gap-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Posted {formatTimeAgo(job.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{job.location}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>{formatBudgetText(job)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          <span>Expires {job.expiresAt ? format(new Date(job.expiresAt), 'MMM d, yyyy') : 'No expiry'}</span>\n                        </div>\n                      </div>\n                      \n\n                    </div>\n                    <div className=\"flex flex-col sm:flex-row gap-2 sm:items-center\">\n                      <Badge className={`${getStatusColor(job.status)} border-0 whitespace-nowrap w-fit`}>\n                        {job.applicationCount} Applications\n                      </Badge>\n                      {job.status === \"open\" && (\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditJob(job)}\n                            className=\"flex-1 sm:flex-none\"\n                          >\n                            <Edit className=\"h-4 w-4 mr-1\" />\n                            <span className=\"hidden sm:inline\">Edit</span>\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(\"Are you sure you want to delete this job? This action cannot be undone and will remove all applications and related data.\")) {\n                                handleDeleteJob(job.id);\n                              }\n                            }}\n                            disabled={deleteJobMutation.isPending}\n                            className=\"flex-1 sm:flex-none\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            <span className=\"hidden sm:inline\">{deleteJobMutation.isPending ? \"Deleting...\" : \"Delete\"}</span>\n                            <span className=\"sm:hidden\">Delete</span>\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Job expiry warning inside the card */}\n                  {job.expiresAt && job.status === \"open\" && (\n                    <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Calendar className=\"h-5 w-5 text-blue-600\" />\n                          <span className=\"text-blue-800 font-medium\">\n                            Job expires on {format(new Date(job.expiresAt), 'MMMM d, yyyy')}\n                          </span>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-blue-300 text-blue-700 hover:bg-blue-100 w-full sm:w-auto font-medium\"\n                          onClick={() => extendJobMutation.mutate(job.id)}\n                          disabled={extendJobMutation.isPending}\n                        >\n                          {extendJobMutation.isPending ? \"Extending...\" : \"Extend 30 Days (2 coins)\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Combined Application Rankings & List */}\n                  {job.applications && job.applications.length > 0 && (\n                    <div className=\"border-t border-gray-100 pt-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n                          <Trophy className=\"h-4 w-4\" />\n                          Application Rankings\n                          <Badge variant=\"secondary\" className=\"ml-2\">\n                            {job.applications.length} applicant{job.applications.length !== 1 ? 's' : ''}\n                          </Badge>\n                        </h4>\n                        {job.applications.length > 2 && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => setSelectedJobApplications(\n                              selectedJobApplications === job.id ? null : job.id\n                            )}\n                          >\n                            {selectedJobApplications === job.id ? \"Show Less\" : `View All ${job.applications.length}`}\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        {(selectedJobApplications === job.id ? job.applications : job.applications.slice(0, 2))\n                          .sort((a, b) => (b.coinsBid || 0) - (a.coinsBid || 0))\n                          .map((application: ApplicationWithUser, index) => {\n                            const rank = index + 1;\n                            const getRankIcon = (rank: number) => {\n                              switch (rank) {\n                                case 1:\n                                  return <Trophy className=\"h-4 w-4 text-yellow-500\" />;\n                                case 2:\n                                  return <Medal className=\"h-4 w-4 text-gray-400\" />;\n                                case 3:\n                                  return <Award className=\"h-4 w-4 text-amber-600\" />;\n                                default:\n                                  return <span className=\"text-xs font-medium text-gray-500 w-4 text-center\">#{rank}</span>;\n                              }\n                            };\n                            \n                            const getRankBgColor = (rank: number) => {\n                              switch (rank) {\n                                case 1:\n                                  return \"bg-gradient-to-r from-yellow-50 to-amber-50 border-yellow-200\";\n                                case 2:\n                                  return \"bg-gradient-to-r from-gray-50 to-slate-50 border-gray-200\";\n                                case 3:\n                                  return \"bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200\";\n                                default:\n                                  return \"bg-gray-50 border-gray-200\";\n                              }\n                            };\n                            \n                            return (\n                              <div \n                                key={application.id} \n                                className={`p-3 rounded-lg border cursor-pointer hover:shadow-md transition-all ${getRankBgColor(rank)}`}\n                                onClick={() => handleViewApplication(application)}\n                              >\n                                {/* Mobile-First Layout */}\n                                <div className=\"space-y-3\">\n                                  {/* Top Section - User Info */}\n                                  <div className=\"flex items-center space-x-3\">\n                                    <div className=\"flex items-center justify-center w-8 h-8 shrink-0\">\n                                      {getRankIcon(rank)}\n                                    </div>\n                                    <Avatar className=\"shrink-0\">\n                                      <AvatarFallback>\n                                        {application.user.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                    <div className=\"flex-1 min-w-0\">\n                                      <div className=\"flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-2 mb-1\">\n                                        <p className=\"font-medium text-gray-900 truncate\">{application.user.name}</p>\n                                        {application.coinsBid && application.coinsBid > 0 && (\n                                          <div className=\"flex items-center gap-1 bg-blue-100 text-blue-700 px-2 py-0.5 rounded-full text-xs w-fit\">\n                                            <Coins className=\"h-3 w-3\" />\n                                            <span>{application.coinsBid} coin{application.coinsBid !== 1 ? 's' : ''}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 gap-1 sm:gap-2\">\n                                        <span>Bid: ${application.bidAmount}</span>\n                                        <span className=\"hidden sm:inline\">•</span>\n                                        <span>{formatTimeAgo(application.createdAt)}</span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  {/* Experience Section */}\n                                  {application.experience && (\n                                    <div className=\"bg-gray-50 rounded-lg p-2\">\n                                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                                        {application.experience}\n                                      </p>\n                                    </div>\n                                  )}\n                                  \n                                  {/* Status and Actions Section */}\n                                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\" onClick={(e) => e.stopPropagation()}>\n                                    {/* Status Badges */}\n                                    <div className=\"flex flex-wrap gap-2\">\n                                      {application.status === \"accepted\" && (\n                                        <>\n                                          <Badge className=\"bg-green-100 text-green-800 border-0\">\n                                            Accepted\n                                          </Badge>\n                                          {application.isCompleted && (\n                                            <Badge className=\"bg-blue-100 text-blue-800 border-0\">\n                                              Completed\n                                            </Badge>\n                                          )}\n                                        </>\n                                      )}\n                                      {application.status === \"rejected\" && (\n                                        <Badge className=\"bg-red-100 text-red-800 border-0\">\n                                          Declined\n                                        </Badge>\n                                      )}\n                                      {application.status === \"pending\" && (\n                                        <Badge className=\"bg-yellow-100 text-yellow-800 border-0\">\n                                          Pending\n                                        </Badge>\n                                      )}\n                                    </div>\n                                    \n                                    {/* Action Buttons */}\n                                    <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n                                      {/* Always show View and Message buttons */}\n                                      <Button \n                                        variant=\"outline\" \n                                        size=\"default\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          handleViewApplication(application);\n                                        }}\n                                        className=\"flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                      >\n                                        <Eye className=\"h-5 w-5 sm:h-4 sm:w-4 mr-2 sm:mr-1\" />\n                                        <span>View</span>\n                                      </Button>\n                                      <Button \n                                        variant=\"outline\" \n                                        size=\"default\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          handleStartConversation(job.id, application.id, application.userId);\n                                        }}\n                                        disabled={createConversationMutation.isPending}\n                                        className=\"flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                      >\n                                        <MessageCircle className=\"h-5 w-5 sm:h-4 sm:w-4 mr-2 sm:mr-1\" />\n                                        <span>Message</span>\n                                      </Button>\n                                      \n                                      {/* Pending status button */}\n                                      {application.status === \"pending\" && (\n                                        <Button \n                                          size=\"default\"\n                                          className=\"bg-blue-600 hover:bg-blue-700 flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                          onClick={(e) => {\n                                            e.stopPropagation();\n                                            handleAcceptApplication(application.id);\n                                          }}\n                                          disabled={acceptApplicationMutation.isPending}\n                                        >\n                                          Accept\n                                        </Button>\n                                      )}\n                                      \n                                      {/* Accepted status buttons - aligned horizontally on desktop */}\n                                      {application.status === \"accepted\" && (\n                                        <>\n                                          {!freelancerReviewStatus[`${job.id}-${application.userId}`] && (\n                                            <Button \n                                              variant=\"outline\" \n                                              size=\"default\"\n                                              onClick={(e) => {\n                                                e.stopPropagation();\n                                                if (!application.isCompleted) {\n                                                  handleMarkCompleted(application.id);\n                                                  setTimeout(() => {\n                                                    handleOpenReviewModal(job.id, application.userId, application.user?.name || \"Freelancer\", \"client_to_worker\", job.title);\n                                                  }, 500);\n                                                } else {\n                                                  handleOpenReviewModal(job.id, application.userId, application.user?.name || \"Freelancer\", \"client_to_worker\", job.title);\n                                                }\n                                              }}\n                                              disabled={markCompletedMutation.isPending}\n                                              className=\"flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                            >\n                                              <Star className=\"h-5 w-5 sm:h-4 sm:w-4 sm:mr-1\" />\n                                              <span className=\"hidden sm:inline\">{application.isCompleted ? \"Leave Review\" : \"Mark Complete & Review\"}</span>\n                                              <span className=\"sm:hidden\">{application.isCompleted ? \"Review\" : \"Complete\"}</span>\n                                            </Button>\n                                          )}\n                                          {freelancerReviewStatus[`${job.id}-${application.userId}`] && (\n                                            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal flex items-center justify-center\">\n                                              <Star className=\"h-5 w-5 sm:h-4 sm:w-4 sm:mr-1\" />\n                                              <span className=\"hidden sm:inline\">Review Submitted</span>\n                                              <span className=\"sm:hidden\">Reviewed</span>\n                                            </Badge>\n                                          )}\n                                          {application.isCompleted && (\n                                            endorsementStatuses[`${job.id}-${application.userId}`] ? (\n                                              <Button \n                                                variant=\"outline\" \n                                                size=\"default\"\n                                                disabled\n                                                className=\"bg-gray-50 text-gray-500 border-gray-200 cursor-not-allowed flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                              >\n                                                <Award className=\"h-5 w-5 sm:h-4 sm:w-4 sm:mr-1\" />\n                                                <span className=\"hidden sm:inline\">Already Endorsed</span>\n                                                <span className=\"sm:hidden\">Endorsed</span>\n                                              </Button>\n                                            ) : (\n                                              <Button \n                                                variant=\"outline\" \n                                                size=\"default\"\n                                                onClick={(e) => {\n                                                  e.stopPropagation();\n                                                  handleOpenSkillEndorsementModal(job.id, application.userId, application.user?.name || \"Freelancer\", job.title);\n                                                }}\n                                                className=\"bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 flex-1 sm:flex-none h-12 sm:h-9 text-base sm:text-sm font-medium sm:font-normal\"\n                                              >\n                                                <Award className=\"h-5 w-5 sm:h-4 sm:w-4 sm:mr-1\" />\n                                                <span className=\"hidden sm:inline\">Endorse Skills</span>\n                                                <span className=\"sm:hidden\">Endorse</span>\n                                              </Button>\n                                            )\n                                          )}\n                                        </>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                      </div>\n                      \n                      {/* Close job button when accepted applications exist and job is still open */}\n                      {job.status === \"open\" && job.applications?.some(app => app.status === \"accepted\") && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                            <div className=\"text-sm text-gray-600\">\n                              You have accepted an application. Close this job to prevent new applications.\n                            </div>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleCloseJob(job.id)}\n                              disabled={closeJobMutation.isPending}\n                              className=\"bg-orange-50 text-orange-700 border-orange-200 hover:bg-orange-100 w-full sm:w-auto\"\n                            >\n                              <X className=\"h-4 w-4 mr-1\" />\n                              Archive Job\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Rate freelancer button for completed jobs */}\n                      {job.status === \"completed\" && (() => {\n                        const acceptedApp = job.applications?.find(app => app.status === \"accepted\");\n                        const hasReviewed = acceptedApp ? freelancerReviewStatus[`${job.id}-${acceptedApp.userId}`] : false;\n                        \n                        return !hasReviewed && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (acceptedApp) {\n                                    handleOpenReviewModal(job.id, acceptedApp.userId, acceptedApp.user?.name || \"Freelancer\", \"client_to_worker\", job.title);\n                                  }\n                                }}\n                              >\n                                <Star className=\"h-4 w-4 mr-1\" />\n                                Rate Freelancer\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (acceptedApp) {\n                                    handleOpenSkillEndorsementModal(job.id, acceptedApp.userId, acceptedApp.user?.name || \"Freelancer\", job.title);\n                                  }\n                                }}\n                                className=\"bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100\"\n                              >\n                                <Award className=\"h-4 w-4 mr-1\" />\n                                Endorse Skills\n                              </Button>\n                            </div>\n                          </div>\n                        );\n                      })()}\n                    </div>\n                  )}\n\n                  {job.applicationCount === 0 && (\n                    <div className=\"border-t border-gray-100 pt-4\">\n                      <p className=\"text-gray-500 text-center py-4\">No applications yet</p>\n                    </div>\n                  )}\n                </CardContent>\n                </Card>\n              </div>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No active jobs</h3>\n                <p className=\"text-gray-600\">Start by posting your first job to get help with tasks.</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Archived Jobs Tab */}\n        <TabsContent value=\"archived\" className=\"space-y-6\">\n          {jobsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userJobs.filter(job => job.status === \"in_progress\" || job.status === \"completed\" || job.status === \"closed\").length > 0 ? (\n            userJobs.filter(job => job.status === \"in_progress\" || job.status === \"completed\" || job.status === \"closed\").map((job: JobWithApplications) => (\n              <Card key={job.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between mb-4 gap-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{job.title}</h3>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 gap-2 sm:gap-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Posted {formatTimeAgo(job.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{job.location}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>{formatBudgetText(job)}</span>\n                        </div>\n                        {/* Only show expiry information to job owners */}\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          <span>{job.expiresAt ? `Expired ${format(new Date(job.expiresAt), 'MMM d, yyyy')}` : 'No expiry'}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <Badge className={`${getStatusColor(job.status)} border-0 w-fit`}>\n                      {job.status === \"in_progress\" ? \"Closed\" : \"Completed\"}\n                    </Badge>\n                  </div>\n\n                  <p className=\"text-gray-600 text-sm mb-4\">{job.description}</p>\n\n                  {/* Applications List for Archived Jobs */}\n                  {job.applications && job.applications.length > 0 && (\n                    <div className=\"border-t border-gray-100 pt-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-3\">Applications</h4>\n                      \n                      <div className=\"space-y-3\">\n                        {job.applications.map((application: ApplicationWithUser) => (\n                          <div \n                            key={application.id} \n                            className=\"p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors\"\n                            onClick={() => handleViewApplication(application)}\n                          >\n                            {/* User Info Section */}\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <Avatar>\n                                <AvatarFallback>\n                                  {application.user.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"flex-1 min-w-0\">\n                                <p className=\"font-medium text-gray-900\">{application.user.name}</p>\n                                <div className=\"flex items-center text-sm text-gray-600 space-x-2\">\n                                  <span>Bid: ${application.bidAmount}</span>\n                                  <span>•</span>\n                                  <span>{formatTimeAgo(application.createdAt)}</span>\n                                </div>\n                              </div>\n                            </div>\n                            \n                            {/* Status and Actions */}\n                            <div className=\"flex flex-wrap items-center justify-between gap-2\" onClick={(e) => e.stopPropagation()}>\n                              <div>\n                                {application.status === \"accepted\" ? (\n                                  <Badge className=\"bg-green-100 text-green-800 border-0\">\n                                    Accepted\n                                  </Badge>\n                                ) : (\n                                  <Badge variant=\"secondary\">\n                                    {application.status}\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              <div className=\"flex flex-col sm:flex-row gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewApplication(application);\n                                  }}\n                                  className=\"w-full sm:w-auto\"\n                                >\n                                  <Eye className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">View</span>\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleStartConversation(job.id, application.id, application.userId);\n                                  }}\n                                  disabled={createConversationMutation.isPending}\n                                  className=\"w-full sm:w-auto\"\n                                >\n                                  <MessageCircle className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">Message</span>\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {/* Rate freelancer button for completed jobs */}\n                      {job.status === \"completed\" && (() => {\n                        const acceptedApp = job.applications?.find(app => app.status === \"accepted\");\n                        const hasReviewed = acceptedApp ? freelancerReviewStatus[`${job.id}-${acceptedApp.userId}`] : false;\n                        \n                        return !hasReviewed && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                            <div className=\"flex flex-col sm:flex-row gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (acceptedApp) {\n                                    handleOpenReviewModal(job.id, acceptedApp.userId, acceptedApp.user?.name || \"Freelancer\", \"client_to_worker\", job.title);\n                                  }\n                                }}\n                                className=\"w-full sm:w-auto\"\n                              >\n                                <Star className=\"h-4 w-4 mr-1\" />\n                                Rate Freelancer\n                              </Button>\n                            </div>\n                          </div>\n                        );\n                      })()}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No archived jobs</h3>\n                <p className=\"text-gray-600\">Closed and completed jobs will appear here.</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* My Services Tab */}\n        <TabsContent value=\"services\" className=\"space-y-6\">\n          {servicesLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userServices.length > 0 ? (\n            userServices.map((service: ServiceWithRequests) => (\n              <Card key={service.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  {/* Service Header */}\n                  <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between mb-4 gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"mb-3\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{service.title}</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Badge \n                            className={`text-xs ${\n                              service.approvalStatus === \"approved\" \n                                ? \"bg-green-100 text-green-800 border-green-200\" \n                                : service.approvalStatus === \"rejected\"\n                                ? \"bg-red-100 text-red-800 border-red-200\"\n                                : \"bg-yellow-100 text-yellow-800 border-yellow-200\"\n                            }`}\n                          >\n                            {service.approvalStatus === \"approved\" ? \"✓ Approved\" : \n                             service.approvalStatus === \"rejected\" ? \"✗ Rejected\" : \n                             \"⏳ Pending Review\"}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {service.category}\n                          </Badge>\n                          {service.tags && service.tags.slice(0, 2).map((tag, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              <span className=\"mr-1\">#</span>\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 gap-2 sm:gap-4 mb-3\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Posted {formatTimeAgo(service.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{service.location}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>\n                            From {getCurrencySymbol(service.currency)}{service.priceFrom}\n                            {service.priceTo && ` - ${getCurrencySymbol(service.currency)}${service.priceTo}`}\n                            {service.priceType === \"hourly\" && \"/hr\"}\n                            {service.priceType === \"per_project\" && \"/project\"}\n                          </span>\n                        </div>\n                      </div>\n\n\n                    </div>\n                    \n                    <div className=\"flex flex-col sm:flex-row gap-2 sm:items-center\">\n                      <Badge className=\"bg-blue-100 text-blue-800 border-0 whitespace-nowrap w-fit\">\n                        {service.requestCount || 0} Requests\n                      </Badge>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex-1 sm:flex-none\"\n                          onClick={() => handleEditService(service)}\n                        >\n                          <Edit className=\"h-4 w-4 mr-1\" />\n                          <span className=\"hidden sm:inline\">Edit</span>\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"flex-1 sm:flex-none\"\n                          onClick={() => handleDeleteService(service.id, service.title)}\n                          disabled={deleteServiceMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-1\" />\n                          <span className=\"hidden sm:inline\">{deleteServiceMutation.isPending ? \"Deleting...\" : \"Delete\"}</span>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Service Description - Full Width */}\n                  <div className=\"mb-4\">\n                    <p className=\"text-gray-600 text-sm line-clamp-3\">{service.description}</p>\n                  </div>\n\n                  {/* Service Expiry Information - Full Width */}\n                  {service.expiresAt && (\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                        <div className=\"flex items-center text-sm text-yellow-800\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          <span>\n                            Expires on {format(new Date(service.expiresAt), \"MMM dd, yyyy\")}\n                            {/* Days until expiry */}\n                            {(() => {\n                              const now = new Date();\n                              const expiry = new Date(service.expiresAt);\n                              const daysLeft = Math.ceil((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n                              \n                              if (daysLeft <= 0) {\n                                return \" (Expired)\";\n                              } else if (daysLeft <= 7) {\n                                return ` (${daysLeft} day${daysLeft !== 1 ? 's' : ''} left)`;\n                              } else {\n                                return ` (${daysLeft} days left)`;\n                              }\n                            })()}\n                          </span>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => extendServiceMutation.mutate(service.id)}\n                          disabled={extendServiceMutation.isPending}\n                          className=\"w-full sm:w-auto\"\n                        >\n                          {extendServiceMutation.isPending ? \"Extending...\" : \"Extend 30 Days (7 coins)\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Service Requests */}\n                  {service.requests && service.requests.filter(request => request.status !== \"declined\").length > 0 && (\n                    <div className=\"border-t border-gray-100 pt-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                        <MessageCircle className=\"h-4 w-4\" />\n                        Recent Requests\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          {service.requests.filter(request => request.status !== \"declined\").length}\n                        </Badge>\n                      </h4>\n                      \n                      <div className=\"space-y-2\">\n                        {service.requests\n                          .filter(request => request.status !== \"declined\")\n                          .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime()) // Sort by newest first\n                          .slice(0, 5) // Show up to 5 recent requests instead of just 2\n                          .map((request, index) => (\n                          <div \n                            key={index} \n                            className=\"p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors\"\n                            onClick={() => handleViewServiceRequest(request)}\n                          >\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarFallback className=\"text-xs\">\n                                  {request.user?.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'U'}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-900\">{request.user?.name || 'Anonymous User'}</p>\n                                <p className=\"text-xs text-gray-600\">{formatTimeAgo(request.createdAt)}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex flex-col sm:flex-row gap-2\">\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewServiceRequest(request);\n                                  }}\n                                  className=\"flex-1 sm:flex-none\"\n                                >\n                                  <Eye className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">View</span>\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleStartServiceConversation(request);\n                                  }}\n                                  className=\"flex-1 sm:flex-none\"\n                                >\n                                  <MessageCircle className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">Message</span>\n                                </Button>\n                              </div>\n                              \n                              {request.status === \"pending\" && (\n                                <div className=\"flex gap-2\">\n                                  <Button \n                                    variant=\"default\" \n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleStartServiceJob(request.id);\n                                    }}\n                                    disabled={acceptServiceRequestMutation.isPending || userCoins.coins < 2}\n                                    className=\"bg-green-600 hover:bg-green-700 text-white flex-1 sm:flex-none\"\n                                  >\n                                    <Check className=\"h-4 w-4 mr-1\" />\n                                    <span className=\"hidden sm:inline\">{acceptServiceRequestMutation.isPending ? \"Starting...\" : \"Start Job\"}</span>\n                                    <span className=\"sm:hidden\">Start</span>\n                                    <span className={`ml-1 text-xs flex items-center ${\n                                      userCoins.coins < 2 \n                                        ? 'text-red-200' \n                                        : 'text-green-200'\n                                    }`}>\n                                      <Coins className={`h-3 w-3 mr-0.5 ${\n                                        userCoins.coins < 2 \n                                          ? 'text-red-300' \n                                          : 'text-yellow-300'\n                                      }`} />\n                                      2\n                                    </span>\n                                  </Button>\n                                  <Button \n                                    variant=\"outline\" \n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleDismissServiceRequest(request.id);\n                                    }}\n                                    disabled={dismissServiceRequestMutation.isPending}\n                                    className=\"text-red-600 border-red-300 hover:bg-red-50 flex-1 sm:flex-none\"\n                                  >\n                                    <X className=\"h-4 w-4 mr-1\" />\n                                    <span className=\"hidden sm:inline\">{dismissServiceRequestMutation.isPending ? \"Dismissing...\" : \"Dismiss\"}</span>\n                                    <span className=\"sm:hidden\">Dismiss</span>\n                                  </Button>\n                                </div>\n                              )}\n                              \n                              {request.status === \"accepted\" && !request.completedAt && (\n                                <Button \n                                  variant=\"default\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleCompleteServiceRequest(request.id);\n                                  }}\n                                  disabled={completeServiceRequestMutation.isPending}\n                                  className=\"bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto\"\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">{completeServiceRequestMutation.isPending ? \"Completing...\" : \"Complete Job\"}</span>\n                                  <span className=\"sm:hidden\">Complete</span>\n                                </Button>\n                              )}\n                              \n                              {request.status === \"accepted\" && request.completedAt && !serviceRatingEligibility[`${service.id}-${request.id}`]?.hasRated && (\n                                <Button \n                                  variant=\"default\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    // Open review modal for the client\n                                    setReviewData({\n                                      jobId: service.id,\n                                      revieweeId: request.userId,\n                                      revieweeName: request.user?.name || \"Client\",\n                                      reviewType: \"worker_to_client\",\n                                      jobTitle: service.title\n                                    });\n                                    setReviewModalOpen(true);\n                                  }}\n                                  className=\"bg-yellow-600 hover:bg-yellow-700 text-white w-full sm:w-auto\"\n                                >\n                                  <Star className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">Rate Client</span>\n                                  <span className=\"sm:hidden\">Rate</span>\n                                </Button>\n                              )}\n                              \n                              {request.status === \"accepted\" && request.completedAt && serviceRatingEligibility[`${service.id}-${request.id}`]?.hasRated && (\n                                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 w-fit\">\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">Completed & Rated</span>\n                                  <span className=\"sm:hidden\">Done</span>\n                                </Badge>\n                              )}\n                              \n                              {request.status === \"accepted\" && request.completedAt && !serviceRatingEligibility[`${service.id}-${request.id}`]?.hasRated && (\n                                <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 w-fit\">\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  <span className=\"hidden sm:inline\">Job Completed</span>\n                                  <span className=\"sm:hidden\">Complete</span>\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {service.requestCount === 0 && (\n                    <div className=\"border-t border-gray-100 pt-4\">\n                      <p className=\"text-gray-500 text-center py-4\">No requests yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No services posted</h3>\n                <p className=\"text-gray-600 mb-6\">Start offering your skills by posting your first service.</p>\n                <Button \n                  onClick={() => setIsPostServiceModalOpen(true)}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Post Your First Service\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* My Applications Tab */}\n        <TabsContent value=\"applications\" className=\"space-y-6\">\n          {applicationsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userApplications.length > 0 ? (\n            userApplications.map((application: ApplicationWithJob) => (\n              <Card key={application.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"mb-4\">\n                    <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{application.job.title}</h3>\n                        <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 mt-1 gap-2 sm:gap-4\">\n                          <div className=\"flex items-center\">\n                            <Clock className=\"h-4 w-4 mr-1\" />\n                            <span>Applied {formatTimeAgo(application.createdAt)}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <MapPin className=\"h-4 w-4 mr-1\" />\n                            <span>{application.job.location}</span>\n                          </div>\n                          <div className=\"flex items-center\">\n                            <DollarSign className=\"h-4 w-4 mr-1\" />\n                            <span>My bid: ${application.bidAmount}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <Badge className={`${getStatusColor(application.status)} border-0 w-fit`}>\n                        {application.status.charAt(0).toUpperCase() + application.status.slice(1)}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <p className=\"text-sm text-gray-700 font-medium mb-2\">Your Message:</p>\n                    <p className=\"text-sm text-gray-600\">{application.message}</p>\n                    {application.experience && (\n                      <>\n                        <p className=\"text-sm text-gray-700 font-medium mt-3 mb-2\">Experience:</p>\n                        <p className=\"text-sm text-gray-600\">{application.experience}</p>\n                      </>\n                    )}\n                  </div>\n\n                  {/* Bid Management Section */}\n                  <div className=\"mt-4\">\n                    <BidManagement application={application} />\n                  </div>\n                  \n                  {/* Rate client button for freelancers who received reviews */}\n                  {application.status === \"accepted\" && clientRatingEligibility[application.id] && (\n                    <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n                        <div className=\"text-sm text-gray-600\">\n                          {clientRatingEligibility[application.id]?.canRate && !clientRatingEligibility[application.id]?.hasRated && \n                            \"You received a review from this client. Rate them back!\"}\n                          {clientRatingEligibility[application.id]?.hasRated && \n                            \"You have rated this client\"}\n                          {!clientRatingEligibility[application.id]?.canRate && \n                            \"Complete the work to receive a review and rate the client\"}\n                        </div>\n                        {clientRatingEligibility[application.id]?.canRate && !clientRatingEligibility[application.id]?.hasRated && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              handleOpenReviewModal(\n                                clientRatingEligibility[application.id].jobId, \n                                clientRatingEligibility[application.id].clientId, \n                                clientRatingEligibility[application.id].clientName, \n                                \"worker_to_client\"\n                              );\n                            }}\n                            className=\"text-yellow-600 border-yellow-600 hover:bg-yellow-50 w-full sm:w-auto\"\n                          >\n                            <Star className=\"h-4 w-4 mr-1\" />\n                            Rate Client\n                          </Button>\n                        )}\n                        {clientRatingEligibility[application.id]?.hasRated && (\n                          <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n                            Client Rated\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No applications submitted</h3>\n                <p className=\"text-gray-600\">Browse jobs and start applying to earn money.</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Service Enquiries Tab */}\n        <TabsContent value=\"enquiries\" className=\"space-y-6\">\n          {serviceRequestsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userServiceRequests.filter((request: any) => request.status !== \"declined\").length > 0 ? (\n            userServiceRequests.filter((request: any) => request.status !== \"declined\").map((request: any) => (\n              <Card key={request.id}>\n                <CardContent className=\"p-4 sm:p-6\">\n                  <div className=\"space-y-4\">\n                    {/* Header Section */}\n                    <div className=\"space-y-3\">\n                      <div className=\"flex flex-col gap-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 break-words\">{request.service?.title}</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {request.status === \"pending\" && (\n                            <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200 text-xs\">\n                              ⏳ Pending Response\n                            </Badge>\n                          )}\n                          {request.status === \"accepted\" && (\n                            <Badge className=\"bg-green-100 text-green-800 border-green-200 text-xs\">\n                              ✅ Job Started\n                            </Badge>\n                          )}\n                          {request.status === \"declined\" && (\n                            <Badge className=\"bg-red-100 text-red-800 border-red-200 text-xs\">\n                              ❌ Declined\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      {/* Info Grid - Mobile Stack */}\n                      <div className=\"space-y-2 sm:space-y-0 sm:flex sm:items-center sm:gap-4 text-sm text-gray-600\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1 shrink-0\" />\n                          <span className=\"truncate\">Requested {formatTimeAgo(request.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center min-w-0\">\n                          <User className=\"h-4 w-4 mr-1 shrink-0\" />\n                          <span className=\"truncate\">Provider: {request.service?.user?.email || \"Unknown\"}</span>\n                        </div>\n                        <div className=\"flex items-center min-w-0\">\n                          <MapPin className=\"h-4 w-4 mr-1 shrink-0\" />\n                          <span className=\"truncate\">{request.service?.location}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Message Section */}\n                    <div className=\"space-y-3\">\n                      <p className=\"text-gray-700 text-sm sm:text-base break-words\">{request.message}</p>\n\n                      {request.status === \"accepted\" && (\n                        <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                          <p className=\"text-sm text-green-800\">\n                            <strong>Great news!</strong> The service provider has started your job. You can now message them to coordinate the work.\n                          </p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex flex-col gap-2 sm:flex-row sm:gap-3 pt-2\">\n                      {request.status === \"accepted\" && (\n                        <>\n                          <Button\n                            onClick={() => {\n                              // Navigate to service details page \n                              setLocation(`/service/${request.service?.id}`);\n                            }}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"w-full sm:w-auto\"\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            <span className=\"sm:hidden\">Details</span>\n                            <span className=\"hidden sm:inline\">View Service Details</span>\n                          </Button>\n                          \n                          <RateProviderButton\n                            serviceId={request.service?.id || \"\"}\n                            serviceProviderId={request.service?.userId || \"\"}\n                            serviceName={request.service?.title || \"Service\"}\n                            providerName={request.service?.user?.email || \"Service Provider\"}\n                            onRate={(serviceId, providerId, providerName, serviceName) => {\n                              setReviewData({\n                                jobId: serviceId,\n                                revieweeId: providerId,\n                                revieweeName: providerName,\n                                reviewType: \"client_to_worker\",\n                                jobTitle: serviceName\n                              });\n                              setReviewModalOpen(true);\n                            }}\n                          />\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No service enquiries yet</h3>\n                <p className=\"text-gray-600 mb-4\">Browse our services marketplace and send enquiries to get started.</p>\n                <Button \n                  onClick={() => setLocation(\"/services\")}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  Browse Services\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Post Job Modal */}\n      <PostJobModal\n        isOpen={isPostJobModalOpen}\n        onClose={() => setIsPostJobModalOpen(false)}\n      />\n\n      {/* Edit Job Modal */}\n      <PostJobModal \n        isOpen={isEditJobModalOpen} \n        onClose={handleCloseEditModal}\n        editingJob={editingJob}\n        isEditing={true}\n      />\n\n      {/* Post Service Modal */}\n      <PostServiceModal\n        isOpen={isPostServiceModalOpen}\n        onClose={() => setIsPostServiceModalOpen(false)}\n      />\n\n      {/* Edit Service Modal */}\n      <PostServiceModal\n        isOpen={isEditServiceModalOpen}\n        onClose={handleCloseEditServiceModal}\n        editingService={editingService}\n        isEditing={true}\n      />\n\n      {/* Review Modal */}\n      {reviewData && (\n        <ReviewModal\n          isOpen={reviewModalOpen}\n          onClose={handleCloseReviewModal}\n          jobId={reviewData.jobId}\n          revieweeId={reviewData.revieweeId}\n          revieweeName={reviewData.revieweeName}\n          reviewType={reviewData.reviewType}\n          jobTitle={reviewData.jobTitle}\n        />\n      )}\n\n      {/* Application View Modal */}\n      <Dialog open={viewApplicationModalOpen} onOpenChange={setViewApplicationModalOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <User className=\"h-5 w-5\" />\n              <span>Application Details</span>\n            </DialogTitle>\n            <DialogDescription>\n              View complete application information and take action.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedApplication && (\n            <div className=\"space-y-4 sm:space-y-6\">\n              {/* Applicant Information */}\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4\">\n                {/* Mobile-first layout */}\n                <div className=\"space-y-3 sm:space-y-4\">\n                  {/* User Info */}\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-10 w-10 sm:h-12 sm:w-12\">\n                      <AvatarFallback className=\"text-sm sm:text-lg font-semibold\">\n                        {selectedApplication.user.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-base sm:text-lg font-semibold text-gray-900 truncate\">{selectedApplication.user.name}</h3>\n                      <p className=\"text-xs sm:text-sm text-gray-600\">@{selectedApplication.user.username}</p>\n                    </div>\n                    <Link href={`/profile/${selectedApplication.userId}`}>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"shrink-0\"\n                      >\n                        <User className=\"h-4 w-4 sm:mr-2\" />\n                        <span className=\"hidden sm:inline\">See Profile</span>\n                      </Button>\n                    </Link>\n                  </div>\n                  \n                  {/* Grid Info - Stack on mobile */}\n                  <div className=\"space-y-3 sm:grid sm:grid-cols-2 sm:gap-4 sm:space-y-0 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Bid Amount:</span>\n                      <p className=\"text-lg font-semibold text-green-600\">${selectedApplication.bidAmount}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Applied:</span>\n                      <p className=\"text-gray-900\">{formatTimeAgo(selectedApplication.createdAt)}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Status:</span>\n                      <Badge className={`${getStatusColor(selectedApplication.status)} border-0 mt-1`}>\n                        {selectedApplication.status.charAt(0).toUpperCase() + selectedApplication.status.slice(1)}\n                      </Badge>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Email:</span>\n                      <p className=\"text-gray-900 break-all\">{selectedApplication.user.email}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Application Message */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2 sm:mb-3\">Application Message</h4>\n                <div className=\"bg-white border border-gray-200 rounded-lg p-3 sm:p-4\">\n                  <p className=\"text-gray-700 whitespace-pre-wrap text-sm sm:text-base\">{selectedApplication.message}</p>\n                </div>\n              </div>\n\n              {/* Experience Section */}\n              {selectedApplication.experience && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2 sm:mb-3\">Experience & Qualifications</h4>\n                  <div className=\"bg-white border border-gray-200 rounded-lg p-3 sm:p-4\">\n                    <p className=\"text-gray-700 whitespace-pre-wrap text-sm sm:text-base\">{selectedApplication.experience}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons - Stack on mobile */}\n              <div className=\"flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-200\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => handleStartConversation(\n                    selectedApplication.jobId, \n                    selectedApplication.id, \n                    selectedApplication.userId\n                  )}\n                  disabled={createConversationMutation.isPending}\n                  className=\"w-full sm:flex-1\"\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Message Applicant\n                </Button>\n                \n                {selectedApplication.status === \"accepted\" && (\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      if (!selectedApplication.isCompleted) {\n                        // Mark as completed first, then open review modal\n                        handleMarkCompleted(selectedApplication.id);\n                        // Small delay to ensure completion is processed\n                        setTimeout(() => {\n                          handleOpenReviewModal(selectedApplication.jobId, selectedApplication.userId, selectedApplication.user?.name || \"Freelancer\", \"client_to_worker\", \"Job\");\n                        }, 500);\n                      } else {\n                        // If already completed, just open review modal\n                        handleOpenReviewModal(selectedApplication.jobId, selectedApplication.userId, selectedApplication.user?.name || \"Freelancer\", \"client_to_worker\", \"Job\");\n                      }\n                      handleCloseApplicationModal();\n                    }}\n                    disabled={markCompletedMutation.isPending}\n                    className=\"w-full sm:flex-1 bg-yellow-50 text-yellow-700 border-yellow-200 hover:bg-yellow-100\"\n                  >\n                    <Star className=\"h-4 w-4 mr-2\" />\n                    <span className=\"sm:hidden\">{selectedApplication.isCompleted ? \"Review\" : \"Complete\"}</span>\n                    <span className=\"hidden sm:inline\">{selectedApplication.isCompleted ? \"Rate Freelancer\" : \"Complete & Rate\"}</span>\n                  </Button>\n                )}\n                \n                {selectedApplication.status === \"pending\" && (\n                  <Button \n                    onClick={() => {\n                      handleAcceptApplication(selectedApplication.id);\n                      handleCloseApplicationModal();\n                    }}\n                    disabled={acceptApplicationMutation.isPending}\n                    className=\"w-full sm:flex-1 bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Accept Application\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <SkillEndorsementModal\n        isOpen={skillEndorsementModalOpen}\n        onClose={handleCloseSkillEndorsementModal}\n        endorseeId={skillEndorsementData?.endorseeId || \"\"}\n        endorseeName={skillEndorsementData?.endorseeName || \"\"}\n        jobId={skillEndorsementData?.jobId || \"\"}\n        jobTitle={skillEndorsementData?.jobTitle || \"\"}\n      />\n\n      {/* Service Request View Modal */}\n      <Dialog open={viewServiceRequestModalOpen} onOpenChange={setViewServiceRequestModalOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"h-5 w-5\" />\n              <span>Service Request Details</span>\n            </DialogTitle>\n            <DialogDescription>\n              View complete service request information and take action.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedServiceRequest && (\n            <div className=\"space-y-4 sm:space-y-6\">\n              {/* Client Information */}\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4\">\n                <div className=\"space-y-3 sm:space-y-4\">\n                  {/* User Info */}\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-10 w-10 sm:h-12 sm:w-12\">\n                      <AvatarFallback className=\"text-sm sm:text-lg font-semibold\">\n                        {selectedServiceRequest.user?.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-base sm:text-lg font-semibold text-gray-900 truncate\">{selectedServiceRequest.user?.name || 'Anonymous User'}</h3>\n                      <p className=\"text-xs sm:text-sm text-gray-600\">@{selectedServiceRequest.user?.username || 'anonymous'}</p>\n                    </div>\n                    <Link href={`/profile/${selectedServiceRequest.userId}`}>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        className=\"shrink-0\"\n                      >\n                        <User className=\"h-4 w-4 sm:mr-2\" />\n                        <span className=\"hidden sm:inline\">See Profile</span>\n                      </Button>\n                    </Link>\n                  </div>\n                  \n                  {/* Grid Info - Stack on mobile */}\n                  <div className=\"space-y-3 sm:grid sm:grid-cols-2 sm:gap-4 sm:space-y-0 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Requested:</span>\n                      <p className=\"text-gray-900\">{formatTimeAgo(selectedServiceRequest.createdAt)}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-gray-700\">Timeline:</span>\n                      <p className=\"text-gray-900\">{selectedServiceRequest.timeline || 'Not specified'}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Service Request Message */}\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2 sm:mb-3\">Request Message</h4>\n                <div className=\"bg-white border border-gray-200 rounded-lg p-3 sm:p-4\">\n                  <p className=\"text-gray-700 whitespace-pre-wrap text-sm sm:text-base\">{selectedServiceRequest.message || 'No message provided.'}</p>\n                </div>\n              </div>\n\n              {/* Additional Requirements */}\n              {selectedServiceRequest.requirements && (\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2 sm:mb-3\">Additional Requirements</h4>\n                  <div className=\"bg-white border border-gray-200 rounded-lg p-3 sm:p-4\">\n                    <p className=\"text-gray-700 whitespace-pre-wrap text-sm sm:text-base\">{selectedServiceRequest.requirements}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-200\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    handleStartServiceConversation(selectedServiceRequest);\n                    handleCloseServiceRequestModal();\n                  }}\n                  className=\"w-full sm:flex-1\"\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Message\n                </Button>\n                \n                {selectedServiceRequest.status === \"pending\" && (\n                  <Button \n                    onClick={() => {\n                      handleStartServiceJob(selectedServiceRequest.id);\n                      handleCloseServiceRequestModal();\n                    }}\n                    disabled={acceptServiceRequestMutation.isPending || userCoins.coins < 2}\n                    className=\"w-full sm:flex-1 bg-green-600 hover:bg-green-700\"\n                  >\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    {acceptServiceRequestMutation.isPending ? \"Starting...\" : \"Start Job\"}\n                    <span className={`ml-2 text-xs flex items-center ${\n                      userCoins.coins < 2 \n                        ? 'text-red-200' \n                        : 'text-green-200'\n                    }`}>\n                      <Coins className={`h-3 w-3 mr-1 ${\n                        userCoins.coins < 2 \n                          ? 'text-red-300' \n                          : 'text-yellow-300'\n                      }`} />\n                      2\n                    </span>\n                  </Button>\n                )}\n\n                {selectedServiceRequest.status === \"accepted\" && (\n                  <Button \n                    onClick={() => {\n                      // Open review modal for the client\n                      setReviewData({\n                        jobId: selectedServiceRequest.serviceId || \"\",\n                        revieweeId: selectedServiceRequest.userId,\n                        revieweeName: selectedServiceRequest.user?.name || \"Client\",\n                        reviewType: \"worker_to_client\",\n                        jobTitle: `Service Request`\n                      });\n                      setReviewModalOpen(true);\n                      handleCloseServiceRequestModal();\n                    }}\n                    className=\"w-full sm:flex-1 bg-yellow-600 hover:bg-yellow-700\"\n                  >\n                    <Star className=\"h-4 w-4 mr-2\" />\n                    Complete Job & Rate Client\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={handleCloseServiceRequestModal}\n                  className=\"w-full sm:flex-1\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n    </div>\n  );\n}\n","size_bytes":117471},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Plus, LogIn, Filter, SortAsc, SortDesc, Clock, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport JobCard from \"@/components/job-card\";\nimport PostJobModal from \"@/components/post-job-modal\";\nimport ApplicationModal from \"@/components/application-modal\";\nimport { CitySearch } from \"@/components/city-search\";\nimport { CategorySearch } from \"@/components/category-search\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { JobWithApplications, SearchParams, SearchResult } from \"@shared/schema\";\nimport { jobCategories } from \"@shared/categories\";\n\n// Using comprehensive job categories from shared/categories.ts\nconst categories = jobCategories;\n\nconst budgetRanges = [\n  { label: \"Any Budget\", value: \"any\" },\n  { label: \"Less than $50\", value: \"0-50\", min: 0, max: 50 },\n  { label: \"$50 - $250\", value: \"50-250\", min: 50, max: 250 },\n  { label: \"$250 - $750\", value: \"250-750\", min: 250, max: 750 },\n  { label: \"$750 - $3500\", value: \"750-3500\", min: 750, max: 3500 },\n  { label: \"$3500+\", value: \"3500+\", min: 3500, max: undefined }\n];\n\nconst experienceLevels = [\n  { label: \"Any Experience\", value: \"any\" },\n  { label: \"Entry Level\", value: \"entry\" },\n  { label: \"Intermediate\", value: \"intermediate\" },\n  { label: \"Expert\", value: \"expert\" }\n];\n\n// Custom hook for debounced search\nfunction useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n  \n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    \n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  \n  return debouncedValue;\n}\n\nexport default function Home() {\n  const { isAuthenticated } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"All Locations\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All Categories\");\n  const [selectedBudgetRange, setSelectedBudgetRange] = useState(\"any\");\n  const [selectedExperienceLevel, setSelectedExperienceLevel] = useState(\"any\");\n  const [sortBy, setSortBy] = useState<'relevance' | 'date' | 'budget_low' | 'budget_high'>('relevance');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isPostJobModalOpen, setIsPostJobModalOpen] = useState(false);\n  const [isApplicationModalOpen, setIsApplicationModalOpen] = useState(false);\n  const [selectedJob, setSelectedJob] = useState<JobWithApplications | null>(null);\n\n  // Debounce search term to reduce API calls\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  const budgetRange = budgetRanges.find(range => range.value === selectedBudgetRange);\n\n  // Build search parameters\n  const searchParams: SearchParams = useMemo(() => ({\n    query: debouncedSearchTerm || undefined,\n    category: selectedCategory !== \"All Categories\" ? selectedCategory : undefined,\n    location: selectedCity !== \"All Locations\" ? selectedCity : undefined,\n    experienceLevel: selectedExperienceLevel !== \"any\" ? selectedExperienceLevel : undefined,\n    minBudget: budgetRange?.min,\n    maxBudget: budgetRange?.max,\n    page: currentPage,\n    limit: 20,\n    sortBy,\n    sortOrder\n  }), [debouncedSearchTerm, selectedCategory, selectedCity, selectedExperienceLevel, budgetRange, currentPage, sortBy, sortOrder]);\n\n  // Reset page when search parameters change\n  useEffect(() => {\n    if (currentPage !== 1) {\n      setCurrentPage(1);\n    }\n  }, [debouncedSearchTerm, selectedCategory, selectedCity, selectedExperienceLevel, selectedBudgetRange, sortBy, sortOrder]);\n\n  const { data: searchResult, isLoading, error } = useQuery<SearchResult>({\n    queryKey: [\"/api/search/jobs\", searchParams],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      \n      Object.entries(searchParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString());\n        }\n      });\n      \n      const url = `/api/search/jobs?${params.toString()}`;\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Search failed');\n      return res.json();\n    },\n    enabled: true, // Always enabled for real-time search\n    staleTime: 30000, // Cache results for 30 seconds\n  });\n\n  const jobs = searchResult?.jobs || [];\n  const pagination = searchResult?.pagination;\n  const searchMeta = searchResult?.searchMeta;\n\n  const handleApplyToJob = (job: JobWithApplications) => {\n    setSelectedJob(job);\n    setIsApplicationModalOpen(true);\n  };\n\n  // Sorting handlers\n  const handleSortChange = useCallback((newSortBy: string) => {\n    if (newSortBy === sortBy) {\n      // Toggle sort order if same sort option is selected\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(newSortBy as 'relevance' | 'date' | 'budget_low' | 'budget_high');\n      setSortOrder('desc');\n    }\n  }, [sortBy, sortOrder]);\n\n  // Clear all filters\n  const clearFilters = useCallback(() => {\n    setSearchTerm(\"\");\n    setSelectedCity(\"All Locations\");\n    setSelectedCategory(\"All Categories\");\n    setSelectedBudgetRange(\"any\");\n    setSelectedExperienceLevel(\"any\");\n    setSortBy('relevance');\n    setSortOrder('desc');\n    setCurrentPage(1);\n  }, []);\n\n  // Active filters count\n  const activeFiltersCount = useMemo(() => {\n    let count = 0;\n    if (searchTerm) count++;\n    if (selectedCity !== \"All Locations\") count++;\n    if (selectedCategory !== \"All Categories\") count++;\n    if (selectedBudgetRange !== \"any\") count++;\n    if (selectedExperienceLevel !== \"any\") count++;\n    return count;\n  }, [searchTerm, selectedCity, selectedCategory, selectedBudgetRange, selectedExperienceLevel]);\n\n\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          {isAuthenticated ? \"Find Local Jobs Near You\" : \"Browse Available Jobs\"}\n        </h1>\n        <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-8\">\n          {isAuthenticated \n            ? \"Connect with people in your community who need help with everyday tasks\"\n            : \"Discover opportunities in your area. Sign up to apply for jobs and post your own.\"\n          }\n        </p>\n        {isAuthenticated ? (\n          <Button \n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n\n              setIsPostJobModalOpen(true);\n            }}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n            size=\"lg\"\n          >\n            <Plus className=\"h-5 w-5 mr-2\" />\n            Post a Job\n          </Button>\n        ) : (\n          <Button \n            onClick={() => window.location.href = \"/login\"}\n            className=\"bg-gray-600 hover:bg-gray-700 text-white\"\n            size=\"lg\"\n          >\n            <LogIn className=\"h-5 w-5 mr-2\" />\n            Login to Post Job\n          </Button>\n        )}\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          {/* Full-width search bar */}\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search jobs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-full\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n          </div>\n          \n          {/* Filter dropdowns */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <CitySearch\n                value={selectedCity}\n                onValueChange={setSelectedCity}\n                placeholder=\"All Locations\"\n              />\n            </div>\n            <div>\n              <CategorySearch\n                value={selectedCategory}\n                onValueChange={setSelectedCategory}\n                placeholder=\"All Categories\"\n                includeAllCategories={true}\n              />\n            </div>\n            <div>\n              <Select value={selectedExperienceLevel} onValueChange={setSelectedExperienceLevel}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Any Experience\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {experienceLevels.map((level) => (\n                    <SelectItem key={level.label} value={level.value}>\n                      {level.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={selectedBudgetRange} onValueChange={setSelectedBudgetRange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Any Budget\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {budgetRanges.map((range) => (\n                    <SelectItem key={range.label} value={range.value}>\n                      {range.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Button \n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setSelectedCity(\"All Locations\");\n                  setSelectedCategory(\"All Categories\");\n                  setSelectedBudgetRange(\"any\");\n                  setSelectedExperienceLevel(\"any\");\n                }}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Search Results Header with Performance Metrics */}\n      {searchResult && (\n        <div className=\"mb-4 flex flex-wrap items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-sm text-gray-600\">\n              {searchTerm ? (\n                <>Showing {pagination?.total || 0} result{(pagination?.total || 0) !== 1 ? 's' : ''} for \"{searchTerm}\"</>\n              ) : (\n                <>Found {pagination?.total || 0} job{(pagination?.total || 0) !== 1 ? 's' : ''}</>\n              )}\n            </div>\n            {searchMeta && (\n              <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                <Clock className=\"h-3 w-3\" />\n                {searchMeta.executionTime}ms\n              </div>\n            )}\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Filter className=\"h-3 w-3 mr-1\" />\n                {activeFiltersCount} filter{activeFiltersCount !== 1 ? 's' : ''}\n              </Badge>\n            )}\n          </div>\n\n          {/* Sort Controls */}\n          <div className=\"flex items-center gap-2\">\n            <Select value={sortBy} onValueChange={handleSortChange}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"relevance\">\n                  <div className=\"flex items-center gap-2\">\n                    <Search className=\"h-3 w-3\" />\n                    Relevance\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"date\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-3 w-3\" />\n                    Date\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"budget_low\">\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-3 w-3\" />\n                    Budget (Low)\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"budget_high\">\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-3 w-3\" />\n                    Budget (High)\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleSortChange(sortBy)}\n              className=\"px-2\"\n            >\n              {sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />}\n            </Button>\n            {activeFiltersCount > 0 && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearFilters}\n                className=\"text-xs\"\n              >\n                Clear All\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Job Listings */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-64 w-full\" />\n          ))}\n        </div>\n      ) : error ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold text-red-600 mb-2\">Search Error</h3>\n            <p className=\"text-gray-600 mb-4\">\n              There was a problem searching for jobs. Please try again.\n            </p>\n            <Button onClick={() => window.location.reload()} variant=\"outline\">\n              Reload Page\n            </Button>\n          </CardContent>\n        </Card>\n      ) : jobs.length > 0 ? (\n        <>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {jobs.map((job: JobWithApplications) => (\n              <JobCard\n                key={job.id}\n                job={job}\n                onApply={handleApplyToJob}\n              />\n            ))}\n          </div>\n\n          {/* Pagination */}\n          {pagination && pagination.pages > 1 && (\n            <div className=\"mt-8 flex justify-center items-center gap-4\">\n              <Button\n                variant=\"outline\"\n                disabled={!pagination.hasPrev}\n                onClick={() => setCurrentPage(currentPage - 1)}\n              >\n                Previous\n              </Button>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-gray-600\">\n                  Page {pagination.page} of {pagination.pages}\n                </span>\n              </div>\n              <Button\n                variant=\"outline\"\n                disabled={!pagination.hasNext}\n                onClick={() => setCurrentPage(currentPage + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          )}\n        </>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No jobs found</h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchTerm || selectedCity !== \"All Locations\" || selectedCategory !== \"All Categories\" || selectedBudgetRange !== \"any\" || selectedExperienceLevel !== \"any\"\n                ? \"Try adjusting your search filters\"\n                : \"Be the first to post a job in your area\"}\n            </p>\n            <Button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsPostJobModalOpen(true);\n              }}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              Post a Job\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Modals */}\n      <PostJobModal\n        isOpen={isPostJobModalOpen}\n        onClose={() => setIsPostJobModalOpen(false)}\n      />\n      \n      <ApplicationModal\n        isOpen={isApplicationModalOpen}\n        onClose={() => setIsApplicationModalOpen(false)}\n        job={selectedJob}\n      />\n    </div>\n  );\n}\n","size_bytes":16609},"client/src/pages/job-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MapPin, Clock, Users, Star, ArrowLeft, DollarSign, Calendar, User, ExternalLink, Flag, CheckCircle } from \"lucide-react\";\nimport ApplicationModal from \"@/components/application-modal\";\nimport { ReportJobModal } from \"@/components/report-job-modal\";\nimport { RatingDisplay } from \"@/components/rating-display\";\nimport { TopBiddersSection } from \"@/components/top-bidders-section\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport type { JobWithApplications, UserWithStats, User as UserType } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function JobDetailsPage() {\n  const { jobId } = useParams();\n  const [showApplicationModal, setShowApplicationModal] = useState(false);\n  const [showReportModal, setShowReportModal] = useState(false);\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch job details\n  const { data: job, isLoading } = useQuery<JobWithApplications>({\n    queryKey: [\"/api/jobs\", jobId],\n    enabled: !!jobId,\n  });\n\n  // Fetch job poster details\n  const { data: posterStats } = useQuery<UserWithStats>({\n    queryKey: [\"/api/user/stats\", job?.userId],\n    enabled: !!job?.userId,\n  });\n\n  // Fetch job poster profile\n  const { data: posterProfile } = useQuery<UserType>({\n    queryKey: [\"/api/user/profile\", job?.userId],\n    enabled: !!job?.userId,\n  });\n\n  // Check if user has already reported this job\n  const { data: reportCheck } = useQuery<{ hasReported: boolean }>({\n    queryKey: [\"/api/jobs\", jobId, \"reports\", \"check\"],\n    enabled: !!jobId && !!user?.id && user.id !== job?.userId,\n  });\n\n  // Check if user has already applied to this job\n  const { data: applicationStatus } = useQuery<{ hasApplied: boolean }>({\n    queryKey: [\"/api/jobs\", jobId, \"application-status\"],\n    enabled: !!jobId && !!user?.id && user.id !== job?.userId,\n  });\n\n  // Extend job mutation\n  const extendJobMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/jobs/${jobId}/extend`);\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to extend job\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", jobId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Job Extended\",\n        description: \"Your job has been extended for another 30 days. 2 coins have been deducted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Extension Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate SEO meta tags\n  const generateSeoTitle = (title: string) => {\n    return title.length > 100 ? title.substring(0, 100) : title;\n  };\n\n  const generateSeoDescription = (description: string) => {\n    return description.length > 160 ? description.substring(0, 160) : description;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-4\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!job) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Job Not Found</h2>\n            <p className=\"text-gray-600 mb-4\">This job posting doesn't exist or has been removed.</p>\n            <Link href=\"/\">\n              <Button>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Jobs\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number, currency: string) => {\n    const currencySymbols: { [key: string]: string } = {\n      USD: \"$\", EUR: \"€\", GBP: \"£\", JPY: \"¥\", CAD: \"C$\", AUD: \"A$\"\n    };\n    const symbol = currencySymbols[currency] || currency;\n    return `${amount.toLocaleString()} ${symbol}`;\n  };\n\n  const budgetText = (() => {\n    const isHourly = job.budgetType === \"hourly\";\n    const suffix = isHourly ? \"/hr\" : \"\";\n    \n    if (job.minBudget && job.maxBudget) {\n      return `${formatCurrency(job.minBudget, job.currency || 'USD')} - ${formatCurrency(job.maxBudget, job.currency || 'USD')}${suffix}`;\n    } else if (job.maxBudget) {\n      return `Up to ${formatCurrency(job.maxBudget, job.currency || 'USD')}${suffix}`;\n    } else {\n      return isHourly ? \"Rate negotiable\" : \"Budget negotiable\";\n    }\n  })();\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"bg-green-100 text-green-800\";\n      case \"in_progress\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\":\n        return \"bg-blue-100 text-blue-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getExperienceLevelColor = (level: string) => {\n    switch (level) {\n      case \"beginner\":\n        return \"bg-green-100 text-green-800\";\n      case \"intermediate\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"expert\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{generateSeoTitle(job.title)}</title>\n        <meta name=\"description\" content={generateSeoDescription(job.description)} />\n        <meta property=\"og:title\" content={generateSeoTitle(job.title)} />\n        <meta property=\"og:description\" content={generateSeoDescription(job.description)} />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:url\" content={`${window.location.origin}/job/${jobId}`} />\n        {job.images && job.images[0] && (\n          <meta property=\"og:image\" content={job.images[0]} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={generateSeoTitle(job.title)} />\n        <meta name=\"twitter:description\" content={generateSeoDescription(job.description)} />\n        {job.images && job.images[0] && (\n          <meta name=\"twitter:image\" content={job.images[0]} />\n        )}\n        <link rel=\"canonical\" href={`${window.location.origin}/job/${jobId}`} />\n      </Helmet>\n      \n      <div className=\"container mx-auto p-6 max-w-4xl\">\n        {/* Back Navigation */}\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Jobs\n            </Button>\n          </Link>\n        </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Job Details */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <CardTitle className=\"text-2xl font-bold text-gray-900 mb-2\">\n                    {job.title}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-4 text-gray-600\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-1\" />\n                      <span>{job.location}</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Clock className=\"h-4 w-4 mr-1\" />\n                      <span>Posted {job.createdAt ? format(new Date(job.createdAt), 'MMM d, yyyy') : 'Recently'}</span>\n                    </div>\n                  </div>\n                </div>\n                <Badge className={getStatusColor(job.status)}>\n                  {job.status === \"open\" ? \"Open\" : job.status === \"in_progress\" ? \"Closed\" : \"Completed\"}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n                  <p className=\"text-gray-700 whitespace-pre-wrap leading-relaxed\">\n                    {job.description}\n                  </p>\n                  {(job.specificArea || job.duration) && (\n                    <div className=\"mt-3 pt-3 border-t border-gray-100 space-y-2\">\n                      {job.specificArea && (\n                        <div className=\"flex items-center text-gray-600\">\n                          <MapPin className=\"h-4 w-4 mr-2\" />\n                          <span className=\"font-medium\">Specific Location:</span>\n                          <span className=\"ml-2\">{job.specificArea}</span>\n                        </div>\n                      )}\n                      {job.duration && (\n                        <div className=\"flex items-center text-gray-600\">\n                          <Clock className=\"h-4 w-4 mr-2\" />\n                          <span className=\"font-medium\">Estimated Time:</span>\n                          <span className=\"ml-2\">\n                            {job.duration === \"custom\" ? job.customDuration : job.duration}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Project Images */}\n                {job.images && job.images.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-3\">Project Images</h3>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {job.images.map((image, index) => (\n                        <img\n                          key={index}\n                          src={image}\n                          alt={`Project image ${index + 1}`}\n                          className=\"w-full h-32 object-cover rounded-lg border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\"\n                          onClick={() => window.open(image, '_blank')}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <Separator />\n\n                {/* Job Details Grid */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Budget</h4>\n                    <div className=\"flex items-center text-gray-700\">\n                      <DollarSign className=\"h-4 w-4 mr-1\" />\n                      <span>{budgetText}</span>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Experience Level</h4>\n                    <Badge variant=\"secondary\" className={getExperienceLevelColor(job.experienceLevel || 'any')}>\n                      {job.experienceLevel ? job.experienceLevel.charAt(0).toUpperCase() + job.experienceLevel.slice(1) : 'Any'}\n                    </Badge>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Category</h4>\n                    <Badge variant=\"outline\">\n                      {job.category}\n                    </Badge>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Applicants</h4>\n                    <div className=\"flex items-center text-gray-700\">\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      <span>{job.applicationCount} applications</span>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-1\">Freelancers Needed</h4>\n                    <div className=\"flex items-center text-gray-700\">\n                      <User className=\"h-4 w-4 mr-1\" />\n                      <span>{job.freelancersNeeded || 1} freelancer{(job.freelancersNeeded || 1) > 1 ? 's' : ''}</span>\n                    </div>\n                  </div>\n                  {/* Only show expiry to job owners */}\n                  {user?.id === job.userId && (\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">Expires</h4>\n                      <div className=\"flex items-center text-gray-700\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        <span>{job.expiresAt ? format(new Date(job.expiresAt), 'MMM d, yyyy') : 'No expiry'}</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Bidders Section */}\n          <TopBiddersSection jobId={jobId!} />\n        </div>\n\n        {/* Sidebar - Client Info & Apply */}\n        <div className=\"space-y-6\">\n          {/* Apply Card / Job Management Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {user?.id === job.userId ? \"Manage Job\" : \"Apply for this Job\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">{budgetText}</div>\n                  <div className=\"text-sm text-gray-600\">Project Budget</div>\n                </div>\n                \n                {/* Job Owner Actions */}\n                {user?.id === job.userId ? (\n                  <div className=\"space-y-3\">\n                    {/* Show expiry info for job owners */}\n                    <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"text-sm text-gray-600 mb-1\">Job expires on</div>\n                      <div className=\"font-medium text-gray-900\">\n                        {job.expiresAt ? format(new Date(job.expiresAt), 'MMM d, yyyy') : 'No expiry set'}\n                      </div>\n                    </div>\n                    \n                    {/* Extend button */}\n                    <Button\n                      className=\"w-full bg-blue-600 text-white hover:bg-blue-700 flex items-center justify-center px-6 py-3 text-sm font-medium\"\n                      onClick={() => extendJobMutation.mutate()}\n                      disabled={extendJobMutation.isPending}\n                    >\n                      {extendJobMutation.isPending ? \"Extending...\" : \"Extend for 30 Days (2 coins)\"}\n                    </Button>\n                    \n                    <div className=\"text-xs text-gray-500 text-center\">\n                      Extend your job posting for another 30 days to get more applications\n                    </div>\n                  </div>\n                ) : (\n                  /* Regular user apply actions */\n                  <>\n                    <Button\n                      className={`w-full ${\n                        !user\n                          ? \"bg-gray-500 text-white hover:bg-gray-600\"\n                          : applicationStatus?.hasApplied \n                            ? \"bg-green-600 text-white hover:bg-green-700\" \n                            : \"bg-blue-600 text-white hover:bg-blue-700\"\n                      }`}\n                      onClick={() => {\n                        if (!user) {\n                          window.location.href = '/login';\n                        } else {\n                          setShowApplicationModal(true);\n                        }\n                      }}\n                      disabled={job.status !== \"open\" || (user && (applicationStatus?.hasApplied === true)) || false}\n                    >\n                      {!user ? (\n                        \"Log in to Apply\"\n                      ) : applicationStatus?.hasApplied ? (\n                        <>\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Already Applied\n                        </>\n                      ) : job.status === \"open\" ? (\n                        \"Apply Now\"\n                      ) : (\n                        \"Applications Closed\"\n                      )}\n                    </Button>\n                    \n                    {/* Report Button - Only show if user is authenticated and not the job owner */}\n                    {user && (\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300\"\n                        onClick={() => setShowReportModal(true)}\n                        disabled={reportCheck?.hasReported}\n                      >\n                        <Flag className=\"h-4 w-4 mr-2\" />\n                        {reportCheck?.hasReported ? \"Already Reported\" : \"Report Job\"}\n                      </Button>\n                    )}\n                    \n                    <div className=\"text-xs text-gray-500 text-center\">\n                      {!user \n                        ? \"Please log in to submit an application for this job\"\n                        : applicationStatus?.hasApplied \n                          ? \"You have already submitted an application for this job\"\n                          : job.status === \"open\" \n                            ? \"Submit your proposal to get started\" \n                            : \"This job is no longer accepting applications\"\n                      }\n                    </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Client Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"h-5 w-5 mr-2\" />\n                About the Client\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Profile Picture and Basic Info */}\n                <div className=\"text-center\">\n                  <div className=\"flex justify-center mb-3\">\n                    <Avatar className=\"h-16 w-16\">\n                      <AvatarImage \n                        src={posterProfile?.profileImageUrl || undefined} \n                        alt={posterProfile?.name || 'Client'} \n                      />\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600 text-lg font-semibold\">\n                        {(posterProfile?.name || posterProfile?.username || 'C').charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <span className=\"text-lg font-semibold text-gray-900\">\n                      {posterProfile?.name || 'Anonymous Client'}\n                    </span>\n                    {posterProfile?.isEmailVerified && (\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    )}\n                  </div>\n                  <div className=\"text-sm text-gray-600 mb-3\">\n                    @{posterProfile?.username || 'client'}\n                  </div>\n                  {/* See Profile Button */}\n                  <Link href={`/profile/${job?.userId || posterProfile?.id}`}>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      See Profile\n                    </Button>\n                  </Link>\n                </div>\n\n                {posterStats && (\n                  <>\n                    <Separator />\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Average Rating</span>\n                        <div className=\"flex items-center\">\n                          {posterStats.averageRating > 0 ? (\n                            <RatingDisplay \n                              rating={posterStats.averageRating} \n                              totalReviews={posterStats.totalReviews}\n                              size=\"sm\"\n                            />\n                          ) : (\n                            <span className=\"text-sm text-gray-500\">No ratings yet</span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Total Reviews</span>\n                        <span className=\"text-sm font-medium\">{posterStats.totalReviews}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Jobs Posted</span>\n                        <span className=\"text-sm font-medium\">{posterStats.totalJobsPosted}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Jobs Completed</span>\n                        <span className=\"text-sm font-medium\">{posterStats.completedJobs}</span>\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                <Separator />\n                \n                <div className=\"text-center\">\n                  <div className=\"text-sm text-gray-600\">\n                    Member since {posterStats?.joinedDate ? format(new Date(posterStats.joinedDate), 'MMMM yyyy') : 'Recently'}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Application Modal */}\n      {showApplicationModal && (\n        <ApplicationModal\n          isOpen={showApplicationModal}\n          onClose={() => setShowApplicationModal(false)}\n          job={job}\n        />\n      )}\n\n      {/* Report Modal */}\n      <ReportJobModal\n        isOpen={showReportModal}\n        onClose={() => setShowReportModal(false)}\n        jobId={job.id}\n        jobTitle={job.title}\n      />\n      </div>\n    </>\n  );\n}","size_bytes":23119},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Check for OAuth errors in URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const error = urlParams.get('error');\n    \n    if (error) {\n      let errorMessage = '';\n      switch (error) {\n        case 'google_auth_failed':\n          errorMessage = 'Google authentication failed. Please try again.';\n          break;\n        case 'google_oauth_denied':\n          errorMessage = 'Google authentication was denied. Please try again or contact support.';\n          break;\n        default:\n          errorMessage = 'Authentication failed. Please try again.';\n      }\n      \n      toast({\n        title: \"Authentication Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      \n      // Clear the error from URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  }, [toast]);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const { login } = useAuth();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      await login(data.email, data.password);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      navigate(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4\">\n          <div className=\"flex justify-center\">\n            <img \n              src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n              alt=\"Jigz Logo\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Welcome back\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your Jigz account\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n\n\n          {/* Email/Password Form */}\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...form.register(\"email\")}\n                className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  {...form.register(\"password\")}\n                  className={form.formState.errors.password ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n            </Button>\n          </form>\n\n          <div className=\"text-center text-sm space-y-2\">\n            <Link href=\"/forgot-password\" className=\"text-blue-600 hover:text-blue-800 font-medium block\">\n              Forgot your password?\n            </Link>\n            <div>\n              <span className=\"text-gray-600\">Don't have an account? </span>\n              <Link href=\"/signup\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6126},"client/src/pages/messages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { MessageCircle, Send, User, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ConversationWithDetails, MessageWithSender } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { MessagingInterface } from \"../components/messaging-interface\";\n\nexport default function MessagesPage() {\n  const [selectedConversationId, setSelectedConversationId] = useState<string | null>(null);\n\n  // Check for conversation ID in URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const conversationId = urlParams.get('conversation');\n    if (conversationId) {\n      setSelectedConversationId(conversationId);\n      // Clean up the URL by removing the parameter\n      window.history.replaceState({}, '', '/messages');\n    }\n  }, []);\n\n  // Fetch user conversations\n  const { data: conversations = [], isLoading } = useQuery<ConversationWithDetails[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const selectedConversation = conversations.find(c => c.id === selectedConversationId);\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <MessageCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <p className=\"text-gray-500\">Loading conversations...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (conversations.length === 0) {\n    return (\n      <div className=\"container mx-auto p-4\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <MessageCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No conversations yet</h3>\n              <p className=\"text-gray-500 mb-4\">\n                Conversations will appear here when job posters start messaging with applicants.\n              </p>\n              <p className=\"text-sm text-gray-400\">\n                As a job poster, you can initiate conversations from your dashboard when reviewing applications.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 h-[calc(100vh-8rem)]\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 h-full\">\n        {/* Conversation List */}\n        <Card className=\"md:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5\" />\n              Conversations ({conversations.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-[calc(100vh-12rem)]\">\n              <div className=\"space-y-1 px-1 py-1\">\n                {conversations.map((conversation) => (\n                  <div\n                    key={conversation.id}\n                    className={`cursor-pointer p-2 rounded-sm border-l-2 transition-all duration-200 overflow-hidden ${\n                      selectedConversationId === conversation.id\n                        ? \"bg-blue-50 border-l-blue-500 shadow-sm\"\n                        : conversation.unreadCount > 0\n                        ? \"bg-gray-100 border-l-orange-400 hover:bg-gray-150 hover:border-l-orange-500 shadow-sm\"\n                        : \"bg-white border-l-transparent hover:bg-gray-50 hover:border-l-gray-300\"\n                    }`}\n                    onClick={() => setSelectedConversationId(conversation.id)}\n                  >\n                    <div className=\"flex items-start justify-between min-h-0 w-full\">\n                      <div className=\"flex-1 min-w-0 pr-1 overflow-hidden\">\n                        <div className=\"flex items-center gap-1.5 mb-1\">\n                          <User className={`h-3.5 w-3.5 flex-shrink-0 ${conversation.unreadCount > 0 ? 'text-gray-600' : 'text-gray-400'}`} />\n                          <span className={`text-sm truncate max-w-[120px] ${conversation.unreadCount > 0 ? 'font-semibold text-gray-900' : 'font-medium text-gray-700'}`}>\n                            {conversation.otherUser.name}\n                          </span>\n                          {conversation.otherUser.isEmailVerified && (\n                            <CheckCircle className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                          )}\n                          {conversation.unreadCount > 0 && (\n                            <Badge variant=\"destructive\" className=\"h-3.5 text-sm px-1 ml-auto flex-shrink-0\">\n                              {conversation.unreadCount}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className={`text-sm mb-1 leading-tight overflow-hidden ${conversation.unreadCount > 0 ? 'text-gray-800 font-medium' : 'text-gray-600'}`}>\n                          {(() => {\n                            const title = conversation.service?.title || conversation.job?.title || 'Unknown';\n                            return title.length > 30 ? `${title.substring(0, 30)}...` : title;\n                          })()}\n                        </p>\n                        {conversation.lastMessage && (\n                          <p className={`text-sm leading-tight overflow-hidden ${conversation.unreadCount > 0 ? 'text-gray-700 font-medium' : 'text-gray-500'}`}>\n                            {conversation.lastMessage.content.length > 35 \n                              ? `${conversation.lastMessage.content.substring(0, 35)}...` \n                              : conversation.lastMessage.content}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-400 flex-shrink-0 self-start\">\n                        {format(new Date(conversation.lastMessageAt || conversation.createdAt || new Date()), \"MMM d\")}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Message Interface */}\n        <Card className=\"md:col-span-2\">\n          {selectedConversation ? (\n            <MessagingInterface\n              conversation={selectedConversation}\n              onClose={() => setSelectedConversationId(null)}\n            />\n          ) : (\n            <CardContent className=\"p-8 h-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <MessageCircle className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a conversation</h3>\n                <p className=\"text-gray-500\">\n                  Choose a conversation from the list to view messages\n                </p>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7431},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notifications.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { Bell, Check, Clock, User, Briefcase, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Notification } from \"@shared/schema\";\nimport ReviewModal from \"@/components/review-modal\";\n\nexport default function NotificationsPage() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [reviewModal, setReviewModal] = useState<{\n    isOpen: boolean;\n    jobId: string;\n    clientId: string;\n    clientName: string;\n  }>({\n    isOpen: false,\n    jobId: \"\",\n    clientId: \"\",\n    clientName: \"\"\n  });\n\n  // Fetch all notifications\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  // Query to check if freelancer can rate clients for review notifications\n  const { data: ratingEligibility = {} } = useQuery({\n    queryKey: [\"/api/reviews/rating-eligibility\", notifications],\n    queryFn: async () => {\n      if (!user || !notifications.length) return {};\n      \n      const reviewNotifications = notifications.filter(n => n.type === \"new_review\");\n      const eligibilityPromises = reviewNotifications.map(async (notification) => {\n        // For review notifications, we need to extract the reviewer info from the message\n        // This is a limitation as we don't store reviewer ID in notifications\n        // We'll parse the message to get the reviewer name and look up jobs/applications\n        const response = await apiRequest(\"GET\", `/api/user/applications`);\n        if (!response.ok) return { notificationId: notification.id, canRate: false, hasRated: false };\n        \n        const applications = await response.json();\n        const relevantApp = applications.find((app: any) => \n          app.jobId === notification.jobId && app.status === \"accepted\"\n        );\n        \n        if (!relevantApp) return { notificationId: notification.id, canRate: false, hasRated: false };\n        \n        const job = relevantApp.job;\n        const clientId = job.userId;\n        \n        const ratingResponse = await apiRequest(\"GET\", `/api/reviews/can-rate-client/${notification.jobId}/${clientId}`);\n        if (!ratingResponse.ok) return { notificationId: notification.id, canRate: false, hasRated: false };\n        \n        const ratingData = await ratingResponse.json();\n        return { \n          notificationId: notification.id, \n          jobId: notification.jobId,\n          clientId,\n          clientName: job.userName || \"Client\",\n          ...ratingData \n        };\n      });\n      \n      const results = await Promise.all(eligibilityPromises);\n      return results.reduce((acc, result) => {\n        acc[result.notificationId] = result;\n        return acc;\n      }, {} as Record<string, any>);\n    },\n    enabled: !!user && notifications.length > 0,\n  });\n\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n      if (!response.ok) {\n        throw new Error(\"Failed to mark notification as read\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notification as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark all as read mutation\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"PATCH\", \"/api/notifications/read-all\");\n      if (!response.ok) {\n        throw new Error(\"Failed to mark all notifications as read\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark all notifications as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Automatically mark all notifications as read when the page loads\n  useEffect(() => {\n    if (notifications && notifications.length > 0) {\n      const hasUnread = notifications.some(notification => !notification.isRead);\n      if (hasUnread) {\n        markAllAsReadMutation.mutate();\n      }\n    }\n  }, [notifications]);\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  const handleMarkAllAsRead = () => {\n    markAllAsReadMutation.mutate();\n  };\n\n  const handleRateClient = (jobId: string, clientId: string, clientName: string) => {\n    setReviewModal({\n      isOpen: true,\n      jobId,\n      clientId,\n      clientName\n    });\n  };\n\n  const handleCloseReviewModal = () => {\n    setReviewModal({\n      isOpen: false,\n      jobId: \"\",\n      clientId: \"\",\n      clientName: \"\"\n    });\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"application_accepted\":\n        return <Check className=\"h-5 w-5 text-green-600\" />;\n      case \"new_application\":\n        return <User className=\"h-5 w-5 text-blue-600\" />;\n      case \"job_completed\":\n        return <Briefcase className=\"h-5 w-5 text-purple-600\" />;\n      case \"new_review\":\n        return <Star className=\"h-5 w-5 text-yellow-600\" />;\n      default:\n        return <Bell className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const getNotificationBgColor = (type: string, isRead: boolean | null) => {\n    if (isRead) return \"bg-white\";\n    \n    switch (type) {\n      case \"application_accepted\":\n        return \"bg-green-50 border-green-200\";\n      case \"new_application\":\n        return \"bg-blue-50 border-blue-200\";\n      case \"job_completed\":\n        return \"bg-purple-50 border-purple-200\";\n      case \"new_review\":\n        return \"bg-yellow-50 border-yellow-200\";\n      default:\n        return \"bg-gray-50 border-gray-200\";\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-gray-200 rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center gap-3\">\n          <Bell className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Notifications</h1>\n            <p className=\"text-gray-600\">\n              {unreadCount > 0 ? `${unreadCount} unread notification${unreadCount !== 1 ? 's' : ''}` : 'All caught up!'}\n            </p>\n          </div>\n        </div>\n        \n        {unreadCount > 0 && (\n          <Button\n            onClick={handleMarkAllAsRead}\n            disabled={markAllAsReadMutation.isPending}\n            variant=\"outline\"\n          >\n            <Check className=\"h-4 w-4 mr-2\" />\n            Mark All Read\n          </Button>\n        )}\n      </div>\n\n      {/* Notifications List */}\n      {notifications.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Bell className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No notifications yet</h3>\n            <p className=\"text-gray-600\">\n              You'll see notifications here when there's activity on your jobs or applications.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {notifications.map((notification) => (\n            <Card\n              key={notification.id}\n              className={`${getNotificationBgColor(notification.type, notification.isRead || false)} transition-colors hover:shadow-md`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  {/* Icon */}\n                  <div className=\"flex-shrink-0 mt-1\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        {notification.title}\n                      </h3>\n                      {!notification.isRead && (\n                        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                          New\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-gray-700 mb-3\">\n                      {notification.message}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>{format(new Date(notification.createdAt || Date.now()), 'MMM d, yyyy')}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {/* Rate Client button for review notifications */}\n                        {notification.type === \"new_review\" && \n                         ratingEligibility[notification.id]?.canRate && \n                         !ratingEligibility[notification.id]?.hasRated && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleRateClient(\n                              ratingEligibility[notification.id].jobId,\n                              ratingEligibility[notification.id].clientId,\n                              ratingEligibility[notification.id].clientName\n                            )}\n                            className=\"text-yellow-600 border-yellow-600 hover:bg-yellow-50 hover:text-yellow-700\"\n                          >\n                            <Star className=\"h-4 w-4 mr-2\" />\n                            Rate Client\n                          </Button>\n                        )}\n                        \n                        {/* Already rated indicator */}\n                        {notification.type === \"new_review\" && \n                         ratingEligibility[notification.id]?.hasRated && (\n                          <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n                            Client Rated\n                          </Badge>\n                        )}\n                        \n                        {!notification.isRead && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleMarkAsRead(notification.id)}\n                            disabled={markAsReadMutation.isPending}\n                            className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                          >\n                            Mark as read\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n      \n      {/* Review Modal for Rating Clients */}\n      <ReviewModal\n        isOpen={reviewModal.isOpen}\n        onClose={handleCloseReviewModal}\n        jobId={reviewModal.jobId}\n        revieweeId={reviewModal.clientId}\n        revieweeName={reviewModal.clientName}\n        reviewType=\"worker_to_client\"\n      />\n    </div>\n  );\n}","size_bytes":12718},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { Star, MapPin, Clock, DollarSign, User, Edit2, Camera, Mail, Calendar, Award, Briefcase, TrendingUp, Users, ChevronDown, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { SubscriptionBadge } from \"@/components/subscription-badge\";\nimport type { User as UserType, JobWithApplications, ApplicationWithJob } from \"@shared/schema\";\n\ninterface UserStats {\n  totalJobsPosted: number;\n  totalApplicationsSubmitted: number;\n  jobsCompleted: number;\n  averageRating: number;\n  totalReviews: number;\n  joinedDate: string;\n  successRate: number;\n}\n\ninterface ReviewWithJob {\n  id: string;\n  rating: number;\n  comment: string;\n  reviewType: \"client_to_worker\" | \"worker_to_client\";\n  createdAt: string;\n  reviewer: {\n    name: string;\n    username: string;\n    profileImageUrl?: string;\n  };\n  job: {\n    title: string;\n    category: string;\n  };\n}\n\ninterface SkillEndorsement {\n  id: string;\n  skill: string;\n  message?: string;\n  createdAt: string;\n  endorser: {\n    id: string;\n    name: string;\n    username: string;\n    profileImageUrl?: string;\n  };\n  job: {\n    title: string;\n    category: string;\n  };\n}\n\nconst formatTimeAgo = (date: Date | string | null) => {\n  if (!date) return \"Recently\";\n  \n  const now = new Date();\n  const past = new Date(date);\n  const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n  \n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minutes ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hours ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 30) {\n    return `${diffInDays} days ago`;\n  }\n  \n  const diffInMonths = Math.floor(diffInDays / 30);\n  return `${diffInMonths} months ago`;\n};\n\nexport default function Profile({ params }: { params?: { userId?: string } }) {\n  const [location] = useLocation();\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [profileForm, setProfileForm] = useState({ name: \"\", email: \"\" });\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [currentTab, setCurrentTab] = useState(\"completed-jobs\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n\n  // Get user ID from URL params, query params, or use current user\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const profileUserId = params?.userId || urlParams.get('user') || currentUser?.id;\n  const isOwnProfile = profileUserId === currentUser?.id;\n\n  // Fetch user profile data\n  const { data: user, isLoading: userLoading, error: userError } = useQuery<UserType>({\n    queryKey: [\"/api/user/profile\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/profile/${profileUserId}`);\n      if (!response.ok) {\n        throw new Error(\"User not found\");\n      }\n      return response.json();\n    },\n    enabled: !!profileUserId,\n    retry: false,\n  });\n\n  // Fetch user statistics\n  const { data: stats, isLoading: statsLoading } = useQuery<UserStats>({\n    queryKey: [\"/api/user/stats\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/stats/${profileUserId}`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch user's completed jobs (for workers)\n  const { data: completedJobs = [], isLoading: jobsLoading } = useQuery<ApplicationWithJob[]>({\n    queryKey: [\"/api/user/completed-jobs\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/completed-jobs/${profileUserId}`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch user's posted jobs (for job posters)\n  const { data: postedJobs = [], isLoading: postedJobsLoading } = useQuery<JobWithApplications[]>({\n    queryKey: [\"/api/user/posted-jobs\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/posted-jobs/${profileUserId}`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch user reviews\n  const { data: reviews = [], isLoading: reviewsLoading } = useQuery<ReviewWithJob[]>({\n    queryKey: [\"/api/user/reviews\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/reviews/${profileUserId}`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch skill endorsements\n  const { data: skillEndorsements = [], isLoading: endorsementsLoading } = useQuery<SkillEndorsement[]>({\n    queryKey: [`/api/users/${profileUserId}/skill-endorsements`],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/users/${profileUserId}/skill-endorsements`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch user's services\n  const { data: userServices = [], isLoading: servicesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/user/services\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/services/${profileUserId}`);\n      return response.json();\n    },\n    enabled: !!profileUserId,\n  });\n\n  // Fetch user's completed services (for service providers)\n  const { data: completedServices = [], isLoading: completedServicesLoading, refetch: refetchCompletedServices } = useQuery<any[]>({\n    queryKey: [\"/api/user/completed-services\", profileUserId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user/completed-services/${profileUserId}`);\n      const data = await response.json();\n      console.log(\"Fetched completed services:\", data, \"Length:\", data?.length);\n      return data;\n    },\n    enabled: !!profileUserId,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Profile update mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/user/profile\", {\n        method: \"PATCH\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to update profile\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setIsEditingProfile(false);\n      setSelectedFile(null);\n      setPreviewUrl(null);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Email verification mutation\n  const resendVerificationMutation = useMutation({\n    mutationFn: async () => {\n      if (!user?.email) throw new Error(\"No email found\");\n      const response = await apiRequest(\"POST\", \"/api/auth/resend-verification\", {\n        email: user.email\n      });\n      if (!response.ok) throw new Error(\"Failed to resend verification email\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Verification Email Sent\",\n        description: \"Please check your email for the verification link.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send verification email. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast({\n          title: \"Error\",\n          description: \"File size must be less than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setSelectedFile(file);\n      const url = URL.createObjectURL(file);\n      setPreviewUrl(url);\n    }\n  };\n\n  const handleSubmitProfile = () => {\n    const formData = new FormData();\n    formData.append(\"name\", profileForm.name);\n    formData.append(\"email\", profileForm.email);\n    if (selectedFile) {\n      formData.append(\"profileImage\", selectedFile);\n    }\n    updateProfileMutation.mutate(formData);\n  };\n\n  const openEditProfile = () => {\n    if (user) {\n      setProfileForm({ name: user.name, email: user.email });\n    }\n    setIsEditingProfile(true);\n  };\n\n  const handleResendVerification = () => {\n    resendVerificationMutation.mutate();\n  };\n\n  if (userLoading || statsLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"w-24 h-24 bg-gray-200 rounded-full\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-6 bg-gray-200 rounded w-40\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (userError || (!userLoading && !user)) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">User not found</h3>\n            <p className=\"text-gray-600\">The profile you're looking for doesn't exist.</p>\n            <p className=\"text-sm text-gray-500 mt-2\">User ID: {profileUserId}</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Profile Header */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6\">\n            <div className=\"relative\">\n              <Avatar className=\"w-24 h-24\">\n                <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.name} />\n                <AvatarFallback className=\"text-2xl font-bold\">\n                  {user?.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              {isOwnProfile && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"absolute -bottom-2 -right-2 rounded-full w-8 h-8 p-0\"\n                  onClick={openEditProfile}\n                >\n                  <Camera className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">{user?.name}</h1>\n                  <div className=\"flex flex-col sm:flex-row sm:items-center text-gray-600 space-y-2 sm:space-y-0 sm:space-x-4\">\n                    <div className=\"flex items-center\">\n                      <User className=\"h-4 w-4 mr-1\" />\n                      <span>@{user?.username}</span>\n                    </div>\n\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      <span>Joined {user?.createdAt ? formatTimeAgo(user.createdAt) : 'Unknown'}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-col space-y-2 mt-4 md:mt-0\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {user?.isEmailVerified && (\n                      <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800 border-green-200\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Verified\n                      </Badge>\n                    )}\n                    {user?.id && <SubscriptionBadge userId={user.id} size=\"sm\" />}\n                  </div>\n                  {isOwnProfile && (\n                    <>\n                      {!user?.isEmailVerified && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={handleResendVerification}\n                          className=\"text-xs\"\n                        >\n                          Verify Email\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"outline\"\n                        onClick={openEditProfile}\n                      >\n                        <Edit2 className=\"h-4 w-4 mr-2\" />\n                        Edit Profile\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics Cards */}\n      <div className=\"space-y-4 mb-8\">\n        {/* First Row */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6\">\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Jobs Posted</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">{stats?.totalJobsPosted || 0}</p>\n                </div>\n                <Briefcase className=\"h-6 w-6 md:h-8 md:w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Services Posted</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">{userServices.length || 0}</p>\n                </div>\n                <Briefcase className=\"h-6 w-6 md:h-8 md:w-8 text-indigo-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Applications</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">{stats?.totalApplicationsSubmitted || 0}</p>\n                </div>\n                <TrendingUp className=\"h-6 w-6 md:h-8 md:w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Jobs Completed</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">\n                    {jobsLoading ? \"...\" : (Array.isArray(completedJobs) ? completedJobs.length : 0)}\n                  </p>\n                </div>\n                <Award className=\"h-6 w-6 md:h-8 md:w-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Second Row */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 md:gap-6\">\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Services Completed</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">\n                    {completedServicesLoading ? \"...\" : (Array.isArray(completedServices) ? completedServices.length : 0)}\n                  </p>\n                </div>\n                <Award className=\"h-6 w-6 md:h-8 md:w-8 text-emerald-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Skill Endorsements</p>\n                  <p className=\"text-xl md:text-2xl font-bold text-gray-900\">{skillEndorsements.length || 0}</p>\n                </div>\n                <Star className=\"h-6 w-6 md:h-8 md:w-8 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n                <div>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Average Rating</p>\n                  <div className=\"flex items-center space-x-1\">\n                    <p className=\"text-xl md:text-2xl font-bold text-gray-900\">\n                      {stats?.averageRating ? stats.averageRating.toFixed(1) : \"N/A\"}\n                    </p>\n                    <Star className=\"h-4 w-4 md:h-5 md:w-5 text-yellow-500 fill-current\" />\n                  </div>\n                </div>\n                <div className=\"text-xs md:text-sm text-gray-500 mt-1 md:mt-0\">\n                  ({stats?.totalReviews || 0} reviews)\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Tabs Section */}\n      <Tabs value={currentTab} onValueChange={setCurrentTab} className=\"w-full\">\n        {/* Dropdown Menu for All Screens */}\n        <div className=\"mb-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"w-full justify-between\">\n                {(() => {\n                  switch (currentTab) {\n                    case \"completed-jobs\":\n                      return `Completed Jobs (${completedJobs.length})`;\n                    case \"completed-services\":\n                      return `Services Completed (${completedServices.length})`;\n                    case \"posted-jobs\":\n                      return `Jobs Posted (${postedJobs.length})`;\n                    case \"services\":\n                      return `Services (${userServices.length})`;\n                    case \"reviews\":\n                      return `Reviews (${reviews.length})`;\n                    case \"endorsements\":\n                      return `Skill Endorsements (${skillEndorsements.length})`;\n                    default:\n                      return \"Select Tab\";\n                  }\n                })()}\n                <ChevronDown className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-full\">\n              <DropdownMenuItem onClick={() => setCurrentTab(\"completed-jobs\")}>\n                Completed Jobs ({completedJobs.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"completed-services\")}>\n                Services Completed ({completedServices.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"posted-jobs\")}>\n                Jobs Posted ({postedJobs.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"services\")}>\n                Services ({userServices.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"reviews\")}>\n                Reviews ({reviews.length})\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => setCurrentTab(\"endorsements\")}>\n                Skill Endorsements ({skillEndorsements.length})\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* Completed Jobs Tab */}\n        <TabsContent value=\"completed-jobs\" className=\"space-y-6\">\n          {jobsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : completedJobs.length > 0 ? (\n            completedJobs.map((application) => (\n              <Card key={application.id}>\n                <CardContent className=\"p-4 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 flex-1 pr-2\">{application.job?.title || \"Untitled Job\"}</h3>\n                        <Badge className=\"bg-green-100 text-green-800 border-0 whitespace-nowrap\">\n                          Completed\n                        </Badge>\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 space-y-2 sm:space-y-0 sm:space-x-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Completed {formatTimeAgo(application.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{application.job?.location || \"Location not specified\"}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>Earned: ${application.bidAmount}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 text-sm\">{application.job?.description || \"No description available\"}</p>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No completed jobs</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile ? \"Complete jobs to build your reputation.\" : \"This user hasn't completed any jobs yet.\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Services Completed Tab */}\n        <TabsContent value=\"completed-services\" className=\"space-y-6\">\n          {completedServicesLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : completedServices.length > 0 ? (\n            completedServices.map((completedService) => (\n              <Card key={completedService.id}>\n                <CardContent className=\"p-4 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 flex-1 pr-2\">{completedService.service?.title || \"Untitled Service\"}</h3>\n                        <Badge className=\"bg-green-100 text-green-800 border-0 whitespace-nowrap\">\n                          Service Completed\n                        </Badge>\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 space-y-2 sm:space-y-0 sm:space-x-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Completed {formatTimeAgo(completedService.completedAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{completedService.service?.location || \"Location not specified\"}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>\n                            Earned: {completedService.service?.priceType === 'per_project' \n                              ? completedService.service?.priceTo \n                                ? `${getCurrencySymbol(completedService.service?.currency)}${completedService.service?.priceFrom}-${completedService.service?.priceTo}` \n                                : `${getCurrencySymbol(completedService.service?.currency)}${completedService.service?.priceFrom}`\n                              : `${getCurrencySymbol(completedService.service?.currency)}${completedService.service?.priceFrom}/hr`\n                            }\n                          </span>\n                        </div>\n                        {completedService.client && (\n                          <div className=\"flex items-center\">\n                            <User className=\"h-4 w-4 mr-1\" />\n                            <span>Client: {completedService.client.name}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {completedService.service?.category || \"No category\"}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No services completed</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile ? \"Complete service requests to build your service provider reputation.\" : \"This user hasn't completed any services yet.\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Posted Jobs Tab */}\n        <TabsContent value=\"posted-jobs\" className=\"space-y-6\">\n          {postedJobsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : postedJobs.length > 0 ? (\n            postedJobs.map((job) => (\n              <Card key={job.id}>\n                <CardContent className=\"p-4 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 flex-1 pr-2\">{job?.title || \"Untitled Job\"}</h3>\n                        <div className=\"flex flex-col items-end space-y-2 md:hidden\">\n                          <Badge className={`${\n                            job.status === 'open' \n                              ? 'bg-green-100 text-green-800' \n                              : job.status === 'in_progress'\n                              ? 'bg-blue-100 text-blue-800'\n                              : 'bg-gray-100 text-gray-800'\n                          } border-0 whitespace-nowrap`}>\n                            {job.status === 'open' ? 'Open' : job.status === 'in_progress' ? 'In Progress' : 'Closed'}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {job?.category || \"No category\"}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 space-y-2 sm:space-y-0 sm:space-x-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Posted {formatTimeAgo(job.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{job?.location || \"Location not specified\"}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>Budget: {job?.minBudget ? `$${job.minBudget} - ` : \"\"}${job?.maxBudget || \"N/A\"} {job?.currency || \"\"}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Users className=\"h-4 w-4 mr-1\" />\n                          <span>{job?.applications?.length || 0} applications</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"hidden md:flex flex-col items-end space-y-2\">\n                      <Badge className={`${\n                        job.status === 'open' \n                          ? 'bg-green-100 text-green-800' \n                          : job.status === 'in_progress'\n                          ? 'bg-blue-100 text-blue-800'\n                          : 'bg-gray-100 text-gray-800'\n                      } border-0`}>\n                        {job.status === 'open' ? 'Open' : job.status === 'in_progress' ? 'In Progress' : 'Closed'}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {job?.category || \"No category\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 text-sm\">{job?.description || \"No description available\"}</p>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No jobs posted</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile ? \"Start by posting your first job to find skilled freelancers.\" : \"This user hasn't posted any jobs yet.\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Services Tab */}\n        <TabsContent value=\"services\" className=\"space-y-6\">\n          {servicesLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : userServices.length > 0 ? (\n            userServices.map((service: any) => (\n              <Card key={service.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-4 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 flex-1 pr-2\">\n                          <Link href={`/service/${service.id}`} className=\"hover:text-blue-600 transition-colors\">\n                            {service?.title || \"Untitled Service\"}\n                          </Link>\n                        </h3>\n                        <div className=\"flex flex-col items-end space-y-2 md:hidden\">\n                          <Badge className={`${\n                            service.approvalStatus === 'approved' \n                              ? 'bg-green-100 text-green-800' \n                              : service.approvalStatus === 'pending'\n                              ? 'bg-yellow-100 text-yellow-800'\n                              : 'bg-red-100 text-red-800'\n                          } border-0 whitespace-nowrap`}>\n                            {service.approvalStatus === 'approved' ? 'Active' : \n                             service.approvalStatus === 'pending' ? 'Pending Approval' : 'Rejected'}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {service?.category || \"No category\"}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col sm:flex-row sm:items-center text-sm text-gray-600 space-y-2 sm:space-y-0 sm:space-x-4\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>Posted {formatTimeAgo(service.createdAt)}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1\" />\n                          <span>{service?.location || \"Location not specified\"}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          <span>\n                            {service?.priceType === 'per_project' \n                              ? service?.priceTo \n                                ? `${getCurrencySymbol(service?.currency)}${service?.priceFrom}-${service?.priceTo}` \n                                : `${getCurrencySymbol(service?.currency)}${service?.priceFrom}`\n                              : `${getCurrencySymbol(service?.currency)}${service?.priceFrom}/hr`\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Users className=\"h-4 w-4 mr-1\" />\n                          <span>{service?.requestCount || 0} requests</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"hidden md:flex flex-col items-end space-y-2\">\n                      <Badge className={`${\n                        service.approvalStatus === 'approved' \n                          ? 'bg-green-100 text-green-800' \n                          : service.approvalStatus === 'pending'\n                          ? 'bg-yellow-100 text-yellow-800'\n                          : 'bg-red-100 text-red-800'\n                      } border-0`}>\n                        {service.approvalStatus === 'approved' ? 'Active' : \n                         service.approvalStatus === 'pending' ? 'Pending Approval' : 'Rejected'}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {service?.category || \"No category\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 text-sm line-clamp-3\">{service?.description || \"No description available\"}</p>\n                  \n                  {service?.images && service.images.length > 0 && (\n                    <div className=\"flex gap-2 mt-3 overflow-x-auto\">\n                      {service.images.slice(0, 3).map((imagePath: string, index: number) => (\n                        <div key={index} className=\"flex-shrink-0 w-16 h-16 bg-gray-100 rounded-lg overflow-hidden\">\n                          <img \n                            src={imagePath} \n                            alt={`Service ${index + 1}`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                      ))}\n                      {service.images.length > 3 && (\n                        <div className=\"flex-shrink-0 w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-xs text-gray-600\">+{service.images.length - 3}</span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No services posted</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile ? \"Start by posting your first service to offer your skills to others.\" : \"This user hasn't posted any services yet.\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Reviews Tab */}\n        <TabsContent value=\"reviews\" className=\"space-y-6\">\n          {reviewsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : reviews.length > 0 ? (\n            reviews.map((review) => (\n              <Card key={review.id}>\n                <CardContent className=\"p-4 md:p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Avatar className=\"hidden sm:block\">\n                      <AvatarImage src={review.reviewer.profileImageUrl || undefined} alt={review.reviewer.name} />\n                      <AvatarFallback>\n                        {review.reviewer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2 sm:space-x-0 sm:flex-col sm:items-start\">\n                          <Avatar className=\"w-8 h-8 sm:hidden\">\n                            <AvatarImage src={review.reviewer.profileImageUrl || undefined} alt={review.reviewer.name} />\n                            <AvatarFallback className=\"text-xs\">\n                              {review.reviewer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">{review.reviewer.name}</h4>\n                            <p className=\"text-sm text-gray-600\">@{review.reviewer.username}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-1 mt-2 sm:mt-0\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-3 w-3 sm:h-4 sm:w-4 ${\n                                i < review.rating ? \"text-yellow-500 fill-current\" : \"text-gray-300\"\n                              }`}\n                            />\n                          ))}\n                          <span className=\"text-xs sm:text-sm text-gray-600 ml-1\">({review.rating}/5)</span>\n                        </div>\n                      </div>\n                      <div className=\"mb-3\">\n                        <p className=\"text-sm font-medium text-gray-700\">Job: {review.job?.title || \"Untitled Job\"}</p>\n                        <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                          {review.job?.category || \"No category\"}\n                        </Badge>\n                      </div>\n                      \n                      {/* Display detailed ratings for client-to-freelancer reviews */}\n                      {review.reviewType === \"client_to_worker\" && \n                       (review as any).qualityOfWorkRating && \n                       (review as any).communicationRating && \n                       (review as any).timelinessRating && (\n                        <div className=\"mb-3 p-3 bg-gray-50 rounded-lg\">\n                          <h5 className=\"text-xs font-semibold text-gray-700 mb-2\">Detailed Ratings:</h5>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-xs text-gray-600\">Quality of Work</span>\n                              <div className=\"flex items-center space-x-1\">\n                                {[...Array(5)].map((_, i) => (\n                                  <Star\n                                    key={i}\n                                    className={`h-3 w-3 ${\n                                      i < ((review as any).qualityOfWorkRating || 0) ? \"text-yellow-500 fill-current\" : \"text-gray-300\"\n                                    }`}\n                                  />\n                                ))}\n                                <span className=\"text-xs text-gray-600 ml-1\">({(review as any).qualityOfWorkRating || 0}/5)</span>\n                              </div>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-xs text-gray-600\">Communication & Professionalism</span>\n                              <div className=\"flex items-center space-x-1\">\n                                {[...Array(5)].map((_, i) => (\n                                  <Star\n                                    key={i}\n                                    className={`h-3 w-3 ${\n                                      i < ((review as any).communicationRating || 0) ? \"text-yellow-500 fill-current\" : \"text-gray-300\"\n                                    }`}\n                                  />\n                                ))}\n                                <span className=\"text-xs text-gray-600 ml-1\">({(review as any).communicationRating || 0}/5)</span>\n                              </div>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-xs text-gray-600\">Timeliness & Reliability</span>\n                              <div className=\"flex items-center space-x-1\">\n                                {[...Array(5)].map((_, i) => (\n                                  <Star\n                                    key={i}\n                                    className={`h-3 w-3 ${\n                                      i < ((review as any).timelinessRating || 0) ? \"text-yellow-500 fill-current\" : \"text-gray-300\"\n                                    }`}\n                                  />\n                                ))}\n                                <span className=\"text-xs text-gray-600 ml-1\">({(review as any).timelinessRating || 0}/5)</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {review.comment && (\n                        <p className=\"text-gray-700 mb-2 text-sm\">{review.comment}</p>\n                      )}\n                      <p className=\"text-xs text-gray-500\">{formatTimeAgo(review.createdAt)}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No reviews yet</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile ? \"Complete jobs to receive reviews.\" : \"This user hasn't received any reviews yet.\"}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Skill Endorsements Tab */}\n        <TabsContent value=\"endorsements\" className=\"space-y-6\">\n          {endorsementsLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-300 rounded w-1/3 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-1/2 mb-3\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-full\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : skillEndorsements.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Award className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"font-medium text-gray-900 mb-2\">No Skill Endorsements Yet</h3>\n                <p className=\"text-gray-600\">\n                  {isOwnProfile \n                    ? \"You haven't received any skill endorsements yet. Complete jobs to earn endorsements from clients!\" \n                    : `${user?.name || user?.username} hasn't received any skill endorsements yet.`\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {skillEndorsements.map((endorsement) => (\n                <Card key={endorsement.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={endorsement.endorser.profileImageUrl} />\n                        <AvatarFallback>\n                          {endorsement.endorser.name?.charAt(0) || endorsement.endorser.username.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div>\n                            <Badge variant=\"secondary\" className=\"mb-2\">\n                              {endorsement.skill}\n                            </Badge>\n                            <p className=\"font-medium text-gray-900\">\n                              Endorsed by {endorsement.endorser.name || endorsement.endorser.username}\n                            </p>\n                          </div>\n                          <span className=\"text-sm text-gray-500\">\n                            {formatTimeAgo(endorsement.createdAt)}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mb-2\">\n                          For work on: <strong>{endorsement.job?.title || \"Untitled Job\"}</strong>\n                        </p>\n                        {endorsement.message && (\n                          <p className=\"text-gray-700 italic\">\"{endorsement.message}\"</p>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Profile Modal */}\n      <Dialog open={isEditingProfile} onOpenChange={setIsEditingProfile}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Edit Profile</DialogTitle>\n            <DialogDescription>\n              Update your profile information and photo.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Profile Picture Upload */}\n            <div className=\"flex flex-col items-center space-y-4\">\n              <Avatar className=\"w-20 h-20\">\n                <AvatarImage src={previewUrl || user?.profileImageUrl || undefined} alt={user?.name} />\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {user?.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <Label htmlFor=\"profile-image\" className=\"cursor-pointer\">\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <span>\n                      <Camera className=\"h-4 w-4 mr-2\" />\n                      Change Photo\n                    </span>\n                  </Button>\n                </Label>\n                <Input\n                  id=\"profile-image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n              </div>\n            </div>\n\n            {/* Form Fields */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  value={profileForm.name}\n                  onChange={(e) => setProfileForm(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Enter your full name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={profileForm.email}\n                  onChange={(e) => setProfileForm(prev => ({ ...prev, email: e.target.value }))}\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3 pt-4 border-t border-gray-200\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsEditingProfile(false);\n                  setSelectedFile(null);\n                  setPreviewUrl(null);\n                }}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSubmitProfile}\n                disabled={updateProfileMutation.isPending}\n                className=\"flex-1\"\n              >\n                {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":53651},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, Key, Mail, AtSign } from \"lucide-react\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  \n  // Form states\n  const [profileData, setProfileData] = useState({\n    name: \"\",\n    username: \"\",\n    email: \"\"\n  });\n\n  // Update form data when user data loads\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        name: user.name || \"\",\n        username: user.username || \"\",\n        email: user.email || \"\"\n      });\n    }\n  }, [user]);\n  \n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { name: string; username: string; email: string }) => {\n      return apiRequest(\"PUT\", \"/api/user/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      // Refresh auth data\n      window.location.reload();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      return apiRequest(\"PUT\", \"/api/user/password\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password changed\",\n        description: \"Your password has been changed successfully.\",\n      });\n      setPasswordData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to change password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfileUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!profileData.name.trim() || !profileData.username.trim() || !profileData.email.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"All fields are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handlePasswordChange = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"All password fields are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Please log in</h1>\n          <p>You need to be logged in to access settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-2xl\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Settings</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your account settings and preferences.\n          </p>\n        </div>\n\n        {/* Profile Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Profile Information\n            </CardTitle>\n            <CardDescription>\n              Update your personal information and account details.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  value={profileData.name}\n                  onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Enter your full name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"flex items-center gap-2\">\n                  <AtSign className=\"h-4 w-4\" />\n                  Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={profileData.username}\n                  onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}\n                  placeholder=\"Enter your username\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  Email Address\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={profileData.email}\n                  onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                  placeholder=\"Enter your email address\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                disabled={updateProfileMutation.isPending}\n                className=\"w-full\"\n              >\n                {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        <Separator />\n\n        {/* Password Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Key className=\"h-5 w-5\" />\n              Change Password\n            </CardTitle>\n            <CardDescription>\n              Update your password to keep your account secure.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currentPassword\">Current Password</Label>\n                <Input\n                  id=\"currentPassword\"\n                  type=\"password\"\n                  value={passwordData.currentPassword}\n                  onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}\n                  placeholder=\"Enter your current password\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newPassword\">New Password</Label>\n                <Input\n                  id=\"newPassword\"\n                  type=\"password\"\n                  value={passwordData.newPassword}\n                  onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}\n                  placeholder=\"Enter your new password\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={passwordData.confirmPassword}\n                  onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                  placeholder=\"Confirm your new password\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                disabled={changePasswordMutation.isPending}\n                className=\"w-full\"\n              >\n                {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9211},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Eye, EyeOff, Check, X, Mail, CheckCircle } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(20, \"Username must be less than 20 characters\")\n    .regex(/^[a-zA-Z0-9_]+$/, \"Username can only contain letters, numbers, and underscores\"),\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  surname: z.string().min(1, \"Surname is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function SignupPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [showEmailVerification, setShowEmailVerification] = useState(false);\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      surname: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const { register: registerUser } = useAuth();\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string; name: string; password: string }) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUserEmail(data.user.email);\n      \n      if (data.emailSent) {\n        setShowEmailVerification(true);\n        toast({\n          title: \"Registration successful!\",\n          description: \"Please check your email to verify your account.\",\n        });\n      } else {\n        toast({\n          title: \"Welcome to Jigz!\",\n          description: \"Your account has been created successfully.\",\n        });\n        navigate(\"/\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupFormData) => {\n    const { confirmPassword, firstName, surname, ...restData } = data;\n    const submitData = {\n      ...restData,\n      name: `${firstName} ${surname}`.trim(),\n    };\n    signupMutation.mutate(submitData);\n  };\n\n\n\n  const password = form.watch(\"password\");\n  const passwordRequirements = [\n    { label: \"At least 6 characters\", met: password.length >= 6 },\n    { label: \"Contains letters\", met: /[a-zA-Z]/.test(password) },\n    { label: \"Contains numbers\", met: /\\d/.test(password) },\n  ];\n\n  // Show email verification screen after successful registration\n  if (showEmailVerification) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n            <div className=\"mx-auto mb-4\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                <Mail className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Check Your Email</CardTitle>\n            <CardDescription>\n              We've sent a verification link to <strong>{userEmail}</strong>\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4 text-center\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                Click the link in the email to verify your account and start using Jigz.\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                The verification link will expire in 24 hours.\n              </p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                disabled={signupMutation.isPending}\n                onClick={async () => {\n                  try {\n                    const response = await fetch(\"/api/auth/resend-verification\", {\n                      method: \"POST\",\n                      headers: { \"Content-Type\": \"application/json\" },\n                      body: JSON.stringify({ email: userEmail }),\n                    });\n                    \n                    if (response.ok) {\n                      toast({\n                        title: \"Email resent successfully\",\n                        description: \"Check your inbox for the new verification email.\",\n                      });\n                    } else {\n                      toast({\n                        title: \"Failed to resend email\",\n                        description: \"Please try again in a moment.\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to resend verification email.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n              >\n                {signupMutation.isPending ? \"Sending...\" : \"Resend Email\"}\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                className=\"w-full\"\n                onClick={() => navigate(\"/login\")}\n              >\n                Continue to Login\n              </Button>\n            </div>\n            \n            <div className=\"pt-4 border-t\">\n              <p className=\"text-xs text-gray-500\">\n                Didn't receive the email? Check your spam folder or{\" \"}\n                <button \n                  className=\"text-blue-600 hover:underline\"\n                  onClick={() => setShowEmailVerification(false)}\n                >\n                  try a different email\n                </button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-4\">\n          <div className=\"flex justify-center\">\n            <img \n              src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n              alt=\"Jigz Logo\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            Create your account\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Join Jigz and start finding work or hiring talent\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n\n\n          {/* Registration Form */}\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a username\"\n                {...form.register(\"username\")}\n                className={form.formState.errors.username ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.username && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.username.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...form.register(\"email\")}\n                className={form.formState.errors.email ? \"border-red-500\" : \"\"}\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"Enter your first name\"\n                  {...form.register(\"firstName\")}\n                  className={form.formState.errors.firstName ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-red-500\">\n                    {form.formState.errors.firstName.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"surname\">Surname</Label>\n                <Input\n                  id=\"surname\"\n                  type=\"text\"\n                  placeholder=\"Enter your surname\"\n                  {...form.register(\"surname\")}\n                  className={form.formState.errors.surname ? \"border-red-500\" : \"\"}\n                />\n                {form.formState.errors.surname && (\n                  <p className=\"text-sm text-red-500\">\n                    {form.formState.errors.surname.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a password\"\n                  {...form.register(\"password\")}\n                  className={form.formState.errors.password ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              \n              {/* Password Requirements */}\n              {password && (\n                <div className=\"space-y-1 text-xs\">\n                  {passwordRequirements.map((req, index) => (\n                    <div key={index} className=\"flex items-center gap-2\">\n                      {req.met ? (\n                        <Check className=\"h-3 w-3 text-green-500\" />\n                      ) : (\n                        <X className=\"h-3 w-3 text-red-500\" />\n                      )}\n                      <span className={req.met ? \"text-green-600\" : \"text-red-600\"}>\n                        {req.label}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your password\"\n                  {...form.register(\"confirmPassword\")}\n                  className={form.formState.errors.confirmPassword ? \"border-red-500\" : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {form.formState.errors.confirmPassword && (\n                <p className=\"text-sm text-red-500\">\n                  {form.formState.errors.confirmPassword.message}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={signupMutation.isPending}\n            >\n              {signupMutation.isPending ? \"Creating account...\" : \"Create account\"}\n            </Button>\n          </form>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-gray-600\">Already have an account? </span>\n            <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14666},"client/src/pages/verify-email.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function VerifyEmailPage() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('token');\n\n    if (!token) {\n      setStatus('error');\n      setMessage('Invalid verification link');\n      return;\n    }\n\n    const verifyEmail = async () => {\n      try {\n        const response = await apiRequest('POST', '/api/auth/verify-email', { token });\n        setStatus('success');\n        setMessage('Your email has been verified successfully! You can now access all features of Jigz.');\n      } catch (error: any) {\n        setStatus('error');\n        setMessage(error?.message || 'Failed to verify email. The link may have expired.');\n      }\n    };\n\n    verifyEmail();\n  }, []);\n\n  const handleContinue = () => {\n    if (status === 'success') {\n      setLocation('/login');\n    } else {\n      setLocation('/signup');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <img \n              src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n              alt=\"Jigz Logo\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n          <div className=\"mx-auto mb-4\">\n            {status === 'loading' && (\n              <Loader2 className=\"h-12 w-12 text-blue-600 animate-spin\" />\n            )}\n            {status === 'success' && (\n              <CheckCircle className=\"h-12 w-12 text-green-600\" />\n            )}\n            {status === 'error' && (\n              <XCircle className=\"h-12 w-12 text-red-600\" />\n            )}\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">\n            {status === 'loading' && 'Verifying Your Email...'}\n            {status === 'success' && 'Email Verified!'}\n            {status === 'error' && 'Verification Failed'}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <p className=\"text-gray-600\">\n            {message}\n          </p>\n          \n          {status !== 'loading' && (\n            <Button \n              onClick={handleContinue}\n              className=\"w-full\"\n            >\n              {status === 'success' ? 'Continue to Login' : 'Try Again'}\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2994},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/application-rankings.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage } from \"@/components/ui/avatar\";\nimport { Coins, Trophy, Medal, Award, CheckCircle } from \"lucide-react\";\nimport type { ApplicationWithUser } from \"@shared/schema\";\n\ninterface ApplicationRankingsProps {\n  jobId: string;\n}\n\ninterface RankedApplication extends ApplicationWithUser {\n  rank: number;\n  isBidding: boolean;\n}\n\nexport function ApplicationRankings({ jobId }: ApplicationRankingsProps) {\n  const { data: applications, isLoading } = useQuery<RankedApplication[]>({\n    queryKey: [\"/api/jobs\", jobId, \"application-rankings\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5\" />\n            Application Rankings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!applications || applications.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5\" />\n            Application Rankings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-gray-500 text-center py-4\">No applications yet</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"h-4 w-4 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"h-4 w-4 text-gray-400\" />;\n      case 3:\n        return <Award className=\"h-4 w-4 text-amber-600\" />;\n      default:\n        return <span className=\"text-xs font-medium text-gray-500\">#{rank}</span>;\n    }\n  };\n\n  const getBadgeVariant = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return \"default\";\n      case 2:\n        return \"secondary\";\n      case 3:\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"h-5 w-5\" />\n          Application Rankings\n          <Badge variant=\"secondary\" className=\"ml-auto\">\n            {applications.length} applicant{applications.length !== 1 ? 's' : ''}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {applications.map((application) => (\n          <div\n            key={application.id}\n            className={`flex items-center gap-3 p-3 rounded-lg border ${\n              application.rank <= 3 \n                ? 'bg-gradient-to-r from-yellow-50 to-amber-50 border-yellow-200' \n                : 'bg-gray-50 border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-center justify-center w-8 h-8\">\n              {getRankIcon(application.rank)}\n            </div>\n            \n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage \n                src={application.user.profileImageUrl || undefined} \n                alt={application.user.name}\n              />\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-1\">\n                <p className=\"font-medium text-sm truncate\">\n                  {application.user.name}\n                </p>\n                {application.user.isEmailVerified && (\n                  <CheckCircle className=\"h-3 w-3 text-green-600 flex-shrink-0\" />\n                )}\n              </div>\n              <p className=\"text-xs text-gray-500 truncate\">\n                ${application.bidAmount} • {new Date(application.createdAt!).toLocaleDateString()}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {application.isBidding && (\n                <div className=\"flex items-center gap-1 bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-xs\">\n                  <Coins className=\"h-3 w-3\" />\n                  {application.coinsBid}\n                </div>\n              )}\n              \n              <Badge variant={getBadgeVariant(application.rank)} className=\"text-xs\">\n                {application.status === 'accepted' ? 'Hired' : \n                 application.status === 'rejected' ? 'Declined' : 'Pending'}\n              </Badge>\n            </div>\n          </div>\n        ))}\n        \n        {applications.some(app => app.isBidding) && (\n          <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-blue-700 text-sm\">\n              <Coins className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Priority Bidding Active</span>\n            </div>\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Applicants with higher coin bids appear at the top for better visibility.\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5333},"client/src/components/bid-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Coins, TrendingUp, Info } from \"lucide-react\";\nimport type { ApplicationWithJob } from \"@shared/schema\";\nimport { CoinWarning } from \"@/components/coin-display\";\n\ninterface BidManagementProps {\n  application: ApplicationWithJob;\n}\n\nexport function BidManagement({ application }: BidManagementProps) {\n  const [additionalCoins, setAdditionalCoins] = useState<number>(1);\n  const [coinError, setCoinError] = useState<{ coinsNeeded: number; coinsAvailable: number } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const increaseBidMutation = useMutation({\n    mutationFn: async (data: { additionalCoins: number }) => {\n      const res = await apiRequest(\"POST\", `/api/applications/${application.id}/bid`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", application.jobId, \"application-rankings\"] });\n      setCoinError(null);\n      toast({\n        title: \"Bid Increased\",\n        description: `Added ${additionalCoins} coins to your bid. Your application now has higher priority!`,\n      });\n      setAdditionalCoins(1);\n    },\n    onError: (error: any) => {\n      console.error(\"Error increasing bid:\", error);\n      \n      // Check if it's a coin-related error\n      if (error.coinsNeeded && error.coinsAvailable !== undefined) {\n        setCoinError({\n          coinsNeeded: error.coinsNeeded,\n          coinsAvailable: error.coinsAvailable\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to increase bid. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleIncreaseBid = () => {\n    if (additionalCoins < 1) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"You must bid at least 1 additional coin.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    increaseBidMutation.mutate({ additionalCoins });\n  };\n\n  const currentBid = application.coinsBid || 0;\n  const isApplicationPending = application.status === 'pending';\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-sm\">\n          <TrendingUp className=\"h-4 w-4\" />\n          Priority Bidding\n          {currentBid > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-auto\">\n              <Coins className=\"h-3 w-3 mr-1\" />\n              {currentBid} coins\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {coinError && (\n          <CoinWarning \n            coinsNeeded={coinError.coinsNeeded} \n            coinsAvailable={coinError.coinsAvailable} \n          />\n        )}\n        \n        <div className=\"flex items-start gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <Info className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n          <div className=\"text-xs text-blue-700\">\n            <p className=\"font-medium mb-1\">How Priority Bidding Works:</p>\n            <ul className=\"space-y-0.5 list-disc list-inside\">\n              <li>Higher bids rank your application at the top</li>\n              <li>Clients see top bidders first</li>\n              <li>Coins are spent immediately when bid is placed</li>\n            </ul>\n          </div>\n        </div>\n\n        {currentBid === 0 ? (\n          <div className=\"text-center py-2\">\n            <p className=\"text-sm text-gray-600 mb-2\">\n              No priority bid placed yet\n            </p>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Standard ranking\n            </Badge>\n          </div>\n        ) : (\n          <div className=\"text-center py-2\">\n            <div className=\"flex items-center justify-center gap-2 text-sm font-medium text-green-700\">\n              <Coins className=\"h-4 w-4\" />\n              Current bid: {currentBid} coins\n            </div>\n            <Badge variant=\"default\" className=\"text-xs mt-1\">\n              Priority ranking active ⚡\n            </Badge>\n          </div>\n        )}\n\n        {isApplicationPending && (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"additionalCoins\" className=\"text-sm\">\n                Add More Coins to Bid\n              </Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"additionalCoins\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={additionalCoins}\n                  onChange={(e) => setAdditionalCoins(parseInt(e.target.value) || 1)}\n                  className=\"flex-1\"\n                />\n                <Button \n                  onClick={handleIncreaseBid}\n                  disabled={increaseBidMutation.isPending}\n                  size=\"sm\"\n                  className=\"px-4\"\n                >\n                  {increaseBidMutation.isPending ? \"Adding...\" : \"Add Bid\"}\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                New total bid: {currentBid + additionalCoins} coins\n              </p>\n            </div>\n          </div>\n        )}\n\n        {!isApplicationPending && (\n          <div className=\"text-center py-2\">\n            <p className=\"text-xs text-gray-500\">\n              Bidding is only available for pending applications\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6096},"client/src/pages/help-center.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { User, Coins, FileText, MessageCircle, Shield, Star, ArrowLeft, HelpCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function HelpCenter() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center mb-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HelpCircle className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Help Center</h1>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Everything you need to know about using Jigz to find jobs, build your reputation, and grow your freelance career.\n            </p>\n          </div>\n        </div>\n\n        {/* Help Sections */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          {/* Getting Started */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                  <User className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Getting Started</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Complete your profile:</strong> Add a profile picture and update your information to build trust with clients.</p>\n                <p>• <strong>Browse jobs:</strong> Use the search and filters to find jobs that match your skills.</p>\n                <p>• <strong>Apply strategically:</strong> Write personalized messages and use coin bidding to stand out.</p>\n                <p>• <strong>Build your reputation:</strong> Complete jobs on time and earn positive reviews.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Coin System */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Coins className=\"h-5 w-5 text-yellow-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Coin System</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Monthly allowance:</strong> You get 100 coins each month automatically.</p>\n                <p>• <strong>Application cost:</strong> Each job application costs 1 coin.</p>\n                <p>• <strong>Priority bidding:</strong> Bid extra coins to rank higher in application lists.</p>\n                <p>• <strong>Buy more coins:</strong> Purchase additional coins if you run out.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Job Applications */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3\">\n                  <FileText className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Applying to Jobs</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Read carefully:</strong> Understand the job requirements before applying.</p>\n                <p>• <strong>Competitive bidding:</strong> Your bid amount and coin investment affects your ranking.</p>\n                <p>• <strong>Message quality:</strong> Write clear, relevant messages (max 1500 characters).</p>\n                <p>• <strong>Experience matters:</strong> Highlight relevant experience (max 500 characters).</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reviews & Ratings */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Star className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Reviews & Ratings</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Two-way system:</strong> Both clients and freelancers can rate each other.</p>\n                <p>• <strong>Job completion:</strong> Reviews happen after jobs are marked as completed.</p>\n                <p>• <strong>Rating scale:</strong> 1-5 stars with optional written feedback.</p>\n                <p>• <strong>Build reputation:</strong> Good reviews help you get more jobs.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Communication */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center mr-3\">\n                  <MessageCircle className=\"h-5 w-5 text-indigo-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Communication</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Real-time messaging:</strong> Chat with clients about job details.</p>\n                <p>• <strong>Professional tone:</strong> Keep all communications respectful and clear.</p>\n                <p>• <strong>Quick responses:</strong> Reply promptly to maintain good relationships.</p>\n                <p>• <strong>Job discussions:</strong> Use messaging to clarify requirements and timelines.</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Security */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center mr-3\">\n                  <Shield className=\"h-5 w-5 text-red-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Account Security</h3>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>• <strong>Email verification:</strong> Verify your email address for account security.</p>\n                <p>• <strong>Strong passwords:</strong> Use a secure password and keep it confidential.</p>\n                <p>• <strong>Profile visibility:</strong> Your profile is visible to all platform users.</p>\n                <p>• <strong>Report issues:</strong> Contact support if you encounter problems.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* FAQ Section */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">Frequently Asked Questions</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">How do I increase my chances of getting hired?</h4>\n                  <p className=\"text-sm text-gray-600\">Complete your profile, write personalized application messages, bid competitively, build good reviews, and respond quickly to messages.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">What happens if I run out of coins?</h4>\n                  <p className=\"text-sm text-gray-600\">You can purchase additional coins or wait until the next month when your allowance resets automatically.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">How does priority bidding work?</h4>\n                  <p className=\"text-sm text-gray-600\">When applying for jobs, you can bid extra coins to rank higher in the applicant list. Higher bidders appear first to clients.</p>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Can I edit my job application after submitting?</h4>\n                  <p className=\"text-sm text-gray-600\">No, applications cannot be edited after submission. Make sure to review your application carefully before submitting.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">How do I know if my application was accepted?</h4>\n                  <p className=\"text-sm text-gray-600\">You'll receive a notification when your application status changes. Check your dashboard and notifications regularly.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">How are payments handled?</h4>\n                  <p className=\"text-sm text-gray-600\">Payment terms are agreed upon between clients and freelancers. Complete the job to your client's satisfaction to ensure payment.</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Support */}\n        <div className=\"text-center mt-8\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Still need help?</h3>\n          <p className=\"text-gray-600 mb-4\">Can't find what you're looking for or have any ideas for improvements? Our support team is here to help - email us at contact@jigz.co.</p>\n          <div className=\"space-x-4\">\n            <Link href=\"/profile\">\n              <Button variant=\"outline\">\n                Go to Profile\n              </Button>\n            </Link>\n            <a href=\"mailto:contact@jigz.co\">\n              <Button>\n                Contact Support\n              </Button>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10786},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Mail, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/forgot-password\", {\n        method: \"POST\",\n        body: JSON.stringify({ email }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to send password reset email\");\n      }\n\n      setEmailSent(true);\n      toast({\n        title: \"Reset Link Sent\",\n        description: \"If the email exists, a password reset link has been sent.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send password reset email\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (emailSent) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <CardTitle>Check Your Email</CardTitle>\n            <CardDescription>\n              If an account with that email exists, we've sent you a password reset link.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600 text-center\">\n              The reset link will expire in 1 hour for security reasons.\n            </p>\n            <div className=\"space-y-2\">\n              <Link href=\"/login\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  Back to Login\n                </Button>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full\"\n                onClick={() => {\n                  setEmailSent(false);\n                  setEmail(\"\");\n                }}\n              >\n                Send Another Reset Link\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <div className=\"flex items-center mb-4\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n            </Link>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <CardTitle>Forgot Password?</CardTitle>\n            <CardDescription>\n              Enter your email address and we'll send you a link to reset your password.\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                autoFocus\n                disabled={isLoading}\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Sending...\" : \"Send Reset Link\"}\n            </Button>\n            \n            <div className=\"text-center\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  Back to Login\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5489},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Link, useLocation } from \"wouter\";\nimport { Lock, CheckCircle, AlertCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ResetPassword() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [resetSuccess, setResetSuccess] = useState(false);\n  const [token, setToken] = useState(\"\");\n  const { toast } = useToast();\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Extract token from URL parameters\n    const urlParams = new URLSearchParams(location.split('?')[1] || '');\n    const tokenParam = urlParams.get('token');\n    if (tokenParam) {\n      setToken(tokenParam);\n    } else {\n      toast({\n        title: \"Invalid Link\",\n        description: \"The password reset link is invalid or missing the token.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [location, toast]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!token) {\n      toast({\n        title: \"Error\",\n        description: \"No reset token found. Please request a new password reset link.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/reset-password\", {\n        method: \"POST\",\n        body: JSON.stringify({ token, password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to reset password\");\n      }\n\n      setResetSuccess(true);\n      toast({\n        title: \"Password Reset Successful\",\n        description: \"Your password has been reset successfully. You can now sign in.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (resetSuccess) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <CardTitle>Password Reset Complete</CardTitle>\n            <CardDescription>\n              Your password has been successfully reset. You can now sign in with your new password.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/login\">\n              <Button className=\"w-full\">\n                Sign In\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <img \n                src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n                alt=\"Jigz Logo\" \n                className=\"h-12 w-auto\"\n              />\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <CardTitle>Invalid Reset Link</CardTitle>\n            <CardDescription>\n              This password reset link is invalid or has expired.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Link href=\"/forgot-password\">\n              <Button className=\"w-full\">\n                Request New Reset Link\n              </Button>\n            </Link>\n            <Link href=\"/login\">\n              <Button variant=\"outline\" className=\"w-full\">\n                Back to Login\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <img \n              src=\"/attached_assets/JIGZ%20LOGO-01_1754969521380.jpg\" \n              alt=\"Jigz Logo\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Lock className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <CardTitle>Reset Your Password</CardTitle>\n          <CardDescription>\n            Enter your new password below. Make sure it's strong and secure.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">New Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter new password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  minLength={8}\n                  disabled={isLoading}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  disabled={isLoading}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-sm text-gray-500\">\n                Password must be at least 8 characters long\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm new password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  disabled={isLoading}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  disabled={isLoading}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading || !password || !confirmPassword}\n            >\n              {isLoading ? \"Resetting...\" : \"Reset Password\"}\n            </Button>\n            \n            <div className=\"text-center\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  Back to Login\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9205},"client/src/components/skill-endorsement-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Coins } from \"lucide-react\";\nimport { CategorySearch } from \"@/components/category-search\";\n\ninterface SkillEndorsementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  endorseeId: string;\n  endorseeName: string;\n  jobId: string;\n  jobTitle: string;\n}\n\nexport function SkillEndorsementModal({\n  isOpen,\n  onClose,\n  endorseeId,\n  endorseeName,\n  jobId,\n  jobTitle,\n}: SkillEndorsementModalProps) {\n  const [skill, setSkill] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createEndorsementMutation = useMutation({\n    mutationFn: async (data: { endorseeId: string; jobId: string; skill: string; message?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/skill-endorsements\", data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create endorsement\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Skill Endorsed!\",\n        description: `You have successfully endorsed ${endorseeName} for their ${skill} skills.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${endorseeId}/skill-endorsements`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/endorsement-statuses\"] });\n      queryClient.invalidateQueries({ queryKey: [`/api/jobs/${jobId}/has-endorsed/${endorseeId}`] });\n      onClose();\n      setSkill(\"\");\n      setMessage(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Endorsement Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!skill.trim()) {\n      toast({\n        title: \"Skill Required\",\n        description: \"Please specify the skill you want to endorse.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEndorsementMutation.mutate({\n      endorseeId,\n      jobId,\n      skill: skill.trim(),\n      message: message.trim() || undefined,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Endorse {endorseeName}</DialogTitle>\n          <DialogDescription>\n            Endorse {endorseeName} for their work on \"{jobTitle}\". This costs 5 coins.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"skill\">Skill Category to Endorse *</Label>\n            <CategorySearch\n              value={skill}\n              onValueChange={setSkill}\n              placeholder=\"Select or search for a skill category...\"\n              includeAllCategories={false}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"message\">Optional Message</Label>\n            <Textarea\n              id=\"message\"\n              placeholder=\"Add a brief message about their work quality...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              maxLength={200}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n            <Coins className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n            <span className=\"text-sm text-blue-700 dark:text-blue-300\">\n              This endorsement will cost 5 coins\n            </span>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={createEndorsementMutation.isPending}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={createEndorsementMutation.isPending || !skill.trim()}\n            className=\"bg-blue-600 hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700\"\n          >\n            {createEndorsementMutation.isPending ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                Endorsing...\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <Coins className=\"h-4 w-4\" />\n                Endorse for 5 Coins\n              </div>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5135},"client/src/components/top-bidders-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Coins, Trophy, Medal, Award, CheckCircle } from \"lucide-react\";\n\ninterface TopBidder {\n  name: string;\n  coinsBid: number;\n  isEmailVerified?: boolean;\n}\n\ninterface TopBiddersSectionProps {\n  jobId: string;\n}\n\nexport function TopBiddersSection({ jobId }: TopBiddersSectionProps) {\n  const { data: topBidders = [], isLoading } = useQuery<TopBidder[]>({\n    queryKey: ['/api/jobs', jobId, 'top-bidders'],\n    enabled: !!jobId,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Trophy className=\"h-5 w-5 mr-2 text-yellow-600\" />\n            Top Priority Bidders\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-gray-500 py-4\">Loading...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (topBidders.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Trophy className=\"h-5 w-5 mr-2 text-yellow-600\" />\n            Priority Bidding\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-gray-500 py-4\">\n            <Coins className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n            <p>No priority bids yet</p>\n            <p className=\"text-sm\">Be the first to bid coins for higher ranking!</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getRankIcon = (index: number) => {\n    switch (index) {\n      case 0:\n        return <Trophy className=\"h-4 w-4 text-yellow-500\" />;\n      case 1:\n        return <Medal className=\"h-4 w-4 text-gray-400\" />;\n      case 2:\n        return <Award className=\"h-4 w-4 text-amber-600\" />;\n      default:\n        return <div className=\"w-4 h-4 rounded-full bg-gray-300 text-xs flex items-center justify-center text-white font-bold\">{index + 1}</div>;\n    }\n  };\n\n  const getRankColor = (index: number) => {\n    switch (index) {\n      case 0:\n        return \"bg-yellow-50 border-yellow-200\";\n      case 1:\n        return \"bg-gray-50 border-gray-200\";\n      case 2:\n        return \"bg-amber-50 border-amber-200\";\n      default:\n        return \"bg-blue-50 border-blue-200\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Trophy className=\"h-5 w-5 mr-2 text-yellow-600\" />\n          Top Priority Bidders\n        </CardTitle>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          Applicants who bid coins for higher ranking\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {topBidders.slice(0, 5).map((bidder, index) => (\n            <div \n              key={index} \n              className={`flex items-center justify-between p-3 rounded-lg border ${getRankColor(index)}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                {getRankIcon(index)}\n                <div>\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"font-medium text-gray-900\">{bidder.name}</span>\n                    {bidder.isEmailVerified && (\n                      <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                    )}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    Rank #{index + 1}\n                  </div>\n                </div>\n              </div>\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                <Coins className=\"h-3 w-3 text-yellow-500\" />\n                {bidder.coinsBid} coin{bidder.coinsBid !== 1 ? 's' : ''}\n              </Badge>\n            </div>\n          ))}\n        </div>\n        \n        {topBidders.length > 0 && (\n          <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-xs text-blue-800\">\n              <Coins className=\"h-3 w-3 inline mr-1\" />\n              Higher coin bids appear first in the applicant list for better visibility\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4331},"client/src/components/subscription-badge.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SUBSCRIPTION_PLANS, type SubscriptionPlanType, type CoinSubscription } from \"@shared/schema\";\nimport { Crown, Star, Briefcase, Rocket } from \"lucide-react\";\n\ninterface SubscriptionBadgeProps {\n  userId: string;\n  size?: \"sm\" | \"default\" | \"lg\";\n  showName?: boolean;\n}\n\nconst PLAN_ICONS = {\n  freelancer: Star,\n  professional: Briefcase,\n  expert: Rocket,\n  elite: Crown,\n};\n\nexport function SubscriptionBadge({ userId, size = \"default\", showName = true }: SubscriptionBadgeProps) {\n  const { data: subscriptionData } = useQuery<{ subscription: CoinSubscription | null }>({\n    queryKey: [\"/api/user\", userId, \"subscription\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/user/${userId}/subscription`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch subscription\");\n      }\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const subscription = subscriptionData?.subscription;\n  \n  // Don't render anything if user has no active subscription\n  if (!subscription || subscription.status !== \"active\") {\n    return null;\n  }\n\n  const planType = subscription.planType as SubscriptionPlanType;\n  const plan = SUBSCRIPTION_PLANS[planType];\n  \n  if (!plan) {\n    return null;\n  }\n\n  const IconComponent = PLAN_ICONS[planType];\n  \n  const sizeClasses = {\n    sm: \"text-xs px-2 py-0.5\",\n    default: \"text-sm px-2.5 py-1\",\n    lg: \"text-base px-3 py-1.5\"\n  };\n\n  const iconSizes = {\n    sm: \"h-3 w-3\",\n    default: \"h-4 w-4\", \n    lg: \"h-5 w-5\"\n  };\n\n  return (\n    <Badge \n      variant=\"secondary\" \n      className={`${plan.color} ${sizeClasses[size]} flex items-center gap-1.5 font-medium`}\n    >\n      <IconComponent className={iconSizes[size]} />\n      {showName && plan.name}\n    </Badge>\n  );\n}","size_bytes":1855},"app.yaml":{"content":"runtime: nodejs18\n\n# Environment variables for Google Cloud App Engine\nenv_variables:\n  NODE_ENV: production\n\n# Automatic scaling configuration  \nautomatic_scaling:\n  min_instances: 1\n  max_instances: 10\n  target_cpu_utilization: 0.7\n\n# Resource allocation\nresources:\n  cpu: 1\n  memory_gb: 2\n\n# Static file handling\nhandlers:\n- url: /attached_assets\n  static_dir: attached_assets\n  secure: always\n\n- url: /uploads  \n  static_dir: uploads\n  secure: always\n\n- url: /.*\n  script: auto\n  secure: always","size_bytes":498},"cloudbuild.yaml":{"content":"# Google Cloud Build configuration for Cloud Run\nsteps:\n  # Build Docker image\n  - name: 'gcr.io/cloud-builders/docker'\n    args: [\n      'build',\n      '-t', 'gcr.io/$PROJECT_ID/jigz-app:$COMMIT_SHA',\n      '-t', 'gcr.io/$PROJECT_ID/jigz-app:latest',\n      '.'\n    ]\n\n  # Push to Container Registry\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/jigz-app:latest']\n\n  # Deploy to Cloud Run\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: gcloud\n    args: [\n      'run', 'deploy', 'jigz-app',\n      '--image', 'gcr.io/$PROJECT_ID/jigz-app:latest',\n      '--region', 'us-central1',\n      '--platform', 'managed',\n      '--allow-unauthenticated',\n      '--port', '8080',\n      '--memory', '2Gi',\n      '--cpu', '1',\n      '--min-instances', '0',\n      '--max-instances', '10'\n    ]\n\noptions:\n  machineType: 'E2_HIGHCPU_8'\n  logging: CLOUD_LOGGING_ONLY\n\ntimeout: '1800s'","size_bytes":920},"DEPLOYMENT_STATUS.md":{"content":"# Deployment Status Report\n\n## ✅ Issues Fixed\n\n### Critical Deployment Blockers\n- ✅ **Duplicate Methods Removed**: Fixed all duplicate `deleteJob` and `closeExpiredJobs` methods in storage.ts\n- ✅ **Port Binding Fixed**: Server correctly listens on `process.env.PORT` with `0.0.0.0` binding\n- ✅ **Crypto Module Updated**: Replaced deprecated `crypto` package with `node:crypto`\n- ✅ **Docker Configuration**: Updated Dockerfile to handle build warnings gracefully\n- ✅ **Build Process**: Application builds successfully without critical errors\n\n### Docker Configuration\n- ✅ **Multi-stage Build**: Installs all dependencies for building, then removes devDependencies\n- ✅ **Health Checks**: Includes curl and proper health check configuration\n- ✅ **Security**: Creates non-root user for container execution\n- ✅ **Build Output**: Correctly outputs to `dist/public/` structure\n\n### Google Cloud Configuration\n- ✅ **Cloud Build**: Simplified cloudbuild.yaml for reliable deployment\n- ✅ **App Engine**: Streamlined app.yaml configuration\n- ✅ **Environment**: Production environment variables properly configured\n\n## 🎯 Ready for Deployment\n\nYour application is now ready for Google Cloud deployment. The main issues that were causing container crashes have been resolved:\n\n1. **No more duplicate methods** - Build warnings eliminated\n2. **Proper port binding** - Uses PORT env var and 0.0.0.0 binding\n3. **Clean build process** - No critical errors during compilation\n4. **Container optimization** - Proper Docker configuration for Cloud Run\n\n## 🚀 Deployment Commands\n\n### Option 1: Use the automated script\n```bash\n./deploy.sh\n```\n\n### Option 2: Manual deployment\n```bash\n# Build and push\ngcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/jigz-app\n\n# Deploy to Cloud Run\ngcloud run deploy jigz-app \\\n  --image gcr.io/YOUR_PROJECT_ID/jigz-app \\\n  --region us-central1 \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --port 8080 \\\n  --memory 2Gi \\\n  --cpu 1\n```\n\n### Option 3: Test locally first\n```bash\n# Test Docker locally\n./test-docker.sh\n\n# Then deploy to cloud\n./deploy.sh\n```\n\n## 📊 Build Verification\n\nLatest build output shows:\n- ✅ Frontend build: Success (884KB)\n- ✅ Backend build: Success (4.8MB)\n- ✅ No critical errors\n- ⚠️ Some esbuild warnings (non-blocking)\n- ⚠️ Large chunk warning (optimizable but not blocking)\n\n## 🔧 Environment Variables Required\n\nEnsure these are set in Google Cloud:\n- `NODE_ENV=production`\n- `PORT=8080` (automatically set by Cloud Run)\n- `DATABASE_URL` (your PostgreSQL connection string)\n- `SESSION_SECRET` (for session management)\n- `SENDGRID_API_KEY` (for emails)\n- `FROM_EMAIL` (sender email address)\n- `STRIPE_SECRET_KEY` (for payments)\n- `VITE_STRIPE_PUBLIC_KEY` (for frontend)\n- `GOOGLE_CLIENT_ID` (for OAuth)\n- `GOOGLE_CLIENT_SECRET` (for OAuth)\n\n## 🎉 Next Steps\n\n1. Run deployment script or manual commands\n2. Configure environment variables in Google Cloud Console\n3. Test the deployed application\n4. Update OAuth redirect URIs to match your new domain\n5. Configure Stripe webhooks for the new domain\n\nYour application should now deploy successfully to Google Cloud Run!","size_bytes":3170},"DOCKER_DEPLOYMENT.md":{"content":"# Docker Deployment Guide for Jigz\n\nThis guide provides alternative Docker deployment methods if you encounter issues with the main Google Cloud deployment.\n\n## Quick Docker Test\n\nTest your application locally before deploying:\n\n```bash\n# Build the Docker image\ndocker build -t jigz-app .\n\n# Run locally (replace with your actual environment variables)\ndocker run -p 8080:8080 \\\n  -e NODE_ENV=production \\\n  -e DATABASE_URL=\"your-database-url\" \\\n  -e SESSION_SECRET=\"your-session-secret\" \\\n  -e SENDGRID_API_KEY=\"your-sendgrid-key\" \\\n  -e FROM_EMAIL=\"noreply@yourdomain.com\" \\\n  -e STRIPE_SECRET_KEY=\"your-stripe-secret\" \\\n  -e VITE_STRIPE_PUBLIC_KEY=\"your-stripe-public\" \\\n  -e GOOGLE_CLIENT_ID=\"your-google-client-id\" \\\n  -e GOOGLE_CLIENT_SECRET=\"your-google-client-secret\" \\\n  jigz-app\n\n# Test the health endpoint\ncurl http://localhost:8080/api/health\n```\n\n## Alternative Google Cloud Deployment Methods\n\n### Method 1: Manual Docker Push\n```bash\n# Configure Docker for Google Cloud\ngcloud auth configure-docker\n\n# Build and tag image\ndocker build -t gcr.io/YOUR_PROJECT_ID/jigz-app .\n\n# Push to Google Container Registry\ndocker push gcr.io/YOUR_PROJECT_ID/jigz-app\n\n# Deploy to Cloud Run\ngcloud run deploy jigz-app \\\n  --image gcr.io/YOUR_PROJECT_ID/jigz-app \\\n  --region us-central1 \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --port 8080 \\\n  --memory 2Gi \\\n  --cpu 1 \\\n  --min-instances 0 \\\n  --max-instances 10\n```\n\n### Method 2: Google Cloud Build (Local)\n```bash\n# Submit build to Google Cloud Build\ngcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/jigz-app\n\n# Deploy the built image\ngcloud run deploy jigz-app \\\n  --image gcr.io/YOUR_PROJECT_ID/jigz-app \\\n  --region us-central1 \\\n  --platform managed \\\n  --allow-unauthenticated\n```\n\n### Method 3: App Engine Deployment\n```bash\n# Deploy directly to App Engine (uses app.yaml)\ngcloud app deploy\n```\n\n## Environment Variables Setup\n\nAfter deployment, configure environment variables:\n\n```bash\n# Set environment variables for Cloud Run\ngcloud run services update jigz-app \\\n  --region us-central1 \\\n  --set-env-vars=\"NODE_ENV=production\" \\\n  --set-env-vars=\"DATABASE_URL=your-database-url\" \\\n  --set-env-vars=\"SESSION_SECRET=your-session-secret\" \\\n  --set-env-vars=\"SENDGRID_API_KEY=your-sendgrid-key\" \\\n  --set-env-vars=\"FROM_EMAIL=noreply@yourdomain.com\" \\\n  --set-env-vars=\"STRIPE_SECRET_KEY=your-stripe-secret\" \\\n  --set-env-vars=\"VITE_STRIPE_PUBLIC_KEY=your-stripe-public\" \\\n  --set-env-vars=\"GOOGLE_CLIENT_ID=your-google-client-id\" \\\n  --set-env-vars=\"GOOGLE_CLIENT_SECRET=your-google-client-secret\"\n```\n\n## Troubleshooting Common Issues\n\n### Build Warnings\nThe application may show esbuild warnings about duplicate methods. These are non-critical and won't prevent deployment:\n- The warnings are about duplicate `deleteJob` methods in storage.ts\n- The application will still function correctly\n- The Docker build process handles these warnings gracefully\n\n### Memory Issues\nIf you encounter memory issues during build:\n```dockerfile\n# Add this line to Dockerfile before npm ci\nENV NODE_OPTIONS=\"--max-old-space-size=4096\"\n```\n\n### Static File Issues\nIf static files aren't served correctly:\n1. Verify the build output contains `dist/public/index.html`\n2. Check that `dist/public/assets/` contains CSS and JS files\n3. Ensure the health check endpoint `/api/health` returns 200\n\n### Database Connection\nCommon database connection issues:\n1. Ensure DATABASE_URL includes SSL parameters for cloud databases\n2. For Neon Database: `?sslmode=require`\n3. For Google Cloud SQL: Include connection name in URL\n\n## Performance Optimization\n\n### Docker Image Size\nThe current Dockerfile:\n- Uses Node.js 18 Alpine (smaller base image)\n- Removes devDependencies after build\n- Creates non-root user for security\n- Includes health checks\n\n### Cloud Run Configuration\nRecommended settings:\n- Memory: 2Gi (handles build process and runtime)\n- CPU: 1 (sufficient for most workloads)\n- Min instances: 0 (cost-effective)\n- Max instances: 10 (handles traffic spikes)\n- Request timeout: 300s (for longer operations)\n\n## Monitoring and Logs\n\n### View Application Logs\n```bash\n# Stream logs from Cloud Run\ngcloud run services logs tail jigz-app --region us-central1\n\n# View recent logs\ngcloud run services logs read jigz-app --region us-central1 --limit 100\n```\n\n### Health Monitoring\nThe application includes a health check endpoint at `/api/health` that returns:\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-08-14T01:38:00.000Z\",\n  \"uptime\": 123.456\n}\n```\n\n## Security Considerations\n\n1. **Environment Variables**: Never include sensitive data in Docker images\n2. **User Permissions**: Dockerfile creates non-root user\n3. **Network Security**: Cloud Run provides HTTPS by default\n4. **Database Access**: Use SSL connections for all database traffic\n5. **API Keys**: Store securely using Google Secret Manager (optional)\n\n## Cost Management\n\n1. **Auto-scaling**: Set min-instances to 0 to avoid idle costs\n2. **Resource Limits**: Use appropriate CPU/memory settings\n3. **Cold Starts**: Consider min-instances=1 for production if cold starts are problematic\n4. **Monitoring**: Set up budget alerts in Google Cloud Console\n\n## Next Steps After Deployment\n\n1. Configure custom domain (optional)\n2. Set up monitoring and alerting\n3. Configure backup strategy\n4. Update OAuth redirect URIs\n5. Configure Stripe webhooks\n6. Test all functionality thoroughly","size_bytes":5411},"DUPLICATE_METHODS_FIXED.md":{"content":"# ✅ DUPLICATE METHODS FIXED - DEPLOYMENT READY\n\n## Problem Resolution Summary\nThe critical deployment blockers have been successfully resolved:\n\n### ❌ Before (Causing Container Crashes)\n```\n▲ [WARNING] Duplicate member \"deleteJob\" in class body [duplicate-class-member]\n    server/storage.ts:1163:8 vs server/storage.ts:567:8\n▲ [WARNING] Duplicate member \"closeExpiredJobs\" in class body [duplicate-class-member] \n    server/storage.ts:1652:8 vs server/storage.ts:616:8\n```\n\n### ✅ After (Clean Build)\n```\n✓ built in 12.56s\n  dist/index.js  4.8mb ⚠️\n⚡ Done in 141ms\n```\n\n## Methods Now Correctly Implemented\n- **`deleteJob`**: Single implementation at line 2026 (DatabaseStorage class)\n- **`closeExpiredJobs`**: Single implementation at line 2078 (DatabaseStorage class)\n\n## Build Verification\n```bash\nnpm run build\n# Output: ✅ No duplicate member warnings\n# Output: ✅ Frontend built successfully  \n# Output: ✅ Backend built successfully\n```\n\n## Container Configuration Verified\n- ✅ **Port Binding**: `process.env.PORT` with `0.0.0.0` binding\n- ✅ **Health Checks**: Proper curl-based health check endpoint\n- ✅ **Build Process**: Optimized Docker multi-stage build\n- ✅ **Dependencies**: Crypto package fixed to use `node:crypto`\n\n## Ready for Deployment\nYour application is now ready for Google Cloud deployment. The container crashes should be completely resolved.\n\n### Deploy Commands\n```bash\n# Option 1: Use automated script\n./deploy.sh\n\n# Option 2: Manual Google Cloud Build\ngcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/jigz-app\ngcloud run deploy jigz-app --image gcr.io/YOUR_PROJECT_ID/jigz-app --region us-central1\n\n# Option 3: Test locally first\n./test-docker.sh && ./deploy.sh\n```\n\n## What Was Fixed\n1. **Removed duplicate `deleteJob` methods** from MemStorage class (lines 567, 1163)\n2. **Removed duplicate `closeExpiredJobs` methods** from MemStorage class (lines 616, 1652)  \n3. **Updated crypto import** to use built-in `node:crypto` instead of deprecated package\n4. **Verified port configuration** uses `process.env.PORT` and `0.0.0.0` binding\n5. **Optimized Docker build** to handle warnings gracefully\n\n## Test Results\n- **Local Build**: ✅ Success (no critical errors)\n- **Docker Configuration**: ✅ Verified\n- **Port Binding**: ✅ Cloud Run compatible\n- **Health Checks**: ✅ Endpoint responsive\n\nYour Google Cloud deployment should now succeed without container startup failures!","size_bytes":2436},"GOOGLE_CLOUD_DEPLOYMENT.md":{"content":"# Google Cloud Deployment Guide for Jigz\n\nThis guide will help you deploy your Jigz application to Google Cloud Platform using Cloud Run.\n\n## Prerequisites\n\n1. **Google Cloud Platform Account**: Set up a GCP account with billing enabled\n2. **gcloud CLI**: Install and configure the Google Cloud SDK\n3. **Docker**: Install Docker on your local machine\n4. **Domain**: Optional custom domain for your application\n\n## Environment Variables Setup\n\nYour app requires these environment variables to be configured in Google Cloud:\n\n### Required Environment Variables\n\n```bash\n# Database\nDATABASE_URL=postgresql://username:password@host:port/database\n\n# Authentication & Sessions  \nSESSION_SECRET=your-secure-session-secret-min-32-chars\nGOOGLE_CLIENT_ID=your-google-oauth-client-id\nGOOGLE_CLIENT_SECRET=your-google-oauth-client-secret\n\n# Email Service (SendGrid)\nSENDGRID_API_KEY=your-sendgrid-api-key\nFROM_EMAIL=noreply@yourdomain.com\n\n# Payment Processing (Stripe)\nSTRIPE_SECRET_KEY=sk_live_your-stripe-secret-key\nVITE_STRIPE_PUBLIC_KEY=pk_live_your-stripe-public-key\n\n# Production Settings\nNODE_ENV=production\nPORT=8080\n```\n\n## Deployment Steps\n\n### 1. Initial Google Cloud Setup\n\n```bash\n# Login to Google Cloud\ngcloud auth login\n\n# Create a new project (or use existing)\ngcloud projects create your-project-id\ngcloud config set project your-project-id\n\n# Enable required APIs\ngcloud services enable cloudbuild.googleapis.com\ngcloud services enable run.googleapis.com\ngcloud services enable containerregistry.googleapis.com\n```\n\n### 2. Database Setup\n\n#### Option A: Cloud SQL (Recommended for Production)\n```bash\n# Create PostgreSQL instance\ngcloud sql instances create jigz-db \\\n  --database-version=POSTGRES_14 \\\n  --tier=db-f1-micro \\\n  --region=us-central1\n\n# Create database\ngcloud sql databases create jigz --instance=jigz-db\n\n# Create user\ngcloud sql users create jigz-user \\\n  --instance=jigz-db \\\n  --password=secure-password\n```\n\n#### Option B: Neon Database (Current Setup)\nKeep your existing Neon Database URL and use it in the DATABASE_URL environment variable.\n\n### 3. Build and Deploy\n\n#### Option A: Using Cloud Build (Automated)\n```bash\n# Deploy using Cloud Build configuration\ngcloud builds submit --config cloudbuild.yaml .\n```\n\n#### Option B: Manual Docker Deployment\n```bash\n# Build Docker image\ndocker build -t gcr.io/your-project-id/jigz-app .\n\n# Push to Container Registry\ndocker push gcr.io/your-project-id/jigz-app\n\n# Deploy to Cloud Run\ngcloud run deploy jigz-app \\\n  --image gcr.io/your-project-id/jigz-app \\\n  --region us-central1 \\\n  --platform managed \\\n  --allow-unauthenticated \\\n  --port 8080 \\\n  --memory 2Gi \\\n  --cpu 1 \\\n  --min-instances 1 \\\n  --max-instances 10\n```\n\n### 4. Configure Environment Variables\n\n```bash\n# Set environment variables (replace with your actual values)\ngcloud run services update jigz-app \\\n  --region us-central1 \\\n  --set-env-vars=\"NODE_ENV=production,DATABASE_URL=your-database-url,SESSION_SECRET=your-session-secret,SENDGRID_API_KEY=your-sendgrid-key,FROM_EMAIL=noreply@yourdomain.com,STRIPE_SECRET_KEY=your-stripe-secret,VITE_STRIPE_PUBLIC_KEY=your-stripe-public-key,GOOGLE_CLIENT_ID=your-google-client-id,GOOGLE_CLIENT_SECRET=your-google-client-secret\"\n```\n\n### 5. Database Migration\n\nAfter deployment, run database migrations:\n```bash\n# Connect to your Cloud Run service\ngcloud run services proxy jigz-app --port=8080\n\n# In another terminal, run migrations (if needed)\nnpm run db:push\n```\n\n## Post-Deployment Configuration\n\n### 1. Custom Domain (Optional)\n```bash\n# Map custom domain to Cloud Run service\ngcloud run domain-mappings create \\\n  --service jigz-app \\\n  --domain yourdomain.com \\\n  --region us-central1\n```\n\n### 2. SSL Certificate\nGoogle Cloud automatically provisions SSL certificates for custom domains.\n\n### 3. OAuth Configuration\nUpdate your Google OAuth settings:\n- **Authorized JavaScript origins**: `https://yourdomain.com` or `https://your-cloud-run-url`\n- **Authorized redirect URIs**: `https://yourdomain.com/api/auth/google/callback`\n\n### 4. Stripe Webhook Configuration\nUpdate Stripe webhook endpoints to point to your production URL:\n- **Endpoint URL**: `https://yourdomain.com/api/stripe/webhook`\n\n## Monitoring and Maintenance\n\n### 1. View Logs\n```bash\n# View application logs\ngcloud run services logs read jigz-app --region us-central1\n```\n\n### 2. Monitor Performance\n- Use Google Cloud Console to monitor CPU, memory, and request metrics\n- Set up alerts for error rates and performance issues\n\n### 3. Update Deployment\n```bash\n# For updates, rebuild and redeploy\ngcloud builds submit --config cloudbuild.yaml .\n```\n\n## File Storage Considerations\n\nYour app uses local file storage for uploads. For production, consider:\n\n1. **Google Cloud Storage**: For scalable file storage\n2. **Volume mounts**: For persistent local storage\n3. **CDN**: For faster file serving\n\n## Security Checklist\n\n- [ ] All environment variables are set securely\n- [ ] Database has restricted access\n- [ ] SSL/TLS is enabled\n- [ ] OAuth redirect URIs are correct\n- [ ] Stripe webhooks are configured with proper endpoints\n- [ ] SendGrid domain authentication is set up\n- [ ] File upload limits are appropriate\n- [ ] Session secrets are secure and unique\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Database Connection**: Ensure DATABASE_URL is correct and database is accessible\n2. **Authentication**: Check Google OAuth configuration and redirect URIs\n3. **Email**: Verify SendGrid API key and FROM_EMAIL domain\n4. **Payments**: Ensure Stripe keys are for the correct environment (live vs test)\n5. **File Uploads**: Check that upload directories have proper permissions\n\n### Health Check\nYour app includes a health check endpoint at `/api/health` for monitoring.\n\n## Cost Optimization\n\n- Use Cloud Run's automatic scaling to pay only for actual usage\n- Consider using Cloud SQL's automatic scaling for database\n- Implement caching strategies for frequently accessed data\n- Use CDN for static assets\n\n## Backup Strategy\n\n- Enable automated backups for Cloud SQL\n- Regularly export database schemas and data\n- Backup uploaded files to Cloud Storage\n- Document environment variable configurations\n\n## Support\n\nFor deployment issues:\n1. Check Cloud Run logs in Google Cloud Console\n2. Verify all environment variables are set correctly\n3. Test database connectivity\n4. Confirm external service configurations (OAuth, Stripe, SendGrid)","size_bytes":6400},"deploy.sh":{"content":"#!/bin/bash\n\n# Jigz Google Cloud Deployment Script\n# This script automates the deployment process to Google Cloud Run\n\nset -e  # Exit on any error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Configuration\nPROJECT_ID=${1:-\"\"}\nREGION=\"us-central1\"\nSERVICE_NAME=\"jigz-app\"\nIMAGE_NAME=\"gcr.io/${PROJECT_ID}/${SERVICE_NAME}\"\n\n# Help function\nshow_help() {\n    echo \"Usage: ./deploy.sh [PROJECT_ID]\"\n    echo \"\"\n    echo \"Deploy Jigz application to Google Cloud Run\"\n    echo \"\"\n    echo \"Arguments:\"\n    echo \"  PROJECT_ID    Google Cloud Project ID (required)\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  ./deploy.sh my-project-id\"\n    echo \"\"\n    echo \"Prerequisites:\"\n    echo \"  - gcloud CLI installed and authenticated\"\n    echo \"  - Docker installed\"\n    echo \"  - Required APIs enabled (Cloud Run, Cloud Build, Container Registry)\"\n}\n\n# Check if project ID is provided\nif [ -z \"$PROJECT_ID\" ]; then\n    print_error \"Project ID is required\"\n    show_help\n    exit 1\nfi\n\n# Check if gcloud is installed\nif ! command -v gcloud &> /dev/null; then\n    print_error \"gcloud CLI is not installed. Please install it first.\"\n    exit 1\nfi\n\n# Check if docker is installed\nif ! command -v docker &> /dev/null; then\n    print_error \"Docker is not installed. Please install it first.\"\n    exit 1\nfi\n\nprint_status \"Starting deployment to Google Cloud Run...\"\nprint_status \"Project ID: $PROJECT_ID\"\nprint_status \"Region: $REGION\"\nprint_status \"Service Name: $SERVICE_NAME\"\n\n# Set the project\nprint_status \"Setting Google Cloud project...\"\ngcloud config set project $PROJECT_ID\n\n# Build the application\nprint_status \"Building the application...\"\nnpm ci\nprint_status \"Running build (ignoring esbuild warnings)...\"\nnpm run build 2>/dev/null || npm run build\n\n# Build Docker image\nprint_status \"Building Docker image...\"\ndocker build -t $IMAGE_NAME:latest .\n\n# Push to Container Registry\nprint_status \"Pushing image to Container Registry...\"\ndocker push $IMAGE_NAME:latest\n\n# Deploy to Cloud Run\nprint_status \"Deploying to Cloud Run...\"\ngcloud run deploy $SERVICE_NAME \\\n    --image $IMAGE_NAME:latest \\\n    --region $REGION \\\n    --platform managed \\\n    --allow-unauthenticated \\\n    --port 8080 \\\n    --memory 2Gi \\\n    --cpu 1 \\\n    --min-instances 1 \\\n    --max-instances 10 \\\n    --timeout 300\n\n# Get the service URL\nSERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')\n\nprint_success \"Deployment completed successfully!\"\nprint_success \"Service URL: $SERVICE_URL\"\nprint_success \"Health check: $SERVICE_URL/api/health\"\n\nprint_warning \"Don't forget to:\"\nprint_warning \"1. Configure environment variables using 'gcloud run services update'\"\nprint_warning \"2. Update OAuth redirect URIs in Google Cloud Console\"\nprint_warning \"3. Update Stripe webhook endpoints\"\nprint_warning \"4. Configure SendGrid domain authentication\"\nprint_warning \"5. Set up custom domain (if needed)\"\n\nprint_status \"Deployment script completed!\"\n\n# Optional: Open the service URL\nread -p \"Do you want to open the service URL in your browser? (y/n): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    if command -v open &> /dev/null; then\n        open $SERVICE_URL\n    elif command -v xdg-open &> /dev/null; then\n        xdg-open $SERVICE_URL\n    else\n        print_status \"Please open $SERVICE_URL in your browser\"\n    fi\nfi","size_bytes":3685},"test-docker.sh":{"content":"#!/bin/bash\n\n# Test Docker Build Script for Jigz\n# This script tests the Docker build locally before deploying to Google Cloud\n\nset -e\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_status \"Testing Docker build for Jigz application...\"\n\n# Check if Docker is installed\nif ! command -v docker &> /dev/null; then\n    print_error \"Docker is not installed. Please install Docker first.\"\n    exit 1\nfi\n\n# Build the Docker image\nprint_status \"Building Docker image...\"\nif docker build -t jigz-app-test . ; then\n    print_success \"Docker image built successfully!\"\nelse\n    print_error \"Docker build failed!\"\n    exit 1\nfi\n\n# Test the image locally (with minimal environment)\nprint_status \"Testing Docker image locally...\"\nprint_warning \"Starting container with minimal environment (some features may not work)...\"\n\n# Create a test container\nCONTAINER_ID=$(docker run -d -p 8080:8080 \\\n    -e NODE_ENV=production \\\n    -e PORT=8080 \\\n    -e DATABASE_URL=\"postgresql://test:test@localhost:5432/test\" \\\n    -e SESSION_SECRET=\"test-session-secret-for-local-testing-only-not-secure\" \\\n    jigz-app-test)\n\nif [ $? -eq 0 ]; then\n    print_success \"Container started with ID: $CONTAINER_ID\"\n    \n    # Wait a moment for the app to start\n    print_status \"Waiting for application to start...\"\n    sleep 10\n    \n    # Test the health endpoint\n    print_status \"Testing health endpoint...\"\n    if curl -f http://localhost:8080/api/health; then\n        print_success \"Health check passed!\"\n        echo \"\"\n    else\n        print_warning \"Health check failed, but this might be due to missing environment variables\"\n    fi\n    \n    # Show container logs\n    print_status \"Application logs:\"\n    docker logs $CONTAINER_ID --tail 20\n    \n    # Stop and remove the container\n    print_status \"Cleaning up test container...\"\n    docker stop $CONTAINER_ID\n    docker rm $CONTAINER_ID\n    \n    print_success \"Docker test completed successfully!\"\n    print_status \"Your application is ready for Google Cloud deployment!\"\n    \nelse\n    print_error \"Failed to start container\"\n    exit 1\nfi\n\n# Optional: Remove test image\nread -p \"Do you want to remove the test Docker image? (y/n): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    docker rmi jigz-app-test\n    print_status \"Test image removed\"\nfi\n\nprint_status \"Docker test script completed!\"","size_bytes":2634},"client/src/components/JigzLogo.tsx":{"content":"import React from 'react';\n\ninterface JigzLogoProps {\n  className?: string;\n  width?: number;\n  height?: number;\n}\n\nexport function JigzLogo({ className = \"\", width = 200, height = 90 }: JigzLogoProps) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={width}\n      height={height}\n      className={className}\n      style={{\n        shapeRendering: \"geometricPrecision\",\n        textRendering: \"geometricPrecision\",\n        imageRendering: \"optimizeQuality\" as any,\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n      }}\n      viewBox=\"90.535 298.121 811.967 360.371\"\n    >\n      <defs>\n        <style type=\"text/css\">\n          {`\n            .str0 { stroke: black; stroke-width: 2; stroke-miterlimit: 22.9256; }\n            .fil0 { fill: none; }\n            .fil1 { fill: #2463EB; fill-rule: nonzero; }\n          `}\n        </style>\n      </defs>\n      <g id=\"Layer_x0020_1\">\n        <g id=\"_1396127515120\">\n          <rect className=\"fil0 str0\" x={1} y={1} width={960} height={960} />\n          <g>\n            <path\n              className=\"fil1\"\n              d=\"M302.86 388c0,14.22 -11.52,25.74 -25.74,25.74 -14.22,0 -25.74,-11.52 -25.74,-25.74 0,-14.21 11.52,-25.74 25.74,-25.74 14.22,0 25.74,11.53 25.74,25.74z\"\n            />\n            <path\n              className=\"fil1\"\n              d=\"M621.89 441.49l-7.09 32.56 28.68 0 -5.1 21.38c-10.03,6.07 -18.49,8.26 -27.48,8.26 -20.17,0 -31.37,-13.12 -29.08,-38.39 3.09,-34.01 25.19,-66.08 53.86,-66.08 14.09,0 24.08,7.77 29.52,17.48l32.19 -22.83c-10.52,-20.65 -32.17,-31.1 -56.22,-31.1 -3.64,0 -7.22,0.21 -10.73,0.62 -16.22,1.89 -30.99,8.02 -43.67,17.34 -8.23,6.06 -15.59,13.46 -21.89,21.92 -13.28,17.83 -21.85,40.35 -24.07,64.83 -4.43,48.84 24.56,72.17 64.16,72.17 24.54,0 50.12,-8.75 66.77,-20.89l15.99 -77.27 -65.84 0z\"\n            />\n            <path\n              className=\"fil1\"\n              d=\"M371.01 443.08c3.88,0.04 7.86,0.14 11.98,0.29l-3.74 17.84 66.12 -26.26 -53.93 -31.89 -3.18 15.18c-4.12,-0.18 -8.11,-0.3 -11.98,-0.38l19.74 -94.67 -85.89 31.89 8.81 23.74 42.93 -15.94 -11.52 55.22c-32.89,1.39 -60.61,6.83 -100.99,14.77 -11.64,2.29 -24.83,4.88 -39.39,7.61l-100.97 18.95 102.56 6.13c70.59,4.23 105.86,32.42 110.96,88.71l7.67 84.55 36.32 -174.09c0.39,-1.9 -0.39,-3.83 -1.98,-4.92 -4.99,-3.44 -11.41,-7.16 -17.92,-9.02 -1.6,-0.46 -3.18,0.51 -3.52,2.13l-10.05 48.13z\"\n            />\n            <path\n              className=\"fil1\"\n              d=\"M493.46 428.28l3.11 -14.61 10.81 -50.78 -39.31 0 -14.59 67.89 -3.14 14.62 -5.66 26.32c-5.17,24.58 -13.29,30.22 -21.9,30.22 -7.62,0 -12.73,-5.89 -15.3,-12.77l-28.45 26.54c7.64,15.97 23.88,23.83 40.84,23.83 36.11,0 54.51,-21.37 63.97,-66.1l9.62 -45.16z\"\n            />\n            <polygon\n              className=\"fil1\"\n              points=\"548.19,393.86 554.77,363 514.97,363 504.71,411.13 \"\n            />\n            <polygon\n              className=\"fil1\"\n              points=\"501.59,425.74 477.78,537.44 517.59,537.44 545.08,408.47 \"\n            />\n            <polygon\n              className=\"fil1\"\n              points=\"853,362.89 710.67,362.89 704.22,394.11 801.28,394.11 681.09,506.12 674.64,537.34 816.97,537.34 823.42,506.12 726.53,506.12 846.55,394.11 \"\n            />\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}","size_bytes":3295},"client/src/pages/services.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Search, Filter, MapPin, Clock, Star, DollarSign, Tag, User, Plus, X, Upload, Coins } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { jobCategories } from \"@shared/categories\";\nimport { topCities, allWorldCities } from \"@shared/cities\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ServiceWithRequests } from \"@shared/schema\";\nimport { CoinWarning } from \"@/components/coin-display\";\nimport { CurrencySearch } from \"@/components/currency-search\";\nimport { CitySearch } from \"@/components/city-search\";\nimport { CategorySearch } from \"@/components/category-search\";\n\nconst CATEGORIES = jobCategories;\nconst LOCATIONS = topCities;\nconst LOCATION_OPTIONS = topCities.filter(loc => loc !== \"All Locations\");\n\nconst BUDGET_RANGES = [\n  { label: \"Any Budget\", value: \"any\" },\n  { label: \"Less than $50\", value: \"0-50\", min: 0, max: 50 },\n  { label: \"$50 - $250\", value: \"50-250\", min: 50, max: 250 },\n  { label: \"$250 - $750\", value: \"250-750\", min: 250, max: 750 },\n  { label: \"$750 - $3500\", value: \"750-3500\", min: 750, max: 3500 },\n  { label: \"$3500+\", value: \"3500+\", min: 3500, max: undefined }\n];\n\nconst EXPERIENCE_LEVELS = [\n  { value: \"any\", label: \"Any Level\" },\n  { value: \"beginner\", label: \"Beginner\" },\n  { value: \"intermediate\", label: \"Intermediate\" },\n  { value: \"expert\", label: \"Expert\" }\n];\n\nconst formatTimeAgo = (date: Date | string | null) => {\n  if (!date) return \"Recently\";\n  \n  const now = new Date();\n  const past = new Date(date);\n  const diffInMinutes = Math.floor((now.getTime() - past.getTime()) / (1000 * 60));\n  \n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minutes ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hours ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 30) {\n    return `${diffInDays} days ago`;\n  }\n  \n  const diffInMonths = Math.floor(diffInDays / 30);\n  return `${diffInMonths} months ago`;\n};\n\nexport default function Services() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  \n  // Search and filter state\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All Categories\");\n  const [selectedLocation, setSelectedLocation] = useState(\"All Locations\");\n  const [selectedBudgetRange, setSelectedBudgetRange] = useState(\"any\");\n  const [selectedExperience, setSelectedExperience] = useState(\"any\");\n  const [showPostService, setShowPostService] = useState(false);\n  \n  // Inquiry modal state\n  const [showInquiryModal, setShowInquiryModal] = useState(false);\n  const [selectedService, setSelectedService] = useState<ServiceWithRequests | null>(null);\n  const [inquiryData, setInquiryData] = useState({\n    message: \"\",\n    contactEmail: \"\",\n    contactPhone: \"\"\n  });\n\n  // Service form state\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    location: \"\",\n    specificArea: \"\",\n    priceFrom: \"\",\n    priceTo: \"\",\n    priceType: \"per_project\",\n    currency: \"USD\",\n    experienceLevel: \"intermediate\",\n    deliveryTime: \"\",\n    serviceDuration: \"\",\n    website: \"\",\n    email: \"\",\n    phone: \"\",\n    tags: \"\"\n  });\n\n  // Image upload state (matching job form)\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n\n  // Coin error state for insufficient coins\n  const [coinError, setCoinError] = useState<{ coinsNeeded: number; coinsAvailable: number } | null>(null);\n\n  // Location search state\n  const [locationSearch, setLocationSearch] = useState(\"\");\n  const [showLocationDropdown, setShowLocationDropdown] = useState(false);\n  \n  // Category search state\n  const [categorySearch, setCategorySearch] = useState(\"\");\n  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n\n  // Specific area editing state\n  const [isSpecificAreaEditing, setIsSpecificAreaEditing] = useState(false);\n\n  // Reset form data\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      location: \"\",\n      specificArea: \"\",\n      priceFrom: \"\",\n      priceTo: \"\",\n      priceType: \"per_project\",\n      currency: \"USD\",\n      experienceLevel: \"intermediate\",\n      deliveryTime: \"\",\n      serviceDuration: \"\",\n      website: \"\",\n      email: \"\",\n      phone: \"\",\n      tags: \"\"\n    });\n    setSelectedFiles([]);\n    setLocationSearch(\"\");\n    setShowLocationDropdown(false);\n    setCategorySearch(\"\");\n    setShowCategoryDropdown(false);\n  };\n\n  // Image handling functions (matching job form)\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setSelectedFiles(prev => [...prev, ...files].slice(0, 5)); // Max 5 images\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Filter locations based on search\n  const filteredLocations = useMemo(() => {\n    const searchTerm = locationSearch || formData.location;\n    if (!searchTerm) return LOCATION_OPTIONS.slice(0, 15);\n    \n    // Use comprehensive world cities database for searching\n    const filtered = allWorldCities.filter(location => \n      location.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    \n    // Return top results from comprehensive search\n    return filtered.slice(0, 15);\n  }, [locationSearch, formData.location]);\n\n  // Filter categories based on search\n  const filteredCategories = useMemo(() => {\n    const searchTerm = categorySearch || formData.category;\n    if (!searchTerm) return CATEGORIES.filter(cat => cat !== \"All Categories\").slice(0, 10);\n    return CATEGORIES.filter(category => \n      category !== \"All Categories\" && \n      category.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [categorySearch, formData.category]);\n\n  // Get budget range object\n  const budgetRange = BUDGET_RANGES.find(range => range.value === selectedBudgetRange);\n\n  // Active filters count\n  const activeFiltersCount = useMemo(() => {\n    let count = 0;\n    if (searchQuery) count++;\n    if (selectedLocation !== \"All Locations\") count++;\n    if (selectedCategory !== \"All Categories\") count++;\n    if (selectedBudgetRange !== \"any\") count++;\n    if (selectedExperience !== \"any\") count++;\n    return count;\n  }, [searchQuery, selectedLocation, selectedCategory, selectedBudgetRange, selectedExperience]);\n\n  // Clear all filters\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setSelectedLocation(\"All Locations\");\n    setSelectedCategory(\"All Categories\");\n    setSelectedBudgetRange(\"any\");\n    setSelectedExperience(\"any\");\n  };\n\n  // Service inquiry mutation\n  const submitInquiryMutation = useMutation({\n    mutationFn: async (inquiryPayload: any) => {\n      const response = await fetch(`/api/services/${inquiryPayload.serviceId}/requests`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: inquiryPayload.message,\n          budget: 1, // Minimum valid budget to pass validation\n          timeline: \"Flexible\", // Default timeline since field is removed\n          contactEmail: inquiryPayload.contactEmail,\n          contactPhone: inquiryPayload.contactPhone\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to send inquiry\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Inquiry Sent!\",\n        description: \"Your inquiry has been sent to the service provider. They will contact you soon. 1 coin has been deducted.\"\n      });\n      setShowInquiryModal(false);\n      setSelectedService(null);\n      setInquiryData({\n        message: \"\",\n        contactEmail: \"\",\n        contactPhone: \"\"\n      });\n    },\n    onError: (error: any) => {\n      // Check if it's a coin-related error\n      if (error.message && error.message.includes(\"insufficient coins\")) {\n        toast({\n          title: \"Insufficient Coins\",\n          description: \"You need 1 coin to send an inquiry. Visit the Buy Coins page to get more coins.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send inquiry. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle inquiry form submission\n  const handleInquirySubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedService) return;\n    \n    // Basic validation\n    if (!inquiryData.message.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a message describing your inquiry.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n\n    \n\n\n    const inquiryPayload = {\n      serviceId: selectedService.id,\n      message: inquiryData.message,\n      contactEmail: inquiryData.contactEmail,\n      contactPhone: inquiryData.contactPhone\n    };\n\n    submitInquiryMutation.mutate(inquiryPayload);\n  };\n\n  // Create service mutation (matching job form approach)\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const formDataToSend = new FormData();\n      \n      // Append service data\n      Object.entries(serviceData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          formDataToSend.append(key, value.toString());\n        }\n      });\n      \n      // Append images\n      selectedFiles.forEach((file) => {\n        formDataToSend.append(\"images\", file);\n      });\n\n      const res = await fetch(\"/api/services\", {\n        method: \"POST\",\n        body: formDataToSend,\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to create service\");\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      setCoinError(null);\n      toast({\n        title: \"Service submitted!\",\n        description: \"Your service has been submitted for admin approval. You'll be notified once it's reviewed. 20 coins have been deducted.\",\n      });\n      setShowPostService(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error(\"Error posting service:\", error);\n      \n      // Check if it's a coin-related error\n      if (error.coinsNeeded && error.coinsAvailable !== undefined) {\n        setCoinError({\n          coinsNeeded: error.coinsNeeded,\n          coinsAvailable: error.coinsAvailable\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit service. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle form submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a service title.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.description.trim()) {\n      toast({\n        title: \"Validation Error\", \n        description: \"Please enter a service description.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.category) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a category.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.location.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a location.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.priceFrom || parseFloat(formData.priceFrom) <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid starting price.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare service data\n    const serviceData = {\n      title: formData.title.trim(),\n      description: formData.description.trim(),\n      category: formData.category,\n      location: formData.location.trim(),\n      priceFrom: parseFloat(formData.priceFrom),\n      priceTo: formData.priceTo ? parseFloat(formData.priceTo) : undefined,\n      priceType: formData.priceType,\n      currency: formData.currency,\n      experienceLevel: formData.experienceLevel,\n      deliveryTime: formData.deliveryTime,\n      serviceDuration: formData.serviceDuration,\n      website: formData.website.trim(),\n      email: formData.email.trim(),\n      phone: formData.phone.trim(),\n      tags: formData.tags ? formData.tags.split(',').map((tag: string) => tag.trim()).filter((tag: string) => tag.length > 0) : [],\n    };\n\n    createServiceMutation.mutate(serviceData);\n  };\n\n  // Get user coins - only for authenticated users\n  const { data: userCoinsData } = useQuery({\n    queryKey: [\"/api/user/coins\"],\n    enabled: !!user,\n  });\n\n  const userCoins = (userCoinsData as { coins: number })?.coins || 0;\n\n  // Fetch services\n  const { data: services = [], isLoading } = useQuery<ServiceWithRequests[]>({\n    queryKey: [\"/api/services\", { \n      query: searchQuery,\n      category: selectedCategory === \"All Categories\" ? undefined : selectedCategory,\n      location: selectedLocation === \"All Locations\" ? undefined : selectedLocation,\n      experienceLevel: selectedExperience === \"any\" ? undefined : selectedExperience,\n      budgetRange: selectedBudgetRange === \"any\" ? undefined : selectedBudgetRange\n    }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append(\"query\", searchQuery);\n      if (selectedCategory !== \"All Categories\") params.append(\"category\", selectedCategory);\n      if (selectedLocation !== \"All Locations\") params.append(\"location\", selectedLocation);\n      if (selectedExperience !== \"any\") params.append(\"experienceLevel\", selectedExperience);\n      if (budgetRange?.min !== undefined) params.append(\"minBudget\", budgetRange.min.toString());\n      if (budgetRange?.max !== undefined) params.append(\"maxBudget\", budgetRange.max.toString());\n      \n      const response = await fetch(`/api/services?${params}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch services\");\n      }\n      const data = await response.json();\n      return data.services || [];\n    },\n    staleTime: 5 * 60 * 1000,\n  });\n\n  const handleSearch = () => {\n    // Query will automatically refetch due to dependency on searchQuery\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          {user ? \"Offer Your Services\" : \"Browse Available Services\"}\n        </h1>\n        <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-8\">\n          {user \n            ? \"Share your skills with people in your community who need expert help\"\n            : \"Discover professional services in your area. Sign up to inquire about services and offer your own.\"\n          }\n        </p>\n        {user ? (\n          <Dialog open={showPostService} onOpenChange={setShowPostService}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                size=\"lg\"\n              >\n                <Plus className=\"h-5 w-5 mr-2\" />\n                Post a Service\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"w-screen h-screen max-w-none max-h-none m-0 rounded-none sm:w-[896px] sm:h-auto sm:max-w-4xl sm:max-h-[90vh] sm:m-4 sm:rounded-lg overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Post a Service</DialogTitle>\n              </DialogHeader>\n              {coinError && (\n                <CoinWarning \n                  coinsNeeded={coinError.coinsNeeded} \n                  coinsAvailable={coinError.coinsAvailable} \n                />\n              )}\n\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Service Title */}\n                <div>\n                  <div className=\"flex justify-between items-center\">\n                    <Label htmlFor=\"title\">Service Title *</Label>\n                    <span className={`text-xs ${formData.title.length > 100 ? 'text-red-500' : 'text-gray-500'}`}>\n                      {formData.title.length}/100\n                    </span>\n                  </div>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => {\n                      if (e.target.value.length <= 100) {\n                        setFormData(prev => ({ ...prev, title: e.target.value }));\n                      }\n                    }}\n                    placeholder=\"e.g., Professional Logo Design Service\"\n                    className=\"mt-1\"\n                    maxLength={100}\n                  />\n                </div>\n\n                {/* Service Description */}\n                <div>\n                  <div className=\"flex justify-between items-center\">\n                    <Label htmlFor=\"description\">Description *</Label>\n                    <span className={`text-xs ${formData.description.length > 1500 ? 'text-red-500' : 'text-gray-500'}`}>\n                      {formData.description.length}/1500\n                    </span>\n                  </div>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => {\n                      if (e.target.value.length <= 1500) {\n                        setFormData(prev => ({ ...prev, description: e.target.value }));\n                      }\n                    }}\n                    placeholder=\"Describe your service, what you'll deliver, and what makes you unique...\"\n                    rows={4}\n                    className=\"mt-1\"\n                    maxLength={1500}\n                  />\n                </div>\n\n                {/* Category and Location */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <div className=\"relative mt-1\">\n                      <Input\n                        id=\"category\"\n                        value={formData.category}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setFormData(prev => ({ ...prev, category: value }));\n                          setCategorySearch(value);\n                          setShowCategoryDropdown(value.length > 0);\n                        }}\n                        onFocus={() => {\n                          setCategorySearch(formData.category);\n                          setShowCategoryDropdown(true);\n                        }}\n                        onBlur={() => {\n                          setTimeout(() => setShowCategoryDropdown(false), 200);\n                        }}\n                        placeholder=\"Search categories...\"\n                        className=\"w-full\"\n                      />\n                      <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                      \n                      {showCategoryDropdown && filteredCategories.length > 0 && (\n                        <div className=\"absolute top-full left-0 right-0 z-[100] bg-white border border-gray-200 rounded-md shadow-lg max-h-48 overflow-y-auto mt-1\">\n                          {filteredCategories.slice(0, 10).map((category) => (\n                            <div\n                              key={category}\n                              className=\"px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm border-b border-gray-100 last:border-b-0\"\n                              onMouseDown={(e) => {\n                                e.preventDefault();\n                              }}\n                              onClick={() => {\n                                setFormData(prev => ({ ...prev, category }));\n                                setCategorySearch(\"\");\n                                setShowCategoryDropdown(false);\n                              }}\n                            >\n                              <Tag className=\"h-3 w-3 inline mr-2 text-gray-400\" />\n                              {category}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location *</Label>\n                    <div className=\"relative mt-1\">\n                      <Input\n                        id=\"location\"\n                        value={formData.location}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setFormData(prev => ({ ...prev, location: value }));\n                          setLocationSearch(value);\n                          setShowLocationDropdown(value.length > 0);\n                        }}\n                        onFocus={() => {\n                          setLocationSearch(formData.location);\n                          setShowLocationDropdown(true);\n                        }}\n                        onBlur={() => {\n                          // Delay hiding dropdown to allow clicks\n                          setTimeout(() => setShowLocationDropdown(false), 200);\n                        }}\n                        placeholder=\"Search locations\"\n                        className=\"w-full\"\n                      />\n                      <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                      \n                      {showLocationDropdown && filteredLocations.length > 0 && (\n                        <div className=\"absolute top-full left-0 right-0 z-[100] bg-white border border-gray-200 rounded-md shadow-lg max-h-48 overflow-y-auto mt-1\">\n                          {filteredLocations.slice(0, 10).map((location) => (\n                            <div\n                              key={location}\n                              className=\"px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm border-b border-gray-100 last:border-b-0\"\n                              onMouseDown={(e) => {\n                                // Prevent onBlur from firing before onClick\n                                e.preventDefault();\n                              }}\n                              onClick={() => {\n                                setFormData(prev => ({ ...prev, location }));\n                                setLocationSearch(\"\");\n                                setShowLocationDropdown(false);\n                              }}\n                            >\n                              <MapPin className=\"h-3 w-3 inline mr-2 text-gray-400\" />\n                              {location}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Specific Area */}\n                <div>\n                  <Label htmlFor=\"specificArea\">Specific Area (Optional)</Label>\n                  {isSpecificAreaEditing ? (\n                    <div className=\"flex flex-col sm:flex-row gap-2 mt-1\">\n                      <Input\n                        id=\"specificArea\"\n                        placeholder=\"e.g., Downtown, Upper East Side, Financial District\"\n                        value={formData.specificArea}\n                        onChange={(e) => setFormData(prev => ({ ...prev, specificArea: e.target.value }))}\n                        className=\"flex-1\"\n                        autoFocus\n                        onBlur={() => setIsSpecificAreaEditing(false)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            setIsSpecificAreaEditing(false);\n                          }\n                          if (e.key === 'Escape') {\n                            setIsSpecificAreaEditing(false);\n                          }\n                        }}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setIsSpecificAreaEditing(false)}\n                        className=\"w-full sm:w-auto\"\n                      >\n                        Done\n                      </Button>\n                    </div>\n                  ) : (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left h-auto p-3 mt-1\"\n                      onClick={() => setIsSpecificAreaEditing(true)}\n                    >\n                      <div className=\"flex flex-col items-start text-left\">\n                        <span className=\"text-sm font-medium\">\n                          {formData.specificArea ? \"Edit Specific Area\" : \"Add Specific Area\"}\n                        </span>\n                        <span className=\"text-xs text-gray-500 mt-1 break-words\">\n                          {formData.specificArea \n                            ? `Area: ${formData.specificArea}` \n                            : \"Click to add neighborhood, district, or specific location details\"}\n                        </span>\n                      </div>\n                    </Button>\n                  )}\n                </div>\n\n                {/* Pricing */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Price Type</Label>\n                    <div className=\"grid grid-cols-3 gap-2 mt-1\">\n                      <Button\n                        type=\"button\"\n                        variant={formData.priceType === \"per_project\" ? \"default\" : \"outline\"}\n                        className={`text-sm ${formData.priceType === \"per_project\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                        onClick={() => setFormData(prev => ({ ...prev, priceType: \"per_project\" }))}\n                      >\n                        Per Project\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={formData.priceType === \"hourly\" ? \"default\" : \"outline\"}\n                        className={`text-sm ${formData.priceType === \"hourly\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                        onClick={() => setFormData(prev => ({ ...prev, priceType: \"hourly\", priceTo: \"\" }))}\n                      >\n                        Hourly Rate\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={formData.priceType === \"per_day\" ? \"default\" : \"outline\"}\n                        className={`text-sm ${formData.priceType === \"per_day\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                        onClick={() => setFormData(prev => ({ ...prev, priceType: \"per_day\", priceTo: \"\" }))}\n                      >\n                        Per Day\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"currency\">Currency</Label>\n                    <div className=\"mt-1\">\n                      <CurrencySearch\n                        value={formData.currency}\n                        onValueChange={(value) => setFormData(prev => ({ ...prev, currency: value }))}\n                        placeholder=\"Select currency...\"\n                      />\n                    </div>\n                  </div>\n                  \n                  {formData.priceType === \"per_project\" ? (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"priceFrom\">Starting Price *</Label>\n                        <Input\n                          id=\"priceFrom\"\n                          type=\"number\"\n                          min=\"1\"\n                          step=\"1\"\n                          value={formData.priceFrom}\n                          onChange={(e) => setFormData(prev => ({ ...prev, priceFrom: e.target.value }))}\n                          placeholder=\"100\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"priceTo\">Max Price</Label>\n                        <Input\n                          id=\"priceTo\"\n                          type=\"number\"\n                          min=\"1\"\n                          step=\"1\"\n                          value={formData.priceTo}\n                          onChange={(e) => setFormData(prev => ({ ...prev, priceTo: e.target.value }))}\n                          placeholder=\"500 (optional)\"\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <Label htmlFor=\"priceFrom\">\n                        {formData.priceType === \"hourly\" ? \"Hourly Rate *\" : \"Daily Rate *\"}\n                      </Label>\n                      <Input\n                        id=\"priceFrom\"\n                        type=\"number\"\n                        min=\"1\"\n                        step=\"1\"\n                        value={formData.priceFrom}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          priceFrom: e.target.value,\n                          priceTo: \"\" // Clear max price for flat rates\n                        }))}\n                        placeholder={formData.priceType === \"hourly\" ? \"50\" : \"400\"}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                {/* Experience Level and Timing */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"experienceLevel\">Experience Level</Label>\n                    <Select value={formData.experienceLevel} onValueChange={(value) => setFormData(prev => ({ ...prev, experienceLevel: value }))}>\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"beginner\">Beginner</SelectItem>\n                        <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                        <SelectItem value=\"expert\">Expert</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"deliveryTime\">Delivery Time</Label>\n                    <Input\n                      id=\"deliveryTime\"\n                      value={formData.deliveryTime}\n                      onChange={(e) => setFormData(prev => ({ ...prev, deliveryTime: e.target.value }))}\n                      placeholder=\"e.g., 3-5 business days\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                {/* Service Duration */}\n                <div>\n                  <Label htmlFor=\"serviceDuration\">Service Duration (Optional)</Label>\n                  <Input\n                    id=\"serviceDuration\"\n                    value={formData.serviceDuration}\n                    onChange={(e) => setFormData(prev => ({ ...prev, serviceDuration: e.target.value }))}\n                    placeholder=\"e.g., 2 hours, 1 day, 1-2 weeks\"\n                    className=\"mt-1\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">How long does the service typically take to complete?</p>\n                </div>\n\n\n\n                {/* Contact Information */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"website\">Website (Optional)</Label>\n                    <Input\n                      id=\"website\"\n                      type=\"url\"\n                      value={formData.website}\n                      onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n                      placeholder=\"https://yourportfolio.com\"\n                      className=\"mt-1\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">Showcase your portfolio or business website</p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Contact Email (Optional)</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                        placeholder=\"your@email.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        value={formData.phone}\n                        onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                        placeholder=\"+1 (555) 123-4567\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">Additional contact methods for clients to reach you</p>\n                </div>\n\n                {/* Service Images - matching job form */}\n                <div>\n                  <Label>Photos (Optional)</Label>\n                  <div className=\"mt-1\">\n                    <label className=\"border-2 border-dashed border-gray-300 rounded-md p-4 sm:p-6 text-center hover:border-blue-600 transition-colors cursor-pointer block\">\n                      <Upload className=\"h-6 w-6 sm:h-8 sm:w-8 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-xs sm:text-sm text-gray-600\">Click to upload photos or drag and drop</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG up to 10MB each (max 5 photos)</p>\n                      <input\n                        type=\"file\"\n                        multiple\n                        accept=\"image/*\"\n                        onChange={handleFileSelect}\n                        className=\"hidden\"\n                      />\n                    </label>\n                  </div>\n                  \n                  {/* Preview selected files */}\n                  {selectedFiles.length > 0 && (\n                    <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 sm:gap-4\">\n                      {selectedFiles.map((file, index) => (\n                        <div key={index} className=\"relative\">\n                          <img\n                            src={URL.createObjectURL(file)}\n                            alt={`Preview ${index + 1}`}\n                            className=\"w-full h-16 sm:h-20 object-cover rounded border\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => removeFile(index)}\n                            className=\"absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 text-white rounded-full w-5 h-5 sm:w-6 sm:h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                          >\n                            <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submit Buttons */}\n                <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowPostService(false);\n                      resetForm();\n                    }}\n                    className=\"w-full\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createServiceMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n                  >\n                    <span className=\"flex items-center justify-center gap-1\">\n                      {createServiceMutation.isPending ? (\n                        \"Submitting...\"\n                      ) : (\n                        <>\n                          <span>Submit</span>\n                          <span className=\"ml-1\">\n                            15<Coins className=\"h-4 w-4 inline text-yellow-500 ml-0.5\" />\n                          </span>\n                        </>\n                      )}\n                    </span>\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        ) : (\n          <Button \n            onClick={() => window.location.href = \"/login\"}\n            className=\"bg-gray-600 hover:bg-gray-700 text-white\"\n            size=\"lg\"\n          >\n            Login to Post Service\n          </Button>\n        )}\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          {/* Full-width search bar */}\n          <div className=\"mb-4\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search services...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-full\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n          </div>\n          \n          {/* Filter dropdowns */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <CitySearch\n                value={selectedLocation}\n                onValueChange={setSelectedLocation}\n                placeholder=\"All Locations\"\n              />\n            </div>\n            <div>\n              <CategorySearch\n                value={selectedCategory}\n                onValueChange={setSelectedCategory}\n                placeholder=\"All Categories\"\n              />\n            </div>\n            <div>\n              <Select value={selectedBudgetRange} onValueChange={setSelectedBudgetRange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Any Budget\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {BUDGET_RANGES.map((budget) => (\n                    <SelectItem key={budget.value} value={budget.value}>\n                      {budget.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={selectedExperience} onValueChange={setSelectedExperience}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Any Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {EXPERIENCE_LEVELS.map((level) => (\n                    <SelectItem key={level.value} value={level.value}>\n                      {level.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                onClick={clearFilters}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white w-full\"\n              >\n                Clear filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Services Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {isLoading ? (\n          // Loading skeleton\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                </div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))\n        ) : services.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No services found</h3>\n                <p className=\"text-gray-600\">\n                  {searchQuery || selectedCategory !== \"All Categories\" || selectedLocation !== \"All Locations\" || selectedBudgetRange !== \"any\" || selectedExperience !== \"any\"\n                    ? \"Try adjusting your search filters to find more services.\"\n                    : \"Be the first to post a service and start offering your skills!\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          services.map((service) => (\n            <Card key={service.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                {/* Clickable Service Content */}\n                <div \n                  className=\"cursor-pointer\" \n                  onClick={() => setLocation(`/service/${service.id}`)}\n                >\n                  {/* Service Header */}\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2 line-clamp-2 hover:text-blue-600 transition-colors\">\n                        {service.title}\n                      </h3>\n                      <div className=\"flex flex-wrap gap-1 mb-3\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {service.category}\n                        </Badge>\n                        {service.tags && service.tags.length > 0 && service.tags.slice(0, 2).map((tag, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            <Tag className=\"h-3 w-3 mr-1\" />\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Service Details */}\n                  <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                    {service.description}\n                  </p>\n\n                  {/* Service Info */}\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <MapPin className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                      <span className=\"truncate\">{service.location}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Clock className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                      <span>Delivery: {service.deliveryTime || \"Flexible\"}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <DollarSign className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                      <span className=\"font-medium\">\n                        From {getCurrencySymbol(service.currency)}{service.priceFrom}\n                        {service.priceTo && ` - ${getCurrencySymbol(service.currency)}${service.priceTo}`}\n                        {service.priceType === \"hourly\" && \"/hr\"}\n                        {service.priceType === \"per_project\" && \"/project\"}\n                      </span>\n                    </div>\n\n                  </div>\n\n                  {/* Provider Info */}\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={service.user?.profileImageUrl || `/api/placeholder/avatar`} alt={service.user?.name || \"Provider\"} />\n                        <AvatarFallback className=\"text-xs\">\n                          {service.user?.name?.charAt(0).toUpperCase() || service.title.charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">{service.user?.name || \"Service Provider\"}</p>\n                        <p className=\"text-xs text-gray-600\">{formatTimeAgo(service.createdAt)}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600\">\n                      <Star className=\"h-4 w-4 mr-1 text-yellow-500 fill-current\" />\n                      <span>{service.averageRating ? service.averageRating.toFixed(1) : \"N/A\"}</span>\n                      <span className=\"ml-1 text-xs\">({service.reviewCount || 0} reviews)</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Button - Separate from clickable area */}\n                {user ? (\n                  <Button \n                    className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setSelectedService(service);\n                      setShowInquiryModal(true);\n                      setInquiryData({\n                        message: \"\",\n                        contactEmail: user.email || \"\",\n                        contactPhone: \"\"\n                      });\n                    }}\n                  >\n                    Inquire\n                  </Button>\n                ) : (\n                  <Button \n                    className=\"w-full mt-4 bg-blue-600 hover:bg-blue-700 text-white\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      window.location.href = \"/login\";\n                    }}\n                  >\n                    Login to Inquire\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Service Inquiry Modal */}\n      <Dialog open={showInquiryModal} onOpenChange={setShowInquiryModal}>\n        <DialogContent className=\"max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle>Inquire About Service</DialogTitle>\n          </DialogHeader>\n          \n          {selectedService && (\n            <form onSubmit={handleInquirySubmit} className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">{selectedService.title}</h4>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  From {getCurrencySymbol(selectedService.currency)}{selectedService.priceFrom}\n                  {selectedService.priceTo && ` - ${getCurrencySymbol(selectedService.currency)}${selectedService.priceTo}`}\n                  {selectedService.priceType === \"hourly\" && \"/hr\"}\n                  {selectedService.priceType === \"per_project\" && \"/project\"}\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"inquiry-message\">Message *</Label>\n                <Textarea\n                  id=\"inquiry-message\"\n                  placeholder=\"Describe your project requirements and any specific questions...\"\n                  value={inquiryData.message}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, message: e.target.value }))}\n                  className=\"mt-1\"\n                  rows={4}\n                  required\n                />\n              </div>\n\n\n\n              <div>\n                <Label htmlFor=\"inquiry-email\">Contact Email (Optional)</Label>\n                <Input\n                  id=\"inquiry-email\"\n                  type=\"email\"\n                  placeholder=\"your-email@example.com\"\n                  value={inquiryData.contactEmail}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, contactEmail: e.target.value }))}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"inquiry-phone\">Phone Number (Optional)</Label>\n                <Input\n                  id=\"inquiry-phone\"\n                  type=\"tel\"\n                  placeholder=\"+1 (555) 123-4567\"\n                  value={inquiryData.contactPhone}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, contactPhone: e.target.value }))}\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowInquiryModal(false)}\n                  disabled={submitInquiryMutation.isPending}\n                  className=\"w-full\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-green-600 hover:bg-green-700 w-full\"\n                  disabled={submitInquiryMutation.isPending}\n                >\n                  {submitInquiryMutation.isPending ? \"Sending...\" : (\n                    <>\n                      Send Inquiry\n                      <Coins className=\"h-4 w-4 ml-2 text-yellow-400\" />\n                      1\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":52195},"client/src/pages/service-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MapPin, Clock, Users, Star, ArrowLeft, DollarSign, Calendar, User, ExternalLink, Tag, MessageCircle, CheckCircle, Globe, Mail, Phone, Coins } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport type { ServiceWithRequests, UserWithStats, User as UserType } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrencySymbol } from \"@shared/currencies\";\nimport { RatingDisplay } from \"@/components/rating-display\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Plus, X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function ServiceDetailsPage() {\n  const { serviceId } = useParams();\n  const [showRequestModal, setShowRequestModal] = useState(false);\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  // Inquiry form state\n  const [inquiryData, setInquiryData] = useState({\n    message: \"\",\n    contactEmail: \"\",\n    contactPhone: \"\"\n  });\n\n  // Get user coins\n  const { data: userCoinsData } = useQuery<{ coins: number }>({\n    queryKey: [\"/api/user/coins\"],\n    enabled: !!user,\n  });\n  const userCoins = userCoinsData?.coins || 0;\n\n  // Fetch service details\n  const { data: service, isLoading } = useQuery<ServiceWithRequests>({\n    queryKey: [\"/api/services\", serviceId],\n    enabled: !!serviceId,\n  });\n\n  // Fetch service provider details\n  const { data: providerStats } = useQuery<UserWithStats>({\n    queryKey: [\"/api/user/stats\", service?.userId],\n    enabled: !!service?.userId,\n  });\n\n  // Fetch service provider profile\n  const { data: providerProfile } = useQuery<UserType>({\n    queryKey: [\"/api/user/profile\", service?.userId],\n    enabled: !!service?.userId,\n  });\n\n  // Fetch service provider reviews\n  const { data: providerReviews } = useQuery<any[]>({\n    queryKey: [\"/api/reviews/user\", service?.userId],\n    enabled: !!service?.userId,\n  });\n\n  // Service inquiry mutation\n  const submitInquiryMutation = useMutation({\n    mutationFn: async (inquiryPayload: any) => {\n      const response = await fetch(`/api/services/${inquiryPayload.serviceId}/requests`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          message: inquiryPayload.message,\n          budget: 1, // Minimum valid budget to pass validation\n          timeline: \"Flexible\", // Default timeline since field is removed\n          contactEmail: inquiryPayload.contactEmail,\n          contactPhone: inquiryPayload.contactPhone\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to send inquiry\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      toast({\n        title: \"Inquiry Sent!\",\n        description: \"Your inquiry has been sent to the service provider. They will contact you soon. 1 coin has been deducted.\"\n      });\n      setShowRequestModal(false);\n      setInquiryData({\n        message: \"\",\n        contactEmail: \"\",\n        contactPhone: \"\"\n      });\n    },\n    onError: (error: any) => {\n      // Check if it's a coin-related error\n      if (error.message && error.message.includes(\"insufficient coins\")) {\n        toast({\n          title: \"Insufficient Coins\",\n          description: \"You need 1 coin to send an inquiry. Visit the Buy Coins page to get more coins.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send inquiry. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle inquiry form submission\n  const handleInquirySubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!inquiryData.message.trim()) {\n      toast({\n        title: \"Message Required\",\n        description: \"Please enter a message to send your inquiry.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const inquiryPayload = {\n      serviceId,\n      message: inquiryData.message,\n      contactEmail: inquiryData.contactEmail,\n      contactPhone: inquiryData.contactPhone\n    };\n\n    submitInquiryMutation.mutate(inquiryPayload);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n                <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!service) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Service Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">\n              The service you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/services\">\n              <Button>Browse Services</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const isOwner = user?.id === service.userId;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <Helmet>\n        <title>{service.title} - Jigz Services</title>\n        <meta name=\"description\" content={service.description} />\n      </Helmet>\n\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <Link href=\"/services\">\n            <Button variant=\"ghost\" className=\"text-gray-600 hover:text-gray-900\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Services\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200\">\n                {/* Status and Category Badges */}\n                <div className=\"flex flex-wrap items-center justify-between mb-6\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 font-medium\">\n                      <Tag className=\"h-3 w-3 mr-1\" />\n                      {service.category}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"border-purple-300 text-purple-700 bg-purple-50\">\n                      {service.experienceLevel ? service.experienceLevel.charAt(0).toUpperCase() + service.experienceLevel.slice(1) : \"Intermediate\"}\n                    </Badge>\n                    {service.approvalStatus === \"approved\" && (\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800 border-green-300\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Verified Service\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  {/* Pricing Preview */}\n                  <div className=\"bg-white px-4 py-2 rounded-lg shadow-sm border border-gray-200\">\n                    <div className=\"flex items-center text-lg font-bold text-gray-900\">\n                      <DollarSign className=\"h-4 w-4 mr-1 text-green-600\" />\n                      <span className=\"text-green-600\">\n                        {getCurrencySymbol(service.currency)}{service.priceFrom}\n                        {service.priceTo && ` - ${getCurrencySymbol(service.currency)}${service.priceTo}`}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-gray-500 text-center mt-1\">\n                      {service.priceType === \"hourly\" && \"per hour\"}\n                      {service.priceType === \"per_project\" && \"per project\"}\n                      {service.priceType === \"per_day\" && \"per day\"}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Service Title */}\n                <CardTitle className=\"text-2xl md:text-3xl font-bold text-gray-900 mb-4 leading-tight\">\n                  {service.title}\n                </CardTitle>\n                \n                {/* Enhanced Service Meta Info Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center text-gray-700 bg-white px-3 py-2 rounded-lg shadow-sm\">\n                      <MapPin className=\"h-4 w-4 mr-3 text-red-500\" />\n                      <span className=\"font-medium\">Location:</span>\n                      <span className=\"ml-2 text-gray-600\">\n                        {service.location}\n                        {service.specificArea && (\n                          <span className=\"text-gray-500 text-xs ml-1\">\n                            ({service.specificArea})\n                          </span>\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center text-gray-700 bg-white px-3 py-2 rounded-lg shadow-sm\">\n                      <Clock className=\"h-4 w-4 mr-3 text-blue-500\" />\n                      <span className=\"font-medium\">Delivery:</span>\n                      <span className=\"ml-2 text-gray-600\">{service.deliveryTime || \"Flexible timing\"}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center text-gray-700 bg-white px-3 py-2 rounded-lg shadow-sm\">\n                      <Calendar className=\"h-4 w-4 mr-3 text-purple-500\" />\n                      <span className=\"font-medium\">Posted:</span>\n                      <span className=\"ml-2 text-gray-600\">\n                        {service.createdAt ? format(new Date(service.createdAt), \"MMM dd, yyyy\") : \"Recently\"}\n                      </span>\n                    </div>\n                    {service.duration && (\n                      <div className=\"flex items-center text-gray-700 bg-white px-3 py-2 rounded-lg shadow-sm\">\n                        <Clock className=\"h-4 w-4 mr-3 text-orange-500\" />\n                        <span className=\"font-medium\">Duration:</span>\n                        <span className=\"ml-2 text-gray-600\">{service.duration}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"p-6\">\n                {/* Service Description */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center mb-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900\">Service Overview</h3>\n                  </div>\n                  <div className=\"bg-gray-50 p-6 rounded-lg border border-gray-200\">\n                    <p className=\"text-gray-700 whitespace-pre-wrap leading-relaxed text-base\">\n                      {service.description}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Get In Touch Section */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center mb-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900\">Get In Touch</h3>\n                  </div>\n                  \n\n                  \n                  {/* Specific Location Display */}\n                  {service?.specificArea && (\n                    <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"flex items-center text-blue-800\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        <span className=\"text-sm font-medium\">\n                          Service available in: {service.specificArea}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                  <div className=\"bg-gray-50 p-6 rounded-lg border border-gray-200 text-center\">\n                    <p className=\"text-gray-700 mb-4\">\n                      Ready to get started? Send an inquiry to discuss your project requirements and get a personalized quote.\n                    </p>\n                    {!isOwner && (\n                      user ? (\n                        <Button \n                          className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold px-8 py-3 shadow-lg hover:shadow-xl transition-all duration-200\"\n                          onClick={() => setShowRequestModal(true)}\n                        >\n                          <MessageCircle className=\"h-5 w-5 mr-2\" />\n                          Send Inquiry\n                        </Button>\n                      ) : (\n                        <Button \n                          className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-8 py-3 shadow-lg hover:shadow-xl transition-all duration-200\"\n                          onClick={() => window.location.href = \"/login\"}\n                        >\n                          <MessageCircle className=\"h-5 w-5 mr-2\" />\n                          Login to Inquire\n                        </Button>\n                      )\n                    )}\n                  </div>\n                </div>\n\n                {/* Service Portfolio - Always show if images exist */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">Service Portfolio</h3>\n                    </div>\n                      {isOwner && (\n                        <ObjectUploader\n                          maxNumberOfFiles={1}\n                          maxFileSize={10485760}\n                          onGetUploadParameters={async () => {\n                            const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n                            const data = response as any as { uploadURL: string };\n                            return {\n                              method: \"PUT\" as const,\n                              url: data.uploadURL,\n                            };\n                          }}\n                          onComplete={async (result) => {\n                            if (result.successful && result.successful.length > 0) {\n                              const uploadURL = (result.successful[0] as any).uploadURL;\n                              try {\n                                await apiRequest(\"PUT\", `/api/services/${service.id}/images`, {\n                                  imageURL: uploadURL,\n                                });\n                                queryClient.invalidateQueries({ queryKey: [\"/api/services\", service.id] });\n                                toast({\n                                  title: \"Success\",\n                                  description: \"Image uploaded successfully\",\n                                });\n                              } catch (error) {\n                                toast({\n                                  title: \"Error\",\n                                  description: \"Failed to save image\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }\n                          }}\n                          buttonClassName=\"bg-gray-600 hover:bg-gray-700 text-white border-gray-600\"\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Photo\n                        </ObjectUploader>\n                      )}\n                    </div>\n                    \n                    {service.images && service.images.length > 0 ? (\n                      <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {service.images.map((image, index) => (\n                            <div key={index} className=\"relative group bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                              <img\n                                src={image}\n                                alt={`Portfolio image ${index + 1}`}\n                                className=\"w-full h-40 object-cover\"\n                              />\n                              <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center\">\n                                {isOwner && (\n                                  <button\n                                    onClick={async () => {\n                                      const updatedImages = service.images?.filter((_, i) => i !== index) || [];\n                                      try {\n                                        await apiRequest(\"PUT\", `/api/services/${service.id}`, {\n                                          images: updatedImages,\n                                        });\n                                        queryClient.invalidateQueries({ queryKey: [\"/api/services\", service.id] });\n                                        toast({\n                                          title: \"Success\",\n                                          description: \"Image removed successfully\",\n                                        });\n                                      } catch (error) {\n                                        toast({\n                                          title: \"Error\",\n                                          description: \"Failed to remove image\",\n                                          variant: \"destructive\",\n                                        });\n                                      }\n                                    }}\n                                    className=\"opacity-0 group-hover:opacity-100 bg-red-500 hover:bg-red-600 text-white rounded-full p-2 transition-all duration-200 shadow-lg\"\n                                  >\n                                    <X className=\"h-4 w-4\" />\n                                  </button>\n                                )}\n                              </div>\n                              <div className=\"p-2\">\n                                <p className=\"text-xs text-gray-600 text-center\">Image {index + 1}</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ) : isOwner ? (\n                      <div className=\"bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                        <div className=\"flex flex-col items-center\">\n                          <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n                            <Plus className=\"h-8 w-8 text-gray-400\" />\n                          </div>\n                          <p className=\"text-gray-600 mb-2 font-medium\">No portfolio images yet</p>\n                          <p className=\"text-sm text-gray-500\">Showcase your work by uploading service photos</p>\n                        </div>\n                      </div>\n                    ) : null}\n                </div>\n\n                {/* Service Specifications */}\n                <div className=\"mb-8\">\n                  <div className=\"flex items-center mb-4\">\n                    <h3 className=\"text-xl font-bold text-gray-900\">Service Details</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    <div className=\"bg-white border border-gray-200 p-4 rounded-lg shadow-sm\">\n                      <div className=\"flex items-center mb-2\">\n                        <User className=\"h-5 w-5 mr-2 text-gray-600\" />\n                        <span className=\"font-semibold text-gray-900\">Experience Level</span>\n                      </div>\n                      <p className=\"text-gray-600 capitalize\">{service.experienceLevel || \"Intermediate\"} level expertise</p>\n                    </div>\n                    \n                    <div className=\"bg-white border border-gray-200 p-4 rounded-lg shadow-sm\">\n                      <div className=\"flex items-center mb-2\">\n                        <Clock className=\"h-5 w-5 mr-2 text-gray-600\" />\n                        <span className=\"font-semibold text-gray-900\">Delivery Time</span>\n                      </div>\n                      <p className=\"text-gray-600\">{service.deliveryTime || \"Flexible timing\"}</p>\n                    </div>\n                    \n                    <div className=\"bg-white border border-gray-200 p-4 rounded-lg shadow-sm\">\n                      <div className=\"flex items-center mb-2\">\n                        <MapPin className=\"h-5 w-5 mr-2 text-gray-600\" />\n                        <span className=\"font-semibold text-gray-900\">Service Area</span>\n                      </div>\n                      <p className=\"text-gray-600\">{service.location}</p>\n                    </div>\n\n\n\n                  </div>\n                </div>\n\n                {/* Skills & Technologies */}\n                {service.tags && service.tags.length > 0 && (\n                  <div className=\"mb-8\">\n                    <div className=\"flex items-center mb-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">Skills & Expertise</h3>\n                    </div>\n                    <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200\">\n                      <div className=\"flex flex-wrap gap-2\">\n                        {service.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-white border-gray-300 text-gray-700 font-medium shadow-sm hover:shadow-md transition-shadow\">\n                            <Tag className=\"h-3 w-3 mr-1\" />\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Service Provider Reviews */}\n                {providerReviews && providerReviews.length > 0 && (\n                  <div className=\"mb-8\">\n                    <div className=\"flex items-center mb-4\">\n                      <h3 className=\"text-xl font-bold text-gray-900\">Client Reviews</h3>\n                    </div>\n                    <div className=\"bg-gray-50 p-6 rounded-lg border border-gray-200\">\n                      <div className=\"space-y-4\">\n                        {providerReviews.slice(0, 5).map((review, index) => (\n                          <div key={index} className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Avatar className=\"w-8 h-8\">\n                                <AvatarImage src={`/api/placeholder/avatar`} alt=\"Reviewer\" />\n                                <AvatarFallback className=\"text-xs\">\n                                  {review.reviewerUsername?.charAt(0).toUpperCase() || \"R\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-900\">\n                                  {review.reviewerUsername || \"Anonymous\"}\n                                </p>\n                                <RatingDisplay \n                                  rating={review.rating} \n                                  size=\"sm\" \n                                  showNumber={false}\n                                />\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-gray-500\">\n                              {format(new Date(review.createdAt), \"MMM dd, yyyy\")}\n                            </p>\n                          </div>\n                          \n                          {/* Detailed ratings for client-to-worker reviews */}\n                          {review.reviewType === \"client_to_worker\" && (\n                            <div className=\"grid grid-cols-3 gap-2 mb-3 text-xs\">\n                              <div className=\"text-center\">\n                                <p className=\"text-gray-600\">Quality</p>\n                                <RatingDisplay \n                                  rating={review.qualityOfWorkRating || 0} \n                                  size=\"sm\" \n                                  showNumber={false}\n                                />\n                              </div>\n                              <div className=\"text-center\">\n                                <p className=\"text-gray-600\">Communication</p>\n                                <RatingDisplay \n                                  rating={review.communicationRating || 0} \n                                  size=\"sm\" \n                                  showNumber={false}\n                                />\n                              </div>\n                              <div className=\"text-center\">\n                                <p className=\"text-gray-600\">Timeliness</p>\n                                <RatingDisplay \n                                  rating={review.timelinessRating || 0} \n                                  size=\"sm\" \n                                  showNumber={false}\n                                />\n                              </div>\n                            </div>\n                          )}\n                          \n                          {review.comment && (\n                            <p className=\"text-sm text-gray-700 leading-relaxed\">\n                              \"{review.comment}\"\n                            </p>\n                          )}\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {providerReviews.length > 5 && (\n                        <div className=\"mt-6 pt-4 border-t border-gray-200 text-center\">\n                          <p className=\"text-sm text-gray-700\">\n                            <span className=\"font-medium\">Showing 5 of {providerReviews.length} reviews</span> - \n                            <Link href={`/profile/${service.userId}`} className=\"text-blue-600 hover:text-blue-800 hover:underline ml-1\">\n                              View all reviews\n                            </Link>\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Service Provider Card */}\n            <Card className=\"border-2 border-gray-100 hover:border-blue-200 transition-colors\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-100\">\n                <CardTitle className=\"text-lg font-bold text-gray-900 flex items-center gap-2\">\n                  <User className=\"h-5 w-5 text-blue-600\" />\n                  Service Provider\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {/* Provider Profile Section */}\n                <div className=\"flex items-start space-x-4 mb-6\">\n                  <Avatar className=\"w-16 h-16 border-3 border-blue-100 shadow-md\">\n                    <AvatarImage \n                      src={`/api/placeholder/avatar`} \n                      alt=\"Provider\"\n                    />\n                    <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-indigo-600 text-white text-lg font-semibold\">\n                      {providerProfile?.username?.charAt(0).toUpperCase() || \"P\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-bold text-lg text-gray-900 mb-1 truncate\">\n                      {providerProfile?.username || \"Service Provider\"}\n                    </h4>\n                    <div className=\"flex items-center gap-1 mb-2\">\n                      <RatingDisplay \n                        rating={providerReviews && providerReviews.length > 0 ? \n                          providerReviews.reduce((acc, review) => acc + review.rating, 0) / providerReviews.length : \n                          4.8\n                        }\n                        totalReviews={providerReviews?.length || 0}\n                        size=\"sm\"\n                      />\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-green-600\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <span className=\"font-medium\">Available</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Stats Grid */}\n                {providerStats && (\n                  <div className=\"grid grid-cols-2 gap-4 mb-6 p-4 bg-gray-50 rounded-lg border border-gray-100\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                        {providerStats.completedServices || 0}\n                      </div>\n                      <div className=\"text-sm text-gray-600 font-medium\">Services Completed</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-amber-600 mb-1\">\n                        {providerReviews && providerReviews.length > 0 ? \n                          (providerReviews.reduce((acc, review) => acc + review.rating, 0) / providerReviews.length).toFixed(1) : \n                          \"4.8\"\n                        }\n                      </div>\n                      <div className=\"text-sm text-gray-600 font-medium\">Average Rating</div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3\">\n                  <Link href={`/profile/${service.userId}`}>\n                    <Button variant=\"outline\" className=\"w-full border-blue-200 hover:bg-blue-50 hover:border-blue-300 text-blue-700 font-medium\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      View Full Profile\n                    </Button>\n                  </Link>\n\n                  {!isOwner && (\n                    user ? (\n                      <Button \n                        className=\"w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                        onClick={() => setShowRequestModal(true)}\n                      >\n                        <MessageCircle className=\"h-4 w-4 mr-2\" />\n                        Inquire\n                      </Button>\n                    ) : (\n                      <Button \n                        className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                        onClick={() => window.location.href = \"/login\"}\n                      >\n                        <MessageCircle className=\"h-4 w-4 mr-2\" />\n                        Login to Inquire\n                      </Button>\n                    )\n                  )}\n                </div>\n\n                {/* Provider Verification Badge */}\n                {providerProfile?.isEmailVerified && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"text-green-700 font-medium\">Verified Provider</span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Service Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Service Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Requests</span>\n                    <span className=\"font-medium\">{service.requestCount || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Inquiries</span>\n                    <span className=\"font-medium\">{providerStats?.totalInquiriesReceived || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Completed Services</span>\n                    <span className=\"font-medium\">{providerStats?.completedServices || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Avg. Response Time</span>\n                    <span className=\"font-medium\">Within 24 hours</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Inquiry Modal */}\n      <Dialog open={showRequestModal} onOpenChange={setShowRequestModal}>\n        <DialogContent className=\"max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle>Inquire About Service</DialogTitle>\n          </DialogHeader>\n          \n          {user && (\n            <form onSubmit={handleInquirySubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"message\">Message *</Label>\n                <Textarea\n                  id=\"message\"\n                  value={inquiryData.message}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, message: e.target.value }))}\n                  placeholder=\"Tell the service provider about your requirements...\"\n                  required\n                  className=\"mt-1\"\n                  rows={4}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"contactEmail\">Contact Email (Optional)</Label>\n                <Input\n                  id=\"contactEmail\"\n                  type=\"email\"\n                  value={inquiryData.contactEmail}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, contactEmail: e.target.value }))}\n                  placeholder=\"your.email@example.com\"\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"contactPhone\">Contact Phone (Optional)</Label>\n                <Input\n                  id=\"contactPhone\"\n                  type=\"tel\"\n                  value={inquiryData.contactPhone}\n                  onChange={(e) => setInquiryData(prev => ({ ...prev, contactPhone: e.target.value }))}\n                  placeholder=\"+1 (555) 123-4567\"\n                  className=\"mt-1\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowRequestModal(false)}\n                  disabled={submitInquiryMutation.isPending}\n                  className=\"w-full\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-green-600 hover:bg-green-700 w-full\"\n                  disabled={submitInquiryMutation.isPending}\n                >\n                  {submitInquiryMutation.isPending ? \"Sending...\" : (\n                    <>\n                      <Coins className=\"h-4 w-4 mr-2\" />\n                      1 Send Inquiry\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":38212},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2866},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"client/src/components/post-service-modal.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { X, Plus, Upload, Search, Coins } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CoinWarning } from \"@/components/coin-display\";\nimport { CurrencySearch } from \"@/components/currency-search\";\nimport { jobCategories } from \"@shared/categories\";\nimport { topCities, allWorldCities } from \"@shared/cities\";\n\ninterface PostServiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingService?: any;\n  isEditing?: boolean;\n}\n\nexport default function PostServiceModal({ isOpen, onClose, editingService, isEditing = false }: PostServiceModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    category: \"\",\n    location: \"\",\n    specificArea: \"\",\n    priceFrom: \"\",\n    priceTo: \"\",\n    priceType: \"per_project\",\n    currency: \"USD\",\n    experienceLevel: \"intermediate\",\n    deliveryTime: \"\",\n    serviceDuration: \"\",\n    website: \"\",\n    tags: \"\"\n  });\n\n  // Category search state\n  const [categorySearch, setCategorySearch] = useState(\"\");\n  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);\n  \n  // Location search state  \n  const [locationSearch, setLocationSearch] = useState(\"\");\n  const [showLocationDropdown, setShowLocationDropdown] = useState(false);\n  \n  // Specific area editing state\n  const [isSpecificAreaEditing, setIsSpecificAreaEditing] = useState(false);\n  \n  // Image upload state\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [coinError, setCoinError] = useState<{ coinsNeeded: number; coinsAvailable: number } | null>(null);\n\n  // Filter categories and locations\n  const filteredCategories = jobCategories.filter(cat => \n    cat.toLowerCase().includes(categorySearch.toLowerCase())\n  ).slice(0, 8);\n  \n  const filteredLocations = allWorldCities.filter(loc => \n    loc.toLowerCase().includes(locationSearch.toLowerCase())\n  ).slice(0, 8);\n\n  // File upload handlers\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const newFiles = Array.from(e.target.files);\n      setSelectedFiles(prev => [...prev, ...newFiles].slice(0, 5));\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      location: \"\",\n      specificArea: \"\",\n      priceFrom: \"\",\n      priceTo: \"\",\n      priceType: \"per_project\",\n      currency: \"USD\",\n      experienceLevel: \"intermediate\",\n      deliveryTime: \"\",\n      serviceDuration: \"\",\n      website: \"\",\n      tags: \"\"\n    });\n    setSelectedFiles([]);\n    setCoinError(null);\n    setIsSpecificAreaEditing(false);\n  };\n\n  // Initialize form data when editing\n  React.useEffect(() => {\n    if (isEditing && editingService) {\n      setFormData({\n        title: editingService.title || \"\",\n        description: editingService.description || \"\",\n        category: editingService.category || \"\",\n        location: editingService.location || \"\",\n        specificArea: editingService.specificArea || \"\",\n        priceFrom: editingService.priceFrom?.toString() || \"\",\n        priceTo: editingService.priceTo?.toString() || \"\",\n        priceType: editingService.priceType || \"per_project\",\n        currency: editingService.currency || \"USD\",\n        experienceLevel: editingService.experienceLevel || \"intermediate\",\n        deliveryTime: editingService.deliveryTime || \"\",\n        serviceDuration: editingService.serviceDuration || \"\",\n        website: editingService.website || \"\",\n        tags: editingService.tags?.join(\", \") || \"\"\n      });\n      setCategorySearch(editingService.category || \"\");\n      setLocationSearch(editingService.location || \"\");\n    }\n  }, [isEditing, editingService]);\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const formDataToSend = new FormData();\n      \n      // Append service data\n      Object.entries(serviceData).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          formDataToSend.append(key, value.toString());\n        }\n      });\n      \n      // Append images\n      selectedFiles.forEach((file) => {\n        formDataToSend.append(\"images\", file);\n      });\n\n      const url = isEditing ? `/api/services/${editingService?.id}` : \"/api/services\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n      \n      const res = await fetch(url, {\n        method,\n        body: formDataToSend,\n      });\n\n      if (!res.ok) {\n        const error = await res.json();\n        throw error;\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/coins\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/services\"] });\n      setCoinError(null);\n      toast({\n        title: isEditing ? \"Service updated!\" : \"Service submitted!\",\n        description: isEditing \n          ? \"Your service has been updated and resubmitted for admin approval. 5 coins have been deducted.\" \n          : \"Your service has been submitted for admin approval. You'll be notified once it's reviewed. 15 coins have been deducted.\",\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error(\"Error posting service:\", error);\n      \n      // Check if it's a coin-related error\n      if (error.coinsNeeded && error.coinsAvailable !== undefined) {\n        setCoinError({\n          coinsNeeded: error.coinsNeeded,\n          coinsAvailable: error.coinsAvailable\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit service. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a service title.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.description.trim()) {\n      toast({\n        title: \"Validation Error\", \n        description: \"Please enter a service description.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.category) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a category.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.location.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a location.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.priceFrom || parseFloat(formData.priceFrom) <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid starting price.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare service data\n    const serviceData = {\n      title: formData.title.trim(),\n      description: formData.description.trim(),\n      category: formData.category,\n      location: formData.location.trim(),\n      specificArea: formData.specificArea.trim(),\n      priceFrom: parseFloat(formData.priceFrom),\n      priceTo: formData.priceTo ? parseFloat(formData.priceTo) : undefined,\n      priceType: formData.priceType,\n      currency: formData.currency,\n      experienceLevel: formData.experienceLevel,\n      deliveryTime: formData.deliveryTime,\n      serviceDuration: formData.serviceDuration,\n      website: formData.website.trim(),\n      tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0) : [],\n    };\n\n    createServiceMutation.mutate(serviceData);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 md:p-4\">\n      <div className=\"bg-white w-full h-full md:rounded-lg md:max-w-4xl md:max-h-[90vh] md:h-auto overflow-y-auto\">\n        <div className=\"sticky top-0 bg-white border-b px-4 md:px-6 py-4 flex items-center justify-between\">\n          <h2 className=\"text-lg md:text-xl font-semibold\">{isEditing ? \"Edit Service\" : \"Post a Service\"}</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"p-4 md:p-6\">\n          {coinError && (\n            <div className=\"mb-6\">\n              <CoinWarning \n                coinsNeeded={coinError.coinsNeeded}\n                coinsAvailable={coinError.coinsAvailable}\n              />\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Service Title */}\n            <div>\n              <div className=\"flex justify-between items-center\">\n                <Label htmlFor=\"title\">Service Title *</Label>\n                <span className={`text-xs ${formData.title.length > 100 ? 'text-red-500' : 'text-gray-500'}`}>\n                  {formData.title.length}/100\n                </span>\n              </div>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => {\n                  if (e.target.value.length <= 100) {\n                    setFormData(prev => ({ ...prev, title: e.target.value }));\n                  }\n                }}\n                placeholder=\"e.g., Professional Logo Design Service\"\n                className=\"mt-1\"\n                maxLength={100}\n              />\n            </div>\n\n            {/* Service Description */}\n            <div>\n              <div className=\"flex justify-between items-center\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <span className={`text-xs ${formData.description.length > 1500 ? 'text-red-500' : 'text-gray-500'}`}>\n                  {formData.description.length}/1500\n                </span>\n              </div>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => {\n                  if (e.target.value.length <= 1500) {\n                    setFormData(prev => ({ ...prev, description: e.target.value }));\n                  }\n                }}\n                placeholder=\"Describe your service, what you'll deliver, and what makes you unique...\"\n                rows={4}\n                className=\"mt-1\"\n                maxLength={1500}\n              />\n            </div>\n\n            {/* Category and Location */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"category\">Category *</Label>\n                <div className=\"relative mt-1\">\n                  <Input\n                    id=\"category\"\n                    value={formData.category}\n                    onChange={(e) => {\n                      const value = e.target.value;\n                      setFormData(prev => ({ ...prev, category: value }));\n                      setCategorySearch(value);\n                      setShowCategoryDropdown(value.length > 0);\n                    }}\n                    onFocus={() => {\n                      setCategorySearch(formData.category);\n                      setShowCategoryDropdown(true);\n                    }}\n                    onBlur={() => {\n                      setTimeout(() => setShowCategoryDropdown(false), 200);\n                    }}\n                    placeholder=\"Search categories...\"\n                    className=\"w-full\"\n                  />\n                  <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                  \n                  {showCategoryDropdown && filteredCategories.length > 0 && (\n                    <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto\">\n                      {filteredCategories.map((category, index) => (\n                        <button\n                          key={index}\n                          type=\"button\"\n                          className=\"w-full px-3 py-2 text-left hover:bg-gray-100 focus:bg-gray-100 focus:outline-none\"\n                          onClick={() => {\n                            setFormData(prev => ({ ...prev, category }));\n                            setShowCategoryDropdown(false);\n                          }}\n                        >\n                          {category}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"location\">Location *</Label>\n                <div className=\"relative mt-1\">\n                  <Input\n                    id=\"location\"\n                    value={formData.location}\n                    onChange={(e) => {\n                      const value = e.target.value;\n                      setFormData(prev => ({ ...prev, location: value }));\n                      setLocationSearch(value);\n                      setShowLocationDropdown(value.length > 0);\n                    }}\n                    onFocus={() => {\n                      setLocationSearch(formData.location);\n                      setShowLocationDropdown(true);\n                    }}\n                    onBlur={() => {\n                      setTimeout(() => setShowLocationDropdown(false), 200);\n                    }}\n                    placeholder=\"Search locations...\"\n                    className=\"w-full\"\n                  />\n                  <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                  \n                  {showLocationDropdown && filteredLocations.length > 0 && (\n                    <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto\">\n                      {filteredLocations.map((location, index) => (\n                        <button\n                          key={index}\n                          type=\"button\"\n                          className=\"w-full px-3 py-2 text-left hover:bg-gray-100 focus:bg-gray-100 focus:outline-none\"\n                          onClick={() => {\n                            setFormData(prev => ({ ...prev, location }));\n                            setShowLocationDropdown(false);\n                          }}\n                        >\n                          {location}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Specific Area */}\n            <div>\n              <Label htmlFor=\"specificArea\">Specific Area (Optional)</Label>\n              {isSpecificAreaEditing ? (\n                <div className=\"flex flex-col sm:flex-row gap-2 mt-1\">\n                  <Input\n                    id=\"specificArea\"\n                    placeholder=\"e.g., Downtown, Upper East Side, Financial District\"\n                    value={formData.specificArea}\n                    onChange={(e) => setFormData(prev => ({ ...prev, specificArea: e.target.value }))}\n                    className=\"flex-1\"\n                    autoFocus\n                    onBlur={() => setIsSpecificAreaEditing(false)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        setIsSpecificAreaEditing(false);\n                      }\n                      if (e.key === 'Escape') {\n                        setIsSpecificAreaEditing(false);\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setIsSpecificAreaEditing(false)}\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Done\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"w-full justify-start text-left h-auto p-3 mt-1\"\n                  onClick={() => setIsSpecificAreaEditing(true)}\n                >\n                  <div className=\"flex flex-col items-start text-left w-full\">\n                    <span className=\"text-sm font-medium\">\n                      {formData.specificArea ? \"Edit Specific Area\" : \"Add Specific Area\"}\n                    </span>\n                    <span className=\"text-xs text-gray-500 mt-1 break-words max-w-full md:max-w-none\">\n                      {formData.specificArea \n                        ? `Area: ${formData.specificArea}` \n                        : (\n                          <>\n                            <span className=\"md:hidden\">Add neighborhood or area details</span>\n                            <span className=\"hidden md:inline\">Click to add neighborhood, district, or specific location details</span>\n                          </>\n                        )}\n                    </span>\n                  </div>\n                </Button>\n              )}\n            </div>\n\n            {/* Pricing */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Price Type</Label>\n                <div className=\"grid grid-cols-3 gap-2 mt-1\">\n                  <Button\n                    type=\"button\"\n                    variant={formData.priceType === \"per_project\" ? \"default\" : \"outline\"}\n                    className={`text-sm ${formData.priceType === \"per_project\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                    onClick={() => setFormData(prev => ({ ...prev, priceType: \"per_project\" }))}\n                  >\n                    Per Project\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant={formData.priceType === \"hourly\" ? \"default\" : \"outline\"}\n                    className={`text-sm ${formData.priceType === \"hourly\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                    onClick={() => setFormData(prev => ({ ...prev, priceType: \"hourly\", priceTo: \"\" }))}\n                  >\n                    Hourly Rate\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant={formData.priceType === \"per_day\" ? \"default\" : \"outline\"}\n                    className={`text-sm ${formData.priceType === \"per_day\" ? \"bg-blue-600 hover:bg-blue-700\" : \"\"}`}\n                    onClick={() => setFormData(prev => ({ ...prev, priceType: \"per_day\", priceTo: \"\" }))}\n                  >\n                    Per Day\n                  </Button>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"currency\">Currency</Label>\n                <div className=\"mt-1\">\n                  <CurrencySearch\n                    value={formData.currency}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, currency: value }))}\n                    placeholder=\"Select currency...\"\n                  />\n                </div>\n              </div>\n              \n              {formData.priceType === \"per_project\" ? (\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"priceFrom\">Starting Price *</Label>\n                    <Input\n                      id=\"priceFrom\"\n                      type=\"number\"\n                      min=\"1\"\n                      step=\"1\"\n                      value={formData.priceFrom}\n                      onChange={(e) => setFormData(prev => ({ ...prev, priceFrom: e.target.value }))}\n                      placeholder=\"100\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"priceTo\">Max Price</Label>\n                    <Input\n                      id=\"priceTo\"\n                      type=\"number\"\n                      min=\"1\"\n                      step=\"1\"\n                      value={formData.priceTo}\n                      onChange={(e) => setFormData(prev => ({ ...prev, priceTo: e.target.value }))}\n                      placeholder=\"500 (optional)\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <Label htmlFor=\"priceFrom\">\n                    {formData.priceType === \"hourly\" ? \"Hourly Rate *\" : \"Daily Rate *\"}\n                  </Label>\n                  <Input\n                    id=\"priceFrom\"\n                    type=\"number\"\n                    min=\"1\"\n                    step=\"1\"\n                    value={formData.priceFrom}\n                    onChange={(e) => setFormData(prev => ({ \n                      ...prev, \n                      priceFrom: e.target.value,\n                      priceTo: \"\" // Clear max price for flat rates\n                    }))}\n                    placeholder={formData.priceType === \"hourly\" ? \"50\" : \"400\"}\n                    className=\"mt-1\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Experience Level and Delivery Time */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"experienceLevel\">Experience Level</Label>\n                <Select value={formData.experienceLevel} onValueChange={(value) => setFormData(prev => ({ ...prev, experienceLevel: value }))}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"expert\">Expert</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"deliveryTime\">Delivery Time</Label>\n                <Input\n                  id=\"deliveryTime\"\n                  value={formData.deliveryTime}\n                  onChange={(e) => setFormData(prev => ({ ...prev, deliveryTime: e.target.value }))}\n                  placeholder=\"e.g., 3-5 business days\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n\n            {/* Service Duration */}\n            <div>\n              <Label htmlFor=\"serviceDuration\">Service Duration (Optional)</Label>\n              <Input\n                id=\"serviceDuration\"\n                value={formData.serviceDuration}\n                onChange={(e) => setFormData(prev => ({ ...prev, serviceDuration: e.target.value }))}\n                placeholder=\"e.g., 2 hours, 1 day, 1-2 weeks\"\n                className=\"mt-1\"\n              />\n              <p className=\"text-sm text-gray-500 mt-1\">How long does the service typically take to complete?</p>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"website\">Website (Optional)</Label>\n                <Input\n                  id=\"website\"\n                  type=\"url\"\n                  value={formData.website}\n                  onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n                  placeholder=\"https://yourportfolio.com\"\n                  className=\"mt-1\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Showcase your portfolio or business website for clients to learn more about your services</p>\n              </div>\n            </div>\n\n            {/* Service Images - matching services page */}\n            <div>\n              <Label>Photos (Optional)</Label>\n              <div className=\"mt-1\">\n                <label className=\"border-2 border-dashed border-gray-300 rounded-md p-4 sm:p-6 text-center hover:border-blue-600 transition-colors cursor-pointer block\">\n                  <Upload className=\"h-6 w-6 sm:h-8 sm:w-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Click to upload photos or drag and drop</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG up to 10MB each (max 5 photos)</p>\n                  <input\n                    type=\"file\"\n                    multiple\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                  />\n                </label>\n              </div>\n              \n              {/* Preview selected files */}\n              {selectedFiles.length > 0 && (\n                <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 sm:gap-4\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"relative\">\n                      <img\n                        src={URL.createObjectURL(file)}\n                        alt={`Preview ${index + 1}`}\n                        className=\"w-full h-16 sm:h-20 object-cover rounded border\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => removeFile(index)}\n                        className=\"absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 text-white rounded-full w-5 h-5 sm:w-6 sm:h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                      >\n                        <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Submit Buttons */}\n            <div className=\"grid grid-cols-2 gap-4 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  onClose();\n                  resetForm();\n                }}\n                className=\"w-full\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                className=\"bg-blue-600 hover:bg-blue-700 w-full\"\n              >\n                <span className=\"flex items-center justify-center gap-1\">\n                  {createServiceMutation.isPending ? (\n                    \"Submitting...\"\n                  ) : (\n                    <>\n                      <span>{isEditing ? \"Update Service\" : \"Submit\"}</span>\n                      <span className=\"ml-1\">\n                        {isEditing ? \"5\" : \"15\"}<Coins className=\"h-4 w-4 inline text-yellow-500 ml-0.5\" />\n                      </span>\n                    </>\n                  )}\n                </span>\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":27823},"LOCAL_SETUP.md":{"content":"# Local Development Setup for Jigz\n\nThis guide explains how to set up and run the Jigz application on your local machine.\n\n## Prerequisites\n\n- Node.js 18+ installed\n- PostgreSQL database (local or cloud)\n- Git\n\n## Quick Setup (Automated)\n\nRun the setup script for automatic configuration:\n```bash\ncd TaskMarket\n./setup-local.sh\n```\n\nThen edit the `.env` file with your database credentials and run:\n```bash\n./start-local.sh\n```\n\n## Manual Setup\n\n1. **Navigate to project directory:**\n   ```bash\n   cd TaskMarket\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Environment Configuration:**\n   Copy the local development environment template:\n   ```bash\n   cp .env.local.example .env\n   ```\n\n3. **Configure your `.env` file:**\n   ```env\n   # Database Configuration\n   DATABASE_URL=postgresql://username:password@localhost:5432/jigz_local\n   \n   # Session Configuration\n   SESSION_SECRET=your-random-session-secret-here\n   \n   # Email Configuration (Optional for local dev)\n   SENDGRID_API_KEY=your-sendgrid-api-key\n   FROM_EMAIL=noreply@jigz.com\n   \n   # Google OAuth (Optional for local dev)\n   GOOGLE_CLIENT_ID=your-google-client-id\n   GOOGLE_CLIENT_SECRET=your-google-client-secret\n   GOOGLE_CALLBACK_URL=http://localhost:5000/api/auth/google/callback\n   \n   # Stripe (Optional for local dev)\n   STRIPE_SECRET_KEY=your-stripe-secret-key\n   STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret\n   \n   # Development Mode\n   NODE_ENV=development\n   ```\n\n## Database Setup Options\n\n### Option 1: Local PostgreSQL\n1. Install PostgreSQL locally\n2. Create a database: `createdb jigz_local`\n3. Set DATABASE_URL to: `postgresql://username:password@localhost:5432/jigz_local`\n\n### Option 2: Use Neon Database (Recommended)\n1. Sign up at [neon.tech](https://neon.tech)\n2. Create a new database\n3. Copy the connection string to DATABASE_URL\n\n### Option 3: Use existing Replit database\n1. Copy the DATABASE_URL from your Replit environment\n2. Add it to your local `.env` file\n\n## Running the Application\n\n1. **Push database schema:**\n   ```bash\n   npm run db:push\n   ```\n\n2. **Start the development server:**\n   ```bash\n   npm run dev\n   ```\n\n3. **Access the application:**\n   Open http://localhost:5000 in your browser\n\n## Environment Variables Explained\n\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **SESSION_SECRET**: Random string for session encryption (required)\n- **SENDGRID_API_KEY**: For email functionality (optional for basic testing)\n- **GOOGLE_CLIENT_ID/SECRET**: For Google OAuth login (optional)\n- **STRIPE_SECRET_KEY**: For payment processing (optional)\n\n## Troubleshooting\n\n### Database Connection Issues\n- Ensure PostgreSQL is running\n- Check DATABASE_URL format: `postgresql://user:password@host:port/database`\n- Verify database exists and user has permissions\n\n### Missing Environment Variables\n- Copy all required variables from `env.example`\n- Ensure `.env` file is in the project root\n- Restart the application after changing `.env`\n\n### Port Already in Use\n- Change the port in the application or stop the conflicting service\n- Default port is 5000\n\n## Development Features\n\n- Hot reload for both frontend and backend\n- TypeScript compilation\n- Database schema synchronization\n- Comprehensive error logging\n\n## Production Deployment\n\nFor production deployment instructions, see:\n- `GOOGLE_CLOUD_DEPLOYMENT.md` for Google Cloud\n- `DOCKER_DEPLOYMENT.md` for Docker deployment","size_bytes":3427},"README.md":{"content":"# Jigz - Local Task Marketplace Platform\n\nA sophisticated global location-based job marketplace that connects freelancers with opportunities through intelligent networking and job matching.\n\n## Features\n\n- **Job Marketplace**: Post and apply for local service jobs\n- **Real-time Messaging**: Communication between job posters and applicants\n- **Coin Economy**: Subscription-based coin system for platform usage\n- **User Profiles**: Comprehensive profiles with ratings and reviews\n- **Global Locations**: 150k+ locations for job searching and posting\n- **Admin Dashboard**: Complete job and user management\n- **Email Notifications**: Professional email system with SendGrid\n- **Payment Processing**: Stripe integration for subscriptions and coin purchases\n- **Google OAuth**: Secure authentication with Google\n\n## Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Node.js, Express.js, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Passport.js with Google OAuth\n- **Email**: SendGrid\n- **Payments**: Stripe\n- **Deployment**: Google Cloud Run, Docker\n\n## Quick Start\n\n### Local Development\n\n1. **Automated Setup:**\n   ```bash\n   git clone <repository-url>\n   cd TaskMarket\n   ./setup-local.sh\n   ```\n\n2. **Configure Database:**\n   Edit `.env` file with your PostgreSQL connection:\n   ```env\n   DATABASE_URL=postgresql://username:password@localhost:5432/jigz_local\n   ```\n\n3. **Start Development:**\n   ```bash\n   ./start-local.sh\n   ```\n\n4. **Access Application:**\n   Open http://localhost:5000\n\n### Manual Setup\n\nIf you prefer manual setup, see [LOCAL_SETUP.md](LOCAL_SETUP.md) for detailed instructions.\n\n## Database Options\n\n- **Local PostgreSQL**: Install PostgreSQL locally\n- **Neon Database**: Free cloud PostgreSQL (recommended) - [neon.tech](https://neon.tech)\n- **Google Cloud SQL**: Production-ready PostgreSQL\n\n## Deployment\n\n### Google Cloud Run\nSee [GOOGLE_CLOUD_DEPLOYMENT.md](GOOGLE_CLOUD_DEPLOYMENT.md) for complete deployment instructions.\n\n### Docker\nSee [DOCKER_DEPLOYMENT.md](DOCKER_DEPLOYMENT.md) for Docker deployment options.\n\n## Environment Variables\n\n### Required for Local Development\n- `DATABASE_URL`: PostgreSQL connection string\n- `SESSION_SECRET`: Random string for session encryption\n\n### Optional Services\n- `SENDGRID_API_KEY`: For email functionality\n- `GOOGLE_CLIENT_ID` / `GOOGLE_CLIENT_SECRET`: For Google OAuth\n- `STRIPE_SECRET_KEY`: For payment processing\n\nSee `.env.local.example` for complete configuration options.\n\n## Development Commands\n\n```bash\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run db:push      # Push database schema\nnpm run db:studio    # Open database studio\n```\n\n## Project Structure\n\n```\n├── client/          # React frontend application\n├── server/          # Express.js backend\n├── shared/          # Shared types and schemas\n├── uploads/         # File upload storage\n├── scripts/         # Deployment and utility scripts\n└── docs/           # Documentation files\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests and ensure build passes\n5. Submit a pull request\n\n## Support\n\nFor issues and questions:\n- Check [LOCAL_SETUP.md](LOCAL_SETUP.md) for setup problems\n- Review deployment guides for production issues\n- Open an issue for bugs or feature requests\n\n## License\n\nThis project is proprietary software. All rights reserved.","size_bytes":3501},"setup-local.sh":{"content":"#!/bin/bash\n\n# Jigz Local Development Setup Script\n# This script helps set up the application for local development\n\necho \"🚀 Setting up Jigz for local development...\"\necho \"\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo \"❌ Node.js is not installed. Please install Node.js 18+ and try again.\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | sed 's/v//')\nREQUIRED_VERSION=\"18.0.0\"\nif [ \"$(printf '%s\\n' \"$REQUIRED_VERSION\" \"$NODE_VERSION\" | sort -V | head -n1)\" != \"$REQUIRED_VERSION\" ]; then\n    echo \"❌ Node.js version $NODE_VERSION is too old. Please install Node.js 18+ and try again.\"\n    exit 1\nfi\n\necho \"✅ Node.js version $NODE_VERSION detected\"\n\n# Install dependencies\necho \"📦 Installing dependencies...\"\nnpm install\nif [ $? -ne 0 ]; then\n    echo \"❌ Failed to install dependencies\"\n    exit 1\nfi\n\n# Create .env file if it doesn't exist\nif [ ! -f .env ]; then\n    if [ -f .env.local.example ]; then\n        echo \"📝 Creating .env file from template...\"\n        cp .env.local.example .env\n        echo \"✅ Created .env file. Please edit it with your database credentials.\"\n    else\n        echo \"⚠️  .env.local.example not found. Creating basic .env file...\"\n        cat > .env << EOL\n# Database Configuration (REQUIRED)\nDATABASE_URL=postgresql://username:password@localhost:5432/jigz_local\n\n# Session Configuration (REQUIRED)\nSESSION_SECRET=local-development-session-secret-change-for-production\n\n# Development Environment\nNODE_ENV=development\nPORT=5000\nEOL\n        echo \"✅ Created basic .env file. Please edit DATABASE_URL with your database credentials.\"\n    fi\nelse\n    echo \"✅ .env file already exists\"\nfi\n\necho \"\"\necho \"🎯 Next steps:\"\necho \"\"\necho \"1. Edit the .env file with your database connection:\"\necho \"   DATABASE_URL=postgresql://username:password@localhost:5432/jigz_local\"\necho \"\"\necho \"2. Set up your database schema:\"\necho \"   npm run db:push\"\necho \"\"\necho \"3. Start the development server:\"\necho \"   npm run dev\"\necho \"\"\necho \"4. Open your browser to:\"\necho \"   http://localhost:5000\"\necho \"\"\necho \"📚 For detailed setup instructions, see LOCAL_SETUP.md\"\necho \"\"\necho \"🗄️  Database options:\"\necho \"   • Local PostgreSQL (install locally)\"\necho \"   • Neon Database (free cloud option - neon.tech)\"\necho \"   • Use existing Replit database connection\"\necho \"\"","size_bytes":2374},"start-local.sh":{"content":"#!/bin/bash\n\n# Jigz Local Development Start Script\n# Quick check and start for local development\n\necho \"🔍 Checking local development setup...\"\n\n# Check if .env exists\nif [ ! -f .env ]; then\n    echo \"❌ .env file not found!\"\n    echo \"Run './setup-local.sh' first to set up the environment.\"\n    exit 1\nfi\n\n# Check if DATABASE_URL is set\nif ! grep -q \"^DATABASE_URL=\" .env || grep -q \"^DATABASE_URL=postgresql://username:password\" .env; then\n    echo \"❌ DATABASE_URL not configured in .env file!\"\n    echo \"Please edit .env and set a valid DATABASE_URL.\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"DATABASE_URL=postgresql://username:password@localhost:5432/jigz_local\"\n    echo \"DATABASE_URL=postgresql://user:pass@ep-example-123.us-east-1.aws.neon.tech/jigz?sslmode=require\"\n    exit 1\nfi\n\n# Check if node_modules exists\nif [ ! -d node_modules ]; then\n    echo \"📦 Installing dependencies...\"\n    npm install\n    if [ $? -ne 0 ]; then\n        echo \"❌ Failed to install dependencies\"\n        exit 1\n    fi\nfi\n\necho \"✅ Environment looks good!\"\necho \"\"\necho \"🗄️  Pushing database schema...\"\nnpm run db:push\nif [ $? -ne 0 ]; then\n    echo \"❌ Database schema push failed. Check your DATABASE_URL.\"\n    exit 1\nfi\n\necho \"\"\necho \"🚀 Starting development server...\"\necho \"📱 Access your app at: http://localhost:5000\"\necho \"\"\nnpm run dev","size_bytes":1352}}}