Based on your build log, your application's Docker image was built and pushed successfully, but it failed during the deployment step on Cloud Run.

The specific error is:
Revision 'jigz-00005-zbk' is not ready and cannot serve traffic. The user-provided container failed to start and listen on the port defined provided by the PORT=8080 environment variable within the allocated timeout.

In simple terms, Google Cloud Run started your container, but your Node.js application inside it either crashed immediately or didn't correctly listen for web traffic on port 8080.

## Main Cause of the Crash
While there could be several reasons for a crash, your build log points to a very likely culprit: duplicate function definitions.

The esbuild tool gave you four warnings about this:

▲ [WARNING] Duplicate member "deleteJob" in class body (seen multiple times)

▲ [WARNING] Duplicate member "closeExpiredJobs" in class body

This means that within the same class in your server/storage.ts file, you have defined functions like deleteJob more than once. While esbuild only shows this as a warning, it can cause unpredictable behavior and runtime errors in JavaScript, which is likely why your application is crashing on startup.

## How to Fix It
Follow these steps to diagnose and resolve the issue.

1. Fix the Duplicate Code (Highest Priority)
This is almost certainly the root cause.

Open your file server/storage.ts.

Look at the line numbers mentioned in the warnings (e.g., 567, 1163, 1232, 1652, etc.).

You will find methods like deleteJob and closeExpiredJobs defined in multiple places within the same class.

Remove the duplicates. You must decide which version of the function is correct and delete the others, or merge their logic if necessary.

2. Ensure Correct Port Binding
Your application must listen on the port provided by the PORT environment variable. Cloud Run injects this variable into your container.

In your main server file (likely dist/index.js after the build, originating from server/index.ts), find the code that starts your server (e.g., app.listen). It should look like this:

JavaScript

// Example for an Express.js app
const port = process.env.PORT || 8080;

app.listen(port, '0.0.0.0', () => {
  console.log(`Server listening on port ${port}`);
});
Key points:

Use process.env.PORT.

Listen on '0.0.0.0', which means it will accept connections from any IP address (which is what Cloud Run needs to perform health checks), not just localhost.

3. Test Locally with Docker
Before pushing to Cloud Run again, test that your container runs correctly on your own machine.

Build the image:

Bash

docker build -t my-jigz-app .
Run the container, simulating the Cloud Run environment:

Bash

docker run -p 8080:8080 -e PORT=8080 my-jigz-app
If the container crashes, you will see the exact error message in your terminal, making it much easier to debug than waiting for a Cloud Run deployment to fail.

## Other Minor Issues to Address
Your log also shows a few other warnings. While they aren't causing the deployment to fail, you should fix them for better security and maintenance.

Vulnerabilities: The log reports 9 vulnerabilities (1 low, 8 moderate). Run the following command in your project to fix them:

Bash

npm audit fix
Deprecated Packages: The crypto package is deprecated. It's now a built-in Node.js module. You should remove it from your package.json and change your code to import it directly:

JavaScript

// Change from: import crypto from 'crypto';
// To:
import * as crypto from 'node:crypto'; 